import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { valueIsNull } from '../../../../util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./../../../../services/pro-js-to-advpl/services/pro-js-to-advpl.service";
const ENDPOINT = '/api/protheus/session/v1/defaults';
export class ProSessionSettingsService {
    constructor(http, advplService) {
        this.http = http;
        this.advplService = advplService;
    }
    requestSettingsDefaults() {
        if (!valueIsNull(this.advplService.getWebChannel())) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse.length === 0) {
                    subscriber.next({
                        role_code: '',
                        role_description: '',
                        role_when: false,
                        show_go_emp_fil: false,
                        show_mdi_menu_info: false,
                        environment_code: '',
                        environment_description: '',
                        environment_when: true,
                        disable_back_button: false
                    });
                }
                else {
                    const startKeys = JSON.parse(protheusResponse);
                    subscriber.next(startKeys);
                }
                subscriber.complete();
            }, {
                autoDestruct: true,
                receiveId: 'setSessionStart',
                sendInfo: {
                    type: 'getSessionStart'
                }
            });
        }
        else {
            const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
            return this.http.get(ENDPOINT, {
                headers
            });
        }
    }
    clearSettingsDefaults() {
        if (this.advplService.protheusConnected()) {
            this.advplService.jsToAdvpl('backButton', '');
        }
        const erpAppConfig = sessionStorage.getItem('ERPAPPCONFIG');
        sessionStorage.clear();
        sessionStorage.setItem('ERPAPPCONFIG', erpAppConfig);
    }
    saveSettingsDefaults(session) {
        if (this.advplService.protheusConnected()) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse === 'true') {
                    subscriber.next({});
                }
                else {
                    subscriber.error({});
                }
                subscriber.complete();
            }, {
                autoDestruct: true,
                receiveId: 'submitButtonResponse',
                sendInfo: {
                    type: 'submitButton',
                    content: JSON.stringify(session)
                }
            });
        }
        else {
            const headers = new HttpHeaders().append('Content-Type', 'application/json; charset=utf-8');
            return this.http.post(ENDPOINT, session, { headers });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSessionSettingsService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSessionSettingsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSessionSettingsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXNlc3Npb24tc2V0dGluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9jb21wb25lbnRzL3Byby1wYWdlcy9wcm8tc2Vzc2lvbi1zZXR0aW5ncy9zZXJ2aWNlcy9wcm8tc2Vzc2lvbi1zZXR0aW5ncy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUkvQyxNQUFNLFFBQVEsR0FBRyxtQ0FBbUMsQ0FBQztBQUtyRCxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUM7UUFEakMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7SUFDdkMsQ0FBQztJQUVMLHVCQUF1QjtRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUN0QyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUNqQyxVQUFVLENBQUMsSUFBSSxDQUFDO3dCQUNkLFNBQVMsRUFBRSxFQUFFO3dCQUNiLGdCQUFnQixFQUFFLEVBQUU7d0JBQ3BCLFNBQVMsRUFBRSxLQUFLO3dCQUNoQixlQUFlLEVBQUUsS0FBSzt3QkFDdEIsa0JBQWtCLEVBQUUsS0FBSzt3QkFDekIsZ0JBQWdCLEVBQUUsRUFBRTt3QkFDcEIsdUJBQXVCLEVBQUUsRUFBRTt3QkFDM0IsZ0JBQWdCLEVBQUUsSUFBSTt3QkFDdEIsbUJBQW1CLEVBQUUsS0FBSztxQkFDM0IsQ0FBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDL0MsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDNUI7Z0JBQ0QsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFDRDtnQkFDRSxZQUFZLEVBQUUsSUFBSTtnQkFDbEIsU0FBUyxFQUFFLGlCQUFpQjtnQkFDNUIsUUFBUSxFQUFFO29CQUNSLElBQUksRUFBRSxpQkFBaUI7aUJBQ3hCO2FBQ0YsQ0FDRixDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUN0QyxRQUFRLEVBQ1IsaUNBQWlDLENBQ2xDLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFxQixRQUFRLEVBQUU7Z0JBQ2pELE9BQU87YUFDUixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1RCxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELG9CQUFvQixDQUNsQixPQUEyQjtRQUUzQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUN0QyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxnQkFBZ0IsS0FBSyxNQUFNLEVBQUU7b0JBQy9CLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3JCO3FCQUFNO29CQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3RCO2dCQUNELFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLEVBQ0Q7Z0JBQ0UsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLFNBQVMsRUFBRSxzQkFBc0I7Z0JBQ2pDLFFBQVEsRUFBRTtvQkFDUixJQUFJLEVBQUUsY0FBYztvQkFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO2lCQUNqQzthQUNGLENBQ0YsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FDdEMsY0FBYyxFQUNkLGlDQUFpQyxDQUNsQyxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBcUIsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDM0U7SUFDSCxDQUFDOzhHQXJGVSx5QkFBeUI7a0hBQXpCLHlCQUF5QixjQUZ4QixNQUFNOzsyRkFFUCx5QkFBeUI7a0JBSHJDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgdmFsdWVJc051bGwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsJztcclxuaW1wb3J0IHsgUHJvSnNUb0FkdnBsU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vLi4vc2VydmljZXMvcHJvLWpzLXRvLWFkdnBsL3NlcnZpY2VzL3Byby1qcy10by1hZHZwbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUHJvU2Vzc2lvblNldHRpbmdzIH0gZnJvbSAnLi8uLi9tb2RlbHMvcHJvLXNlc3Npb24tc2V0dGluZ3MnO1xyXG5cclxuY29uc3QgRU5EUE9JTlQgPSAnL2FwaS9wcm90aGV1cy9zZXNzaW9uL3YxL2RlZmF1bHRzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb1Nlc3Npb25TZXR0aW5nc1NlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSBhZHZwbFNlcnZpY2U6IFByb0pzVG9BZHZwbFNlcnZpY2VcclxuICApIHsgfVxyXG5cclxuICByZXF1ZXN0U2V0dGluZ3NEZWZhdWx0cygpOiBPYnNlcnZhYmxlPFByb1Nlc3Npb25TZXR0aW5ncz4ge1xyXG4gICAgaWYgKCF2YWx1ZUlzTnVsbCh0aGlzLmFkdnBsU2VydmljZS5nZXRXZWJDaGFubmVsKCkpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGU8UHJvU2Vzc2lvblNldHRpbmdzPihcclxuICAgICAgICAoeyBwcm90aGV1c1Jlc3BvbnNlLCBzdWJzY3JpYmVyIH0pID0+IHtcclxuICAgICAgICAgIGlmIChwcm90aGV1c1Jlc3BvbnNlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoe1xyXG4gICAgICAgICAgICAgIHJvbGVfY29kZTogJycsXHJcbiAgICAgICAgICAgICAgcm9sZV9kZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgICAgICAgcm9sZV93aGVuOiBmYWxzZSxcclxuICAgICAgICAgICAgICBzaG93X2dvX2VtcF9maWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIHNob3dfbWRpX21lbnVfaW5mbzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgZW52aXJvbm1lbnRfY29kZTogJycsXHJcbiAgICAgICAgICAgICAgZW52aXJvbm1lbnRfZGVzY3JpcHRpb246ICcnLFxyXG4gICAgICAgICAgICAgIGVudmlyb25tZW50X3doZW46IHRydWUsXHJcbiAgICAgICAgICAgICAgZGlzYWJsZV9iYWNrX2J1dHRvbjogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydEtleXMgPSBKU09OLnBhcnNlKHByb3RoZXVzUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoc3RhcnRLZXlzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGF1dG9EZXN0cnVjdDogdHJ1ZSxcclxuICAgICAgICAgIHJlY2VpdmVJZDogJ3NldFNlc3Npb25TdGFydCcsXHJcbiAgICAgICAgICBzZW5kSW5mbzoge1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0U2Vzc2lvblN0YXJ0J1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5hcHBlbmQoXHJcbiAgICAgICAgJ0FjY2VwdCcsXHJcbiAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb1Nlc3Npb25TZXR0aW5ncz4oRU5EUE9JTlQsIHtcclxuICAgICAgICBoZWFkZXJzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xlYXJTZXR0aW5nc0RlZmF1bHRzKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuYWR2cGxTZXJ2aWNlLnByb3RoZXVzQ29ubmVjdGVkKCkpIHtcclxuICAgICAgdGhpcy5hZHZwbFNlcnZpY2UuanNUb0FkdnBsKCdiYWNrQnV0dG9uJywgJycpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXJwQXBwQ29uZmlnID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnRVJQQVBQQ09ORklHJyk7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnRVJQQVBQQ09ORklHJywgZXJwQXBwQ29uZmlnKTtcclxuICB9XHJcblxyXG4gIHNhdmVTZXR0aW5nc0RlZmF1bHRzKFxyXG4gICAgc2Vzc2lvbjogUHJvU2Vzc2lvblNldHRpbmdzXHJcbiAgKTogT2JzZXJ2YWJsZTxQcm9TZXNzaW9uU2V0dGluZ3M+IHtcclxuICAgIGlmICh0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGU8UHJvU2Vzc2lvblNldHRpbmdzPihcclxuICAgICAgICAoeyBwcm90aGV1c1Jlc3BvbnNlLCBzdWJzY3JpYmVyIH0pID0+IHtcclxuICAgICAgICAgIGlmIChwcm90aGV1c1Jlc3BvbnNlID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHt9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioe30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgYXV0b0Rlc3RydWN0OiB0cnVlLFxyXG4gICAgICAgICAgcmVjZWl2ZUlkOiAnc3VibWl0QnV0dG9uUmVzcG9uc2UnLFxyXG4gICAgICAgICAgc2VuZEluZm86IHtcclxuICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdEJ1dHRvbicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KHNlc3Npb24pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLmFwcGVuZChcclxuICAgICAgICAnQ29udGVudC1UeXBlJyxcclxuICAgICAgICAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCdcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFByb1Nlc3Npb25TZXR0aW5ncz4oRU5EUE9JTlQsIHNlc3Npb24sIHsgaGVhZGVycyB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19