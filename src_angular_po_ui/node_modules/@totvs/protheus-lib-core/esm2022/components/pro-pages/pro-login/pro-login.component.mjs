import { Component, Input, } from '@angular/core';
import { SubSink } from 'subsink';
import { environment } from '../../../environments/environment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../../services/pro-authorization/services/pro-auth/pro-auth.service";
import * as i3 from "./../../../services/pro-messages/services/pro-message.service";
import * as i4 from "@po-ui/ng-components";
import * as i5 from "../../../services/pro-language/services/pro-language.service";
import * as i6 from "../../../services/pro-brand/services/pro-brand.service";
import * as i7 from "@po-ui/ng-templates";
export class ProLoginComponent {
    set nextRoute(value) {
        this._nextRoute = value;
    }
    get nextRoute() {
        return this._nextRoute ? this._nextRoute : '/session-settings';
    }
    constructor(router, route, authService, messageService, poI18nService, elRef, proLanguageService, proBrandService) {
        this.router = router;
        this.route = route;
        this.authService = authService;
        this.messageService = messageService;
        this.poI18nService = poI18nService;
        this.elRef = elRef;
        this.proLanguageService = proLanguageService;
        this.proBrandService = proBrandService;
        this.subs = new SubSink();
        this.languages = [];
        this.logo = '';
        this.productName = '';
        this.updateLangs();
        const language = poI18nService.getShortLanguage();
        poI18nService
            .getLiterals({ language, context: 'login' })
            .subscribe((literals) => {
            this.updLiterals(literals);
            this.updateBrand();
        });
        this.messageService.changeLanguage(language);
    }
    ngOnInit() {
        this.authService.logout();
        this.isLoading = false;
        this.subs.add(this.subscribeToResolver());
    }
    ngAfterViewInit() {
        this.setFocusToInput(this.inputFocus);
    }
    setFocusToInput(name) {
        const input = this.elRef.nativeElement.querySelector('input[name="' + name + '"]');
        if (input) {
            setTimeout(() => input.focus(), 100);
        }
    }
    subscribeToResolver() {
        return this.route.data.subscribe((resultOfResolver) => {
            this.validateResolverData(resultOfResolver);
        });
    }
    subscribeToLogin(user) {
        return this.authService.login(user).subscribe(() => {
            const redirect = this.authService.redirectUrl
                ? this.authService.redirectUrl
                : this.nextRoute;
            this.resetLoading(this.router.navigate([redirect]));
        }, (error) => {
            this.isLoading = false;
            this.messageService.showOneMessage(this.parseErrorMessage(error));
            this.router.navigate(['/login']);
        });
    }
    resetLoading(navigatePromise) {
        if (navigatePromise) {
            navigatePromise
                .then(() => {
                this.isLoading = false;
            })
                .catch((error) => {
                console.error(error);
                this.isLoading = false;
            });
        }
    }
    validateResolverData(resolveData) {
        if (resolveData.defaultsLogin) {
            this.userDefaults = resolveData.defaultsLogin;
            this.hideRememberUser =
                !resolveData.defaultsLogin.showBindUserToSO ||
                    resolveData.defaultsLogin.singleSignOnRequired;
            this.loginValue = resolveData.defaultsLogin.cGetUser;
            this.inputFocus = resolveData.defaultsLogin.setFocus;
        }
    }
    set userDefaults(defaults) {
        this._ProUserDefaults = defaults;
    }
    get userDefaults() {
        return this._ProUserDefaults;
    }
    onLoginSubmit(formData) {
        const user = {
            username: formData.login,
            password: formData.password,
            remember_user: formData.rememberUser || this.userDefaults.singleSignOnRequired,
        };
        this.login(user);
    }
    /**
     * @description metodo chamado na mudança do combox de idioma da tela de login
     * @param language opção de idioma escolhido pelo usuário
     * @returns void
     */
    onLanguageChange({ language }) {
        this.poI18nService.setLanguage(language, false);
        this.poI18nService
            .getLiterals({ language, context: 'login' })
            .subscribe((literals) => {
            this.updLiterals(literals);
            this.updateProductName();
        });
        this.messageService.changeLanguage(language);
    }
    updLiterals(literals) {
        this.literals = {
            str0001: literals.str0001,
            str0002: literals.str0002,
            str0003: literals.str0003,
            str0004: literals.str0004,
            loginLabel: literals.str0005,
            loginPlaceholder: literals.str0006,
            passwordLabel: literals.str0007,
            loginHint: literals.str0008,
            rememberUserHint: literals.str0009,
            passwordPlaceholder: '',
        };
    }
    onLoginChange(login) {
        this.loginValue = login;
    }
    callRecoverPassword() {
        this.authService.passwordRecovery(this.loginValue);
    }
    /**
     * @description Método para obter o link de suporte
     * @returns Retorna uma string contendo o link de suporte do ERP
     */
    supportLink(language = this.poI18nService.getShortLanguage()) {
        let supportLink = 'http://suporte.totvs.com/';
        if (this.brand == 'MA3') {
            supportLink =
                language === 'en'
                    ? 'https://www.national-platform.com/'
                    : 'https://www.national-platform.ru/';
        }
        else {
            if (language === 'es') {
                supportLink = 'https://totvscst.zendesk.com/hc/es#home';
            }
            else if (language === 'en') {
                supportLink = 'https://totvscst.zendesk.com/hc/en-us#home';
            }
        }
        return supportLink;
    }
    login(user) {
        if (this.isLoading) {
            return;
        }
        this.isLoading = true;
        this.subs.add(this.subscribeToLogin(user));
    }
    parseErrorMessage(error) {
        switch (error.status) {
            case 401:
                return this.literals.str0002; // 'Usuário ou senha inválida.'
            case 0:
                return this.literals.str0003; // 'Não foi possível estabelecer conexão com o servidor.';
            default:
                if (error.error && error.error.errorMessage) {
                    return this.literals.str0004 + ': ' + error.error.errorMessage; // 'Ocorreu um problema na tentativa de Login';
                }
                else {
                    return this.literals.str0004 + '.'; // 'Ocorreu um problema na tentativa de Login';
                }
        }
    }
    /**
     * @description Atualiza os idiomas disponíveis
     */
    updateLangs() {
        this.proLanguageService.setChannelAsHTTP(environment.useHTTP);
        this.proLanguageService.getListOfLanguages().subscribe({
            next: (langs) => {
                this.languages = langs;
            },
            error: (error) => {
                console.error(error);
            },
        });
    }
    /**
     * @description Atualiza as variaveis a partir da marca
     * ma3 na russia e protheus nas demais
     * @returns void
     */
    updateResourceByBrand() {
        if (this.brand == 'MA3') {
            this.logo = './assets/images/nationalplatform/nationalplatform.svg';
            this.productName = 'Ma-3 Line';
        }
        else {
            this.logo = './assets/images/totvs/totvs.svg';
            this.productName = this.literals.str0001;
        }
    }
    /**
     * @description atualiza a variavel productName.
     * quando não for MA3 precisa atualziar com a literals cada vez que muda o idioma
     * @returns void
     */
    updateProductName() {
        if (this.brand != 'MA3') {
            this.productName = this.literals.str0001;
        }
    }
    /**
     * @description atualiza a variavel de marca
     * @returns void
     */
    updateBrand() {
        this.proBrandService.setChannelAsHTTP(environment.useHTTP);
        this.proBrandService.getERPBrand().subscribe({
            next: (brand) => {
                this.brand = brand;
                this.updateResourceByBrand();
            },
            error: (error) => {
                this.brand = 'TOTVS';
                this.updateResourceByBrand();
            },
        });
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProLoginComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.ProAuthService }, { token: i3.ProMessageService }, { token: i4.PoI18nService }, { token: i0.ElementRef }, { token: i5.ProLanguageService }, { token: i6.ProBrandService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.9", type: ProLoginComponent, selector: "pro-login", inputs: { nextRoute: ["pro-next-route", "nextRoute"] }, ngImport: i0, template: "<po-page-login\r\n  [p-hide-remember-user]=\"hideRememberUser\"\r\n  (p-login-submit)=\"onLoginSubmit($event)\"\r\n  (p-login-change)=\"onLoginChange($event)\"\r\n  [p-languages]=\"languages\"\r\n  (p-language-change)=\"onLanguageChange($event)\"\r\n  [p-login]=\"loginValue\"\r\n  [p-loading]=\"isLoading\"\r\n  [p-literals]=\"literals\"\r\n  [p-product-name]=\"productName\"\r\n  [p-recovery]=\"this.callRecoverPassword.bind(this)\"\r\n  [p-support]=\"supportLink()\"\r\n  [p-logo]=\"logo\"\r\n  [p-secondary-logo]=\"logo\">\r\n  <!-- Linha Protheus -->\r\n</po-page-login>\r\n", styles: [""], dependencies: [{ kind: "component", type: i7.PoPageLoginComponent, selector: "po-page-login" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProLoginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pro-login', template: "<po-page-login\r\n  [p-hide-remember-user]=\"hideRememberUser\"\r\n  (p-login-submit)=\"onLoginSubmit($event)\"\r\n  (p-login-change)=\"onLoginChange($event)\"\r\n  [p-languages]=\"languages\"\r\n  (p-language-change)=\"onLanguageChange($event)\"\r\n  [p-login]=\"loginValue\"\r\n  [p-loading]=\"isLoading\"\r\n  [p-literals]=\"literals\"\r\n  [p-product-name]=\"productName\"\r\n  [p-recovery]=\"this.callRecoverPassword.bind(this)\"\r\n  [p-support]=\"supportLink()\"\r\n  [p-logo]=\"logo\"\r\n  [p-secondary-logo]=\"logo\">\r\n  <!-- Linha Protheus -->\r\n</po-page-login>\r\n" }]
        }], ctorParameters: () => [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.ProAuthService }, { type: i3.ProMessageService }, { type: i4.PoI18nService }, { type: i0.ElementRef }, { type: i5.ProLanguageService }, { type: i6.ProBrandService }], propDecorators: { nextRoute: [{
                type: Input,
                args: ['pro-next-route']
            }] } });
//# sourceMappingURL=data:application/json;base64,