import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/pro-tenant/pro-branch/services/pro-branch.service";
export class ProBranchLookupService {
    constructor(proBranchService) {
        this.proBranchService = proBranchService;
        this.useHTTP = environment.useHTTP;
        this.changeServiceChannel();
    }
    getFilteredItems(params) {
        return this.proBranchService.getListOfBranches(params.filter, params.page, params.pageSize);
    }
    getObjectByValue(value) {
        return this.proBranchService.getBranch(value);
    }
    setBranch(branch) {
        this.proBranchService.branch = branch;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
        this.changeServiceChannel();
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    changeServiceChannel() {
        this.proBranchService.setChannelAsHTTP(this.useHTTP);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchLookupService, deps: [{ token: i1.ProBranchService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchLookupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchLookupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ProBranchService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWJyYW5jaC1sb29rdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9jb21wb25lbnRzL3Byby1maWVsZHMvcHJvLWJyYW5jaC1sb29rdXAvcHJvLWJyYW5jaC1sb29rdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBT2hFLE1BQU0sT0FBTyxzQkFBc0I7SUFFakMsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFEOUMsWUFBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFFcEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQW1DO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUM1QyxNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQWlCO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFTyxvQkFBb0I7UUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDOzhHQWpDVSxzQkFBc0I7a0hBQXRCLHNCQUFzQixjQUZyQixNQUFNOzsyRkFFUCxzQkFBc0I7a0JBSGxDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciwgUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vLi4vLi4vZW52aXJvbm1lbnRzL2Vudmlyb25tZW50JztcclxuaW1wb3J0IHsgUHJvQnJhbmNoIH0gZnJvbSAnLi8uLi8uLi8uLi9zZXJ2aWNlcy9wcm8tdGVuYW50L3Byby1icmFuY2gvbW9kZWxzL3Byby1icmFuY2gnO1xyXG5pbXBvcnQgeyBQcm9CcmFuY2hTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi9zZXJ2aWNlcy9wcm8tdGVuYW50L3Byby1icmFuY2gvc2VydmljZXMvcHJvLWJyYW5jaC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb0JyYW5jaExvb2t1cFNlcnZpY2UgaW1wbGVtZW50cyBQb0xvb2t1cEZpbHRlciB7XHJcbiAgcHJpdmF0ZSB1c2VIVFRQID0gZW52aXJvbm1lbnQudXNlSFRUUDtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHByb0JyYW5jaFNlcnZpY2U6IFByb0JyYW5jaFNlcnZpY2UpIHtcclxuICAgIHRoaXMuY2hhbmdlU2VydmljZUNoYW5uZWwoKTtcclxuICB9XHJcblxyXG4gIGdldEZpbHRlcmVkSXRlbXMocGFyYW1zOiBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvQnJhbmNoU2VydmljZS5nZXRMaXN0T2ZCcmFuY2hlcyhcclxuICAgICAgcGFyYW1zLmZpbHRlcixcclxuICAgICAgcGFyYW1zLnBhZ2UsXHJcbiAgICAgIHBhcmFtcy5wYWdlU2l6ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9CcmFuY2hTZXJ2aWNlLmdldEJyYW5jaCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzZXRCcmFuY2goYnJhbmNoOiBQcm9CcmFuY2gpIHtcclxuICAgIHRoaXMucHJvQnJhbmNoU2VydmljZS5icmFuY2ggPSBicmFuY2g7XHJcbiAgfVxyXG5cclxuICBzZXRDaGFubmVsQXNIVFRQKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnVzZUhUVFAgPSB2YWx1ZTtcclxuICAgIHRoaXMuY2hhbmdlU2VydmljZUNoYW5uZWwoKTtcclxuICB9XHJcblxyXG4gIGlzQ2hhbm5lbEhUVFAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VIVFRQO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGFuZ2VTZXJ2aWNlQ2hhbm5lbCgpIHtcclxuICAgIHRoaXMucHJvQnJhbmNoU2VydmljZS5zZXRDaGFubmVsQXNIVFRQKHRoaXMudXNlSFRUUCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==