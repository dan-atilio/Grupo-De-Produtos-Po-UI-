import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/pro-system-info/pro-system-modules/services/pro-system-modules.service";
export class ProSystemModuleLookupService {
    constructor(proSystemModuleService) {
        this.proSystemModuleService = proSystemModuleService;
        this.useHTTP = environment.useHTTP;
        this.changeServiceChannel();
    }
    getFilteredItems(params) {
        return this.proSystemModuleService.getListOfSystemModules(params.filter, params.page, params.pageSize);
    }
    getObjectByValue(moduleId) {
        this.setSystemModule({ id: moduleId });
        return this.proSystemModuleService.getSystemModule(moduleId);
    }
    setSystemModule(systemModule) {
        this.proSystemModuleService.systemModule = systemModule;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
        this.changeServiceChannel();
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    changeServiceChannel() {
        this.proSystemModuleService.setChannelAsHTTP(this.useHTTP);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleLookupService, deps: [{ token: i1.ProSystemModuleService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleLookupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleLookupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ProSystemModuleService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXN5c3RlbS1tb2R1bGUtbG9va3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvY29tcG9uZW50cy9wcm8tZmllbGRzL3Byby1zeXN0ZW0tbW9kdWxlLWxvb2t1cC9wcm8tc3lzdGVtLW1vZHVsZS1sb29rdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBVWhFLE1BQU0sT0FBTyw0QkFBNEI7SUFFdkMsWUFBb0Isc0JBQThDO1FBQTlDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFEMUQsWUFBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFFcEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQW1DO1FBQ2xELE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLHNCQUFzQixDQUN2RCxNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxlQUFlLENBQUMsWUFBOEI7UUFDNUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDMUQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7OEdBbENVLDRCQUE0QjtrSEFBNUIsNEJBQTRCLGNBRjNCLE1BQU07OzJGQUVQLDRCQUE0QjtrQkFIeEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvTG9va3VwRmlsdGVyLCBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi8uLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xyXG5cclxuaW1wb3J0IHsgUHJvU3lzdGVtTW9kdWxlcyB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvcHJvLXN5c3RlbS1pbmZvL3Byby1zeXN0ZW0tbW9kdWxlcy9tb2RlbHMvcHJvLXN5c3RlbS1tb2R1bGVzJztcclxuaW1wb3J0IHtcclxuICBQcm9TeXN0ZW1Nb2R1bGVTZXJ2aWNlLFxyXG59IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvcHJvLXN5c3RlbS1pbmZvL3Byby1zeXN0ZW0tbW9kdWxlcy9zZXJ2aWNlcy9wcm8tc3lzdGVtLW1vZHVsZXMuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9TeXN0ZW1Nb2R1bGVMb29rdXBTZXJ2aWNlIGltcGxlbWVudHMgUG9Mb29rdXBGaWx0ZXIge1xyXG4gIHByaXZhdGUgdXNlSFRUUCA9IGVudmlyb25tZW50LnVzZUhUVFA7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm9TeXN0ZW1Nb2R1bGVTZXJ2aWNlOiBQcm9TeXN0ZW1Nb2R1bGVTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmNoYW5nZVNlcnZpY2VDaGFubmVsKCk7XHJcbiAgfVxyXG5cclxuICBnZXRGaWx0ZXJlZEl0ZW1zKHBhcmFtczogUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnByb1N5c3RlbU1vZHVsZVNlcnZpY2UuZ2V0TGlzdE9mU3lzdGVtTW9kdWxlcyhcclxuICAgICAgcGFyYW1zLmZpbHRlcixcclxuICAgICAgcGFyYW1zLnBhZ2UsXHJcbiAgICAgIHBhcmFtcy5wYWdlU2l6ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdldE9iamVjdEJ5VmFsdWUobW9kdWxlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB0aGlzLnNldFN5c3RlbU1vZHVsZSh7IGlkOiBtb2R1bGVJZCB9KTtcclxuICAgIHJldHVybiB0aGlzLnByb1N5c3RlbU1vZHVsZVNlcnZpY2UuZ2V0U3lzdGVtTW9kdWxlKG1vZHVsZUlkKTtcclxuICB9XHJcblxyXG4gIHNldFN5c3RlbU1vZHVsZShzeXN0ZW1Nb2R1bGU6IFByb1N5c3RlbU1vZHVsZXMpIHtcclxuICAgIHRoaXMucHJvU3lzdGVtTW9kdWxlU2VydmljZS5zeXN0ZW1Nb2R1bGUgPSBzeXN0ZW1Nb2R1bGU7XHJcbiAgfVxyXG5cclxuICBzZXRDaGFubmVsQXNIVFRQKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnVzZUhUVFAgPSB2YWx1ZTtcclxuICAgIHRoaXMuY2hhbmdlU2VydmljZUNoYW5uZWwoKTtcclxuICB9XHJcblxyXG4gIGlzQ2hhbm5lbEhUVFAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VIVFRQO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGFuZ2VTZXJ2aWNlQ2hhbm5lbCgpIHtcclxuICAgIHRoaXMucHJvU3lzdGVtTW9kdWxlU2VydmljZS5zZXRDaGFubmVsQXNIVFRQKHRoaXMudXNlSFRUUCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==