import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../pro-js-to-advpl";
import * as i3 from "../../pro-app-config/services/pro-app-config.service";
/**
 * @description Classe para consumo de traduções de resource presentes no RPO do Protheus
 */
export class ProTranslateStringService {
    /**
     * @description Construtor da classe
     * @param http Objeto HttpClient para efetuar as requisições REST
     * @param advplService Serviço ProJsToAdvplService para comunicação via jsToAdvpl
     * @param proAppConfigService Serviço ProAppConfigService para verificação de estado (Advpl/Http)
     */
    constructor(http, advplService, proAppConfigService) {
        this.http = http;
        this.advplService = advplService;
        this.proAppConfigService = proAppConfigService;
        this.url = '/api/framework/v1/FwRestTranslate/';
        this.useHTTP = true;
        this.EVENT_GET_TRANSLATES = 'getTranslateStringResource';
        this.EVENT_SET_TRANSLATES = 'setTranslateStringResource';
    }
    /**
     * @description Retorna todas as string de um resource de tradução do Protheus
     * @param cTRES string contendo o nome do resource (CH)
     * @returns Retorna um json que pode conter nenhuma ou várias chaves de string, normalmente enumeradas de str0001 até str9999
     */
    getStrList(cTRES) {
        if (this.proAppConfigService.isProtheusRender) {
            if (this.useHTTP) {
                return this.http.get(`${this.url}${cTRES}`);
            }
            return this.getAdvplLanguages();
        }
        else {
            return of({});
        }
    }
    /**
     * @description Retorna as traduções do resource via ADVPL (jstoadvpl)
     * @returns Observable das traduções do resource do Protheus
     */
    getAdvplLanguages() {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: 'No translate can be found'
                });
            }
            else {
                const translates = JSON.parse(protheusResponse);
                subscriber.next(translates);
            }
            subscriber.complete();
        }, {
            sendInfo: {
                type: this.EVENT_GET_TRANSLATES,
                content: ""
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_TRANSLATES
        });
    }
    /**
     * @description Retorna um erro da conexão jstoadvpl
     * @returns Observable de exceção
     */
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProTranslateStringService'
            });
            subscriber.complete();
        });
    }
    /**
     * @description Indica o consumo de API via HTTP ou jstoadvpl
     * @returns Informa se a classe fará a requisição via HTTP
     */
    isChannelHTTP() {
        return this.useHTTP;
    }
    /**
     * @description Permite dizer se a requisição será efetuada via HTTP ou jstoadvpl, sempre usar como HTTP, apenas pequenas exceções como jstoadvpl
     * @param value Uso de HTTP para requisição
     */
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTranslateStringService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }, { token: i3.ProAppConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTranslateStringService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTranslateStringService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }, { type: i3.ProAppConfigService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXRyYW5zbGF0ZS1zdHJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tdHJhbnNsYXRlLXN0cmluZy9zZXJ2aWNlcy9wcm8tdHJhbnNsYXRlLXN0cmluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBT3RDOztHQUVHO0FBSUgsTUFBTSxPQUFPLHlCQUF5QjtJQU9wQzs7Ozs7T0FLRztJQUNILFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUMsRUFDakMsbUJBQXdDO1FBRnhDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFmMUMsUUFBRyxHQUFHLG9DQUFvQyxDQUFDO1FBQzNDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFZix5QkFBb0IsR0FBRyw0QkFBNEIsQ0FBQztRQUNwRCx5QkFBb0IsR0FBRyw0QkFBNEIsQ0FBQztJQVl4RCxDQUFDO0lBRUw7Ozs7T0FJRztJQUNJLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUN0RDtZQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDakM7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssaUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUNoQztRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQ3RDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQ25DLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFDZixNQUFNLEVBQUUsR0FBRztvQkFDWCxXQUFXLEVBQUUsMkJBQTJCO2lCQUN6QyxDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxNQUFNLFVBQVUsR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3pELFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDN0I7WUFDRCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxFQUNEO1lBQ0UsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CO2dCQUMvQixPQUFPLEVBQUUsRUFBRTthQUNaO1lBQ0QsWUFBWSxFQUFFLElBQUk7WUFDbEIsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0I7U0FDckMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNLLGdCQUFnQjtRQUN0QixPQUFPLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ2YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsV0FBVyxFQUFFLHdEQUF3RDthQUN0RSxDQUFDLENBQUM7WUFDSCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0JBQWdCLENBQUMsS0FBYztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDOzhHQWpHVSx5QkFBeUI7a0hBQXpCLHlCQUF5QixjQUZ4QixNQUFNOzsyRkFFUCx5QkFBeUI7a0JBSHJDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUHJvSnNUb0FkdnBsU2VydmljZSB9IGZyb20gJy4uLy4uL3Byby1qcy10by1hZHZwbCc7XHJcbmltcG9ydCB7IFByb0FwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm8tYXBwLWNvbmZpZy9zZXJ2aWNlcy9wcm8tYXBwLWNvbmZpZy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFByb0kxOE4gfSBmcm9tICcuLi8uLi9wcm8taTE4bic7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uIENsYXNzZSBwYXJhIGNvbnN1bW8gZGUgdHJhZHXDp8O1ZXMgZGUgcmVzb3VyY2UgcHJlc2VudGVzIG5vIFJQTyBkbyBQcm90aGV1c1xyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvVHJhbnNsYXRlU3RyaW5nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB1cmwgPSAnL2FwaS9mcmFtZXdvcmsvdjEvRndSZXN0VHJhbnNsYXRlLyc7XHJcbiAgcHJpdmF0ZSB1c2VIVFRQID0gdHJ1ZTtcclxuXHJcbiAgcHJpdmF0ZSBFVkVOVF9HRVRfVFJBTlNMQVRFUyA9ICdnZXRUcmFuc2xhdGVTdHJpbmdSZXNvdXJjZSc7XHJcbiAgcHJpdmF0ZSBFVkVOVF9TRVRfVFJBTlNMQVRFUyA9ICdzZXRUcmFuc2xhdGVTdHJpbmdSZXNvdXJjZSc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1dG9yIGRhIGNsYXNzZVxyXG4gICAqIEBwYXJhbSBodHRwIE9iamV0byBIdHRwQ2xpZW50IHBhcmEgZWZldHVhciBhcyByZXF1aXNpw6fDtWVzIFJFU1RcclxuICAgKiBAcGFyYW0gYWR2cGxTZXJ2aWNlIFNlcnZpw6dvIFByb0pzVG9BZHZwbFNlcnZpY2UgcGFyYSBjb211bmljYcOnw6NvIHZpYSBqc1RvQWR2cGxcclxuICAgKiBAcGFyYW0gcHJvQXBwQ29uZmlnU2VydmljZSBTZXJ2acOnbyBQcm9BcHBDb25maWdTZXJ2aWNlIHBhcmEgdmVyaWZpY2HDp8OjbyBkZSBlc3RhZG8gKEFkdnBsL0h0dHApXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBwcml2YXRlIGFkdnBsU2VydmljZTogUHJvSnNUb0FkdnBsU2VydmljZSxcclxuICAgIHByaXZhdGUgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXRvcm5hIHRvZGFzIGFzIHN0cmluZyBkZSB1bSByZXNvdXJjZSBkZSB0cmFkdcOnw6NvIGRvIFByb3RoZXVzXHJcbiAgICogQHBhcmFtIGNUUkVTIHN0cmluZyBjb250ZW5kbyBvIG5vbWUgZG8gcmVzb3VyY2UgKENIKVxyXG4gICAqIEByZXR1cm5zIFJldG9ybmEgdW0ganNvbiBxdWUgcG9kZSBjb250ZXIgbmVuaHVtYSBvdSB2w6FyaWFzIGNoYXZlcyBkZSBzdHJpbmcsIG5vcm1hbG1lbnRlIGVudW1lcmFkYXMgZGUgc3RyMDAwMSBhdMOpIHN0cjk5OTlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RyTGlzdChjVFJFUzogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9JMThOPiB7XHJcbiAgICBpZiAodGhpcy5wcm9BcHBDb25maWdTZXJ2aWNlLmlzUHJvdGhldXNSZW5kZXIpIHtcclxuICAgICAgaWYgKHRoaXMudXNlSFRUUCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb0kxOE4+KGAke3RoaXMudXJsfSR7Y1RSRVN9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmdldEFkdnBsTGFuZ3VhZ2VzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gb2Yoe30pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldG9ybmEgYXMgdHJhZHXDp8O1ZXMgZG8gcmVzb3VyY2UgdmlhIEFEVlBMIChqc3RvYWR2cGwpXHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSBkYXMgdHJhZHXDp8O1ZXMgZG8gcmVzb3VyY2UgZG8gUHJvdGhldXNcclxuICAgKi9cclxuICBwcml2YXRlIGdldEFkdnBsTGFuZ3VhZ2VzKCk6IE9ic2VydmFibGU8UHJvSTE4Tj4ge1xyXG4gICAgaWYgKCF0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsTm90UHJlcGFyZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5hZHZwbFNlcnZpY2UuYnVpbGRPYnNlcnZhYmxlPFByb0kxOE4+KFxyXG4gICAgICAoeyBwcm90aGV1c1Jlc3BvbnNlLCBzdWJzY3JpYmVyIH0pID0+IHtcclxuICAgICAgICBpZiAocHJvdGhldXNSZXNwb25zZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioe1xyXG4gICAgICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdObyB0cmFuc2xhdGUgY2FuIGJlIGZvdW5kJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZXM6IFByb0kxOE4gPSBKU09OLnBhcnNlKHByb3RoZXVzUmVzcG9uc2UpO1xyXG4gICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRyYW5zbGF0ZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBzZW5kSW5mbzoge1xyXG4gICAgICAgICAgdHlwZTogdGhpcy5FVkVOVF9HRVRfVFJBTlNMQVRFUyxcclxuICAgICAgICAgIGNvbnRlbnQ6IFwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF1dG9EZXN0cnVjdDogdHJ1ZSxcclxuICAgICAgICByZWNlaXZlSWQ6IHRoaXMuRVZFTlRfU0VUX1RSQU5TTEFURVNcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXRvcm5hIHVtIGVycm8gZGEgY29uZXjDo28ganN0b2FkdnBsXHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSBkZSBleGNlw6fDo29cclxuICAgKi9cclxuICBwcml2YXRlIGFkdnBsTm90UHJlcGFyZWQ8VD4oKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlciA9PiB7XHJcbiAgICAgIHN1YnNjcmliZXIuZXJyb3Ioe1xyXG4gICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnYWR2cGxTZXJ2aWNlIG5vdCBwcmVwYXJlZCBpbiBQcm9UcmFuc2xhdGVTdHJpbmdTZXJ2aWNlJ1xyXG4gICAgICB9KTtcclxuICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gSW5kaWNhIG8gY29uc3VtbyBkZSBBUEkgdmlhIEhUVFAgb3UganN0b2FkdnBsXHJcbiAgICogQHJldHVybnMgSW5mb3JtYSBzZSBhIGNsYXNzZSBmYXLDoSBhIHJlcXVpc2nDp8OjbyB2aWEgSFRUUFxyXG4gICAqL1xyXG4gIGlzQ2hhbm5lbEhUVFAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VIVFRQO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIFBlcm1pdGUgZGl6ZXIgc2UgYSByZXF1aXNpw6fDo28gc2Vyw6EgZWZldHVhZGEgdmlhIEhUVFAgb3UganN0b2FkdnBsLCBzZW1wcmUgdXNhciBjb21vIEhUVFAsIGFwZW5hcyBwZXF1ZW5hcyBleGNlw6fDtWVzIGNvbW8ganN0b2FkdnBsXHJcbiAgICogQHBhcmFtIHZhbHVlIFVzbyBkZSBIVFRQIHBhcmEgcmVxdWlzacOnw6NvXHJcbiAgICovXHJcbiAgc2V0Q2hhbm5lbEFzSFRUUCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy51c2VIVFRQID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==