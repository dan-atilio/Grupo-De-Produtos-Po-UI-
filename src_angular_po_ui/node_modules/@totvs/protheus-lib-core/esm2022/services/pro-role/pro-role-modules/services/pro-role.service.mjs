import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./../../../pro-js-to-advpl/services/pro-js-to-advpl.service";
const CACHE_KEY = 'ProRole';
export class ProRoleService {
    constructor(advplService) {
        this.advplService = advplService;
    }
    getListofRoles(description = '', page = 1, pageSize = 10) {
        pageSize = 100; // Alterado o tamanho da página para melhorar a experiência do usuário.
        if (this.advplService.protheusConnected()) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse.length === 0) {
                    subscriber.next({
                        hasNext: false,
                        items: []
                    });
                }
                else {
                    const roleList = JSON.parse(protheusResponse)
                        .map((role) => {
                        return {
                            Code: role[0],
                            Description: role[1]
                        };
                    })
                        .filter((role) => {
                        return role.Description.includes(description);
                    });
                    subscriber.next({
                        hasNext: roleList.length > page * pageSize,
                        items: roleList.slice((page - 1) * pageSize, page * pageSize)
                    });
                }
                subscriber.complete();
            }, {
                autoDestruct: true,
                receiveId: 'setRoleList',
                sendInfo: { type: 'getRoleList' }
            });
        }
        else {
            return new Observable(subscriber => {
                subscriber.next({
                    hasNext: false,
                    items: []
                });
                subscriber.complete();
            });
        }
    }
    getRoleByCode(roleCode) {
        if (this.advplService.protheusConnected()) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                const role = JSON.parse(protheusResponse);
                const response = { Code: role[0], Description: role[1] };
                subscriber.next(response);
                subscriber.complete();
            }, {
                autoDestruct: true,
                receiveId: 'setRoleItem',
                sendInfo: { type: 'getRoleItem', content: roleCode }
            });
        }
        else {
            return new Observable(subscriber => {
                subscriber.next({ Code: '', Description: '' });
                subscriber.complete();
            });
        }
    }
    get role() {
        if (sessionStorage[CACHE_KEY]) {
            return JSON.parse(sessionStorage[CACHE_KEY]);
        }
        else {
            return { Code: '', Description: '' };
        }
    }
    set role(role) {
        sessionStorage[CACHE_KEY] = JSON.stringify(role);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProRoleService, deps: [{ token: i1.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProRoleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProRoleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXJvbGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tcm9sZS9wcm8tcm9sZS1tb2R1bGVzL3NlcnZpY2VzL3Byby1yb2xlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFLbEMsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBSzVCLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQW9CLFlBQWlDO1FBQWpDLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUFHLENBQUM7SUFFekQsY0FBYyxDQUNaLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLElBQUksR0FBRyxDQUFDLEVBQ1IsUUFBUSxHQUFHLEVBQUU7UUFFYixRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsdUVBQXVFO1FBQ3ZGLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQ3RDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ2pDLFVBQVUsQ0FBQyxJQUFJLENBQUM7d0JBQ2QsT0FBTyxFQUFFLEtBQUs7d0JBQ2QsS0FBSyxFQUFFLEVBQUU7cUJBQ1YsQ0FBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLE1BQU0sUUFBUSxHQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO3lCQUMxRCxHQUFHLENBQUMsQ0FBQyxJQUFtQixFQUFFLEVBQUU7d0JBQzNCLE9BQU87NEJBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7NEJBQ2IsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7eUJBQ3JCLENBQUM7b0JBQ0osQ0FBQyxDQUFDO3lCQUNELE1BQU0sQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFO3dCQUN4QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNoRCxDQUFDLENBQUMsQ0FBQztvQkFDTCxVQUFVLENBQUMsSUFBSSxDQUFDO3dCQUNkLE9BQU8sRUFBRSxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxRQUFRO3dCQUMxQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQztxQkFDOUQsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLEVBQ0Q7Z0JBQ0UsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLFNBQVMsRUFBRSxhQUFhO2dCQUN4QixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFO2FBQ2xDLENBQ0YsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLElBQUksVUFBVSxDQUFjLFVBQVUsQ0FBQyxFQUFFO2dCQUM5QyxVQUFVLENBQUMsSUFBSSxDQUFDO29CQUNkLE9BQU8sRUFBRSxLQUFLO29CQUNkLEtBQUssRUFBRSxFQUFFO2lCQUNWLENBQUMsQ0FBQztnQkFDSCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsUUFBZ0I7UUFDNUIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FDdEMsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDMUMsTUFBTSxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDekQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFDRDtnQkFDRSxZQUFZLEVBQUUsSUFBSTtnQkFDbEIsU0FBUyxFQUFFLGFBQWE7Z0JBQ3hCLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTthQUNyRCxDQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxJQUFJLFVBQVUsQ0FBVSxVQUFVLENBQUMsRUFBRTtnQkFDMUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQy9DLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUM5QzthQUFNO1lBQ0wsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLElBQWE7UUFDcEIsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs4R0FyRlUsY0FBYztrSEFBZCxjQUFjLGNBRmIsTUFBTTs7MkZBRVAsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFByb1JvbGUsIFByb1JvbGVMaXN0IH0gZnJvbSAnLi4vbW9kZWxzL3Byby1yb2xlLW1vZHVsZXMnO1xyXG5pbXBvcnQgeyBQcm9Kc1RvQWR2cGxTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi9wcm8tanMtdG8tYWR2cGwvc2VydmljZXMvcHJvLWpzLXRvLWFkdnBsLnNlcnZpY2UnO1xyXG5cclxuY29uc3QgQ0FDSEVfS0VZID0gJ1Byb1JvbGUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvUm9sZVNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWR2cGxTZXJ2aWNlOiBQcm9Kc1RvQWR2cGxTZXJ2aWNlKSB7fVxyXG5cclxuICBnZXRMaXN0b2ZSb2xlcyhcclxuICAgIGRlc2NyaXB0aW9uID0gJycsXHJcbiAgICBwYWdlID0gMSxcclxuICAgIHBhZ2VTaXplID0gMTBcclxuICApOiBPYnNlcnZhYmxlPFByb1JvbGVMaXN0PiB7XHJcbiAgICBwYWdlU2l6ZSA9IDEwMDsgLy8gQWx0ZXJhZG8gbyB0YW1hbmhvIGRhIHDDoWdpbmEgcGFyYSBtZWxob3JhciBhIGV4cGVyacOqbmNpYSBkbyB1c3XDoXJpby5cclxuICAgIGlmICh0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGUoXHJcbiAgICAgICAgKHsgcHJvdGhldXNSZXNwb25zZSwgc3Vic2NyaWJlciB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAocHJvdGhldXNSZXNwb25zZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHtcclxuICAgICAgICAgICAgICBoYXNOZXh0OiBmYWxzZSxcclxuICAgICAgICAgICAgICBpdGVtczogW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByb2xlTGlzdDogQXJyYXk8UHJvUm9sZT4gPSBKU09OLnBhcnNlKHByb3RoZXVzUmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgLm1hcCgocm9sZTogQXJyYXk8c3RyaW5nPikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgQ29kZTogcm9sZVswXSxcclxuICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb246IHJvbGVbMV1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAuZmlsdGVyKChyb2xlOiBQcm9Sb2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm9sZS5EZXNjcmlwdGlvbi5pbmNsdWRlcyhkZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh7XHJcbiAgICAgICAgICAgICAgaGFzTmV4dDogcm9sZUxpc3QubGVuZ3RoID4gcGFnZSAqIHBhZ2VTaXplLFxyXG4gICAgICAgICAgICAgIGl0ZW1zOiByb2xlTGlzdC5zbGljZSgocGFnZSAtIDEpICogcGFnZVNpemUsIHBhZ2UgKiBwYWdlU2l6ZSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBhdXRvRGVzdHJ1Y3Q6IHRydWUsXHJcbiAgICAgICAgICByZWNlaXZlSWQ6ICdzZXRSb2xlTGlzdCcsXHJcbiAgICAgICAgICBzZW5kSW5mbzogeyB0eXBlOiAnZ2V0Um9sZUxpc3QnIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8UHJvUm9sZUxpc3Q+KHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh7XHJcbiAgICAgICAgICBoYXNOZXh0OiBmYWxzZSxcclxuICAgICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRSb2xlQnlDb2RlKHJvbGVDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb1JvbGU+IHtcclxuICAgIGlmICh0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGUoXHJcbiAgICAgICAgKHsgcHJvdGhldXNSZXNwb25zZSwgc3Vic2NyaWJlciB9KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCByb2xlID0gSlNPTi5wYXJzZShwcm90aGV1c1Jlc3BvbnNlKTtcclxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyBDb2RlOiByb2xlWzBdLCBEZXNjcmlwdGlvbjogcm9sZVsxXSB9O1xyXG4gICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3BvbnNlKTtcclxuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGF1dG9EZXN0cnVjdDogdHJ1ZSxcclxuICAgICAgICAgIHJlY2VpdmVJZDogJ3NldFJvbGVJdGVtJyxcclxuICAgICAgICAgIHNlbmRJbmZvOiB7IHR5cGU6ICdnZXRSb2xlSXRlbScsIGNvbnRlbnQ6IHJvbGVDb2RlIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8UHJvUm9sZT4oc3Vic2NyaWJlciA9PiB7XHJcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgQ29kZTogJycsIERlc2NyaXB0aW9uOiAnJyB9KTtcclxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IHJvbGUoKTogUHJvUm9sZSB7XHJcbiAgICBpZiAoc2Vzc2lvblN0b3JhZ2VbQ0FDSEVfS0VZXSkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZVtDQUNIRV9LRVldKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7IENvZGU6ICcnLCBEZXNjcmlwdGlvbjogJycgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCByb2xlKHJvbGU6IFByb1JvbGUpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV0gPSBKU09OLnN0cmluZ2lmeShyb2xlKTtcclxuICB9XHJcbn1cclxuIl19