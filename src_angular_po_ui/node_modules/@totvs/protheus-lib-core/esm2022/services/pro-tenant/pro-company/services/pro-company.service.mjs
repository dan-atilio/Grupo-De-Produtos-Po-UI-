import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../../pro-js-to-advpl";
const CACHE_KEY = 'ProCompany';
export class ProCompanyService {
    constructor(http, advplService) {
        this.http = http;
        this.advplService = advplService;
        this.url = '/api/framework/environment/v1/companies';
        this.useHTTP = true;
        this.EVENT_GET_LIST_ID = 'getCompaniesList';
        this.EVENT_SET_LIST_ID = 'setCompaniesList';
        this.EVENT_GET_ONE_ID = 'getCompanyInfo';
        this.EVENT_SET_ONE_ID = 'setCompanyInfo';
    }
    getListOfCompanies(CorporateName = '', page = 1, _pageSize = 100) {
        const pageSize = 100;
        if (this.useHTTP) {
            return this.getListOfCompaniesFromApi(CorporateName, page, pageSize);
        }
        return this.getListOfCompaniesFromAdvpl(CorporateName, page, pageSize);
    }
    /**
     * @description Retorna as empresas do usuário
     * @param corporateName string, nome da empresa
     * @param page number, número da página
     * @param pageSize number, número de registros da página
     * @returns ProCompanyList, lista de empresas do usuário
     */
    getUserCompanies(corporateName = '', page = 1, pageSize = 10) {
        return this.getListOfCompaniesFromApi(corporateName, page, pageSize);
    }
    getListOfCompaniesFromApi(CorporateName, page, pageSize) {
        let params = new HttpParams()
            .append('page', page.toString())
            .append('pageSize', pageSize.toString()); // Alterado o tamanho da página para melhorar a experiência do usuário.
        if (CorporateName !== '') {
            params = params.append('CorporateName', CorporateName);
        }
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(this.url, {
            headers,
            params
        });
    }
    getListOfCompaniesFromAdvpl(CorporateName, page, pageSize) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        const stringContent = JSON.stringify({
            CorporateName,
            page,
            pageSize
        });
        const observableParameters = {
            sendInfo: {
                type: this.EVENT_GET_LIST_ID,
                content: stringContent
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_LIST_ID
        };
        const observableCallback = ({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `company ${CorporateName} could not be found`
                });
            }
            else {
                const companiesData = JSON.parse(protheusResponse);
                subscriber.next(companiesData);
            }
            subscriber.complete();
        };
        return this.advplService.buildObservable(observableCallback, observableParameters);
    }
    getCompany(company) {
        if (this.useHTTP) {
            return this.getCompanyFromApi(company);
        }
        return this.getCompanyFromAdvpl(company);
    }
    getCompanyFromApi(company) {
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(`${this.url}/${company}`, { headers });
    }
    getCompanyFromAdvpl(company) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `company ${company} could not be found`
                });
            }
            else {
                const companyData = JSON.parse(protheusResponse);
                subscriber.next(companyData);
            }
            subscriber.complete();
        }, {
            sendInfo: {
                type: this.EVENT_GET_ONE_ID,
                content: company
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_ONE_ID
        });
    }
    get company() {
        if (sessionStorage[CACHE_KEY]) {
            return JSON.parse(sessionStorage[CACHE_KEY]);
        }
        else {
            return { Code: '', CorporateName: '', InternalId: '' };
        }
    }
    set company(company) {
        sessionStorage[CACHE_KEY] = JSON.stringify(company);
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProCompanyService'
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProCompanyService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProCompanyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProCompanyService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,