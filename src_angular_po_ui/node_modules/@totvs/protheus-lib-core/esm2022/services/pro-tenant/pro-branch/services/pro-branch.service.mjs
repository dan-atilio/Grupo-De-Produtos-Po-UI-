import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../../pro-js-to-advpl";
import * as i3 from "./../../pro-company/services/pro-company.service";
const CACHE_KEY = 'ProBranch';
export class ProBranchService {
    constructor(http, advplService, proCompanyService) {
        this.http = http;
        this.advplService = advplService;
        this.proCompanyService = proCompanyService;
        this.url = '/api/framework/environment/v1/branches';
        this.useHTTP = true;
        this.EVENT_SET_LIST_ID = 'setBranchesList';
        this.EVENT_GET_LIST_ID = 'getBranchesList';
        this.EVENT_SET_ONE_ID = 'setBranchInfo';
        this.EVENT_GET_ONE_ID = 'getBranchInfo';
    }
    getListOfBranches(Description = '', page = 1, _pageSize = 100) {
        const pageSize = 100;
        if (this.useHTTP) {
            return this.getListOfBranchesFromApi(Description, page, pageSize);
        }
        return this.getListOfBranchesFromAdvpl(Description, page, pageSize);
    }
    /**
     * @description Retorna as filiais do usuário
     * @param description string, descrição da filial
     * @param page number, número da página
     * @param pageSize number, número de registros da página
     * @returns ProBranchList, lista de filiais do usuário
     */
    getUserBranches(description = '', page = 1, pageSize = 10) {
        return this.getListOfBranchesFromApi(description, page, pageSize, false);
    }
    /**
     * @description Retorna as filiais do usuário via requisição http
     * @param description string, descrição da filial
     * @param page number, número da página
     * @param pageSize number, número de registros da página
     * @param isToFilterEnterpriseGroup boolean, indica se as filiais devem ser filtradas por empresa
     * @returns ProBranchList, lista de filiais do usuário
     */
    getListOfBranchesFromApi(Description, page, pageSize, isToFilterEnterpriseGroup = true) {
        let params = new HttpParams()
            .append('page', page.toString())
            .append('pageSize', pageSize.toString()); // Alterado o tamanho da página para melhorar a experiência do usuário.
        const company = this.proCompanyService.company;
        if (Description !== '') {
            params = params.append('Description', Description);
        }
        if (isToFilterEnterpriseGroup) {
            params = params.append('EnterpriseGroup', company.Code);
        }
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(this.url, {
            headers,
            params
        });
    }
    getListOfBranchesFromAdvpl(Description, page, pageSize) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        const company = this.proCompanyService.company;
        const stringContent = JSON.stringify({
            Description,
            EnterpriseGroup: company.Code,
            page,
            pageSize
        });
        const observableParams = {
            sendInfo: {
                type: this.EVENT_GET_LIST_ID,
                content: stringContent
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_LIST_ID
        };
        const observableCallback = ({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `branch ${Description} could not be found`
                });
            }
            else {
                const branchesData = JSON.parse(protheusResponse);
                subscriber.next(branchesData);
            }
            subscriber.complete();
        };
        return this.advplService.buildObservable(observableCallback, observableParams);
    }
    getBranch(branch, company = '') {
        if (this.useHTTP) {
            return this.getBranchFromApi(branch, company);
        }
        return this.getBranchFromAdvpl(branch, company);
    }
    getBranchFromApi(branch, company) {
        if (company === '') {
            company = this.proCompanyService.company.Code;
        }
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(`${this.url}/${company}|${branch}`, {
            headers
        });
    }
    getBranchFromAdvpl(branch, company) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        if (company === '') {
            company = this.proCompanyService.company.Code;
        }
        const stringContent = JSON.stringify({
            branch,
            company
        });
        const observableParams = {
            sendInfo: {
                type: this.EVENT_GET_ONE_ID,
                content: stringContent
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_ONE_ID
        };
        const observableCallback = ({ protheusResponse, subscriber }) => {
            let isOk = (protheusResponse.length > 0);
            const response = (isOk ? JSON.parse(protheusResponse) : {});
            isOk = (isOk && response && response.success);
            if (!isOk) {
                subscriber.error({
                    status: 400,
                    description: `branch ${branch} could not be found`
                });
            }
            else {
                const branchData = JSON.parse(response.payload);
                subscriber.next(branchData);
            }
            subscriber.complete();
        };
        return this.advplService.buildObservable(observableCallback, observableParams);
    }
    get branch() {
        if (sessionStorage[CACHE_KEY]) {
            return JSON.parse(sessionStorage[CACHE_KEY]);
        }
        else {
            return { Code: '', EnterpriseGroup: '', Description: '' };
        }
    }
    set branch(branch) {
        sessionStorage[CACHE_KEY] = JSON.stringify(branch);
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProBranchService'
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }, { token: i3.ProCompanyService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBranchService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }, { type: i3.ProCompanyService }] });
//# sourceMappingURL=data:application/json;base64,