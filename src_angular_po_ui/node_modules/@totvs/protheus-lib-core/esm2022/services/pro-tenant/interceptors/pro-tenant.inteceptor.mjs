import { Injectable } from '@angular/core';
import { ProCompanyService } from '../pro-company/services/pro-company.service';
import { ProBranchService } from './../pro-branch/services/pro-branch.service';
import { ProAppConfigService } from '../../pro-app-config';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header o token.
 */
export class ProTenantInteceptor {
    constructor(injector) {
        this.injector = injector;
    }
    intercept(original_request, next) {
        let requestResult = original_request;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (!(original_request.url.search(/assets/) >= 0)) {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                requestResult = this.appendTenantToRequest(original_request);
            }
        }
        return next.handle(requestResult);
    }
    appendTenantToRequest(request) {
        const tenantid = this.getTenantId();
        if (tenantid) {
            return request.clone({
                headers: request.headers.set('tenantid', tenantid)
            });
        }
        else {
            return request.clone();
        }
    }
    getTenantId() {
        const proBranchService = this.injector.get(ProBranchService);
        const proCompanyService = this.injector.get(ProCompanyService);
        const companyCode = proCompanyService.company.Code;
        const branchCode = proBranchService.branch.Code;
        let tenantid = '';
        if (companyCode !== '') {
            tenantid += companyCode;
            if (branchCode !== '') {
                // adicionada a virgula a direita para preservar o espaço a direita
                // no codigo da filial quando houver
                tenantid += `,${branchCode},`;
            }
            return tenantid;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTenantInteceptor, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTenantInteceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProTenantInteceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXRlbmFudC5pbnRlY2VwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJvdGhldXMtbGliLWNvcmUvc3JjL3NlcnZpY2VzL3Byby10ZW5hbnQvaW50ZXJjZXB0b3JzL3Byby10ZW5hbnQuaW50ZWNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBR3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQUUzRDs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQztJQUUzQyxTQUFTLENBQ1AsZ0JBQWtDLEVBQ2xDLElBQWlCO1FBRWpCLElBQUksYUFBYSxHQUFxQixnQkFBZ0IsQ0FBQztRQUV2RCxNQUFNLG1CQUFtQixHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDaEUsbUJBQW1CLENBQ3BCLENBQUM7UUFFRixJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ2pELE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDO1lBRXhELElBQUksVUFBVSxFQUFFO2dCQUNkLGFBQWEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUM5RDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxPQUF5QjtRQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFcEMsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO2FBQ25ELENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFTyxXQUFXO1FBQ2pCLE1BQU0sZ0JBQWdCLEdBQXFCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUMxRCxnQkFBZ0IsQ0FDakIsQ0FBQztRQUVGLE1BQU0saUJBQWlCLEdBQXNCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUM1RCxpQkFBaUIsQ0FDbEIsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDbkQsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUVoRCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbEIsSUFBSSxXQUFXLEtBQUssRUFBRSxFQUFFO1lBQ3RCLFFBQVEsSUFBSSxXQUFXLENBQUM7WUFDeEIsSUFBSSxVQUFVLEtBQUssRUFBRSxFQUFFO2dCQUNyQixtRUFBbUU7Z0JBQ25FLG9DQUFvQztnQkFDcEMsUUFBUSxJQUFJLElBQUksVUFBVSxHQUFHLENBQUM7YUFDL0I7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtJQUNILENBQUM7OEdBMURVLG1CQUFtQjtrSEFBbkIsbUJBQW1CLGNBRmxCLE1BQU07OzJGQUVQLG1CQUFtQjtrQkFIL0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBQcm9Db21wYW55U2VydmljZSB9IGZyb20gJy4uL3Byby1jb21wYW55L3NlcnZpY2VzL3Byby1jb21wYW55LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9CcmFuY2hTZXJ2aWNlIH0gZnJvbSAnLi8uLi9wcm8tYnJhbmNoL3NlcnZpY2VzL3Byby1icmFuY2guc2VydmljZSc7XHJcbmltcG9ydCB7IFByb0FwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm8tYXBwLWNvbmZpZyc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEludGVyY2VwdG9yIHF1ZSBwZWdhIGEgcmVxdWlzacOnw6NvIGh0bWwgZSBpbnNlcmUgbm8gaGVhZGVyIG8gdG9rZW4uXHJcbiAqL1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvVGVuYW50SW50ZWNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHsgfVxyXG5cclxuICBpbnRlcmNlcHQoXHJcbiAgICBvcmlnaW5hbF9yZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcclxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBsZXQgcmVxdWVzdFJlc3VsdDogSHR0cFJlcXVlc3Q8YW55PiA9IG9yaWdpbmFsX3JlcXVlc3Q7XHJcblxyXG4gICAgY29uc3QgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxyXG4gICAgICBQcm9BcHBDb25maWdTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGlmICghKG9yaWdpbmFsX3JlcXVlc3QudXJsLnNlYXJjaCgvYXNzZXRzLykgPj0gMCkpIHtcclxuICAgICAgY29uc3QgaXNQcm90aGV1cyA9IHByb0FwcENvbmZpZ1NlcnZpY2UuaXNQcm90aGV1c1JlbmRlcjtcclxuXHJcbiAgICAgIGlmIChpc1Byb3RoZXVzKSB7XHJcbiAgICAgICAgcmVxdWVzdFJlc3VsdCA9IHRoaXMuYXBwZW5kVGVuYW50VG9SZXF1ZXN0KG9yaWdpbmFsX3JlcXVlc3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdFJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFwcGVuZFRlbmFudFRvUmVxdWVzdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogSHR0cFJlcXVlc3Q8YW55PiB7XHJcbiAgICBjb25zdCB0ZW5hbnRpZCA9IHRoaXMuZ2V0VGVuYW50SWQoKTtcclxuXHJcbiAgICBpZiAodGVuYW50aWQpIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoe1xyXG4gICAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycy5zZXQoJ3RlbmFudGlkJywgdGVuYW50aWQpXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VGVuYW50SWQoKTogc3RyaW5nIHwgdm9pZCB7XHJcbiAgICBjb25zdCBwcm9CcmFuY2hTZXJ2aWNlOiBQcm9CcmFuY2hTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoXHJcbiAgICAgIFByb0JyYW5jaFNlcnZpY2VcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgcHJvQ29tcGFueVNlcnZpY2U6IFByb0NvbXBhbnlTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoXHJcbiAgICAgIFByb0NvbXBhbnlTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNvbXBhbnlDb2RlID0gcHJvQ29tcGFueVNlcnZpY2UuY29tcGFueS5Db2RlO1xyXG4gICAgY29uc3QgYnJhbmNoQ29kZSA9IHByb0JyYW5jaFNlcnZpY2UuYnJhbmNoLkNvZGU7XHJcblxyXG4gICAgbGV0IHRlbmFudGlkID0gJyc7XHJcblxyXG4gICAgaWYgKGNvbXBhbnlDb2RlICE9PSAnJykge1xyXG4gICAgICB0ZW5hbnRpZCArPSBjb21wYW55Q29kZTtcclxuICAgICAgaWYgKGJyYW5jaENvZGUgIT09ICcnKSB7XHJcbiAgICAgICAgLy8gYWRpY2lvbmFkYSBhIHZpcmd1bGEgYSBkaXJlaXRhIHBhcmEgcHJlc2VydmFyIG8gZXNwYcOnbyBhIGRpcmVpdGFcclxuICAgICAgICAvLyBubyBjb2RpZ28gZGEgZmlsaWFsIHF1YW5kbyBob3V2ZXJcclxuICAgICAgICB0ZW5hbnRpZCArPSBgLCR7YnJhbmNoQ29kZX0sYDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGVuYW50aWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==