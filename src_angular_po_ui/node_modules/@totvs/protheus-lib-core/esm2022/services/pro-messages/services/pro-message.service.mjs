import { Injectable } from '@angular/core';
import { PoToasterOrientation } from '@po-ui/ng-components';
import * as i0 from "@angular/core";
import * as i1 from "@po-ui/ng-components";
import * as i2 from "./../../pro-js-to-advpl/services/pro-js-to-advpl.service";
export class ProMessageService {
    constructor(poNotificationService, advplService) {
        this.poNotificationService = poNotificationService;
        this.advplService = advplService;
        if (this.advplService.protheusConnected()) {
            this.advplService.buildListener('showMessage', ({ protheusResponse }) => {
                if (protheusResponse.length === 0) {
                    return;
                }
                else {
                    const messageObject = JSON.parse(protheusResponse);
                    this.showMessage(messageObject.message, messageObject.type);
                }
            });
        }
    }
    // Método criado para evitar que sejam exibidas duas mensagens para o usuário (uma do Angular e outra do Protheus)
    showOneMessage(message, type = 2) {
        if (!this.advplService.protheusConnected()) {
            this.showMessage(message, type);
        }
    }
    /**
     * @description Exibe uma mensagem via notificação
     * @param message Mensagem
     * @param type Tipo da mensage, como erro, informação etc
     */
    showMessage(message, type = 2) {
        const notification = {
            message,
            orientation: PoToasterOrientation.Top
        };
        if (type === 1) {
            this.poNotificationService.warning(notification);
        }
        if (type === 2) {
            this.poNotificationService.error(notification);
        }
        if (type === 3) {
            this.poNotificationService.information(notification);
        }
    }
    /**
     * @description Executa a mudança do idioma no Protheus via Observable do advplService
     * @param language idioma escolhido via po-select
     * @returns Observable de boolean da confirmação da troca do idioma no BackEnd
     */
    changeLanguage(language) {
        if (this.advplService.protheusConnected()) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse !== 'true') {
                    subscriber.error({
                        status: 400,
                        description: 'language could not be changed'
                    });
                }
                else {
                    subscriber.next();
                }
                subscriber.complete();
            }, {
                sendInfo: {
                    type: 'changeLanguage',
                    content: language
                },
                autoDestruct: true,
                receiveId: 'changeLanguage'
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProMessageService, deps: [{ token: i1.PoNotificationService }, { token: i2.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProMessageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProMessageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.PoNotificationService }, { type: i2.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLW1lc3NhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tbWVzc2FnZXMvc2VydmljZXMvcHJvLW1lc3NhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBeUMsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQVFuRyxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQ1UscUJBQTRDLEVBQzVDLFlBQWlDO1FBRGpDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBRXpDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFO2dCQUN0RSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ2pDLE9BQU87aUJBQ1I7cUJBQU07b0JBQ0wsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM3RDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Qsa0hBQWtIO0lBQ2xILGNBQWMsQ0FBQyxPQUFlLEVBQUUsT0FBZSxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFdBQVcsQ0FBQyxPQUFlLEVBQUUsT0FBZSxDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFtQjtZQUNuQyxPQUFPO1lBQ1AsV0FBVyxFQUFFLG9CQUFvQixDQUFDLEdBQUc7U0FDdEMsQ0FBQztRQUNGLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbEQ7UUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsY0FBYyxDQUFDLFFBQWdCO1FBQzdCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQ3RDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLGdCQUFnQixLQUFLLE1BQU0sRUFBRTtvQkFDL0IsVUFBVSxDQUFDLEtBQUssQ0FBQzt3QkFDZixNQUFNLEVBQUUsR0FBRzt3QkFDWCxXQUFXLEVBQUUsK0JBQStCO3FCQUM3QyxDQUFDLENBQUM7aUJBQ0o7cUJBQU07b0JBQ0wsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNuQjtnQkFDRCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxFQUNEO2dCQUNFLFFBQVEsRUFBRTtvQkFDUixJQUFJLEVBQUUsZ0JBQWdCO29CQUN0QixPQUFPLEVBQUUsUUFBUTtpQkFDbEI7Z0JBQ0QsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLFNBQVMsRUFBRSxnQkFBZ0I7YUFDNUIsQ0FDRixDQUFDO1NBQ0g7SUFDSCxDQUFDOzhHQXpFVSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQUZoQixNQUFNOzsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb05vdGlmaWNhdGlvbiwgUG9Ob3RpZmljYXRpb25TZXJ2aWNlLCBQb1RvYXN0ZXJPcmllbnRhdGlvbiB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuXHJcbmltcG9ydCB7IFByb0pzVG9BZHZwbFNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3Byby1qcy10by1hZHZwbC9zZXJ2aWNlcy9wcm8tanMtdG8tYWR2cGwuc2VydmljZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb01lc3NhZ2VTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcG9Ob3RpZmljYXRpb25TZXJ2aWNlOiBQb05vdGlmaWNhdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGFkdnBsU2VydmljZTogUHJvSnNUb0FkdnBsU2VydmljZVxyXG4gICkge1xyXG4gICAgaWYgKHRoaXMuYWR2cGxTZXJ2aWNlLnByb3RoZXVzQ29ubmVjdGVkKCkpIHtcclxuICAgICAgdGhpcy5hZHZwbFNlcnZpY2UuYnVpbGRMaXN0ZW5lcignc2hvd01lc3NhZ2UnLCAoeyBwcm90aGV1c1Jlc3BvbnNlIH0pID0+IHtcclxuICAgICAgICBpZiAocHJvdGhldXNSZXNwb25zZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZU9iamVjdCA9IEpTT04ucGFyc2UocHJvdGhldXNSZXNwb25zZSk7XHJcbiAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlKG1lc3NhZ2VPYmplY3QubWVzc2FnZSwgbWVzc2FnZU9iamVjdC50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBNw6l0b2RvIGNyaWFkbyBwYXJhIGV2aXRhciBxdWUgc2VqYW0gZXhpYmlkYXMgZHVhcyBtZW5zYWdlbnMgcGFyYSBvIHVzdcOhcmlvICh1bWEgZG8gQW5ndWxhciBlIG91dHJhIGRvIFByb3RoZXVzKVxyXG4gIHNob3dPbmVNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdHlwZTogbnVtYmVyID0gMikge1xyXG4gICAgaWYgKCF0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHRoaXMuc2hvd01lc3NhZ2UobWVzc2FnZSwgdHlwZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gRXhpYmUgdW1hIG1lbnNhZ2VtIHZpYSBub3RpZmljYcOnw6NvXHJcbiAgICogQHBhcmFtIG1lc3NhZ2UgTWVuc2FnZW1cclxuICAgKiBAcGFyYW0gdHlwZSBUaXBvIGRhIG1lbnNhZ2UsIGNvbW8gZXJybywgaW5mb3JtYcOnw6NvIGV0Y1xyXG4gICAqL1xyXG4gIHNob3dNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdHlwZTogbnVtYmVyID0gMikge1xyXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiA9IHtcclxuICAgICAgbWVzc2FnZSxcclxuICAgICAgb3JpZW50YXRpb246IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcFxyXG4gICAgfTtcclxuICAgIGlmICh0eXBlID09PSAxKSB7XHJcbiAgICAgIHRoaXMucG9Ob3RpZmljYXRpb25TZXJ2aWNlLndhcm5pbmcobm90aWZpY2F0aW9uKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlID09PSAyKSB7XHJcbiAgICAgIHRoaXMucG9Ob3RpZmljYXRpb25TZXJ2aWNlLmVycm9yKG5vdGlmaWNhdGlvbik7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PT0gMykge1xyXG4gICAgICB0aGlzLnBvTm90aWZpY2F0aW9uU2VydmljZS5pbmZvcm1hdGlvbihub3RpZmljYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIEV4ZWN1dGEgYSBtdWRhbsOnYSBkbyBpZGlvbWEgbm8gUHJvdGhldXMgdmlhIE9ic2VydmFibGUgZG8gYWR2cGxTZXJ2aWNlXHJcbiAgICogQHBhcmFtIGxhbmd1YWdlIGlkaW9tYSBlc2NvbGhpZG8gdmlhIHBvLXNlbGVjdFxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgZGUgYm9vbGVhbiBkYSBjb25maXJtYcOnw6NvIGRhIHRyb2NhIGRvIGlkaW9tYSBubyBCYWNrRW5kXHJcbiAgICovXHJcbiAgY2hhbmdlTGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj57XHJcbiAgICBpZiAodGhpcy5hZHZwbFNlcnZpY2UucHJvdGhldXNDb25uZWN0ZWQoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hZHZwbFNlcnZpY2UuYnVpbGRPYnNlcnZhYmxlPGJvb2xlYW4+KFxyXG4gICAgICAgICh7IHByb3RoZXVzUmVzcG9uc2UsIHN1YnNjcmliZXIgfSkgPT4ge1xyXG4gICAgICAgICAgaWYgKHByb3RoZXVzUmVzcG9uc2UgIT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2xhbmd1YWdlIGNvdWxkIG5vdCBiZSBjaGFuZ2VkJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgc2VuZEluZm86IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoYW5nZUxhbmd1YWdlJyxcclxuICAgICAgICAgICAgY29udGVudDogbGFuZ3VhZ2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBhdXRvRGVzdHJ1Y3Q6IHRydWUsXHJcbiAgICAgICAgICByZWNlaXZlSWQ6ICdjaGFuZ2VMYW5ndWFnZSdcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==