import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 * Classe para tratamentos de i18n do Protheus
 */
export class ProI18nService {
    /**
     * @description
     * Efetua a transformação de um texto de tradução com tokens,
     * os tokens são iniciados com # e um número de 1 a 99.
     * Os valores são convertidos para string via função String do JS,
     * não possuindo um padrão de conversão
     *
     * @param str Texto de internacionalização
     * @param values Lista de tokens, podendo ter de 0 a 99 itens
     * @returns Texto original com a substituição dos tokens (#)
     */
    static getTranslateTokenString(str, values = []) {
        for (let i = values.length - 1; i >= 0; i--) {
            const token = String(values[i]);
            const section = '#' + (i + 1).toString();
            const posSection = str.indexOf(`${section}[`);
            if (posSection >= 0) {
                const hintStart = posSection + section.length;
                const hintEnd = str.substring(hintStart + 1).indexOf(']#');
                if (hintStart >= 0 && hintEnd >= 0) {
                    const search = new RegExp(`${section}\\[.*]#`, 'g');
                    str = str.replace(search, section);
                }
            }
            str = str.replace(section, token);
        }
        return str;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProI18nService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProI18nService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProI18nService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWkxOG4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8taTE4bi9zZXJ2aWNlcy9wcm8taTE4bi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxjQUFjO0lBQ3pCOzs7Ozs7Ozs7O09BVUc7SUFDSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBVyxFQUFFLFNBQXFCLEVBQUU7UUFDeEUsS0FBSyxJQUFJLENBQUMsR0FBVyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25ELE1BQU0sS0FBSyxHQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLE9BQU8sR0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakQsTUFBTSxVQUFVLEdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFFdEQsSUFBSSxVQUFVLElBQUksQ0FBQyxFQUFFO2dCQUNuQixNQUFNLFNBQVMsR0FBVyxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztnQkFDdEQsTUFBTSxPQUFPLEdBQVcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUVuRSxJQUFJLFNBQVMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsRUFBRTtvQkFDbEMsTUFBTSxNQUFNLEdBQVcsSUFBSSxNQUFNLENBQUMsR0FBRyxPQUFPLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDNUQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNwQzthQUNGO1lBRUQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzhHQWhDVSxjQUFjO2tIQUFkLGNBQWMsY0FOYixNQUFNOzsyRkFNUCxjQUFjO2tCQVAxQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDbGFzc2UgcGFyYSB0cmF0YW1lbnRvcyBkZSBpMThuIGRvIFByb3RoZXVzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUHJvSTE4blNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEVmZXR1YSBhIHRyYW5zZm9ybWHDp8OjbyBkZSB1bSB0ZXh0byBkZSB0cmFkdcOnw6NvIGNvbSB0b2tlbnMsXHJcbiAgICogb3MgdG9rZW5zIHPDo28gaW5pY2lhZG9zIGNvbSAjIGUgdW0gbsO6bWVybyBkZSAxIGEgOTkuXHJcbiAgICogT3MgdmFsb3JlcyBzw6NvIGNvbnZlcnRpZG9zIHBhcmEgc3RyaW5nIHZpYSBmdW7Dp8OjbyBTdHJpbmcgZG8gSlMsXHJcbiAgICogbsOjbyBwb3NzdWluZG8gdW0gcGFkcsOjbyBkZSBjb252ZXJzw6NvXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3RyIFRleHRvIGRlIGludGVybmFjaW9uYWxpemHDp8Ojb1xyXG4gICAqIEBwYXJhbSB2YWx1ZXMgTGlzdGEgZGUgdG9rZW5zLCBwb2RlbmRvIHRlciBkZSAwIGEgOTkgaXRlbnNcclxuICAgKiBAcmV0dXJucyBUZXh0byBvcmlnaW5hbCBjb20gYSBzdWJzdGl0dWnDp8OjbyBkb3MgdG9rZW5zICgjKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VHJhbnNsYXRlVG9rZW5TdHJpbmcoc3RyOiBzdHJpbmcsIHZhbHVlczogQXJyYXk8YW55PiA9IFtdKTogc3RyaW5nIHtcclxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IHZhbHVlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBjb25zdCB0b2tlbjogc3RyaW5nID0gU3RyaW5nKHZhbHVlc1tpXSk7XHJcbiAgICAgIGNvbnN0IHNlY3Rpb246IHN0cmluZyA9ICcjJyArIChpICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgY29uc3QgcG9zU2VjdGlvbjogbnVtYmVyID0gc3RyLmluZGV4T2YoYCR7c2VjdGlvbn1bYCk7XHJcblxyXG4gICAgICBpZiAocG9zU2VjdGlvbiA+PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaGludFN0YXJ0OiBudW1iZXIgPSBwb3NTZWN0aW9uICsgc2VjdGlvbi5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgaGludEVuZDogbnVtYmVyID0gc3RyLnN1YnN0cmluZyhoaW50U3RhcnQgKyAxKS5pbmRleE9mKCddIycpO1xyXG5cclxuICAgICAgICBpZiAoaGludFN0YXJ0ID49IDAgJiYgaGludEVuZCA+PSAwKSB7XHJcbiAgICAgICAgICBjb25zdCBzZWFyY2g6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoYCR7c2VjdGlvbn1cXFxcWy4qXSNgLCAnZycpO1xyXG4gICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2Uoc2VhcmNoLCBzZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHNlY3Rpb24sIHRva2VuKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyO1xyXG4gIH1cclxufSJdfQ==