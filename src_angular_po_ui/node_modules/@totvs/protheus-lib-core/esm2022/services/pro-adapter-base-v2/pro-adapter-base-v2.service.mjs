import { HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ProAdapterBaseV2Service {
    /**
     * @description Retorna parâmetros no formato HttpParams para ser enviado na requisição HTTP.
     *
     * @param page number, número da página
     * @param pageSize number, quantidade de registros da página
     * @param filter string, filtro a ser utilizado na requisição
     * @param fields string, campos a serem retornados pela requisição
     * @param order string, ordenação a ser utilizada no retorno da requisição
     *
     * @return HttpParams, parâmetros
    */
    getHttpParams(page, pageSize, filter, fields, order) {
        const params = new HttpParams()
            .append('page', page ? page : 1)
            .append('pageSize', pageSize ? pageSize : 20)
            .append('filter', filter ? filter : '')
            .append('fields', fields ? fields : '')
            .append('order', order ? order : '');
        return params;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAdapterBaseV2Service, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAdapterBaseV2Service, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAdapterBaseV2Service, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWFkYXB0ZXItYmFzZS12Mi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJvdGhldXMtbGliLWNvcmUvc3JjL3NlcnZpY2VzL3Byby1hZGFwdGVyLWJhc2UtdjIvcHJvLWFkYXB0ZXItYmFzZS12Mi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sdUJBQXVCO0lBRWxDOzs7Ozs7Ozs7O01BVUU7SUFDRixhQUFhLENBQUMsSUFBYSxFQUFFLFFBQWlCLEVBQUUsTUFBZSxFQUFFLE1BQWUsRUFBRSxLQUFjO1FBQzlGLE1BQU0sTUFBTSxHQUFlLElBQUksVUFBVSxFQUFFO2FBQ3hDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMvQixNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDNUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3RDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUN0QyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV2QyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzhHQXRCVSx1QkFBdUI7a0hBQXZCLHVCQUF1QixjQUZ0QixNQUFNOzsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvQWRhcHRlckJhc2VWMlNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gUmV0b3JuYSBwYXLDom1ldHJvcyBubyBmb3JtYXRvIEh0dHBQYXJhbXMgcGFyYSBzZXIgZW52aWFkbyBuYSByZXF1aXNpw6fDo28gSFRUUC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYWdlIG51bWJlciwgbsO6bWVybyBkYSBww6FnaW5hXHJcbiAgICogQHBhcmFtIHBhZ2VTaXplIG51bWJlciwgcXVhbnRpZGFkZSBkZSByZWdpc3Ryb3MgZGEgcMOhZ2luYVxyXG4gICAqIEBwYXJhbSBmaWx0ZXIgc3RyaW5nLCBmaWx0cm8gYSBzZXIgdXRpbGl6YWRvIG5hIHJlcXVpc2nDp8Ojb1xyXG4gICAqIEBwYXJhbSBmaWVsZHMgc3RyaW5nLCBjYW1wb3MgYSBzZXJlbSByZXRvcm5hZG9zIHBlbGEgcmVxdWlzacOnw6NvXHJcbiAgICogQHBhcmFtIG9yZGVyIHN0cmluZywgb3JkZW5hw6fDo28gYSBzZXIgdXRpbGl6YWRhIG5vIHJldG9ybm8gZGEgcmVxdWlzacOnw6NvXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIEh0dHBQYXJhbXMsIHBhcsOibWV0cm9zXHJcbiAgKi9cclxuICBnZXRIdHRwUGFyYW1zKHBhZ2U/OiBudW1iZXIsIHBhZ2VTaXplPzogbnVtYmVyLCBmaWx0ZXI/OiBzdHJpbmcsIGZpZWxkcz86IHN0cmluZywgb3JkZXI/OiBzdHJpbmcpOiBIdHRwUGFyYW1zIHtcclxuICAgIGNvbnN0IHBhcmFtczogSHR0cFBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKClcclxuICAgICAgLmFwcGVuZCgncGFnZScsIHBhZ2UgPyBwYWdlIDogMSlcclxuICAgICAgLmFwcGVuZCgncGFnZVNpemUnLCBwYWdlU2l6ZSA/IHBhZ2VTaXplIDogMjApXHJcbiAgICAgIC5hcHBlbmQoJ2ZpbHRlcicsIGZpbHRlciA/IGZpbHRlciA6ICcnKVxyXG4gICAgICAuYXBwZW5kKCdmaWVsZHMnLCBmaWVsZHMgPyBmaWVsZHMgOiAnJylcclxuICAgICAgLmFwcGVuZCgnb3JkZXInLCBvcmRlciA/IG9yZGVyIDogJycpO1xyXG5cclxuICAgIHJldHVybiBwYXJhbXM7XHJcbiAgfVxyXG59Il19