import { HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ProGenericAdapterService {
    constructor(http) {
        this.http = http;
        this.URL_LIST = "/api/framework/v1/genericList";
        this.URL_QUERY = "/api/framework/v1/genericQuery";
    }
    /**
     * Metodo para devolver uma listagem de registro baseado na api genericList
     * @param searchParams parametros da interface ProAdapterListInterface a ser enviado
     * para api genericList
     * @returns Observable de ProAdapterBaseV2 a ser utilizado em um po-table
     */
    list(searchParams) {
        const params = this.convertSearchParamsToHttpParams(searchParams);
        return this.http.get(this.URL_LIST, { params });
    }
    /**
     * Metodo para devolver uma listagem de registro baseado na api genericQuery
     * @param searchParams parametros da interface ProAdapterQueryInterface a ser enviado
     * para api genericQuery
     * @returns Observable de ProAdapterBaseV2 a ser utilizado em um po-table
     */
    query(searchParams) {
        const params = this.convertSearchParamsToHttpParams(searchParams);
        return this.http.get(this.URL_QUERY, { params });
    }
    /**
     * converte uma interface para httpParams
     * cada propriedade vira um parametro http
     * @param searchParams parametro a ser convetido
     * @returns httpParams a ser utilizado em uma requisição
     */
    convertSearchParamsToHttpParams(searchParams) {
        let params = new HttpParams();
        Object.keys(searchParams).forEach(key => {
            params = params.set(key, searchParams[key]);
        });
        return params;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProGenericAdapterService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProGenericAdapterService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProGenericAdapterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWdlbmVyaWMtYWRhcHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJvdGhldXMtbGliLWNvcmUvc3JjL3NlcnZpY2VzL3Byby1nZW5lcmljLWFkYXB0ZXIvcHJvLWdlbmVyaWMtYWRhcHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFTM0MsTUFBTSxPQUFPLHdCQUF3QjtJQUluQyxZQUNVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFKVCxhQUFRLEdBQVcsK0JBQStCLENBQUM7UUFDbkQsY0FBUyxHQUFXLGdDQUFnQyxDQUFDO0lBSWxFLENBQUM7SUFFTDs7Ozs7T0FLRztJQUNILElBQUksQ0FBSSxZQUFxQztRQUMzQyxNQUFNLE1BQU0sR0FBZSxJQUFJLENBQUMsK0JBQStCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBc0IsSUFBSSxDQUFDLFFBQVEsRUFBRyxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFJLFlBQXNDO1FBQzdDLE1BQU0sTUFBTSxHQUFlLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFzQixJQUFJLENBQUMsU0FBUyxFQUFHLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSywrQkFBK0IsQ0FBQyxZQUFnRTtRQUN0RyxJQUFJLE1BQU0sR0FBZSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OEdBMUNVLHdCQUF3QjtrSEFBeEIsd0JBQXdCLGNBRnZCLE1BQU07OzJGQUVQLHdCQUF3QjtrQkFIcEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFByb0FkYXB0ZXJCYXNlVjIgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3Byby1hZGFwdGVyLWJhc2UtdjIvcHJvLWFkYXB0ZXItYmFzZS12Mi5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQcm9BZGFwdGVyTGlzdEludGVyZmFjZSwgUHJvQWRhcHRlclF1ZXJ5SW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wcm8tZ2VuZXJpYy1hZGFwdGVyL3Byby1nZW5lcmljLWFkYXB0ZXIuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb0dlbmVyaWNBZGFwdGVyU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBVUkxfTElTVDogc3RyaW5nID0gXCIvYXBpL2ZyYW1ld29yay92MS9nZW5lcmljTGlzdFwiO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgVVJMX1FVRVJZOiBzdHJpbmcgPSBcIi9hcGkvZnJhbWV3b3JrL3YxL2dlbmVyaWNRdWVyeVwiO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICApIHsgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRvZG8gcGFyYSBkZXZvbHZlciB1bWEgbGlzdGFnZW0gZGUgcmVnaXN0cm8gYmFzZWFkbyBuYSBhcGkgZ2VuZXJpY0xpc3RcclxuICAgKiBAcGFyYW0gc2VhcmNoUGFyYW1zIHBhcmFtZXRyb3MgZGEgaW50ZXJmYWNlIFByb0FkYXB0ZXJMaXN0SW50ZXJmYWNlIGEgc2VyIGVudmlhZG9cclxuICAgKiBwYXJhIGFwaSBnZW5lcmljTGlzdFxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgZGUgUHJvQWRhcHRlckJhc2VWMiBhIHNlciB1dGlsaXphZG8gZW0gdW0gcG8tdGFibGVcclxuICAgKi9cclxuICBsaXN0PFQ+KHNlYXJjaFBhcmFtczogUHJvQWRhcHRlckxpc3RJbnRlcmZhY2UpOiBPYnNlcnZhYmxlPFByb0FkYXB0ZXJCYXNlVjI8VD4+IHtcclxuICAgIGNvbnN0IHBhcmFtczogSHR0cFBhcmFtcyA9IHRoaXMuY29udmVydFNlYXJjaFBhcmFtc1RvSHR0cFBhcmFtcyhzZWFyY2hQYXJhbXMpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UHJvQWRhcHRlckJhc2VWMjxUPj4odGhpcy5VUkxfTElTVCAsIHtwYXJhbXN9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldG9kbyBwYXJhIGRldm9sdmVyIHVtYSBsaXN0YWdlbSBkZSByZWdpc3RybyBiYXNlYWRvIG5hIGFwaSBnZW5lcmljUXVlcnlcclxuICAgKiBAcGFyYW0gc2VhcmNoUGFyYW1zIHBhcmFtZXRyb3MgZGEgaW50ZXJmYWNlIFByb0FkYXB0ZXJRdWVyeUludGVyZmFjZSBhIHNlciBlbnZpYWRvXHJcbiAgICogcGFyYSBhcGkgZ2VuZXJpY1F1ZXJ5XHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSBkZSBQcm9BZGFwdGVyQmFzZVYyIGEgc2VyIHV0aWxpemFkbyBlbSB1bSBwby10YWJsZVxyXG4gICAqL1xyXG4gIHF1ZXJ5PFQ+KHNlYXJjaFBhcmFtczogUHJvQWRhcHRlclF1ZXJ5SW50ZXJmYWNlKTogT2JzZXJ2YWJsZTxQcm9BZGFwdGVyQmFzZVYyPFQ+PiB7XHJcbiAgICBjb25zdCBwYXJhbXM6IEh0dHBQYXJhbXMgPSB0aGlzLmNvbnZlcnRTZWFyY2hQYXJhbXNUb0h0dHBQYXJhbXMoc2VhcmNoUGFyYW1zKTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb0FkYXB0ZXJCYXNlVjI8VD4+KHRoaXMuVVJMX1FVRVJZICwge3BhcmFtc30pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY29udmVydGUgdW1hIGludGVyZmFjZSBwYXJhIGh0dHBQYXJhbXNcclxuICAgKiBjYWRhIHByb3ByaWVkYWRlIHZpcmEgdW0gcGFyYW1ldHJvIGh0dHBcclxuICAgKiBAcGFyYW0gc2VhcmNoUGFyYW1zIHBhcmFtZXRybyBhIHNlciBjb252ZXRpZG9cclxuICAgKiBAcmV0dXJucyBodHRwUGFyYW1zIGEgc2VyIHV0aWxpemFkbyBlbSB1bWEgcmVxdWlzacOnw6NvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9IdHRwUGFyYW1zKHNlYXJjaFBhcmFtczogUHJvQWRhcHRlckxpc3RJbnRlcmZhY2UgfCBQcm9BZGFwdGVyUXVlcnlJbnRlcmZhY2UpOiBIdHRwUGFyYW1zIHtcclxuICAgIGxldCBwYXJhbXM6IEh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgT2JqZWN0LmtleXMoc2VhcmNoUGFyYW1zKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoa2V5LCBzZWFyY2hQYXJhbXNba2V5XSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwYXJhbXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==