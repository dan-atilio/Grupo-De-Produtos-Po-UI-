import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../pro-js-to-advpl";
import * as i3 from "../../pro-app-config/services/pro-app-config.service";
export class ProBrandService {
    constructor(http, advplService, proAppConfigService) {
        this.http = http;
        this.advplService = advplService;
        this.proAppConfigService = proAppConfigService;
        this.url = '/api/brand/v1/erp-brand';
        this.useHTTP = true;
        this.EVENT_GET_BRANDCONTEXT = 'getBrandContext';
        this.EVENT_SET_BRANDCONTEXT = 'setBrandContext';
    }
    getERPBrand() {
        if (this.proAppConfigService.isProtheusRender) {
            if (this.useHTTP) {
                return this.http.get(this.url, { responseType: 'text' });
            }
            return this.getAdvplBrandContext();
        }
        else {
            return of('TOTVS');
        }
    }
    /**
     * @description Cria um observable para a comunicação com o ADVPL
     * @returns Observable de string sobre a marca do ambiente
     */
    getAdvplBrandContext() {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (subscriber) {
                if (protheusResponse.length === 0) {
                    subscriber.error({
                        status: 400,
                        description: 'Brand context not found'
                    });
                }
                else {
                    subscriber.next(protheusResponse);
                }
                subscriber.complete();
            }
        }, {
            sendInfo: {
                type: this.EVENT_GET_BRANDCONTEXT
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_BRANDCONTEXT
        });
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProBrandService'
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBrandService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }, { token: i3.ProAppConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBrandService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProBrandService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }, { type: i3.ProAppConfigService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWJyYW5kLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLWJyYW5kL3NlcnZpY2VzL3Byby1icmFuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBUXRDLE1BQU0sT0FBTyxlQUFlO0lBTzFCLFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUMsRUFDakMsbUJBQXdDO1FBRnhDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFUMUMsUUFBRyxHQUFHLHlCQUF5QixDQUFDO1FBQ2hDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFZiwyQkFBc0IsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQywyQkFBc0IsR0FBRyxpQkFBaUIsQ0FBQztJQU0vQyxDQUFDO0lBRUUsV0FBVztRQUNoQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsT0FBTyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUNwQzthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUNoQztRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQ3RDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQ25DLElBQUksVUFBVSxFQUFFO2dCQUNkLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQzt3QkFDZixNQUFNLEVBQUUsR0FBRzt3QkFDWCxXQUFXLEVBQUUseUJBQXlCO3FCQUN2QyxDQUFDLENBQUM7aUJBQ0o7cUJBQU07b0JBQ0wsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdkI7UUFDSCxDQUFDLEVBQ0Q7WUFDRSxRQUFRLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLElBQUksQ0FBQyxzQkFBc0I7YUFDbEM7WUFDRCxZQUFZLEVBQUUsSUFBSTtZQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtTQUN2QyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE9BQU8sSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQztnQkFDZixNQUFNLEVBQUUsR0FBRztnQkFDWCxXQUFXLEVBQUUsOENBQThDO2FBQzVELENBQUMsQ0FBQztZQUNILFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7OEdBMUVVLGVBQWU7a0hBQWYsZUFBZSxjQUZkLE1BQU07OzJGQUVQLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUHJvSnNUb0FkdnBsU2VydmljZSB9IGZyb20gJy4uLy4uL3Byby1qcy10by1hZHZwbCc7XHJcbmltcG9ydCB7IFByb0FwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm8tYXBwLWNvbmZpZy9zZXJ2aWNlcy9wcm8tYXBwLWNvbmZpZy5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb0JyYW5kU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB1cmwgPSAnL2FwaS9icmFuZC92MS9lcnAtYnJhbmQnO1xyXG4gIHByaXZhdGUgdXNlSFRUUCA9IHRydWU7XHJcblxyXG4gIHByaXZhdGUgRVZFTlRfR0VUX0JSQU5EQ09OVEVYVCA9ICdnZXRCcmFuZENvbnRleHQnO1xyXG4gIHByaXZhdGUgRVZFTlRfU0VUX0JSQU5EQ09OVEVYVCA9ICdzZXRCcmFuZENvbnRleHQnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgYWR2cGxTZXJ2aWNlOiBQcm9Kc1RvQWR2cGxTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBwcm9BcHBDb25maWdTZXJ2aWNlOiBQcm9BcHBDb25maWdTZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgcHVibGljIGdldEVSUEJyYW5kKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICBpZiAodGhpcy5wcm9BcHBDb25maWdTZXJ2aWNlLmlzUHJvdGhldXNSZW5kZXIpIHtcclxuICAgICAgaWYgKHRoaXMudXNlSFRUUCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMudXJsLCB7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5nZXRBZHZwbEJyYW5kQ29udGV4dCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG9mKCdUT1RWUycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIENyaWEgdW0gb2JzZXJ2YWJsZSBwYXJhIGEgY29tdW5pY2HDp8OjbyBjb20gbyBBRFZQTFxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgZGUgc3RyaW5nIHNvYnJlIGEgbWFyY2EgZG8gYW1iaWVudGVcclxuICAgKi9cclxuICBwcml2YXRlIGdldEFkdnBsQnJhbmRDb250ZXh0KCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICBpZiAoIXRoaXMuYWR2cGxTZXJ2aWNlLnByb3RoZXVzQ29ubmVjdGVkKCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYWR2cGxOb3RQcmVwYXJlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGU8c3RyaW5nPihcclxuICAgICAgKHsgcHJvdGhldXNSZXNwb25zZSwgc3Vic2NyaWJlciB9KSA9PiB7XHJcbiAgICAgICAgaWYgKHN1YnNjcmliZXIpIHtcclxuICAgICAgICAgIGlmIChwcm90aGV1c1Jlc3BvbnNlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0JyYW5kIGNvbnRleHQgbm90IGZvdW5kJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm90aGV1c1Jlc3BvbnNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBzZW5kSW5mbzoge1xyXG4gICAgICAgICAgdHlwZTogdGhpcy5FVkVOVF9HRVRfQlJBTkRDT05URVhUXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdXRvRGVzdHJ1Y3Q6IHRydWUsXHJcbiAgICAgICAgcmVjZWl2ZUlkOiB0aGlzLkVWRU5UX1NFVF9CUkFORENPTlRFWFRcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWR2cGxOb3RQcmVwYXJlZDxUPigpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVyID0+IHtcclxuICAgICAgc3Vic2NyaWJlci5lcnJvcih7XHJcbiAgICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdhZHZwbFNlcnZpY2Ugbm90IHByZXBhcmVkIGluIFByb0JyYW5kU2VydmljZSdcclxuICAgICAgfSk7XHJcbiAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNDaGFubmVsSFRUUCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnVzZUhUVFA7XHJcbiAgfVxyXG5cclxuICBzZXRDaGFubmVsQXNIVFRQKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnVzZUhUVFAgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuIl19