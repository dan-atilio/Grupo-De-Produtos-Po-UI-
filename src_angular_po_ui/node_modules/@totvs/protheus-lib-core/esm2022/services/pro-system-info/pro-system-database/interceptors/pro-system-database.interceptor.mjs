import { Injectable } from '@angular/core';
import { ProAppConfigService } from '../../../pro-app-config';
import * as i0 from "@angular/core";
const CACHE_KEY = 'ProDatabase';
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header o database.
 */
export class ProSystemDatabaseInterceptor {
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @description Intercept http para tratamento do database do Protheus nas requisições
     * @param original_request Requisição http
     * @param next Handler da requisição http
     * @returns Observable da requisição http com o header do database caso o ERP seja Protheus
     */
    intercept(original_request, next) {
        let requestResult = original_request;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (!(original_request.url.search(/assets/) >= 0)) {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                requestResult = this.appendDataBaseToRequest(original_request);
            }
        }
        return next.handle(requestResult);
    }
    /**
     * @description Adiciona o header da database na requisição caso exista
     * @param request Objeto HttpRequest da requisição
     * @returns HttpRequest da requisição com a database ou apenas um cópia
     */
    appendDataBaseToRequest(request) {
        const database = this.getDatabase();
        if (database) {
            return request.clone({
                headers: request.headers.set('x-erp-database', database)
            });
        }
        else {
            return request.clone();
        }
    }
    /**
     * @description Verifica o valor da database no SessionStorage
     * @returns Retorna o valor da database no SessionStorage, podendo não ter valor algum
     */
    getDatabase() {
        return sessionStorage[CACHE_KEY];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemDatabaseInterceptor, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemDatabaseInterceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemDatabaseInterceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXN5c3RlbS1kYXRhYmFzZS5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tc3lzdGVtLWluZm8vcHJvLXN5c3RlbS1kYXRhYmFzZS9pbnRlcmNlcHRvcnMvcHJvLXN5c3RlbS1kYXRhYmFzZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUU5RCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFFaEM7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyw0QkFBNEI7SUFDdkMsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFJLENBQUM7SUFFM0M7Ozs7O09BS0c7SUFDSCxTQUFTLENBQ1AsZ0JBQWtDLEVBQ2xDLElBQWlCO1FBRWpCLElBQUksYUFBYSxHQUFxQixnQkFBZ0IsQ0FBQztRQUV2RCxNQUFNLG1CQUFtQixHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDaEUsbUJBQW1CLENBQ3BCLENBQUM7UUFFRixJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ2pELE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDO1lBRXhELElBQUksVUFBVSxFQUFFO2dCQUNkLGFBQWEsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUNoRTtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssdUJBQXVCLENBQUMsT0FBeUI7UUFDdkQsTUFBTSxRQUFRLEdBQWlCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDbkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQzthQUN6RCxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssV0FBVztRQUNqQixPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDOzhHQXBEVSw0QkFBNEI7a0hBQTVCLDRCQUE0QixjQUYzQixNQUFNOzsyRkFFUCw0QkFBNEI7a0JBSHhDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQcm9BcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcHJvLWFwcC1jb25maWcnO1xyXG5cclxuY29uc3QgQ0FDSEVfS0VZID0gJ1Byb0RhdGFiYXNlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogSW50ZXJjZXB0b3IgcXVlIHBlZ2EgYSByZXF1aXNpw6fDo28gaHRtbCBlIGluc2VyZSBubyBoZWFkZXIgbyBkYXRhYmFzZS5cclxuICovXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9TeXN0ZW1EYXRhYmFzZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBJbnRlcmNlcHQgaHR0cCBwYXJhIHRyYXRhbWVudG8gZG8gZGF0YWJhc2UgZG8gUHJvdGhldXMgbmFzIHJlcXVpc2nDp8O1ZXNcclxuICAgKiBAcGFyYW0gb3JpZ2luYWxfcmVxdWVzdCBSZXF1aXNpw6fDo28gaHR0cFxyXG4gICAqIEBwYXJhbSBuZXh0IEhhbmRsZXIgZGEgcmVxdWlzacOnw6NvIGh0dHBcclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIGRhIHJlcXVpc2nDp8OjbyBodHRwIGNvbSBvIGhlYWRlciBkbyBkYXRhYmFzZSBjYXNvIG8gRVJQIHNlamEgUHJvdGhldXNcclxuICAgKi9cclxuICBpbnRlcmNlcHQoXHJcbiAgICBvcmlnaW5hbF9yZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcclxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBsZXQgcmVxdWVzdFJlc3VsdDogSHR0cFJlcXVlc3Q8YW55PiA9IG9yaWdpbmFsX3JlcXVlc3Q7XHJcblxyXG4gICAgY29uc3QgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxyXG4gICAgICBQcm9BcHBDb25maWdTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGlmICghKG9yaWdpbmFsX3JlcXVlc3QudXJsLnNlYXJjaCgvYXNzZXRzLykgPj0gMCkpIHtcclxuICAgICAgY29uc3QgaXNQcm90aGV1cyA9IHByb0FwcENvbmZpZ1NlcnZpY2UuaXNQcm90aGV1c1JlbmRlcjtcclxuXHJcbiAgICAgIGlmIChpc1Byb3RoZXVzKSB7XHJcbiAgICAgICAgcmVxdWVzdFJlc3VsdCA9IHRoaXMuYXBwZW5kRGF0YUJhc2VUb1JlcXVlc3Qob3JpZ2luYWxfcmVxdWVzdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0UmVzdWx0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBBZGljaW9uYSBvIGhlYWRlciBkYSBkYXRhYmFzZSBuYSByZXF1aXNpw6fDo28gY2FzbyBleGlzdGFcclxuICAgKiBAcGFyYW0gcmVxdWVzdCBPYmpldG8gSHR0cFJlcXVlc3QgZGEgcmVxdWlzacOnw6NvXHJcbiAgICogQHJldHVybnMgSHR0cFJlcXVlc3QgZGEgcmVxdWlzacOnw6NvIGNvbSBhIGRhdGFiYXNlIG91IGFwZW5hcyB1bSBjw7NwaWFcclxuICAgKi9cclxuICBwcml2YXRlIGFwcGVuZERhdGFCYXNlVG9SZXF1ZXN0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcclxuICAgIGNvbnN0IGRhdGFiYXNlOiBzdHJpbmcgfCBhbnkgPSB0aGlzLmdldERhdGFiYXNlKCk7XHJcblxyXG4gICAgaWYgKGRhdGFiYXNlKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMuc2V0KCd4LWVycC1kYXRhYmFzZScsIGRhdGFiYXNlKVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0LmNsb25lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gVmVyaWZpY2EgbyB2YWxvciBkYSBkYXRhYmFzZSBubyBTZXNzaW9uU3RvcmFnZVxyXG4gICAqIEByZXR1cm5zIFJldG9ybmEgbyB2YWxvciBkYSBkYXRhYmFzZSBubyBTZXNzaW9uU3RvcmFnZSwgcG9kZW5kbyBuw6NvIHRlciB2YWxvciBhbGd1bVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RGF0YWJhc2UoKTogc3RyaW5nIHwgdm9pZCB7XHJcbiAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2VbQ0FDSEVfS0VZXTtcclxuICB9XHJcbn1cclxuIl19