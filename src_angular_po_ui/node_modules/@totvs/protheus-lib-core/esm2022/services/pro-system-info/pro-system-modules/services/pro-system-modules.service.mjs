import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../../pro-js-to-advpl";
const CACHE_KEY = 'ProSystemModule';
export class ProSystemModuleService {
    constructor(http, advplService) {
        this.http = http;
        this.advplService = advplService;
        this.url = '/api/framework/v1/systemModules';
        this.useHTTP = true;
        this.EVENT_SET_LIST = 'setModulesList';
        this.EVENT_GET_LIST = 'getModulesList';
        this.EVENT_SET_ONE = 'setModuleInfo';
        this.EVENT_GET_ONE = 'getModuleInfo';
    }
    getListOfSystemModules(description = '', page = 1, _pageSize = 10) {
        const pageSize = 100;
        if (this.useHTTP) {
            return this.getListOfSystemModulesFromApi(description, page, pageSize);
        }
        return this.getListOfSystemModulesFromAdvpl(description, page, pageSize);
    }
    getListOfSystemModulesFromApi(description, page, pageSize) {
        let params = new HttpParams()
            .append('page', page.toString())
            .append('pageSize', pageSize.toString()); // Alterado o tamanho da página para melhorar a experiência do usuário.
        if (description !== '') {
            params = params.append('description', description);
        }
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(this.url, { headers, params });
    }
    getListOfSystemModulesFromAdvpl(description, page, pageSize) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        const stringContent = JSON.stringify({
            description,
            page,
            pageSize,
        });
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `module ${description} could not be found`
                });
            }
            else {
                const modulesData = JSON.parse(protheusResponse);
                subscriber.next(modulesData);
            }
            subscriber.complete();
        }, {
            sendInfo: {
                type: this.EVENT_GET_LIST,
                content: stringContent
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_LIST
        });
    }
    getSystemModule(systemModuleId) {
        if (this.useHTTP) {
            return this.getSystemModuleFromAPI(systemModuleId);
        }
        return this.getSystemModuleFromAdvpl(systemModuleId);
    }
    getSystemModuleFromAPI(systemModuleId) {
        const headers = new HttpHeaders().append('Accept', 'application/json; charset=utf-8');
        return this.http.get(`${this.url}/${systemModuleId}`, {
            headers
        });
    }
    getSystemModuleFromAdvpl(systemModuleId) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `module ${systemModuleId} could not be found`
                });
            }
            else {
                const moduleData = JSON.parse(protheusResponse);
                subscriber.next(moduleData);
            }
            subscriber.complete();
        }, {
            sendInfo: {
                type: this.EVENT_GET_ONE,
                content: systemModuleId
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_ONE
        });
    }
    get systemModule() {
        if (sessionStorage[CACHE_KEY]) {
            return JSON.parse(sessionStorage[CACHE_KEY]);
        }
        else {
            return { id: '', name: '', description: '' };
        }
    }
    set systemModule(systemModule) {
        sessionStorage[CACHE_KEY] = JSON.stringify(systemModule);
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProSystemModuleService'
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModuleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXN5c3RlbS1tb2R1bGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLXN5c3RlbS1pbmZvL3Byby1zeXN0ZW0tbW9kdWxlcy9zZXJ2aWNlcy9wcm8tc3lzdGVtLW1vZHVsZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQUtsQyxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQztBQUlwQyxNQUFNLE9BQU8sc0JBQXNCO0lBU2pDLFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUM7UUFEakMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFWbkMsUUFBRyxHQUFHLGlDQUFpQyxDQUFDO1FBQ3hDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFaEIsbUJBQWMsR0FBRyxnQkFBZ0IsQ0FBQztRQUNsQyxtQkFBYyxHQUFHLGdCQUFnQixDQUFDO1FBQ2xDLGtCQUFhLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLGtCQUFhLEdBQUcsZUFBZSxDQUFDO0lBS25DLENBQUM7SUFFTCxzQkFBc0IsQ0FDcEIsV0FBVyxHQUFHLEVBQUUsRUFDaEIsSUFBSSxHQUFHLENBQUMsRUFDUixTQUFTLEdBQUcsRUFBRTtRQUVkLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN4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O1FBQ3RCLE9BQU8sSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQztnQkFDZixNQUFNLEVBQUUsR0FBRztnQkFDWCxXQUFXLEVBQUUscURBQXFEO2FBQ25FLENBQUMsQ0FBQztZQUNILFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7OEdBOUpVLHNCQUFzQjtrSEFBdEIsc0JBQXNCLGNBRnJCLE1BQU07OzJGQUVQLHNCQUFzQjtrQkFIbEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBQcm9Kc1RvQWR2cGxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcHJvLWpzLXRvLWFkdnBsJztcclxuaW1wb3J0IHsgUHJvU3lzdGVtTW9kdWxlcywgUHJvU3lzdGVtTW9kdWxlc0xpc3QgfSBmcm9tICcuLi9tb2RlbHMvcHJvLXN5c3RlbS1tb2R1bGVzJztcclxuXHJcbmNvbnN0IENBQ0hFX0tFWSA9ICdQcm9TeXN0ZW1Nb2R1bGUnO1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9TeXN0ZW1Nb2R1bGVTZXJ2aWNlIHtcclxuICBwcml2YXRlIHVybCA9ICcvYXBpL2ZyYW1ld29yay92MS9zeXN0ZW1Nb2R1bGVzJztcclxuICBwcml2YXRlIHVzZUhUVFAgPSB0cnVlO1xyXG5cclxuICBwdWJsaWMgRVZFTlRfU0VUX0xJU1QgPSAnc2V0TW9kdWxlc0xpc3QnO1xyXG4gIHB1YmxpYyBFVkVOVF9HRVRfTElTVCA9ICdnZXRNb2R1bGVzTGlzdCc7XHJcbiAgcHVibGljIEVWRU5UX1NFVF9PTkUgPSAnc2V0TW9kdWxlSW5mbyc7XHJcbiAgcHVibGljIEVWRU5UX0dFVF9PTkUgPSAnZ2V0TW9kdWxlSW5mbyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSBhZHZwbFNlcnZpY2U6IFByb0pzVG9BZHZwbFNlcnZpY2VcclxuICApIHsgfVxyXG5cclxuICBnZXRMaXN0T2ZTeXN0ZW1Nb2R1bGVzKFxyXG4gICAgZGVzY3JpcHRpb24gPSAnJyxcclxuICAgIHBhZ2UgPSAxLFxyXG4gICAgX3BhZ2VTaXplID0gMTBcclxuICApOiBPYnNlcnZhYmxlPFByb1N5c3RlbU1vZHVsZXNMaXN0PiB7XHJcbiAgICBjb25zdCBwYWdlU2l6ZSA9IDEwMDtcclxuICAgIGlmICh0aGlzLnVzZUhUVFApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0TGlzdE9mU3lzdGVtTW9kdWxlc0Zyb21BcGkoZGVzY3JpcHRpb24sIHBhZ2UsIHBhZ2VTaXplKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmdldExpc3RPZlN5c3RlbU1vZHVsZXNGcm9tQWR2cGwoZGVzY3JpcHRpb24sIHBhZ2UsIHBhZ2VTaXplKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TGlzdE9mU3lzdGVtTW9kdWxlc0Zyb21BcGkoXHJcbiAgICBkZXNjcmlwdGlvbixcclxuICAgIHBhZ2UsXHJcbiAgICBwYWdlU2l6ZVxyXG4gICk6IE9ic2VydmFibGU8UHJvU3lzdGVtTW9kdWxlc0xpc3Q+IHtcclxuICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpXHJcbiAgICAgIC5hcHBlbmQoJ3BhZ2UnLCBwYWdlLnRvU3RyaW5nKCkpXHJcbiAgICAgIC5hcHBlbmQoJ3BhZ2VTaXplJywgcGFnZVNpemUudG9TdHJpbmcoKSk7IC8vIEFsdGVyYWRvIG8gdGFtYW5obyBkYSBww6FnaW5hIHBhcmEgbWVsaG9yYXIgYSBleHBlcmnDqm5jaWEgZG8gdXN1w6FyaW8uXHJcblxyXG4gICAgaWYgKGRlc2NyaXB0aW9uICE9PSAnJykge1xyXG4gICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5hcHBlbmQoXHJcbiAgICAgICdBY2NlcHQnLFxyXG4gICAgICAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCdcclxuICAgICk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQcm9TeXN0ZW1Nb2R1bGVzTGlzdD4odGhpcy51cmwsIHsgaGVhZGVycywgcGFyYW1zIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRMaXN0T2ZTeXN0ZW1Nb2R1bGVzRnJvbUFkdnBsKFxyXG4gICAgZGVzY3JpcHRpb24sXHJcbiAgICBwYWdlLFxyXG4gICAgcGFnZVNpemVcclxuICApOiBPYnNlcnZhYmxlPFByb1N5c3RlbU1vZHVsZXNMaXN0PiB7XHJcbiAgICBpZiAoIXRoaXMuYWR2cGxTZXJ2aWNlLnByb3RoZXVzQ29ubmVjdGVkKCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYWR2cGxOb3RQcmVwYXJlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0cmluZ0NvbnRlbnQgPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICBwYWdlLFxyXG4gICAgICBwYWdlU2l6ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGU8UHJvU3lzdGVtTW9kdWxlc0xpc3Q+KFxyXG4gICAgICAoeyBwcm90aGV1c1Jlc3BvbnNlLCBzdWJzY3JpYmVyIH0pID0+IHtcclxuICAgICAgICBpZiAocHJvdGhldXNSZXNwb25zZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioe1xyXG4gICAgICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBtb2R1bGUgJHtkZXNjcmlwdGlvbn0gY291bGQgbm90IGJlIGZvdW5kYFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IG1vZHVsZXNEYXRhOiBQcm9TeXN0ZW1Nb2R1bGVzTGlzdCA9IEpTT04ucGFyc2UocHJvdGhldXNSZXNwb25zZSk7XHJcbiAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobW9kdWxlc0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBzZW5kSW5mbzoge1xyXG4gICAgICAgICAgdHlwZTogdGhpcy5FVkVOVF9HRVRfTElTVCxcclxuICAgICAgICAgIGNvbnRlbnQ6IHN0cmluZ0NvbnRlbnRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF1dG9EZXN0cnVjdDogdHJ1ZSxcclxuICAgICAgICByZWNlaXZlSWQ6IHRoaXMuRVZFTlRfU0VUX0xJU1RcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdldFN5c3RlbU1vZHVsZShzeXN0ZW1Nb2R1bGVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9TeXN0ZW1Nb2R1bGVzPiB7XHJcbiAgICBpZiAodGhpcy51c2VIVFRQKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFN5c3RlbU1vZHVsZUZyb21BUEkoc3lzdGVtTW9kdWxlSWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0U3lzdGVtTW9kdWxlRnJvbUFkdnBsKHN5c3RlbU1vZHVsZUlkKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0U3lzdGVtTW9kdWxlRnJvbUFQSShzeXN0ZW1Nb2R1bGVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9TeXN0ZW1Nb2R1bGVzPiB7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKFxyXG4gICAgICAnQWNjZXB0JyxcclxuICAgICAgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UHJvU3lzdGVtTW9kdWxlcz4oYCR7dGhpcy51cmx9LyR7c3lzdGVtTW9kdWxlSWR9YCwge1xyXG4gICAgICBoZWFkZXJzXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0U3lzdGVtTW9kdWxlRnJvbUFkdnBsKHN5c3RlbU1vZHVsZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb1N5c3RlbU1vZHVsZXM+IHtcclxuICAgIGlmICghdGhpcy5hZHZwbFNlcnZpY2UucHJvdGhldXNDb25uZWN0ZWQoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hZHZwbE5vdFByZXBhcmVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuYWR2cGxTZXJ2aWNlLmJ1aWxkT2JzZXJ2YWJsZTxQcm9TeXN0ZW1Nb2R1bGVzPihcclxuICAgICAgKHsgcHJvdGhldXNSZXNwb25zZSwgc3Vic2NyaWJlciB9KSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3RoZXVzUmVzcG9uc2UubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgbW9kdWxlICR7c3lzdGVtTW9kdWxlSWR9IGNvdWxkIG5vdCBiZSBmb3VuZGBcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBtb2R1bGVEYXRhOiBQcm9TeXN0ZW1Nb2R1bGVzID0gSlNPTi5wYXJzZShwcm90aGV1c1Jlc3BvbnNlKTtcclxuICAgICAgICAgIHN1YnNjcmliZXIubmV4dChtb2R1bGVEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgc2VuZEluZm86IHtcclxuICAgICAgICAgIHR5cGU6IHRoaXMuRVZFTlRfR0VUX09ORSxcclxuICAgICAgICAgIGNvbnRlbnQ6IHN5c3RlbU1vZHVsZUlkXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdXRvRGVzdHJ1Y3Q6IHRydWUsXHJcbiAgICAgICAgcmVjZWl2ZUlkOiB0aGlzLkVWRU5UX1NFVF9PTkVcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdldCBzeXN0ZW1Nb2R1bGUoKTogUHJvU3lzdGVtTW9kdWxlcyB7XHJcbiAgICBpZiAoc2Vzc2lvblN0b3JhZ2VbQ0FDSEVfS0VZXSkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZVtDQUNIRV9LRVldKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7IGlkOiAnJywgbmFtZTogJycsIGRlc2NyaXB0aW9uOiAnJyB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHN5c3RlbU1vZHVsZShzeXN0ZW1Nb2R1bGU6IFByb1N5c3RlbU1vZHVsZXMpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV0gPSBKU09OLnN0cmluZ2lmeShzeXN0ZW1Nb2R1bGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZHZwbE5vdFByZXBhcmVkPFQ+KCk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ2FkdnBsU2VydmljZSBub3QgcHJlcGFyZWQgaW4gUHJvU3lzdGVtTW9kdWxlU2VydmljZSdcclxuICAgICAgfSk7XHJcbiAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNDaGFubmVsSFRUUCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnVzZUhUVFA7XHJcbiAgfVxyXG5cclxuICBzZXRDaGFubmVsQXNIVFRQKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnVzZUhUVFAgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuIl19