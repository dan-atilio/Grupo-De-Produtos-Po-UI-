import { Injectable } from '@angular/core';
import { ProAppConfigService } from '../../../pro-app-config';
import * as i0 from "@angular/core";
const CACHE_KEY = 'ProModule';
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header o módulo.
 */
export class ProSystemModulesInteceptor {
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @description Intercept http para tratamento do módulo do Protheus nas requisições
     * @param original_request Requisição http
     * @param next Handler da requisição http
     * @returns Observable da requisição http com o header do módulo caso o ERP seja Protheus
     */
    intercept(original_request, next) {
        let requestResult = original_request;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (!(original_request.url.search(/assets/) >= 0)) {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                requestResult = this.appendModuleToRequest(original_request);
            }
        }
        return next.handle(requestResult);
    }
    appendModuleToRequest(request) {
        const module = this.getModule();
        if (module) {
            return request.clone({
                headers: request.headers.set('x-erp-module', module)
            });
        }
        else {
            return request.clone();
        }
    }
    getModule() {
        return sessionStorage[CACHE_KEY];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModulesInteceptor, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModulesInteceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemModulesInteceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXN5c3RlbS1tb2R1bGVzLmludGVjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLXN5c3RlbS1pbmZvL3Byby1zeXN0ZW0tbW9kdWxlcy9pbnRlcmNlcHRvcnMvcHJvLXN5c3RlbS1tb2R1bGVzLmludGVjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFFOUQsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBRTlCOzs7O0dBSUc7QUFLSCxNQUFNLE9BQU8sMEJBQTBCO0lBQ3JDLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBSSxDQUFDO0lBRTNDOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUNQLGdCQUFrQyxFQUNsQyxJQUFpQjtRQUVqQixJQUFJLGFBQWEsR0FBcUIsZ0JBQWdCLENBQUM7UUFFdkQsTUFBTSxtQkFBbUIsR0FBd0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2hFLG1CQUFtQixDQUNwQixDQUFDO1FBRUYsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNqRCxNQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQztZQUV4RCxJQUFJLFVBQVUsRUFBRTtnQkFDZCxhQUFhLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDOUQ7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU8scUJBQXFCLENBQUMsT0FBeUI7UUFDckQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWhDLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUNuQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQzthQUNyRCxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRU8sU0FBUztRQUNmLE9BQU8sY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7OEdBM0NVLDBCQUEwQjtrSEFBMUIsMEJBQTBCLGNBRnpCLE1BQU07OzJGQUVQLDBCQUEwQjtrQkFIdEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFByb0FwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9wcm8tYXBwLWNvbmZpZyc7XHJcblxyXG5jb25zdCBDQUNIRV9LRVkgPSAnUHJvTW9kdWxlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogSW50ZXJjZXB0b3IgcXVlIHBlZ2EgYSByZXF1aXNpw6fDo28gaHRtbCBlIGluc2VyZSBubyBoZWFkZXIgbyBtw7NkdWxvLlxyXG4gKi9cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb1N5c3RlbU1vZHVsZXNJbnRlY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBJbnRlcmNlcHQgaHR0cCBwYXJhIHRyYXRhbWVudG8gZG8gbcOzZHVsbyBkbyBQcm90aGV1cyBuYXMgcmVxdWlzacOnw7Vlc1xyXG4gICAqIEBwYXJhbSBvcmlnaW5hbF9yZXF1ZXN0IFJlcXVpc2nDp8OjbyBodHRwXHJcbiAgICogQHBhcmFtIG5leHQgSGFuZGxlciBkYSByZXF1aXNpw6fDo28gaHR0cFxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgZGEgcmVxdWlzacOnw6NvIGh0dHAgY29tIG8gaGVhZGVyIGRvIG3Ds2R1bG8gY2FzbyBvIEVSUCBzZWphIFByb3RoZXVzXHJcbiAgICovXHJcbiAgaW50ZXJjZXB0KFxyXG4gICAgb3JpZ2luYWxfcmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PixcclxuICAgIG5leHQ6IEh0dHBIYW5kbGVyXHJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgbGV0IHJlcXVlc3RSZXN1bHQ6IEh0dHBSZXF1ZXN0PGFueT4gPSBvcmlnaW5hbF9yZXF1ZXN0O1xyXG5cclxuICAgIGNvbnN0IHByb0FwcENvbmZpZ1NlcnZpY2U6IFByb0FwcENvbmZpZ1NlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChcclxuICAgICAgUHJvQXBwQ29uZmlnU2VydmljZVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIShvcmlnaW5hbF9yZXF1ZXN0LnVybC5zZWFyY2goL2Fzc2V0cy8pID49IDApKSB7XHJcbiAgICAgIGNvbnN0IGlzUHJvdGhldXMgPSBwcm9BcHBDb25maWdTZXJ2aWNlLmlzUHJvdGhldXNSZW5kZXI7XHJcblxyXG4gICAgICBpZiAoaXNQcm90aGV1cykge1xyXG4gICAgICAgIHJlcXVlc3RSZXN1bHQgPSB0aGlzLmFwcGVuZE1vZHVsZVRvUmVxdWVzdChvcmlnaW5hbF9yZXF1ZXN0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3RSZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhcHBlbmRNb2R1bGVUb1JlcXVlc3QocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXF1ZXN0PGFueT4ge1xyXG4gICAgY29uc3QgbW9kdWxlID0gdGhpcy5nZXRNb2R1bGUoKTtcclxuXHJcbiAgICBpZiAobW9kdWxlKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMuc2V0KCd4LWVycC1tb2R1bGUnLCBtb2R1bGUpXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TW9kdWxlKCk6IHN0cmluZyB8IHZvaWQge1xyXG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV07XHJcbiAgfVxyXG59XHJcbiJdfQ==