import { HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { valueIsNull } from '../../../util';
import { ProAppConfigService } from '../../pro-app-config';
import { ProAuthService } from '../services/pro-auth/pro-auth.service';
import * as i0 from "@angular/core";
import * as i1 from "./../../pro-js-to-advpl/services/pro-js-to-advpl.service";
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header o token.
 */
export class ProAuthInteceptor {
    constructor(injector, advplService) {
        this.injector = injector;
        this.advplService = advplService;
    }
    intercept(original_request, next) {
        let requestResult;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (this.isUrlNeedsProAuth(original_request.url)) {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                if (this.doIHaveAToken()) {
                    requestResult = this.appendTokenToRequest(original_request);
                }
                else {
                    requestResult = this.callTokenFromADVPL(original_request);
                }
            }
            else {
                return next.handle(original_request);
            }
        }
        else {
            requestResult = original_request.clone();
        }
        return next.handle(requestResult).pipe(catchError((error, caught) => {
            if (!this.isAuthError(error)) {
                throw error;
            }
            if (this.isUrlNeedsProAuth(original_request.url) &&
                this.doIHaveAToken()) {
                return from(this.appendTokenOnError(original_request, next));
            }
            else {
                return next.handle(original_request.clone());
            }
        }));
    }
    isAuthError(error) {
        return error instanceof HttpErrorResponse && error.status === 401;
    }
    doIHaveAToken() {
        const proAuthService = this.injector.get(ProAuthService);
        const token = proAuthService.token;
        return !valueIsNull(token);
    }
    callTokenFromADVPL(request) {
        this.advplService.jsToAdvpl('internalToken', '');
        return request.clone();
    }
    appendTokenToRequest(request) {
        const proAuthService = this.injector.get(ProAuthService);
        if (!proAuthService.isTokenValid()) {
            proAuthService.updateToken();
        }
        return this.cloneAuthRequest(request, proAuthService.token);
    }
    async appendTokenOnError(request, next) {
        const proAuthService = this.injector.get(ProAuthService);
        if (!proAuthService.isTokenValid()) {
            await proAuthService.updateToken();
        }
        return next.handle(this.cloneAuthRequest(request, proAuthService.token)).toPromise();
    }
    cloneAuthRequest(request, token) {
        return request.clone({
            headers: request.headers.set('Authorization', `Bearer ${token.access_token}`)
        });
    }
    isUrlNeedsProAuth(url) {
        let needProAuth = true;
        const whiteList = [/token/, /assets/];
        for (const whiteUrl of whiteList) {
            if (url.search(whiteUrl) >= 0) {
                needProAuth = false;
                break;
            }
        }
        return needProAuth;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthInteceptor, deps: [{ token: i0.Injector }, { token: i1.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthInteceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthInteceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }, { type: i1.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,