import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ProUserAccessService {
    constructor(http) {
        this.http = http;
        this.URL_ALIAS = '/api/framework/v1/accessPrivilegesServices/aliasAccess/';
        this.URL_FUNCTION = '/api/framework/v1/accessPrivilegesServices/functionAccess/';
    }
    /**
     * efetua um get na api referente a função MpUserHasAccess do protheus
     * a api utiliza o usuário logado para efetuar a busca
     * @param cRotina Nome da rotina a ser pesquisada
     * @param nOpc parametro opcional, numero da rotina no menudef a ser pesquisada
     * caso não seja passada a pesquisa será com base apenas na função
     * @returns Observable com o retorno da api
     */
    userHasAccess(cRotina, nOpc = 0) {
        if (nOpc) {
            return this.http.get(`${this.URL_FUNCTION}${cRotina}/${nOpc}`);
        }
        else {
            return this.http.get(`${this.URL_FUNCTION}${cRotina}`);
        }
    }
    /**
     * efetua um get na api referente a função FWChkTblAccess do protheus
     * a api utiliza o usuário logado para efetuar a busca
     * @param cTabela Tabela a ser pesquisada
     * @param nOpc parametro opcional, numero da rotina no menudef a ser pesquisada
     * caso não seja passada a pesquisa será com base apenas na função
     * @returns Observable com o retorno da api
     */
    aliasHasAccess(cTabela, nOpc = 0) {
        if (nOpc) {
            return this.http.get(`${this.URL_ALIAS}${cTabela}/${nOpc}`);
        }
        else {
            return this.http.get(`${this.URL_ALIAS}${cTabela}`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserAccessService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserAccessService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserAccessService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXVzZXItYWNjZXNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLWF1dGhvcml6YXRpb24vc2VydmljZXMvcHJvLXVzZXItaW5mby9zZXJ2aWNlcy9wcm8tdXNlci1hY2Nlc3MvcHJvLXVzZXItYWNjZXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBUTNDLE1BQU0sT0FBTyxvQkFBb0I7SUFLL0IsWUFDVSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBSlQsY0FBUyxHQUFXLHlEQUF5RCxDQUFDO1FBQzlFLGlCQUFZLEdBQVcsNERBQTRELENBQUM7SUFJakcsQ0FBQztJQUVMOzs7Ozs7O09BT0c7SUFDSSxhQUFhLENBQUMsT0FBZSxFQUFFLE9BQWUsQ0FBQztRQUNwRCxJQUFJLElBQUksRUFBQztZQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXlCLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN4RjthQUFLO1lBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBeUIsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sRUFBRSxDQUFFLENBQUM7U0FDakY7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLGNBQWMsQ0FBQyxPQUFlLEVBQUUsT0FBZSxDQUFDO1FBQ3JELElBQUksSUFBSSxFQUFDO1lBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBeUIsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3JGO2FBQUs7WUFDSixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUM3RTtJQUNILENBQUM7OEdBdkNVLG9CQUFvQjtrSEFBcEIsb0JBQW9CLGNBRm5CLE1BQU07OzJGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFByb1VzZXJBY2Nlc3NJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2VzL3Byby11c2VyLWFjY2Vzcy9wcm8tdXNlci1hY2Nlc3MuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb1VzZXJBY2Nlc3NTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBVUkxfQUxJQVM6IHN0cmluZyA9ICcvYXBpL2ZyYW1ld29yay92MS9hY2Nlc3NQcml2aWxlZ2VzU2VydmljZXMvYWxpYXNBY2Nlc3MvJztcclxuICBwcml2YXRlIHJlYWRvbmx5IFVSTF9GVU5DVElPTjogc3RyaW5nID0gJy9hcGkvZnJhbWV3b3JrL3YxL2FjY2Vzc1ByaXZpbGVnZXNTZXJ2aWNlcy9mdW5jdGlvbkFjY2Vzcy8nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudFxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGVmZXR1YSB1bSBnZXQgbmEgYXBpIHJlZmVyZW50ZSBhIGZ1bsOnw6NvIE1wVXNlckhhc0FjY2VzcyBkbyBwcm90aGV1c1xyXG4gICAqIGEgYXBpIHV0aWxpemEgbyB1c3XDoXJpbyBsb2dhZG8gcGFyYSBlZmV0dWFyIGEgYnVzY2FcclxuICAgKiBAcGFyYW0gY1JvdGluYSBOb21lIGRhIHJvdGluYSBhIHNlciBwZXNxdWlzYWRhXHJcbiAgICogQHBhcmFtIG5PcGMgcGFyYW1ldHJvIG9wY2lvbmFsLCBudW1lcm8gZGEgcm90aW5hIG5vIG1lbnVkZWYgYSBzZXIgcGVzcXVpc2FkYVxyXG4gICAqIGNhc28gbsOjbyBzZWphIHBhc3NhZGEgYSBwZXNxdWlzYSBzZXLDoSBjb20gYmFzZSBhcGVuYXMgbmEgZnVuw6fDo29cclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIGNvbSBvIHJldG9ybm8gZGEgYXBpXHJcbiAgICovXHJcbiAgcHVibGljIHVzZXJIYXNBY2Nlc3MoY1JvdGluYTogc3RyaW5nLCBuT3BjOiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxQcm9Vc2VyQWNjZXNzSW50ZXJmYWNlPiB7XHJcbiAgICBpZiAobk9wYyl7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb1VzZXJBY2Nlc3NJbnRlcmZhY2U+KGAke3RoaXMuVVJMX0ZVTkNUSU9OfSR7Y1JvdGluYX0vJHtuT3BjfWApO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQcm9Vc2VyQWNjZXNzSW50ZXJmYWNlPihgJHt0aGlzLlVSTF9GVU5DVElPTn0ke2NSb3RpbmF9YCApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZWZldHVhIHVtIGdldCBuYSBhcGkgcmVmZXJlbnRlIGEgZnVuw6fDo28gRldDaGtUYmxBY2Nlc3MgZG8gcHJvdGhldXNcclxuICAgKiBhIGFwaSB1dGlsaXphIG8gdXN1w6FyaW8gbG9nYWRvIHBhcmEgZWZldHVhciBhIGJ1c2NhXHJcbiAgICogQHBhcmFtIGNUYWJlbGEgVGFiZWxhIGEgc2VyIHBlc3F1aXNhZGFcclxuICAgKiBAcGFyYW0gbk9wYyBwYXJhbWV0cm8gb3BjaW9uYWwsIG51bWVybyBkYSByb3RpbmEgbm8gbWVudWRlZiBhIHNlciBwZXNxdWlzYWRhXHJcbiAgICogY2FzbyBuw6NvIHNlamEgcGFzc2FkYSBhIHBlc3F1aXNhIHNlcsOhIGNvbSBiYXNlIGFwZW5hcyBuYSBmdW7Dp8Ojb1xyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgY29tIG8gcmV0b3JubyBkYSBhcGlcclxuICAgKi9cclxuICBwdWJsaWMgYWxpYXNIYXNBY2Nlc3MoY1RhYmVsYTogc3RyaW5nLCBuT3BjOiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxQcm9Vc2VyQWNjZXNzSW50ZXJmYWNlPiB7XHJcbiAgICBpZiAobk9wYyl7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb1VzZXJBY2Nlc3NJbnRlcmZhY2U+KGAke3RoaXMuVVJMX0FMSUFTfSR7Y1RhYmVsYX0vJHtuT3BjfWApO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQcm9Vc2VyQWNjZXNzSW50ZXJmYWNlPihgJHt0aGlzLlVSTF9BTElBU30ke2NUYWJlbGF9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==