import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { environment } from '../../../../environments/environment';
import { valueIsNull } from '../../../../util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../pro-user-info/pro-user-info.service";
import * as i3 from "../../../pro-js-to-advpl/services/pro-js-to-advpl.service";
const CACHE_KEY_TOKEN = 'ERPTOKEN';
const TOKEN_ENDPOINT = '/api/oauth2/v1/token';
export class ProAuthService {
    constructor(http, proUserInfoService, advplService) {
        this.http = http;
        this.proUserInfoService = proUserInfoService;
        this.advplService = advplService;
        this.proUserInfoService.setChannelAsHTTP(environment.useHTTP);
    }
    requestLoginDefaults() {
        if (!valueIsNull(this.advplService.getWebChannel())) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse.length === 0) {
                    subscriber.next({
                        username: '',
                        username_when: true,
                        password: '',
                        remember_user: false,
                        show_remember_user: false
                    });
                }
                else {
                    const startKeys = JSON.parse(protheusResponse);
                    subscriber.next(startKeys);
                }
                subscriber.complete();
            }, {
                sendInfo: {
                    type: 'getLoginStart'
                },
                autoDestruct: true
            });
        }
        else {
            return new Observable(subscriber => {
                subscriber.next({
                    username: '',
                    username_when: true,
                    password: '',
                    remember_user: false,
                    show_remember_user: false
                });
                subscriber.complete();
            });
        }
    }
    requestToken(user) {
        if (this.advplService.protheusConnected()) {
            return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
                if (protheusResponse.length === 0) {
                    subscriber.error({ status: 401 });
                }
                else {
                    const tokenInside = JSON.parse(protheusResponse);
                    subscriber.next(tokenInside);
                }
                subscriber.complete();
            }, {
                sendInfo: {
                    type: 'loginInside',
                    content: btoa(JSON.stringify({ "usr": user.username, "psw": user.password, "remember": user.remember_user }))
                },
                autoDestruct: true,
                receiveId: 'setToken'
            });
        }
        else {
            const headers = new HttpHeaders()
                .append('X-Totvs-No-Error', 'true')
                .set('grant_type', 'password')
                .set('username', user.username)
                .set('password', user.password);
            return this.http.post(TOKEN_ENDPOINT, {}, { headers });
        }
    }
    refreshToken(refresh_token) {
        const params = new HttpParams()
            .set('grant_type', 'refresh_token')
            .set('refresh_token', refresh_token);
        return this.http.post(TOKEN_ENDPOINT, {}, { params });
    }
    login(user) {
        const loginSubject = new Subject();
        this.requestToken(user).subscribe({
            next: (token) => {
                const userId = this.getTokenPayload(token.access_token).userid;
                this.saveToken(token);
                this.saveUserInfo(userId);
                loginSubject.next(token);
            },
            error: (error) => {
                loginSubject.error(error);
            }
        });
        return loginSubject.asObservable();
    }
    passwordRecovery(user) {
        this.advplService.jsToAdvpl('openPasswordRecovery', user);
    }
    saveToken(token) {
        sessionStorage[CACHE_KEY_TOKEN] = JSON.stringify(token);
    }
    saveUserInfo(userId) {
        this.proUserInfoService.get(userId).subscribe((userInfo) => {
            this._ProUserInfo = userInfo;
        });
    }
    isTokenValid(now = Date.now()) {
        const date_now = Math.round(now / 1000.0);
        const payload = this.getTokenPayload(this.token.access_token);
        // Faltando 10% do tempo de expiração já peço a renovação
        return payload.exp - date_now > this.token.expires_in / 10;
    }
    async updateToken() {
        const token = await this.refreshToken(this.token.refresh_token).toPromise();
        this.saveToken(token);
        this._token = token;
    }
    get userInfo() {
        return this._ProUserInfo;
    }
    get token() {
        const token_string = sessionStorage[CACHE_KEY_TOKEN];
        if (token_string) {
            this._token = JSON.parse(token_string);
        }
        return this._token;
    }
    get isUserAuthenticate() {
        return !valueIsNull(this.token) && !valueIsNull(this.token.access_token);
    }
    logout() {
        sessionStorage.removeItem(CACHE_KEY_TOKEN);
        this.proUserInfoService.removeFromStorage();
    }
    getTokenPayload(token = this.token.access_token) {
        return JSON.parse(atob(token.split('.')[1]));
    }
    get userId() {
        return this.getTokenPayload().userid;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthService, deps: [{ token: i1.HttpClient }, { token: i2.ProUserInfoService }, { token: i3.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProUserInfoService }, { type: i3.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,