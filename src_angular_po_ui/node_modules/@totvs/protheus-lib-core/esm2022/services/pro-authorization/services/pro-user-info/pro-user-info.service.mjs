import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../../pro-js-to-advpl";
const CACHE_KEY_USER = 'ProUser';
const USER_ENDPOINT = '/api/framework/v1/users';
/**
 * Essa classe corresponde ao serviço de busca de informações do usuário
 */
export class ProUserInfoService {
    constructor(http, advplService) {
        this.http = http;
        this.advplService = advplService;
        this.useHTTP = true;
        this.EVENT_GET_ID = 'getUserInfo';
        this.EVENT_SET_ID = 'setUserInfo';
        this.URL_PSWRET = '/api/framework/v1/basicProtheusServices/pswret/';
    }
    /**
     * @description Retorna informações do usuário
     * @param userId string, id do usuário
     * @param isUseHttp boolean, indica se utiliza requisição http
     * @returns Observable de ProUserInfo, dados do usuário
     */
    get(userId, isUseHttp = false) {
        if (this.useHTTP || isUseHttp) {
            return this.getFromApi(userId);
        }
        return this.getFromAdvpl(userId);
    }
    getFromApi(userId) {
        const headers = new HttpHeaders()
            .append('X-Totvs-No-Error', 'true')
            .append('Accept', 'application/json; charset=utf-8');
        return this.http.get(`${USER_ENDPOINT}/${userId}`, { headers }).pipe(map((userInfo) => {
            userInfo.complete_name = userInfo.userName;
            return userInfo;
        }), tap((userInfo) => {
            sessionStorage[CACHE_KEY_USER] = JSON.stringify(userInfo);
        }));
    }
    getFromAdvpl(userId) {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        const randomEventId = this.advplService.generateEventId();
        const observableParams = {
            sendInfo: {
                type: `${this.EVENT_GET_ID}#id#${randomEventId}`,
                content: userId
            },
            autoDestruct: true,
            receiveId: `${this.EVENT_SET_ID}#id#${randomEventId}`
        };
        const observableCallback = ({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: `user ${userId} could not be found`
                });
            }
            else {
                const userInfo = JSON.parse(protheusResponse);
                userInfo.complete_name = userInfo.userName;
                sessionStorage[CACHE_KEY_USER] = JSON.stringify(protheusResponse);
                subscriber.next(userInfo);
            }
            subscriber.complete();
        };
        return this.advplService.buildObservable(observableCallback, observableParams);
    }
    removeFromStorage() {
        sessionStorage.removeItem(CACHE_KEY_USER);
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProUserInfoService'
                /**
                 * Esse erro está sendo emitido ao utilizar o app com a otimização ligada e a opção de SSO.
                 * O que foi percebido é que em determinada situação a conexão AdvPL
                 * não fica disponível quando o serviço é solicitado. Foram feitos testes adicionando
                 * múltiplas tentativas mas sem sucesso. Utilizando a opção de canal HTTP funciona corretamente,
                 * porém interfere na criação de dicionários do lado AdvPL, o que torna a opção inviável.
                 */
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    /**
     * efetua um get na api referente a função PswRet do protheus
     * a api utiliza o usuário logado para efetuar a busca
     * @returns Observable com o retorno da api
     */
    pswRet() {
        return this.http.get(this.URL_PSWRET);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserInfoService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserInfoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserInfoService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXVzZXItaW5mby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJvdGhldXMtbGliLWNvcmUvc3JjL3NlcnZpY2VzL3Byby1hdXRob3JpemF0aW9uL3NlcnZpY2VzL3Byby11c2VyLWluZm8vcHJvLXVzZXItaW5mby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU0xQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDakMsTUFBTSxhQUFhLEdBQUcseUJBQXlCLENBQUM7QUFDaEQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBTzdCLFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUM7UUFEakMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFSbkMsWUFBTyxHQUFHLElBQUksQ0FBQztRQUVQLGlCQUFZLEdBQUcsYUFBYSxDQUFDO1FBQzdCLGlCQUFZLEdBQUcsYUFBYSxDQUFDO1FBQzVCLGVBQVUsR0FBVyxpREFBaUQsQ0FBQztJQUtwRixDQUFDO0lBRUw7Ozs7O09BS0c7SUFDSCxHQUFHLENBQUMsTUFBYyxFQUFFLFlBQXFCLEtBQUs7UUFDNUMsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEM7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMs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QUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQzs4R0FuSFUsa0JBQWtCO2tIQUFsQixrQkFBa0IsY0FGakIsTUFBTTs7MkZBRVAsa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBQcm9Vc2VyUHN3cmV0SW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9wcm8tdXNlci1wc3dyZXQvcHJvLXVzZXItcHN3cmV0LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFByb0pzVG9BZHZwbFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9wcm8tanMtdG8tYWR2cGwnO1xyXG5pbXBvcnQgeyBQcm9Vc2VySW5mbyB9IGZyb20gJy4uLy4uL21vZGVscy9wcm8tdXNlci1pbmZvJztcclxuXHJcbmNvbnN0IENBQ0hFX0tFWV9VU0VSID0gJ1Byb1VzZXInO1xyXG5jb25zdCBVU0VSX0VORFBPSU5UID0gJy9hcGkvZnJhbWV3b3JrL3YxL3VzZXJzJztcclxuLyoqXHJcbiAqIEVzc2EgY2xhc3NlIGNvcnJlc3BvbmRlIGFvIHNlcnZpw6dvIGRlIGJ1c2NhIGRlIGluZm9ybWHDp8O1ZXMgZG8gdXN1w6FyaW9cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb1VzZXJJbmZvU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB1c2VIVFRQID0gdHJ1ZTtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IEVWRU5UX0dFVF9JRCA9ICdnZXRVc2VySW5mbyc7XHJcbiAgcHVibGljIHJlYWRvbmx5IEVWRU5UX1NFVF9JRCA9ICdzZXRVc2VySW5mbyc7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBVUkxfUFNXUkVUOiBzdHJpbmcgPSAnL2FwaS9mcmFtZXdvcmsvdjEvYmFzaWNQcm90aGV1c1NlcnZpY2VzL3Bzd3JldC8nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgYWR2cGxTZXJ2aWNlOiBQcm9Kc1RvQWR2cGxTZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldG9ybmEgaW5mb3JtYcOnw7VlcyBkbyB1c3XDoXJpb1xyXG4gICAqIEBwYXJhbSB1c2VySWQgc3RyaW5nLCBpZCBkbyB1c3XDoXJpb1xyXG4gICAqIEBwYXJhbSBpc1VzZUh0dHAgYm9vbGVhbiwgaW5kaWNhIHNlIHV0aWxpemEgcmVxdWlzacOnw6NvIGh0dHBcclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIGRlIFByb1VzZXJJbmZvLCBkYWRvcyBkbyB1c3XDoXJpb1xyXG4gICAqL1xyXG4gIGdldCh1c2VySWQ6IHN0cmluZywgaXNVc2VIdHRwOiBib29sZWFuID0gZmFsc2UpOiBPYnNlcnZhYmxlPFByb1VzZXJJbmZvPiB7XHJcbiAgICBpZiAodGhpcy51c2VIVFRQIHx8IGlzVXNlSHR0cCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRGcm9tQXBpKHVzZXJJZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGcm9tQWR2cGwodXNlcklkKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RnJvbUFwaSh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvVXNlckluZm8+IHtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKVxyXG4gICAgICAuYXBwZW5kKCdYLVRvdHZzLU5vLUVycm9yJywgJ3RydWUnKVxyXG4gICAgICAuYXBwZW5kKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7VVNFUl9FTkRQT0lOVH0vJHt1c2VySWR9YCwgeyBoZWFkZXJzIH0pLnBpcGUoXHJcbiAgICAgIG1hcCgodXNlckluZm86IFByb1VzZXJJbmZvKSA9PiB7XHJcbiAgICAgICAgdXNlckluZm8uY29tcGxldGVfbmFtZSA9IHVzZXJJbmZvLnVzZXJOYW1lO1xyXG4gICAgICAgIHJldHVybiB1c2VySW5mbztcclxuICAgICAgfSksXHJcblxyXG4gICAgICB0YXAoKHVzZXJJbmZvOiBQcm9Vc2VySW5mbykgPT4ge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV9VU0VSXSA9IEpTT04uc3RyaW5naWZ5KHVzZXJJbmZvKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEZyb21BZHZwbCh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvVXNlckluZm8+IHtcclxuICAgIGlmICghdGhpcy5hZHZwbFNlcnZpY2UucHJvdGhldXNDb25uZWN0ZWQoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hZHZwbE5vdFByZXBhcmVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmFuZG9tRXZlbnRJZCA9IHRoaXMuYWR2cGxTZXJ2aWNlLmdlbmVyYXRlRXZlbnRJZCgpO1xyXG5cclxuICAgIGNvbnN0IG9ic2VydmFibGVQYXJhbXMgPSB7XHJcbiAgICAgIHNlbmRJbmZvOiB7XHJcbiAgICAgICAgdHlwZTogYCR7dGhpcy5FVkVOVF9HRVRfSUR9I2lkIyR7cmFuZG9tRXZlbnRJZH1gLFxyXG4gICAgICAgIGNvbnRlbnQ6IHVzZXJJZFxyXG4gICAgICB9LFxyXG4gICAgICBhdXRvRGVzdHJ1Y3Q6IHRydWUsXHJcbiAgICAgIHJlY2VpdmVJZDogYCR7dGhpcy5FVkVOVF9TRVRfSUR9I2lkIyR7cmFuZG9tRXZlbnRJZH1gXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9ic2VydmFibGVDYWxsYmFjayA9ICh7IHByb3RoZXVzUmVzcG9uc2UsIHN1YnNjcmliZXIgfSkgPT4ge1xyXG4gICAgICBpZiAocHJvdGhldXNSZXNwb25zZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGB1c2VyICR7dXNlcklkfSBjb3VsZCBub3QgYmUgZm91bmRgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdXNlckluZm86IFByb1VzZXJJbmZvID0gSlNPTi5wYXJzZShwcm90aGV1c1Jlc3BvbnNlKTtcclxuICAgICAgICB1c2VySW5mby5jb21wbGV0ZV9uYW1lID0gdXNlckluZm8udXNlck5hbWU7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2VbQ0FDSEVfS0VZX1VTRVJdID0gSlNPTi5zdHJpbmdpZnkocHJvdGhldXNSZXNwb25zZSk7XHJcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHVzZXJJbmZvKTtcclxuICAgICAgfVxyXG4gICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmFkdnBsU2VydmljZS5idWlsZE9ic2VydmFibGU8UHJvVXNlckluZm8+KFxyXG4gICAgICBvYnNlcnZhYmxlQ2FsbGJhY2ssXHJcbiAgICAgIG9ic2VydmFibGVQYXJhbXNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVGcm9tU3RvcmFnZSgpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oQ0FDSEVfS0VZX1VTRVIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZHZwbE5vdFByZXBhcmVkPFQ+KCk6IE9ic2VydmFibGU8VD4ge1xyXG5cclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVyID0+IHtcclxuICAgICAgc3Vic2NyaWJlci5lcnJvcih7XHJcbiAgICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdhZHZwbFNlcnZpY2Ugbm90IHByZXBhcmVkIGluIFByb1VzZXJJbmZvU2VydmljZSdcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFc3NlIGVycm8gZXN0w6Egc2VuZG8gZW1pdGlkbyBhbyB1dGlsaXphciBvIGFwcCBjb20gYSBvdGltaXphw6fDo28gbGlnYWRhIGUgYSBvcMOnw6NvIGRlIFNTTy5cclxuICAgICAgICAgKiBPIHF1ZSBmb2kgcGVyY2ViaWRvIMOpIHF1ZSBlbSBkZXRlcm1pbmFkYSBzaXR1YcOnw6NvIGEgY29uZXjDo28gQWR2UExcclxuICAgICAgICAgKiBuw6NvIGZpY2EgZGlzcG9uw612ZWwgcXVhbmRvIG8gc2VydmnDp28gw6kgc29saWNpdGFkby4gRm9yYW0gZmVpdG9zIHRlc3RlcyBhZGljaW9uYW5kb1xyXG4gICAgICAgICAqIG3Dumx0aXBsYXMgdGVudGF0aXZhcyBtYXMgc2VtIHN1Y2Vzc28uIFV0aWxpemFuZG8gYSBvcMOnw6NvIGRlIGNhbmFsIEhUVFAgZnVuY2lvbmEgY29ycmV0YW1lbnRlLFxyXG4gICAgICAgICAqIHBvcsOpbSBpbnRlcmZlcmUgbmEgY3JpYcOnw6NvIGRlIGRpY2lvbsOhcmlvcyBkbyBsYWRvIEFkdlBMLCBvIHF1ZSB0b3JuYSBhIG9ww6fDo28gaW52acOhdmVsLlxyXG4gICAgICAgICAqL1xyXG4gICAgICB9KTtcclxuICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpc0NoYW5uZWxIVFRQKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlSFRUUDtcclxuICB9XHJcblxyXG4gIHNldENoYW5uZWxBc0hUVFAodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMudXNlSFRUUCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZWZldHVhIHVtIGdldCBuYSBhcGkgcmVmZXJlbnRlIGEgZnVuw6fDo28gUHN3UmV0IGRvIHByb3RoZXVzXHJcbiAgICogYSBhcGkgdXRpbGl6YSBvIHVzdcOhcmlvIGxvZ2FkbyBwYXJhIGVmZXR1YXIgYSBidXNjYVxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgY29tIG8gcmV0b3JubyBkYSBhcGlcclxuICAgKi9cclxuICBwdWJsaWMgcHN3UmV0KCk6IE9ic2VydmFibGU8UHJvVXNlclBzd3JldEludGVyZmFjZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UHJvVXNlclBzd3JldEludGVyZmFjZT4odGhpcy5VUkxfUFNXUkVUKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==