import { Injectable } from '@angular/core';
import { ProAppConfigService } from '../../pro-app-config';
import * as i0 from "@angular/core";
const CACHE_KEY = 'ProIdiom';
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header do idioma.
 */
export class ProSystemIdiomInteceptor {
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @description Intercept http para tratamento do módulo do Protheus nas requisições
     * @param original_request Requisição http
     * @param next Handler da requisição http
     * @returns Observable da requisição http com o header do módulo caso o ERP seja Protheus
     */
    intercept(original_request, next) {
        let requestResult = original_request;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (!(original_request.url.search(/assets/) >= 0)) {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                requestResult = this.appendLanguageToRequest(original_request);
            }
        }
        return next.handle(requestResult);
    }
    /**
     * @description Efetua a validação e adição do header de idioma
     * @param request Requisição HTTP Original
     * @returns HttpRequest, podendo ser alterada com a inclusão do idioma conforme o Protheus
     */
    appendLanguageToRequest(request) {
        const language = this.getLanguage();
        if (language) {
            return request.clone({
                headers: request.headers.set('Accept-Language', language)
            });
        }
        else {
            return request.clone();
        }
    }
    /**
     * @description Retorna o idioma presente no storage do navegador
     * @returns string contendo o valor de idioma do Protheus
     */
    getLanguage() {
        return sessionStorage[CACHE_KEY];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemIdiomInteceptor, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemIdiomInteceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProSystemIdiomInteceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXN5c3RlbS1pZGlvbS5pbnRlY2VwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJvdGhldXMtbGliLWNvcmUvc3JjL3NlcnZpY2VzL3Byby1sYW5ndWFnZS9pbnRlcmNlcHRvcnMvcHJvLXN5c3RlbS1pZGlvbS5pbnRlY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBRTNELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUU3Qjs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQztJQUUzQzs7Ozs7T0FLRztJQUNILFNBQVMsQ0FDUCxnQkFBa0MsRUFDbEMsSUFBaUI7UUFFakIsSUFBSSxhQUFhLEdBQXFCLGdCQUFnQixDQUFDO1FBRXZELE1BQU0sbUJBQW1CLEdBQXdCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNoRSxtQkFBbUIsQ0FDcEIsQ0FBQztRQUVGLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDakQsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUM7WUFFeEQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsYUFBYSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ2hFO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyx1QkFBdUIsQ0FBQyxPQUF5QjtRQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFcEMsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUM7YUFDMUQsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFdBQVc7UUFDakIsT0FBTyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs4R0FwRFUsd0JBQXdCO2tIQUF4Qix3QkFBd0IsY0FGdkIsTUFBTTs7MkZBRVAsd0JBQXdCO2tCQUhwQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUHJvQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL3Byby1hcHAtY29uZmlnJztcclxuXHJcbmNvbnN0IENBQ0hFX0tFWSA9ICdQcm9JZGlvbSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEludGVyY2VwdG9yIHF1ZSBwZWdhIGEgcmVxdWlzacOnw6NvIGh0bWwgZSBpbnNlcmUgbm8gaGVhZGVyIGRvIGlkaW9tYS5cclxuICovXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9TeXN0ZW1JZGlvbUludGVjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIEludGVyY2VwdCBodHRwIHBhcmEgdHJhdGFtZW50byBkbyBtw7NkdWxvIGRvIFByb3RoZXVzIG5hcyByZXF1aXNpw6fDtWVzXHJcbiAgICogQHBhcmFtIG9yaWdpbmFsX3JlcXVlc3QgUmVxdWlzacOnw6NvIGh0dHBcclxuICAgKiBAcGFyYW0gbmV4dCBIYW5kbGVyIGRhIHJlcXVpc2nDp8OjbyBodHRwXHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSBkYSByZXF1aXNpw6fDo28gaHR0cCBjb20gbyBoZWFkZXIgZG8gbcOzZHVsbyBjYXNvIG8gRVJQIHNlamEgUHJvdGhldXNcclxuICAgKi9cclxuICBpbnRlcmNlcHQoXHJcbiAgICBvcmlnaW5hbF9yZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcclxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBsZXQgcmVxdWVzdFJlc3VsdDogSHR0cFJlcXVlc3Q8YW55PiA9IG9yaWdpbmFsX3JlcXVlc3Q7XHJcblxyXG4gICAgY29uc3QgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxyXG4gICAgICBQcm9BcHBDb25maWdTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGlmICghKG9yaWdpbmFsX3JlcXVlc3QudXJsLnNlYXJjaCgvYXNzZXRzLykgPj0gMCkpIHtcclxuICAgICAgY29uc3QgaXNQcm90aGV1cyA9IHByb0FwcENvbmZpZ1NlcnZpY2UuaXNQcm90aGV1c1JlbmRlcjtcclxuXHJcbiAgICAgIGlmIChpc1Byb3RoZXVzKSB7XHJcbiAgICAgICAgcmVxdWVzdFJlc3VsdCA9IHRoaXMuYXBwZW5kTGFuZ3VhZ2VUb1JlcXVlc3Qob3JpZ2luYWxfcmVxdWVzdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0UmVzdWx0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBFZmV0dWEgYSB2YWxpZGHDp8OjbyBlIGFkacOnw6NvIGRvIGhlYWRlciBkZSBpZGlvbWFcclxuICAgKiBAcGFyYW0gcmVxdWVzdCBSZXF1aXNpw6fDo28gSFRUUCBPcmlnaW5hbFxyXG4gICAqIEByZXR1cm5zIEh0dHBSZXF1ZXN0LCBwb2RlbmRvIHNlciBhbHRlcmFkYSBjb20gYSBpbmNsdXPDo28gZG8gaWRpb21hIGNvbmZvcm1lIG8gUHJvdGhldXNcclxuICAgKi9cclxuICBwcml2YXRlIGFwcGVuZExhbmd1YWdlVG9SZXF1ZXN0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcclxuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5nZXRMYW5ndWFnZSgpO1xyXG5cclxuICAgIGlmIChsYW5ndWFnZSkge1xyXG4gICAgICByZXR1cm4gcmVxdWVzdC5jbG9uZSh7XHJcbiAgICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLnNldCgnQWNjZXB0LUxhbmd1YWdlJywgbGFuZ3VhZ2UpXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXRvcm5hIG8gaWRpb21hIHByZXNlbnRlIG5vIHN0b3JhZ2UgZG8gbmF2ZWdhZG9yXHJcbiAgICogQHJldHVybnMgc3RyaW5nIGNvbnRlbmRvIG8gdmFsb3IgZGUgaWRpb21hIGRvIFByb3RoZXVzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRMYW5ndWFnZSgpOiBzdHJpbmcgfCB2b2lkIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZVtDQUNIRV9LRVldO1xyXG4gIH1cclxufVxyXG4iXX0=