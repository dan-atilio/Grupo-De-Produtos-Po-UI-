import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../pro-js-to-advpl";
import * as i3 from "../../pro-app-config/services/pro-app-config.service";
export class ProLanguageService {
    constructor(http, advplService, proAppConfigService) {
        this.http = http;
        this.advplService = advplService;
        this.proAppConfigService = proAppConfigService;
        this.url = '/api/language/v1/protheus-suported-languages';
        this.useHTTP = true;
        this.EVENT_GET_LANGUAGES = 'getLanguages';
        this.EVENT_SET_LANGUAGES = 'setLanguages';
    }
    getListOfLanguages() {
        if (this.proAppConfigService.isProtheusRender) {
            if (this.useHTTP) {
                return this.http.get(this.url);
            }
            return this.getAdvplLanguages();
        }
        else {
            return of([]);
        }
    }
    getAdvplLanguages() {
        if (!this.advplService.protheusConnected()) {
            return this.advplNotPrepared();
        }
        return this.advplService.buildObservable(({ protheusResponse, subscriber }) => {
            if (protheusResponse.length === 0) {
                subscriber.error({
                    status: 400,
                    description: 'No language can be found'
                });
            }
            else {
                const laguages = JSON.parse(protheusResponse);
                subscriber.next(laguages);
            }
            subscriber.complete();
        }, {
            sendInfo: {
                type: this.EVENT_GET_LANGUAGES
            },
            autoDestruct: true,
            receiveId: this.EVENT_SET_LANGUAGES
        });
    }
    advplNotPrepared() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                description: 'advplService not prepared in ProLanguageService'
            });
            subscriber.complete();
        });
    }
    isChannelHTTP() {
        return this.useHTTP;
    }
    setChannelAsHTTP(value) {
        this.useHTTP = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProLanguageService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }, { token: i3.ProAppConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProLanguageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProLanguageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }, { type: i3.ProAppConfigService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWxhbmd1YWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLWxhbmd1YWdlL3NlcnZpY2VzL3Byby1sYW5ndWFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBU3RDLE1BQU0sT0FBTyxrQkFBa0I7SUFPN0IsWUFDVSxJQUFnQixFQUNoQixZQUFpQyxFQUNqQyxtQkFBd0M7UUFGeEMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDakMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVQxQyxRQUFHLEdBQUcsOENBQThDLENBQUM7UUFDckQsWUFBTyxHQUFHLElBQUksQ0FBQztRQUVmLHdCQUFtQixHQUFHLGNBQWMsQ0FBQztRQUNyQyx3QkFBbUIsR0FBRyxjQUFjLENBQUM7SUFNekMsQ0FBQztJQUVFLGtCQUFrQjtRQUN2QixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWtCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNqRDtZQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDakM7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUNoQztRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQ3RDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQ25DLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFDZixNQUFNLEVBQUUsR0FBRztvQkFDWCxXQUFXLEVBQUUsMEJBQTBCO2lCQUN4QyxDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxNQUFNLFFBQVEsR0FBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUMvRCxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUMsRUFDRDtZQUNFLFFBQVEsRUFBRTtnQkFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLG1CQUFtQjthQUMvQjtZQUNELFlBQVksRUFBRSxJQUFJO1lBQ2xCLFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CO1NBQ3BDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNqQyxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNmLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFdBQVcsRUFBRSxpREFBaUQ7YUFDL0QsQ0FBQyxDQUFDO1lBQ0gsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQzs4R0FyRVUsa0JBQWtCO2tIQUFsQixrQkFBa0IsY0FGakIsTUFBTTs7MkZBRVAsa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFByb0xhbmd1YWdlTGlzdCB9IGZyb20gJy4uL21vZGVscy9wcm8tbGFuZ3VhZ2UubGlzdCc7XHJcbmltcG9ydCB7IFByb0pzVG9BZHZwbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm8tanMtdG8tYWR2cGwnO1xyXG5pbXBvcnQgeyBQcm9BcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcHJvLWFwcC1jb25maWcvc2VydmljZXMvcHJvLWFwcC1jb25maWcuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9MYW5ndWFnZVNlcnZpY2Uge1xyXG4gIHByaXZhdGUgdXJsID0gJy9hcGkvbGFuZ3VhZ2UvdjEvcHJvdGhldXMtc3Vwb3J0ZWQtbGFuZ3VhZ2VzJztcclxuICBwcml2YXRlIHVzZUhUVFAgPSB0cnVlO1xyXG5cclxuICBwcml2YXRlIEVWRU5UX0dFVF9MQU5HVUFHRVMgPSAnZ2V0TGFuZ3VhZ2VzJztcclxuICBwcml2YXRlIEVWRU5UX1NFVF9MQU5HVUFHRVMgPSAnc2V0TGFuZ3VhZ2VzJztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBwcml2YXRlIGFkdnBsU2VydmljZTogUHJvSnNUb0FkdnBsU2VydmljZSxcclxuICAgIHByaXZhdGUgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXRMaXN0T2ZMYW5ndWFnZXMoKTogT2JzZXJ2YWJsZTxQcm9MYW5ndWFnZUxpc3Q+IHtcclxuICAgIGlmICh0aGlzLnByb0FwcENvbmZpZ1NlcnZpY2UuaXNQcm90aGV1c1JlbmRlcikge1xyXG4gICAgICBpZiAodGhpcy51c2VIVFRQKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UHJvTGFuZ3VhZ2VMaXN0Pih0aGlzLnVybCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmdldEFkdnBsTGFuZ3VhZ2VzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRBZHZwbExhbmd1YWdlcygpOiBPYnNlcnZhYmxlPFByb0xhbmd1YWdlTGlzdD4ge1xyXG4gICAgaWYgKCF0aGlzLmFkdnBsU2VydmljZS5wcm90aGV1c0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFkdnBsTm90UHJlcGFyZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5hZHZwbFNlcnZpY2UuYnVpbGRPYnNlcnZhYmxlPFByb0xhbmd1YWdlTGlzdD4oXHJcbiAgICAgICh7IHByb3RoZXVzUmVzcG9uc2UsIHN1YnNjcmliZXIgfSkgPT4ge1xyXG4gICAgICAgIGlmIChwcm90aGV1c1Jlc3BvbnNlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih7XHJcbiAgICAgICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ05vIGxhbmd1YWdlIGNhbiBiZSBmb3VuZCdcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBsYWd1YWdlczogUHJvTGFuZ3VhZ2VMaXN0ID0gSlNPTi5wYXJzZShwcm90aGV1c1Jlc3BvbnNlKTtcclxuICAgICAgICAgIHN1YnNjcmliZXIubmV4dChsYWd1YWdlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHNlbmRJbmZvOiB7XHJcbiAgICAgICAgICB0eXBlOiB0aGlzLkVWRU5UX0dFVF9MQU5HVUFHRVNcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF1dG9EZXN0cnVjdDogdHJ1ZSxcclxuICAgICAgICByZWNlaXZlSWQ6IHRoaXMuRVZFTlRfU0VUX0xBTkdVQUdFU1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZHZwbE5vdFByZXBhcmVkPFQ+KCk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICBzdWJzY3JpYmVyLmVycm9yKHtcclxuICAgICAgICBzdGF0dXM6IDQwMCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ2FkdnBsU2VydmljZSBub3QgcHJlcGFyZWQgaW4gUHJvTGFuZ3VhZ2VTZXJ2aWNlJ1xyXG4gICAgICB9KTtcclxuICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpc0NoYW5uZWxIVFRQKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlSFRUUDtcclxuICB9XHJcblxyXG4gIHNldENoYW5uZWxBc0hUVFAodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMudXNlSFRUUCA9IHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=