import { Injectable } from '@angular/core';
import { ProAppConfigService } from '../services/pro-app-config.service';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere o endereço e o header que define o erro padrão do Protheus.
 */
export class ProAppConfigInteceptor {
    constructor(injector) {
        this.injector = injector;
    }
    intercept(original_request, next) {
        let requestResult;
        const proAppConfigService = this.injector.get(ProAppConfigService);
        if (original_request.url.search(/assets/) >= 0) {
            requestResult = this.appendPathNameToUrl(original_request);
        }
        else {
            const isProtheus = proAppConfigService.isProtheusRender;
            if (isProtheus) {
                requestResult = this.appendDomainToUrl(original_request);
            }
            else {
                requestResult = original_request;
            }
        }
        return next.handle(requestResult);
    }
    /**
     * @description Altera a URL da requisição para acesso aos assets do app
     * @param request Requisição HTTP original
     * @returns Requisição HTTP com a alteração do path, somente para assets
     */
    appendPathNameToUrl(request) {
        const location = window.location;
        let appName = sessionStorage['appName'];
        let clone;
        if (appName === undefined) {
            clone = request.clone();
        }
        else {
            if (request.url.substr(0, 1) !== '/') {
                appName += '/';
            }
            const urlWithPathName = `${location.protocol}//${location.host}/app-root/${appName}${request.url}`;
            clone = request.clone({
                url: urlWithPathName
            });
        }
        return clone;
    }
    /**
     * @description Altera da URL da requisição conforme regras
     * @param request Requisição HTTP Original
     * @returns Requisição HTTP, podendo ter sua URL alterada
     */
    appendDomainToUrl(request) {
        const proAppConfigService = this.injector.get(ProAppConfigService);
        const domain = proAppConfigService.serverWithApiUrl;
        let urlWithDomain = '';
        //Caso a URL comece com http ou https, concatenar o domínio vai gerar um URL inválida
        //Essa situação pode ocorrer quando o app consulta serviços de terceiros
        const lowerUrl = request.url.toLowerCase();
        if (lowerUrl.startsWith('http://') || lowerUrl.startsWith('https://')) {
            urlWithDomain = request.url;
        }
        else {
            urlWithDomain = `${domain}${request.url}`;
        }
        return request.clone({
            url: urlWithDomain
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigInteceptor, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigInteceptor, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigInteceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWFwcC1jb25maWcuaW50ZWNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tYXBwLWNvbmZpZy9pbnRlcmNlcHRvcnMvcHJvLWFwcC1jb25maWcuaW50ZWNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBR3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQUV6RTs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQztJQUUzQyxTQUFTLENBQ1AsZ0JBQWtDLEVBQ2xDLElBQWlCO1FBRWpCLElBQUksYUFBK0IsQ0FBQztRQUVwQyxNQUFNLG1CQUFtQixHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDaEUsbUJBQW1CLENBQ3BCLENBQUM7UUFFRixJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0wsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUM7WUFFeEQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsYUFBYSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQzFEO2lCQUFNO2dCQUNMLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQzthQUNsQztTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssbUJBQW1CLENBQUMsT0FBeUI7UUFDbkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLE9BQU8sR0FBVyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsSUFBSSxLQUF1QixDQUFDO1FBRTVCLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN6QixLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3pCO2FBQU07WUFDTCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ3BDLE9BQU8sSUFBSSxHQUFHLENBQUM7YUFDaEI7WUFDRCxNQUFNLGVBQWUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLElBQUksYUFBYSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRW5HLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUNwQixHQUFHLEVBQUUsZUFBZTthQUNyQixDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxpQkFBaUIsQ0FBQyxPQUF5QjtRQUNqRCxNQUFNLG1CQUFtQixHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDaEUsbUJBQW1CLENBQ3BCLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNwRCxJQUFJLGFBQWEsR0FBVyxFQUFFLENBQUM7UUFFL0IscUZBQXFGO1FBQ3JGLHdFQUF3RTtRQUN4RSxNQUFNLFFBQVEsR0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5ELElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JFLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1NBQzdCO2FBQU07WUFDTCxhQUFhLEdBQUcsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ25CLEdBQUcsRUFBRSxhQUFhO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBN0VVLHNCQUFzQjtrSEFBdEIsc0JBQXNCLGNBRnJCLE1BQU07OzJGQUVQLHNCQUFzQjtrQkFIbEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBQcm9BcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcHJvLWFwcC1jb25maWcuc2VydmljZSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEludGVyY2VwdG9yIHF1ZSBwZWdhIGEgcmVxdWlzacOnw6NvIGh0bWwgZSBpbnNlcmUgbyBlbmRlcmXDp28gZSBvIGhlYWRlciBxdWUgZGVmaW5lIG8gZXJybyBwYWRyw6NvIGRvIFByb3RoZXVzLlxyXG4gKi9cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb0FwcENvbmZpZ0ludGVjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7IH1cclxuXHJcbiAgaW50ZXJjZXB0KFxyXG4gICAgb3JpZ2luYWxfcmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PixcclxuICAgIG5leHQ6IEh0dHBIYW5kbGVyXHJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgbGV0IHJlcXVlc3RSZXN1bHQ6IEh0dHBSZXF1ZXN0PGFueT47XHJcblxyXG4gICAgY29uc3QgcHJvQXBwQ29uZmlnU2VydmljZTogUHJvQXBwQ29uZmlnU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxyXG4gICAgICBQcm9BcHBDb25maWdTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChvcmlnaW5hbF9yZXF1ZXN0LnVybC5zZWFyY2goL2Fzc2V0cy8pID49IDApIHtcclxuICAgICAgcmVxdWVzdFJlc3VsdCA9IHRoaXMuYXBwZW5kUGF0aE5hbWVUb1VybChvcmlnaW5hbF9yZXF1ZXN0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGlzUHJvdGhldXMgPSBwcm9BcHBDb25maWdTZXJ2aWNlLmlzUHJvdGhldXNSZW5kZXI7XHJcblxyXG4gICAgICBpZiAoaXNQcm90aGV1cykge1xyXG4gICAgICAgIHJlcXVlc3RSZXN1bHQgPSB0aGlzLmFwcGVuZERvbWFpblRvVXJsKG9yaWdpbmFsX3JlcXVlc3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcXVlc3RSZXN1bHQgPSBvcmlnaW5hbF9yZXF1ZXN0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3RSZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIEFsdGVyYSBhIFVSTCBkYSByZXF1aXNpw6fDo28gcGFyYSBhY2Vzc28gYW9zIGFzc2V0cyBkbyBhcHBcclxuICAgKiBAcGFyYW0gcmVxdWVzdCBSZXF1aXNpw6fDo28gSFRUUCBvcmlnaW5hbFxyXG4gICAqIEByZXR1cm5zIFJlcXVpc2nDp8OjbyBIVFRQIGNvbSBhIGFsdGVyYcOnw6NvIGRvIHBhdGgsIHNvbWVudGUgcGFyYSBhc3NldHNcclxuICAgKi9cclxuICBwcml2YXRlIGFwcGVuZFBhdGhOYW1lVG9VcmwocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXF1ZXN0PGFueT4ge1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICBsZXQgYXBwTmFtZTogc3RyaW5nID0gc2Vzc2lvblN0b3JhZ2VbJ2FwcE5hbWUnXTtcclxuICAgIGxldCBjbG9uZTogSHR0cFJlcXVlc3Q8YW55PjtcclxuXHJcbiAgICBpZiAoYXBwTmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNsb25lID0gcmVxdWVzdC5jbG9uZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHJlcXVlc3QudXJsLnN1YnN0cigwLCAxKSAhPT0gJy8nKSB7XHJcbiAgICAgICAgYXBwTmFtZSArPSAnLyc7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdXJsV2l0aFBhdGhOYW1lID0gYCR7bG9jYXRpb24ucHJvdG9jb2x9Ly8ke2xvY2F0aW9uLmhvc3R9L2FwcC1yb290LyR7YXBwTmFtZX0ke3JlcXVlc3QudXJsfWA7XHJcblxyXG4gICAgICBjbG9uZSA9IHJlcXVlc3QuY2xvbmUoe1xyXG4gICAgICAgIHVybDogdXJsV2l0aFBhdGhOYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsb25lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIEFsdGVyYSBkYSBVUkwgZGEgcmVxdWlzacOnw6NvIGNvbmZvcm1lIHJlZ3Jhc1xyXG4gICAqIEBwYXJhbSByZXF1ZXN0IFJlcXVpc2nDp8OjbyBIVFRQIE9yaWdpbmFsXHJcbiAgICogQHJldHVybnMgUmVxdWlzacOnw6NvIEhUVFAsIHBvZGVuZG8gdGVyIHN1YSBVUkwgYWx0ZXJhZGFcclxuICAgKi9cclxuICBwcml2YXRlIGFwcGVuZERvbWFpblRvVXJsKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcclxuICAgIGNvbnN0IHByb0FwcENvbmZpZ1NlcnZpY2U6IFByb0FwcENvbmZpZ1NlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChcclxuICAgICAgUHJvQXBwQ29uZmlnU2VydmljZVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGRvbWFpbiA9IHByb0FwcENvbmZpZ1NlcnZpY2Uuc2VydmVyV2l0aEFwaVVybDtcclxuICAgIGxldCB1cmxXaXRoRG9tYWluOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICAvL0Nhc28gYSBVUkwgY29tZWNlIGNvbSBodHRwIG91IGh0dHBzLCBjb25jYXRlbmFyIG8gZG9tw61uaW8gdmFpIGdlcmFyIHVtIFVSTCBpbnbDoWxpZGFcclxuICAgIC8vRXNzYSBzaXR1YcOnw6NvIHBvZGUgb2NvcnJlciBxdWFuZG8gbyBhcHAgY29uc3VsdGEgc2VydmnDp29zIGRlIHRlcmNlaXJvc1xyXG4gICAgY29uc3QgbG93ZXJVcmw6IHN0cmluZyA9IHJlcXVlc3QudXJsLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgaWYgKGxvd2VyVXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSB8fCBsb3dlclVybC5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XHJcbiAgICAgIHVybFdpdGhEb21haW4gPSByZXF1ZXN0LnVybDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHVybFdpdGhEb21haW4gPSBgJHtkb21haW59JHtyZXF1ZXN0LnVybH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoe1xyXG4gICAgICB1cmw6IHVybFdpdGhEb21haW5cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=