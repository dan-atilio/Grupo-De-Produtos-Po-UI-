import { EventEmitter, Injectable } from '@angular/core';
import { valueIsNull } from '../../../util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./../../pro-js-to-advpl/services/pro-js-to-advpl.service";
import * as i3 from "../../pro-theme/services/pro-theme.service";
const CACHE_KEY = 'ERPAPPCONFIG';
export class ProAppConfigService {
    constructor(http, advplService, themeService) {
        this.http = http;
        this.advplService = advplService;
        this.themeService = themeService;
        this.readyEmitter = new EventEmitter();
        this.themeService.setTheme();
    }
    loadAppConfig() {
        return this.http
            .get('assets/data/appConfig.json')
            .toPromise()
            .then((data) => {
            const proAppConfig = data;
            // A função FwCallApp do Protheus pode ter subido a AppConfig com valores manipulados e não podemos sobreescrever
            if (sessionStorage[CACHE_KEY] === undefined) {
                sessionStorage[CACHE_KEY] = JSON.stringify(proAppConfig);
            }
            this.readyEmitter.emit();
            return this.proAppConfig;
        });
    }
    /**
     * @description Método para encerrar o aplicativo
     * @param ask Boolean que indica se o sistema deve perguntar antes de fechar o app
     */
    callAppClose(ask = true) {
        if (ask) {
            this.advplService.AdvplCloseApp('force');
        }
        else {
            this.advplService.AdvplCloseApp();
        }
    }
    insideProtheus() {
        return this.advplService.protheusConnected();
    }
    get proAppConfig() {
        if (valueIsNull(this._ProAppConfig)) {
            this._ProAppConfig = JSON.parse(sessionStorage[CACHE_KEY]);
        }
        return this._ProAppConfig;
    }
    get nameApp() {
        return this.proAppConfig.name;
    }
    get serverWithApiUrl() {
        return valueIsNull(this.proAppConfig.api_baseUrl)
            ? this.proAppConfig.serverBackend + this.proAppConfig.restEntryPoint
            : this.proAppConfig.api_baseUrl;
    }
    get productLine() {
        return this.proAppConfig.productLine;
    }
    get isProtheusRender() {
        return this.productLine.toLowerCase() === 'protheus';
    }
    freeAppConfig() {
        this._ProAppConfig = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigService, deps: [{ token: i1.HttpClient }, { token: i2.ProJsToAdvplService }, { token: i3.ProThemeService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProAppConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ProJsToAdvplService }, { type: i3.ProThemeService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLWFwcC1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Byb3RoZXVzLWxpYi1jb3JlL3NyYy9zZXJ2aWNlcy9wcm8tYXBwLWNvbmZpZy9zZXJ2aWNlcy9wcm8tYXBwLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSzVDLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQztBQUlqQyxNQUFNLE9BQU8sbUJBQW1CO0lBSTlCLFlBQ1UsSUFBZ0IsRUFDaEIsWUFBaUMsRUFDakMsWUFBNkI7UUFGN0IsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDakMsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBTGhDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQU92QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQzthQUNqQyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNiLE1BQU0sWUFBWSxHQUFpQixJQUFJLENBQUM7WUFDeEMsaUhBQWlIO1lBQ2pILElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDM0MsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDMUQ7WUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCxZQUFZLENBQUMsTUFBZSxJQUFJO1FBQzlCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUM7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUMvQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjO1lBQ3BFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLFVBQVUsQ0FBQztJQUN2RCxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7OEdBdEVVLG1CQUFtQjtrSEFBbkIsbUJBQW1CLGNBRmxCLE1BQU07OzJGQUVQLG1CQUFtQjtrQkFIL0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IHZhbHVlSXNOdWxsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XHJcbmltcG9ydCB7IFByb1RoZW1lU2VydmljZSB9IGZyb20gJy4uLy4uL3Byby10aGVtZS9zZXJ2aWNlcy9wcm8tdGhlbWUuc2VydmljZSc7XHJcbmltcG9ydCB7IFByb0pzVG9BZHZwbFNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3Byby1qcy10by1hZHZwbC9zZXJ2aWNlcy9wcm8tanMtdG8tYWR2cGwuc2VydmljZSc7XHJcbmltcG9ydCB7IFByb0FwcENvbmZpZyB9IGZyb20gJy4vLi4vbW9kZWxzL3Byby1hcHAtY29uZmlnJztcclxuXHJcbmNvbnN0IENBQ0hFX0tFWSA9ICdFUlBBUFBDT05GSUcnO1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvQXBwQ29uZmlnU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBfUHJvQXBwQ29uZmlnOiBQcm9BcHBDb25maWc7XHJcbiAgcHVibGljIHJlYWR5RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBwcml2YXRlIGFkdnBsU2VydmljZTogUHJvSnNUb0FkdnBsU2VydmljZSxcclxuICAgIHByaXZhdGUgdGhlbWVTZXJ2aWNlOiBQcm9UaGVtZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMudGhlbWVTZXJ2aWNlLnNldFRoZW1lKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkQXBwQ29uZmlnKCk6IFByb21pc2U8b2JqZWN0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgIC5nZXQoJ2Fzc2V0cy9kYXRhL2FwcENvbmZpZy5qc29uJylcclxuICAgICAgLnRvUHJvbWlzZSgpXHJcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvQXBwQ29uZmlnID0gPFByb0FwcENvbmZpZz5kYXRhO1xyXG4gICAgICAgIC8vIEEgZnVuw6fDo28gRndDYWxsQXBwIGRvIFByb3RoZXVzIHBvZGUgdGVyIHN1YmlkbyBhIEFwcENvbmZpZyBjb20gdmFsb3JlcyBtYW5pcHVsYWRvcyBlIG7Do28gcG9kZW1vcyBzb2JyZWVzY3JldmVyXHJcbiAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgc2Vzc2lvblN0b3JhZ2VbQ0FDSEVfS0VZXSA9IEpTT04uc3RyaW5naWZ5KHByb0FwcENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVhZHlFbWl0dGVyLmVtaXQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9BcHBDb25maWc7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIE3DqXRvZG8gcGFyYSBlbmNlcnJhciBvIGFwbGljYXRpdm9cclxuICAgKiBAcGFyYW0gYXNrIEJvb2xlYW4gcXVlIGluZGljYSBzZSBvIHNpc3RlbWEgZGV2ZSBwZXJndW50YXIgYW50ZXMgZGUgZmVjaGFyIG8gYXBwXHJcbiAgICovXHJcbiAgY2FsbEFwcENsb3NlKGFzazogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcclxuICAgIGlmIChhc2spIHtcclxuICAgICAgdGhpcy5hZHZwbFNlcnZpY2UuQWR2cGxDbG9zZUFwcCgnZm9yY2UnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYWR2cGxTZXJ2aWNlLkFkdnBsQ2xvc2VBcHAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluc2lkZVByb3RoZXVzKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWR2cGxTZXJ2aWNlLnByb3RoZXVzQ29ubmVjdGVkKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgcHJvQXBwQ29uZmlnKCk6IFByb0FwcENvbmZpZyB7XHJcbiAgICBpZiAodmFsdWVJc051bGwodGhpcy5fUHJvQXBwQ29uZmlnKSkge1xyXG4gICAgICB0aGlzLl9Qcm9BcHBDb25maWcgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlW0NBQ0hFX0tFWV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX1Byb0FwcENvbmZpZztcclxuICB9XHJcblxyXG4gIGdldCBuYW1lQXBwKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9BcHBDb25maWcubmFtZTtcclxuICB9XHJcblxyXG4gIGdldCBzZXJ2ZXJXaXRoQXBpVXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdmFsdWVJc051bGwodGhpcy5wcm9BcHBDb25maWcuYXBpX2Jhc2VVcmwpXHJcbiAgICAgID8gdGhpcy5wcm9BcHBDb25maWcuc2VydmVyQmFja2VuZCArIHRoaXMucHJvQXBwQ29uZmlnLnJlc3RFbnRyeVBvaW50XHJcbiAgICAgIDogdGhpcy5wcm9BcHBDb25maWcuYXBpX2Jhc2VVcmw7XHJcbiAgfVxyXG5cclxuICBnZXQgcHJvZHVjdExpbmUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnByb0FwcENvbmZpZy5wcm9kdWN0TGluZTtcclxuICB9XHJcblxyXG4gIGdldCBpc1Byb3RoZXVzUmVuZGVyKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdExpbmUudG9Mb3dlckNhc2UoKSA9PT0gJ3Byb3RoZXVzJztcclxuICB9XHJcblxyXG4gIGZyZWVBcHBDb25maWcoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9Qcm9BcHBDb25maWcgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iXX0=