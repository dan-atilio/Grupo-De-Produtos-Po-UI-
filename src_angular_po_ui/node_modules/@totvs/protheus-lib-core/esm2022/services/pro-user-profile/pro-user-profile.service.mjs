import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, Observable, of, switchMap } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@po-ui/ng-components";
export class ProUserProfileService {
    constructor(http, poI18nService) {
        this.http = http;
        this.poI18nService = poI18nService;
        this.URL_PROFILE = "/api/framework/v1/profileService/";
        this.programName = "";
        this.task = "";
        this.type = "";
        this.isReady = false;
        const language = this.poI18nService.getShortLanguage();
        poI18nService.getLiterals({ language, context: 'general' })
            .subscribe(literals => {
            this.literals = literals;
        });
    }
    /**
     * Metodo para definir o profile a ser utilizado
     * antes de utilizar qualquer metodo de CRUD é necessário definir o profile por esse metodo.
     * @param programName Nome do programa a ser usado no profile
     * @param task Nome da tarefa a ser utilizado no profile
     * @param type Tipo a ser utilizado no profile
     */
    setProfile(programName, task, type) {
        this.programName = programName;
        this.task = task;
        this.type = type;
        this.isReady = true;
    }
    /**
     * Cria um novo registro no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    create(value) {
        const profileBody = this.getRequisitionBody(value);
        if (this.isReady) {
            return this.http.post(this.URL_PROFILE, profileBody);
        }
        else {
            return this.profileNotReady();
        }
    }
    /**
     * Busca o valor de uma chave salva no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param defaultValue Valor padrão a ser retornado caso não exista o profile na base
     * @param respType tipo a ser retornado, podendo ser apenas json ou text
     * @returns Observable com o retorno da api
     */
    read(defaultValue = "", respType = "json") {
        if (this.isReady) {
            let acceptHeader = "application/json";
            if (respType != "json") {
                respType = "text";
                acceptHeader = "text/plain";
            }
            const params = new HttpParams().set('defaultValue', defaultValue);
            const headers = new HttpHeaders().set('Accept', acceptHeader);
            return this.http.get(this.getUrlApi(), { responseType: respType, params, headers });
        }
        else {
            return this.profileNotReady();
        }
    }
    /**
     * Atualiza um registro no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    update(value) {
        const profileBody = this.getRequisitionBody(value);
        if (this.isReady) {
            return this.http.put(this.getUrlApi(), profileBody);
        }
        else {
            return this.profileNotReady();
        }
    }
    /**
     * Deleta um registro no profile
     * @returns Observable com o retorno da api
     */
    delete() {
        if (this.isReady) {
            return this.http.delete(this.getUrlApi());
        }
        else {
            return this.profileNotReady();
        }
    }
    /**
     * Deleta e cria um registro no profile
     * esse metodo pode substituir o uso do metodo create e update em alguns casos
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    deleteThenCreate(value) {
        if (this.isReady) {
            return this.http.delete(this.getUrlApi()).pipe(catchError(() => {
                // erro no delete deve ser pelo fato do profile não existir ainda
                // retorna o post do profile
                return of(this.http.post(this.URL_PROFILE, this.getRequisitionBody(value)));
            }), switchMap(() => this.http.post(this.URL_PROFILE, this.getRequisitionBody(value))));
        }
        else {
            return this.profileNotReady();
        }
    }
    /**
     * Observable para apresentar um erro para o usuário caso utilize algum metodo de CRUD
     * sem utilizar o setProfile antes
     * @returns Observable com erro
     */
    profileNotReady() {
        return new Observable(subscriber => {
            subscriber.error({
                status: 400,
                message: this.literals.str0001 // 'Para utilizar esse serviço é preciso definir o profile a ser utilizado pelo método setProfile'
            });
            subscriber.complete();
        });
    }
    /**
     * retorna a composição da url da api, com os path param necessários
     * @returns url completa da api
     */
    getUrlApi() {
        return `${this.URL_PROFILE}${this.programName}/${this.task}/${this.type}`;
    }
    /**
     * body para ser utilizado no post e update da api de profile
     * @param value Valor a ser gravado no profile
     * @returns o body a ser utilizado
     */
    getRequisitionBody(value) {
        const profileBody = {
            programName: this.programName,
            task: this.task,
            type: this.type,
            value: value
        };
        return profileBody;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserProfileService, deps: [{ token: i1.HttpClient }, { token: i2.PoI18nService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserProfileService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProUserProfileService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.PoI18nService }] });
//# sourceMappingURL=data:application/json;base64,