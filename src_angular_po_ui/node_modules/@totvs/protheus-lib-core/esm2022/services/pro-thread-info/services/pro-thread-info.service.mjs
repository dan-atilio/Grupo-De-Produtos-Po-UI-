import { map } from 'rxjs';
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "../../pro-authorization";
import * as i2 from "./../../pro-authorization/services/pro-user-info/pro-user-info.service";
/***
 * @description Classe com métodos para recuperar informações da thread do Protheus, thread a qual abriu o app via FWCallApp
 */
export class ProThreadInfoService {
    constructor(proAuthService, proUserInfoService) {
        this.proAuthService = proAuthService;
        this.proUserInfoService = proUserInfoService;
    }
    /**
     * @description Retorna um objeto contendo informações do usuário logado no app e na thread do Protheus
     * @returns ProThreadInfo = {userId, userName}
     * userId = ID do usuário
     * userName = Nome (login) do usuário
     */
    get proThreadInfo() {
        const token = this.proAuthService.getTokenPayload();
        const proThreadInfo = {};
        proThreadInfo.userId = token.userid;
        proThreadInfo.userName = token.sub;
        return proThreadInfo;
    }
    /**
     * @description Recupera o ID do usuário logado no app e no Protheus
     * @returns ID do usuário
     */
    get userId() {
        return this.proAuthService.userId;
    }
    /**
     * @description Recupera o nome (login) do usuário logado no app e no Protheus
     * @returns Nome do usuário (login)
     */
    get userName() {
        return this.proThreadInfo.userName;
    }
    /**
     * @description Retorna informações do usuário logado (id, nome de usuário, nome e emails)
     * @returns ProUserInfo = {id, userName, displayName, emails}
     */
    getUserInfoThread() {
        return this.proUserInfoService.get(this.userId, true).pipe(map((user) => ({
            id: user.id,
            userName: user.userName,
            displayName: user.displayName,
            emails: user.emails
        })));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProThreadInfoService, deps: [{ token: i1.ProAuthService }, { token: i2.ProUserInfoService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProThreadInfoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProThreadInfoService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ProAuthService }, { type: i2.ProUserInfoService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvLXRocmVhZC1pbmZvLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcm90aGV1cy1saWItY29yZS9zcmMvc2VydmljZXMvcHJvLXRocmVhZC1pbmZvL3NlcnZpY2VzL3Byby10aHJlYWQtaW5mby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxHQUFHLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUkzQzs7R0FFRztBQUlILE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFDVSxjQUE4QixFQUM5QixrQkFBc0M7UUFEdEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFDNUMsQ0FBQztJQUVMOzs7OztPQUtHO0lBQ0gsSUFBSSxhQUFhO1FBQ2YsTUFBTSxLQUFLLEdBQW1CLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDcEUsTUFBTSxhQUFhLEdBQWtCLEVBQUUsQ0FBQztRQUV4QyxhQUFhLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDcEMsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBRW5DLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ3hELEdBQUcsQ0FBQyxDQUFDLElBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDLENBQ0osQ0FBQztJQUNKLENBQUM7OEdBbkRVLG9CQUFvQjtrSEFBcEIsb0JBQW9CLGNBRm5CLE1BQU07OzJGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgUHJvVXNlckluZm9TZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9wcm8tYXV0aG9yaXphdGlvbi9zZXJ2aWNlcy9wcm8tdXNlci1pbmZvL3Byby11c2VyLWluZm8uc2VydmljZSc7XHJcbmltcG9ydCB7IG1hcCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUHJvQWNjZXNzVG9rZW4sIFByb0F1dGhTZXJ2aWNlLCBQcm9Vc2VySW5mbyB9IGZyb20gXCIuLi8uLi9wcm8tYXV0aG9yaXphdGlvblwiO1xyXG5pbXBvcnQgeyBQcm9UaHJlYWRJbmZvIH0gZnJvbSBcIi4uL21vZGVscy9wcm8tdGhyZWFkLWluZm9cIjtcclxuXHJcbi8qKipcclxuICogQGRlc2NyaXB0aW9uIENsYXNzZSBjb20gbcOpdG9kb3MgcGFyYSByZWN1cGVyYXIgaW5mb3JtYcOnw7VlcyBkYSB0aHJlYWQgZG8gUHJvdGhldXMsIHRocmVhZCBhIHF1YWwgYWJyaXUgbyBhcHAgdmlhIEZXQ2FsbEFwcFxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvVGhyZWFkSW5mb1NlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBwcm9BdXRoU2VydmljZTogUHJvQXV0aFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHByb1VzZXJJbmZvU2VydmljZTogUHJvVXNlckluZm9TZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldG9ybmEgdW0gb2JqZXRvIGNvbnRlbmRvIGluZm9ybWHDp8O1ZXMgZG8gdXN1w6FyaW8gbG9nYWRvIG5vIGFwcCBlIG5hIHRocmVhZCBkbyBQcm90aGV1c1xyXG4gICAqIEByZXR1cm5zIFByb1RocmVhZEluZm8gPSB7dXNlcklkLCB1c2VyTmFtZX1cclxuICAgKiB1c2VySWQgPSBJRCBkbyB1c3XDoXJpb1xyXG4gICAqIHVzZXJOYW1lID0gTm9tZSAobG9naW4pIGRvIHVzdcOhcmlvXHJcbiAgICovXHJcbiAgZ2V0IHByb1RocmVhZEluZm8oKTogUHJvVGhyZWFkSW5mbyB7XHJcbiAgICBjb25zdCB0b2tlbjogUHJvQWNjZXNzVG9rZW4gPSB0aGlzLnByb0F1dGhTZXJ2aWNlLmdldFRva2VuUGF5bG9hZCgpO1xyXG4gICAgY29uc3QgcHJvVGhyZWFkSW5mbzogUHJvVGhyZWFkSW5mbyA9IHt9O1xyXG5cclxuICAgIHByb1RocmVhZEluZm8udXNlcklkID0gdG9rZW4udXNlcmlkO1xyXG4gICAgcHJvVGhyZWFkSW5mby51c2VyTmFtZSA9IHRva2VuLnN1YjtcclxuXHJcbiAgICByZXR1cm4gcHJvVGhyZWFkSW5mbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZWN1cGVyYSBvIElEIGRvIHVzdcOhcmlvIGxvZ2FkbyBubyBhcHAgZSBubyBQcm90aGV1c1xyXG4gICAqIEByZXR1cm5zIElEIGRvIHVzdcOhcmlvXHJcbiAgICovXHJcbiAgZ2V0IHVzZXJJZCgpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLnByb0F1dGhTZXJ2aWNlLnVzZXJJZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZWN1cGVyYSBvIG5vbWUgKGxvZ2luKSBkbyB1c3XDoXJpbyBsb2dhZG8gbm8gYXBwIGUgbm8gUHJvdGhldXNcclxuICAgKiBAcmV0dXJucyBOb21lIGRvIHVzdcOhcmlvIChsb2dpbilcclxuICAgKi9cclxuICBnZXQgdXNlck5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9UaHJlYWRJbmZvLnVzZXJOYW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldG9ybmEgaW5mb3JtYcOnw7VlcyBkbyB1c3XDoXJpbyBsb2dhZG8gKGlkLCBub21lIGRlIHVzdcOhcmlvLCBub21lIGUgZW1haWxzKVxyXG4gICAqIEByZXR1cm5zIFByb1VzZXJJbmZvID0ge2lkLCB1c2VyTmFtZSwgZGlzcGxheU5hbWUsIGVtYWlsc31cclxuICAgKi9cclxuICBnZXRVc2VySW5mb1RocmVhZCgpOiBPYnNlcnZhYmxlPFByb1VzZXJJbmZvPiB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9Vc2VySW5mb1NlcnZpY2UuZ2V0KHRoaXMudXNlcklkLCB0cnVlKS5waXBlKFxyXG4gICAgICBtYXAoKHVzZXI6IFByb1VzZXJJbmZvKSA9PiAoe1xyXG4gICAgICAgIGlkOiB1c2VyLmlkLFxyXG4gICAgICAgIHVzZXJOYW1lOiB1c2VyLnVzZXJOYW1lLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiB1c2VyLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgIGVtYWlsczogdXNlci5lbWFpbHNcclxuICAgICAgfSkpXHJcbiAgICApO1xyXG4gIH1cclxufSJdfQ==