import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { generateRandomId, valueIsNull } from '../../../util';
import * as i0 from "@angular/core";
export class ProJsToAdvplService {
    constructor() { }
    hasDialog() {
        return (typeof dialog !== 'undefined' && typeof dialog.jsToAdvpl === 'function');
    }
    hasWebChannel() {
        return (typeof twebchannel !== 'undefined' &&
            typeof twebchannel.jsToAdvpl === 'function');
    }
    getWebChannel() {
        if (this.hasWebChannel()) {
            return twebchannel;
        }
        if (this.hasDialog()) {
            return dialog;
        }
    }
    jsToAdvpl(type, content) {
        const webChannel = this.getWebChannel();
        if (valueIsNull(webChannel)) {
            return false;
        }
        else {
            webChannel.jsToAdvpl(type, content);
            return true;
        }
    }
    /**
     * @description Método responsável por fechar app na camada advpl
     *
     * @param {string} value Valor que será enviado a camada advpl, sendo vazia ou force
     */
    AdvplCloseApp(value = '') {
        this.jsToAdvpl('close', value);
    }
    buildListener(id, callBack) {
        const webChannel = this.getWebChannel();
        if (webChannel && webChannel['eventTarget']) {
            webChannel['eventTarget'].addEventListener(id, callBack);
        }
    }
    buildObservable(callBack, options) {
        if (!options.receiveId && options.sendInfo && !options.sendInfo.content) {
            options.receiveId = options.sendInfo.type + '-' + this.generateEventId();
        }
        const buildedObservable = new Observable(subscriber => {
            const webChannel = this.getWebChannel();
            webChannel[options.receiveId] = {};
            webChannel[options.receiveId]['subscriber'] = subscriber;
            if (options.autoDestruct) {
                webChannel[options.receiveId]['autoDestruct'] = this.buildAutoDestruct(options.receiveId, callBack);
                webChannel['eventTarget'].addEventListener(options.receiveId, webChannel[options.receiveId]['autoDestruct']);
            }
            else {
                webChannel['eventTarget'].addEventListener(options.receiveId, callBack);
            }
        });
        if (options.sendInfo) {
            this.connectedJsToAdvpl(options.sendInfo.type, options.sendInfo.content ? options.sendInfo.content : options.receiveId);
        }
        return buildedObservable;
    }
    /**
     * @description Remove e apaga o evento
     * @param id ID do evento
     * @param callBack callback do evento
     * @returns
     */
    buildAutoDestruct(id, callBack) {
        return ({ protheusResponse, subscriber }) => {
            const webChannel = this.getWebChannel();
            callBack({ protheusResponse, subscriber });
            if (webChannel[id]) {
                webChannel['eventTarget'].removeEventListener(id, webChannel[id]['autoDestruct']);
                delete webChannel[id];
            }
        };
    }
    protheusConnected() {
        const webChannel = this.getWebChannel();
        return !valueIsNull(webChannel) && webChannel['gotConnection'];
    }
    connectedJsToAdvpl(type, value, retryCounter = 99, timeout = 50) {
        if (this.protheusConnected()) {
            this.jsToAdvpl(type, value);
        }
        else {
            if (retryCounter > 0) {
                retryCounter--;
                setTimeout(() => {
                    this.connectedJsToAdvpl(type, value, retryCounter, timeout);
                }, timeout);
            }
            else {
                console.log('jsToAdvpl type ' + type + ' not executed!');
            }
        }
    }
    generateEventId() {
        return generateRandomId();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProJsToAdvplService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProJsToAdvplService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.9", ngImport: i0, type: ProJsToAdvplService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,