import { Observable } from 'rxjs';
import { ProJsToAdvpl } from '..';
import * as i0 from "@angular/core";
export declare class ProJsToAdvplService {
    constructor();
    hasDialog(): boolean;
    hasWebChannel(): boolean;
    getWebChannel(): any;
    jsToAdvpl(type: string, content: string): boolean;
    /**
     * @description Método responsável por fechar app na camada advpl
     *
     * @param {string} value Valor que será enviado a camada advpl, sendo vazia ou force
     */
    AdvplCloseApp(value?: string): void;
    buildListener(id: string, callBack: any): void;
    buildObservable<T>(callBack: any, options: ProJsToAdvpl): Observable<T>;
    /**
     * @description Remove e apaga o evento
     * @param id ID do evento
     * @param callBack callback do evento
     * @returns
     */
    private buildAutoDestruct;
    protheusConnected(): boolean;
    connectedJsToAdvpl(type: string, value: string, retryCounter?: number, timeout?: number): void;
    generateEventId(): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProJsToAdvplService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProJsToAdvplService>;
}
