import { HttpClient } from '@angular/common/http';
import { PoI18nService } from '@po-ui/ng-components';
import { Observable } from 'rxjs';
import { ProUserProfileRequestInterface } from './models/pro-user-profile-request.interface';
import * as i0 from "@angular/core";
export declare class ProUserProfileService {
    private http;
    private poI18nService;
    private readonly URL_PROFILE;
    programName: string;
    task: string;
    type: string;
    isReady: boolean;
    literals: any;
    constructor(http: HttpClient, poI18nService: PoI18nService);
    /**
     * Metodo para definir o profile a ser utilizado
     * antes de utilizar qualquer metodo de CRUD é necessário definir o profile por esse metodo.
     * @param programName Nome do programa a ser usado no profile
     * @param task Nome da tarefa a ser utilizado no profile
     * @param type Tipo a ser utilizado no profile
     */
    setProfile(programName: string, task: string, type: string): void;
    /**
     * Cria um novo registro no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    create(value: string): Observable<any>;
    /**
     * Busca o valor de uma chave salva no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param defaultValue Valor padrão a ser retornado caso não exista o profile na base
     * @param respType tipo a ser retornado, podendo ser apenas json ou text
     * @returns Observable com o retorno da api
     */
    read(defaultValue?: string, respType?: any): Observable<any>;
    /**
     * Atualiza um registro no profile
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    update(value: string): Observable<any>;
    /**
     * Deleta um registro no profile
     * @returns Observable com o retorno da api
     */
    delete(): Observable<any>;
    /**
     * Deleta e cria um registro no profile
     * esse metodo pode substituir o uso do metodo create e update em alguns casos
     * (profile a ser gravado definido pelo metodo setProfile)
     * @param value Valor a ser gravado no profile
     * @returns Observable com o retorno da api
     */
    deleteThenCreate(value: string): Observable<any>;
    /**
     * Observable para apresentar um erro para o usuário caso utilize algum metodo de CRUD
     * sem utilizar o setProfile antes
     * @returns Observable com erro
     */
    private profileNotReady;
    /**
     * retorna a composição da url da api, com os path param necessários
     * @returns url completa da api
     */
    getUrlApi(): string;
    /**
     * body para ser utilizado no post e update da api de profile
     * @param value Valor a ser gravado no profile
     * @returns o body a ser utilizado
     */
    getRequisitionBody(value: string): ProUserProfileRequestInterface;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProUserProfileService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProUserProfileService>;
}
