import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Interceptor que pega a requisição html e insere no header o database.
 */
export declare class ProSystemDatabaseInterceptor implements HttpInterceptor {
    private injector;
    constructor(injector: Injector);
    /**
     * @description Intercept http para tratamento do database do Protheus nas requisições
     * @param original_request Requisição http
     * @param next Handler da requisição http
     * @returns Observable da requisição http com o header do database caso o ERP seja Protheus
     */
    intercept(original_request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    /**
     * @description Adiciona o header da database na requisição caso exista
     * @param request Objeto HttpRequest da requisição
     * @returns HttpRequest da requisição com a database ou apenas um cópia
     */
    private appendDataBaseToRequest;
    /**
     * @description Verifica o valor da database no SessionStorage
     * @returns Retorna o valor da database no SessionStorage, podendo não ter valor algum
     */
    private getDatabase;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProSystemDatabaseInterceptor, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProSystemDatabaseInterceptor>;
}
