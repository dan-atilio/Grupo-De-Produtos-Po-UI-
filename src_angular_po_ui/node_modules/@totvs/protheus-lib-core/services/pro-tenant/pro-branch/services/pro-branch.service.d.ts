import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ProJsToAdvplService } from '../../../pro-js-to-advpl';
import { ProCompanyService } from './../../pro-company/services/pro-company.service';
import { ProBranch, ProBranchList } from './../models/pro-branch';
import * as i0 from "@angular/core";
export declare class ProBranchService {
    private http;
    private advplService;
    private proCompanyService;
    private url;
    private useHTTP;
    readonly EVENT_SET_LIST_ID = "setBranchesList";
    readonly EVENT_GET_LIST_ID = "getBranchesList";
    readonly EVENT_SET_ONE_ID = "setBranchInfo";
    readonly EVENT_GET_ONE_ID = "getBranchInfo";
    constructor(http: HttpClient, advplService: ProJsToAdvplService, proCompanyService: ProCompanyService);
    getListOfBranches(Description?: string, page?: number, _pageSize?: number): Observable<ProBranchList>;
    /**
     * @description Retorna as filiais do usuário
     * @param description string, descrição da filial
     * @param page number, número da página
     * @param pageSize number, número de registros da página
     * @returns ProBranchList, lista de filiais do usuário
     */
    getUserBranches(description?: string, page?: number, pageSize?: number): Observable<ProBranchList>;
    /**
     * @description Retorna as filiais do usuário via requisição http
     * @param description string, descrição da filial
     * @param page number, número da página
     * @param pageSize number, número de registros da página
     * @param isToFilterEnterpriseGroup boolean, indica se as filiais devem ser filtradas por empresa
     * @returns ProBranchList, lista de filiais do usuário
     */
    private getListOfBranchesFromApi;
    private getListOfBranchesFromAdvpl;
    getBranch(branch: string, company?: string): Observable<ProBranch>;
    private getBranchFromApi;
    private getBranchFromAdvpl;
    get branch(): ProBranch;
    set branch(branch: ProBranch);
    private advplNotPrepared;
    isChannelHTTP(): boolean;
    setChannelAsHTTP(value: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProBranchService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProBranchService>;
}
