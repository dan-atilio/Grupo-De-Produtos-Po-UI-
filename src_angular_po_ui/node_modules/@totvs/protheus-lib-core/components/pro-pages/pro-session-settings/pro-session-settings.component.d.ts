import { OnDestroy, OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, ValidationErrors } from '@angular/forms';
import { ActivatedRoute, Data, Router } from '@angular/router';
import { PoI18nService, PoLookupColumn } from '@po-ui/ng-components';
import { ProBrandService } from '../../../services/pro-brand/services/pro-brand.service';
import { ProTranslateStringService } from '../../../services/pro-translate-string/services/pro-translate-string.service';
import { ProBranchLookupComponent } from '../../pro-fields/pro-branch-lookup/pro-branch-lookup.component';
import { ProCompanyLookupComponent } from '../../pro-fields/pro-company-lookup/pro-company-lookup.component';
import { ProMessageService } from './../../../services/pro-messages/services/pro-message.service';
import { ProRoleService } from './../../../services/pro-role/pro-role-modules/services/pro-role.service';
import { ProBranchService } from './../../../services/pro-tenant/pro-branch/services/pro-branch.service';
import { ProCompanyService } from './../../../services/pro-tenant/pro-company/services/pro-company.service';
import { ProSessionSettings } from './models/pro-session-settings';
import { ProSessionSettingsService } from './services/pro-session-settings.service';
import { ProSystemModuleService } from './../../../services/pro-system-info/pro-system-modules/services/pro-system-modules.service';
import * as i0 from "@angular/core";
export declare class ProSessionSettingsComponent implements OnInit, OnDestroy {
    private formBuilder;
    private router;
    private messageService;
    private route;
    private proSessionSettingsService;
    private proCompanyService;
    private proRoleService;
    private proBranchService;
    private poI18nService;
    private proTranslateStringService;
    private proBrandService;
    private proSystemModuleService;
    displayName: string;
    settingForm: UntypedFormGroup;
    isLoading: boolean;
    logo: string;
    secondaryLogo: string;
    productName: string;
    brand: string;
    literals: any;
    fixedModule: boolean;
    fixedRole: boolean;
    disableBackButton: boolean;
    showMDIMenuInfo: boolean;
    showGoEmpFil: boolean;
    useHTTP: boolean;
    private _ProSessionSettingsDefaults;
    private subs;
    private cnpjTitle;
    /** Insere uma Tag com o ambiente em execuação. */
    environment?: string;
    /** Insere uma imagem de destaque ao lado direito do container. */
    background?: string;
    /** Designa se o logotipo deve desaparecer em resoluções menores. */
    hideLogo?: boolean;
    /** Texto de destaque sobreposto à imagem de destaque. Essa opção é utilizada em conjunto com o atributo `p-background`. */
    highlightInfo?: string;
    proBranchLookupComponent: ProBranchLookupComponent;
    proCompanyLookupComponent: ProCompanyLookupComponent;
    readonly companyColumns: Array<PoLookupColumn>;
    branchColumns: Array<PoLookupColumn>;
    readonly moduleColumns: Array<PoLookupColumn>;
    readonly roleColumns: Array<PoLookupColumn>;
    /**
     * @description metodo chamado na mudança do combox de idioma da tela de parametros da sessão
     * @param language opção de idioma escolhido pelo usuário
     * @returns void
     */
    onSelectedLanguage(language: string): void;
    /**
     * @description Atualiza as strings traduzíveis da interface
     * @param literals Objeto de literais, contendo as traduções da interface
     */
    updLiterals(literals: any): void;
    /**
     * @description Atualiza as strings de tradução as colunas do Lookup de filial
     */
    updateBranchLiterals(): void;
    activateSupport(url?: string): void;
    /**
     * @description Método para obter o link de suporte
     * @returns Retorna uma string contendo o link de suporte do ERP
     */
    getSupportLink(): string;
    /**
     * @description Efetua o redirect conforme a URL recebida
     * @param url URL que será verificada, podendo abrir uma janela ou mudar a rota
     */
    private setUrlRedirect;
    /**
     * @description Construtor da classe
     * @param formBuilder Objeto FormBuilder para controle do formulário
     * @param router Objeto Router para controle da rota
     * @param messageService Serviço ProMessageService para exibição de notificações
     * @param route Objeto ActivatedRoute para controle da rota atual
     * @param proSessionSettingsService Serviço ProSessionSettingsService para obter os dados de login salvos
     * @param proCompanyService Serviço ProCompanyService para obter dados do grupo de empresas
     * @param proRoleService Serviço ProRoleService para obter dados de papel de trabalho
     * @param proBranchService Serviço ProBranchService para obter dados da filial
     * @param poI18nService Serviço PoI18nService para tradução da interface via dados locais
     * @param proTranslateStringService Serviço ProTranslateStringService para tradução da interface via API do Protheus
     * @param proBrandService Serviço para identificação da marca, MA3 na russia
     */
    constructor(formBuilder: UntypedFormBuilder, router: Router, messageService: ProMessageService, route: ActivatedRoute, proSessionSettingsService: ProSessionSettingsService, proCompanyService: ProCompanyService, proRoleService: ProRoleService, proBranchService: ProBranchService, poI18nService: PoI18nService, proTranslateStringService: ProTranslateStringService, proBrandService: ProBrandService, proSystemModuleService: ProSystemModuleService);
    /**
     * @description Lista de colunas do Lookup de filiais
     * @returns Retorna uma lista de PoLookupColumn, contendo as colunas padrões do Lookup de filiais
     */
    getDefaultBranchColumns(): Array<PoLookupColumn>;
    /**
     * @description metodo disparado a partir de um evento no lookup de company
     * utilizado para forçar o foco no lookup de branch
     */
    branchSettedEvent(): void;
    /**
     * @description Método disparado via o evento de troca de grupo de empresas
     * @param event Evento do formulário
     */
    changeBranchColumns(event: any): void;
    /**
     * @description Método do ciclo de vida do Angular, esse método é chamado após o construtor da classe
     */
    ngOnInit(): void;
    /**
     * @description Responda depois que o Angular inicializar as visualizações do componente e as visualizações filhas ou a visualização que contém a diretiva.
     * utilizado aqui para setar o foco no componente de grupo de empresa na abertura da tela
     * e definir a variavel started para true do componente company
     */
    ngAfterViewInit(): void;
    /**
     * @description Atualiza o título da coluna de CNPJ da consulta de filiais conforme API
     */
    updateCnpjTitle(): void;
    /**
     * @description Atualiza o título da coluna de CNPJ no objeto da coluna da interface já criada
     */
    updateCnpjTitleColumn(): void;
    /**
     * @description Atualiza a descrição do modulo selecionado
     */
    updateModuleDescription(): void;
    /**
     * @description Cria e retorna o dados de controle de formulário das configurações de login
     * @returns Retorna o FormGroup do formulário de dados de login
     */
    private buildForm;
    moduleValidator(control: UntypedFormControl): ValidationErrors;
    private subscribeToResolver;
    validateResolverData(resolveData: Data): void;
    set sessionSettingsDefaults(defaults: ProSessionSettings);
    get sessionSettingsDefaults(): ProSessionSettings;
    convertDateforPoDatePicker(base_date: any): any;
    private loadSettingForm;
    onSessionSettingBack(): void;
    onSessionSettingSubmit(): void;
    submitForm(): void;
    ngOnDestroy(): void;
    private onErrorSubmit;
    private saveSettings;
    setChannelAsHTTP(value: boolean): void;
    isChannelHTTP(): boolean;
    /**
     * @description Atualiza o Canal de comunicação
     * dos serviços utilizados pelo componente
     * @returns void
     */
    private changeServicesChannel;
    /**
     * @description Atualiza as variaveis a partir da marca
     * ma3 na russia e protheus nas demais
     * @returns void
     */
    updateResourceByBrand(): void;
    /**
     * @description atualiza a variavel productName.
     * quando não for MA3 precisa atualziar com a literals cada vez que muda o idioma
     * @returns void
     */
    updateProductName(): void;
    /**
     * @description atualiza a variavel de marca
     * @returns void
     */
    updateBrand(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProSessionSettingsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProSessionSettingsComponent, "pro-session-settings", never, { "environment": { "alias": "p-environment"; "required": false; }; "background": { "alias": "p-background"; "required": false; }; "hideLogo": { "alias": "p-hide-logo"; "required": false; }; "highlightInfo": { "alias": "p-highlight-info"; "required": false; }; }, {}, never, never, false, never>;
}
