import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Data, Router } from '@angular/router';
import { PoI18nService, PoLanguage } from '@po-ui/ng-components';
import { PoPageLogin, PoPageLoginLiterals } from '@po-ui/ng-templates';
import { Subscription } from 'rxjs';
import { ProAuthService } from '../../../services/pro-authorization/services/pro-auth/pro-auth.service';
import { ProBrandService } from '../../../services/pro-brand/services/pro-brand.service';
import { ProLanguageService } from '../../../services/pro-language/services/pro-language.service';
import { ProUser } from './../../../services/pro-authorization/models/pro-user';
import { ProMessageService } from './../../../services/pro-messages/services/pro-message.service';
import * as i0 from "@angular/core";
export declare class ProLoginComponent implements OnInit, OnDestroy, AfterViewInit {
    private router;
    private route;
    private authService;
    private messageService;
    private poI18nService;
    private elRef;
    private proLanguageService;
    private proBrandService;
    private _nextRoute;
    private _ProUserDefaults;
    private subs;
    isLoading: boolean;
    literals: any;
    productLine: string;
    brand: string;
    customLiterals: PoPageLoginLiterals;
    hideRememberUser: boolean;
    loginValue: string;
    inputFocus: string;
    languages: Array<PoLanguage>;
    logo: string;
    productName: string;
    set nextRoute(value: string);
    get nextRoute(): string;
    constructor(router: Router, route: ActivatedRoute, authService: ProAuthService, messageService: ProMessageService, poI18nService: PoI18nService, elRef: ElementRef, proLanguageService: ProLanguageService, proBrandService: ProBrandService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setFocusToInput(name: string): void;
    private subscribeToResolver;
    subscribeToLogin(user: any): Subscription;
    resetLoading(navigatePromise: any): void;
    validateResolverData(resolveData: Data): void;
    set userDefaults(defaults: ProUser);
    get userDefaults(): ProUser;
    onLoginSubmit(formData: PoPageLogin): void;
    /**
     * @description metodo chamado na mudança do combox de idioma da tela de login
     * @param language opção de idioma escolhido pelo usuário
     * @returns void
     */
    onLanguageChange({ language }: {
        language: any;
    }): void;
    updLiterals(literals: any): void;
    onLoginChange(login: string): void;
    callRecoverPassword(): void;
    /**
     * @description Método para obter o link de suporte
     * @returns Retorna uma string contendo o link de suporte do ERP
     */
    supportLink(language?: string): string;
    private login;
    parseErrorMessage(error: any): string;
    /**
     * @description Atualiza os idiomas disponíveis
     */
    updateLangs(): void;
    /**
     * @description Atualiza as variaveis a partir da marca
     * ma3 na russia e protheus nas demais
     * @returns void
     */
    updateResourceByBrand(): void;
    /**
     * @description atualiza a variavel productName.
     * quando não for MA3 precisa atualziar com a literals cada vez que muda o idioma
     * @returns void
     */
    updateProductName(): void;
    /**
     * @description atualiza a variavel de marca
     * @returns void
     */
    updateBrand(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProLoginComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProLoginComponent, "pro-login", never, { "nextRoute": { "alias": "pro-next-route"; "required": false; }; }, {}, never, never, false, never>;
}
