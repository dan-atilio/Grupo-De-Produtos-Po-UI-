import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageCustomizationService {
    http;
    constructor(http) {
        this.http = http;
    }
    getCustomOptions(origin, originalOption, optionSchema) {
        return this.createObservable(origin).pipe(map(newPageOptions => this.mergePageOptions(originalOption, newPageOptions, optionSchema)));
    }
    changeOriginalOptionsToNewOptions(objectToChange, newOptions) {
        Object.keys(newOptions).forEach(key => {
            const value = newOptions[key];
            if (key in objectToChange) {
                if (Array.isArray(value)) {
                    objectToChange[key] = [...value];
                    return;
                }
                if (typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean') {
                    objectToChange[key] = value;
                    return;
                }
                if (value !== null && typeof value === 'object') {
                    objectToChange[key] = { ...value };
                }
            }
        });
    }
    createObservable(origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    }
    mergePageOptions(originalOption, newPageOptions, optionSchema) {
        const mergePageOptions = optionSchema.schema.reduce((objWithNewProp, prop) => ({
            ...objWithNewProp,
            [prop.nameProp]: this.createNewProp(prop, originalOption, newPageOptions)
        }), {});
        Object.keys(mergePageOptions).forEach(key => mergePageOptions[key] === undefined && delete mergePageOptions[key]);
        return mergePageOptions;
    }
    createNewProp(prop, originalOption, newPageOptions) {
        if (prop.merge) {
            return this.mergeOptions(originalOption[prop.nameProp], newPageOptions[prop.nameProp], prop.keyForMerge);
        }
        else {
            return newPageOptions[prop.nameProp] ?? originalOption[prop.nameProp];
        }
    }
    mergeOptions(originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        if (originalOptions instanceof Array && newOptions instanceof Array) {
            return this.mergeOptionsArray(originalOptions, newOptions, filterProp);
        }
        return { ...originalOptions, ...newOptions };
    }
    mergeOptionsArray(originalOptions, newOptions, filterProp) {
        const deduplicateNewOptions = newOptions.filter(newItem => !originalOptions.find(originalItem => originalItem[filterProp] === newItem[filterProp]));
        const mergedOriginalOptions = originalOptions.map(originalItem => {
            const newItem = newOptions.find(newOptionsItem => originalItem[filterProp] === newOptionsItem[filterProp]) || originalItem;
            return { ...originalItem, ...newItem };
        });
        return [...mergedOriginalOptions, ...deduplicateNewOptions];
    }
    static ɵfac = function PoPageCustomizationService_Factory(t) { return new (t || PoPageCustomizationService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoPageCustomizationService, factory: PoPageCustomizationService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageCustomizationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,