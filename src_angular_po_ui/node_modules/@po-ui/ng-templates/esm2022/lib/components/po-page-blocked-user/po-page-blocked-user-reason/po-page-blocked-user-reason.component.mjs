import { Component, Input } from '@angular/core';
import { poLocaleDefault } from '@po-ui/ng-components';
import { poPageBlockedUserLiterals } from './../literals/i18n/po-page-blocked-user-literals';
import * as i0 from "@angular/core";
import * as i1 from "@po-ui/ng-components";
import * as i2 from "@angular/common";
function PoPageBlockedUserReasonComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.literals == null ? null : ctx_r0.literals.thirdPhrase);
} }
export class PoPageBlockedUserReasonComponent {
    changeDetector;
    params;
    reason;
    literalParams;
    literals;
    language;
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    ngOnInit() {
        this.getLiterals();
    }
    getImageByReasonType() {
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword'
                ? [this.params.days, this.params.days]
                : [this.params.attempts, this.params.hours];
    }
    getLiterals() {
        this.getParams();
        this.literals = {
            ...poPageBlockedUserLiterals[this.reason][poLocaleDefault],
            ...poPageBlockedUserLiterals[this.reason][this.language]
        };
        this.changeDetector.detectChanges();
    }
    static ɵfac = function PoPageBlockedUserReasonComponent_Factory(t) { return new (t || PoPageBlockedUserReasonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageBlockedUserReasonComponent, selectors: [["po-page-blocked-user-reason"]], inputs: { params: [i0.ɵɵInputFlags.None, "p-params", "params"], reason: [i0.ɵɵInputFlags.None, "p-reason", "reason"] }, features: [i0.ɵɵNgOnChangesFeature], decls: 12, vars: 8, consts: [[1, "po-page-blocked-user-reason-content"], [1, "po-page-blocked-user-image", "po-mb-3", 3, "src"], [1, "po-page-blocked-user-header", "po-mb-md-3", "po-row"], [1, "po-md-12"], [1, "po-page-blocked-user-text", "po-font-text", "po-row"], [1, "po-mb-sm-2", "po-mb-md-3", "po-md-12", "po-page-blocked-user-text-bold"], [1, "po-mb-sm-2", "po-mb-md-3", "po-md-12"], ["class", "po-mb-sm-2 po-mb-md-3 po-md-12", 4, "ngIf"]], template: function PoPageBlockedUserReasonComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "img", 1);
            i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(5, "div", 4)(6, "div", 5);
            i0.ɵɵtext(7);
            i0.ɵɵpipe(8, "poI18n");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(9, "div", 6);
            i0.ɵɵtext(10);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(11, PoPageBlockedUserReasonComponent_div_11_Template, 2, 1, "div", 7);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("src", ctx.getImageByReasonType(), i0.ɵɵsanitizeUrl);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals == null ? null : ctx.literals.title);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(8, 5, ctx.literals == null ? null : ctx.literals.firstPhrase, ctx.literalParams), " ");
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals == null ? null : ctx.literals.secondPhrase);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.literals == null ? null : ctx.literals.thirdPhrase);
        } }, dependencies: [i2.NgIf, i1.PoI18nPipe], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageBlockedUserReasonComponent, [{
        type: Component,
        args: [{ selector: 'po-page-blocked-user-reason', template: "<div class=\"po-page-blocked-user-reason-content\">\n  <img class=\"po-page-blocked-user-image po-mb-3\" [src]=\"getImageByReasonType()\" />\n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">\n      {{ literals?.firstPhrase | poI18n: literalParams }}\n    </div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i1.PoLanguageService }], { params: [{
            type: Input,
            args: ['p-params']
        }], reason: [{
            type: Input,
            args: ['p-reason']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageBlockedUserReasonComponent, { className: "PoPageBlockedUserReasonComponent", filePath: "lib/components/po-page-blocked-user/po-page-blocked-user-reason/po-page-blocked-user-reason.component.ts", lineNumber: 13 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1ibG9ja2VkLXVzZXIvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90ZW1wbGF0ZXMvc3JjL2xpYi9jb21wb25lbnRzL3BvLXBhZ2UtYmxvY2tlZC11c2VyL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixTQUFTLEVBQUUsS0FBSyxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQXFCLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDOzs7OztJQ016Riw4QkFBMEU7SUFBQSxZQUEyQjtJQUFBLGlCQUFNOzs7SUFBakMsY0FBMkI7SUFBM0Isa0ZBQTJCOztBREV6RyxNQUFNLE9BQU8sZ0NBQWdDO0lBV2pDO0lBVlMsTUFBTSxDQUFnQztJQUV0QyxNQUFNLENBQTBCO0lBRW5ELGFBQWEsQ0FBQztJQUNkLFFBQVEsQ0FBb0Y7SUFFcEYsUUFBUSxDQUFTO0lBRXpCLFlBQ1UsY0FBaUMsRUFDekMsZUFBa0M7UUFEMUIsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBR3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckQsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksV0FBVyxDQUFDO1FBRWhCLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNuQixLQUFLLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU07YUFDUDtZQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsV0FBVyxHQUFHLGNBQWMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLEdBQUcsU0FBUyxDQUFDO2dCQUN4QixNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8sbUJBQW1CLFdBQVcsTUFBTSxDQUFDO0lBQzlDLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGFBQWE7WUFDaEIsSUFBSSxDQUFDLE1BQU0sS0FBSyxpQkFBaUI7Z0JBQy9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQzFELEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDekQsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzswRkEvRFUsZ0NBQWdDOzZEQUFoQyxnQ0FBZ0M7WUNaN0MsOEJBQWlEO1lBQy9DLHlCQUFpRjtZQUNqRiw4QkFBMkQsYUFBQTtZQUNuQyxZQUFxQjtZQUFBLGlCQUFNLEVBQUE7WUFFbkQsOEJBQTJELGFBQUE7WUFFdkQsWUFDRjs7WUFBQSxpQkFBTTtZQUNOLDhCQUE0QztZQUFBLGFBQTRCO1lBQUEsaUJBQU07WUFDOUUsbUZBQTJHO1lBQzdHLGlCQUFNLEVBQUE7O1lBVjBDLGNBQThCO1lBQTlCLGtFQUE4QjtZQUV0RCxlQUFxQjtZQUFyQixzRUFBcUI7WUFJekMsZUFDRjtZQURFLGdJQUNGO1lBQzRDLGVBQTRCO1lBQTVCLDZFQUE0QjtZQUMzQixjQUEyQjtZQUEzQiw2RUFBMkI7OztpRkRFL0QsZ0NBQWdDO2NBSjVDLFNBQVM7MkJBQ0UsNkJBQTZCO2tGQUlwQixNQUFNO2tCQUF4QixLQUFLO21CQUFDLFVBQVU7WUFFRSxNQUFNO2tCQUF4QixLQUFLO21CQUFDLFVBQVU7O2tGQUhOLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSwgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBwb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzIH0gZnJvbSAnLi8uLi9saXRlcmFscy9pMThuL3BvLXBhZ2UtYmxvY2tlZC11c2VyLWxpdGVyYWxzJztcbmltcG9ydCB7IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uIH0gZnJvbSAnLi4vZW51bXMvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmVudW0nO1xuaW1wb3J0IHsgUG9QYWdlQmxvY2tlZFVzZXJSZWFzb25QYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi1wYXJhbXMuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9QYWdlQmxvY2tlZFVzZXJSZWFzb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIEBJbnB1dCgncC1wYXJhbXMnKSBwYXJhbXM6IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uUGFyYW1zO1xuXG4gIEBJbnB1dCgncC1yZWFzb24nKSByZWFzb246IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uO1xuXG4gIGxpdGVyYWxQYXJhbXM7XG4gIGxpdGVyYWxzOiB7IHRpdGxlOiBzdHJpbmc7IGZpcnN0UGhyYXNlOiBzdHJpbmc7IHNlY29uZFBocmFzZTogc3RyaW5nOyB0aGlyZFBocmFzZTogc3RyaW5nIH07XG5cbiAgcHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucmVhc29uIHx8IGNoYW5nZXMucGFyYW1zKSB7XG4gICAgICB0aGlzLmdldExpdGVyYWxzKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5nZXRMaXRlcmFscygpO1xuICB9XG5cbiAgZ2V0SW1hZ2VCeVJlYXNvblR5cGUoKSB7XG4gICAgbGV0IHJlYXNvbkltYWdlO1xuXG4gICAgc3dpdGNoICh0aGlzLnJlYXNvbikge1xuICAgICAgY2FzZSAnbm9uZSc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnYmlnLWxvY2snO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2V4Y2VlZGVkQXR0ZW1wdHMnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2Jsb2NrZWQtdXNlcic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZXhwaXJlZFBhc3N3b3JkJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdleHBpcmVkJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgLi9hc3NldHMvaW1hZ2VzLyR7cmVhc29uSW1hZ2V9LnN2Z2A7XG4gIH1cblxuICBnZXRQYXJhbXMoKSB7XG4gICAgdGhpcy5saXRlcmFsUGFyYW1zID1cbiAgICAgIHRoaXMucmVhc29uID09PSAnZXhwaXJlZFBhc3N3b3JkJ1xuICAgICAgICA/IFt0aGlzLnBhcmFtcy5kYXlzLCB0aGlzLnBhcmFtcy5kYXlzXVxuICAgICAgICA6IFt0aGlzLnBhcmFtcy5hdHRlbXB0cywgdGhpcy5wYXJhbXMuaG91cnNdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXRlcmFscygpIHtcbiAgICB0aGlzLmdldFBhcmFtcygpO1xuXG4gICAgdGhpcy5saXRlcmFscyA9IHtcbiAgICAgIC4uLnBvUGFnZUJsb2NrZWRVc2VyTGl0ZXJhbHNbdGhpcy5yZWFzb25dW3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAuLi5wb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVt0aGlzLmxhbmd1YWdlXVxuICAgIH07XG5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cInBvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi1jb250ZW50XCI+XG4gIDxpbWcgY2xhc3M9XCJwby1wYWdlLWJsb2NrZWQtdXNlci1pbWFnZSBwby1tYi0zXCIgW3NyY109XCJnZXRJbWFnZUJ5UmVhc29uVHlwZSgpXCIgLz5cbiAgPGRpdiBjbGFzcz1cInBvLXBhZ2UtYmxvY2tlZC11c2VyLWhlYWRlciBwby1tYi1tZC0zIHBvLXJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJwby1tZC0xMlwiPnt7IGxpdGVyYWxzPy50aXRsZSB9fTwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInBvLXBhZ2UtYmxvY2tlZC11c2VyLXRleHQgcG8tZm9udC10ZXh0IHBvLXJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJwby1tYi1zbS0yIHBvLW1iLW1kLTMgcG8tbWQtMTIgcG8tcGFnZS1ibG9ja2VkLXVzZXItdGV4dC1ib2xkXCI+XG4gICAgICB7eyBsaXRlcmFscz8uZmlyc3RQaHJhc2UgfCBwb0kxOG46IGxpdGVyYWxQYXJhbXMgfX1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicG8tbWItc20tMiBwby1tYi1tZC0zIHBvLW1kLTEyXCI+e3sgbGl0ZXJhbHM/LnNlY29uZFBocmFzZSB9fTwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJwby1tYi1zbS0yIHBvLW1iLW1kLTMgcG8tbWQtMTJcIiAqbmdJZj1cImxpdGVyYWxzPy50aGlyZFBocmFzZVwiPnt7IGxpdGVyYWxzPy50aGlyZFBocmFzZSB9fTwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19