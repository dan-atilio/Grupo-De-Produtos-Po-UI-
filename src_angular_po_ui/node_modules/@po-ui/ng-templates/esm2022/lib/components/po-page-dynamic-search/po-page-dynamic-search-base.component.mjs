import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { poLocaleDefault } from '@po-ui/ng-components';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { poAdvancedFiltersLiteralsDefault } from './po-advanced-filter/po-advanced-filter-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@po-ui/ng-components";
export const poPageDynamicSearchLiteralsDefault = {
    en: {
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    },
    es: {
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar'
    },
    pt: {
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    },
    ru: {
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    }
};
/**
 * @description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
export class PoPageDynamicSearchBaseComponent {
    /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`. */
    actions = [];
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb = { items: [] };
    /**
     * @optional
     *
     * @description
     *
     * Mantém na busca avançada os valores preenchidos do último filtro realizado pelo usuário.
     *
     * @default `false`
     */
    keepFilters = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
     *
     * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
     * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
     * rápida também na lista de `disclaimers`.
     *
     * > Os valores que são emitidos no `p-quick-search` e no `p-advanced-search`
     * permanecem separados durante a emissão dos valores alterados. A concatenação
     * é apenas nos `disclaimers`.
     *
     * @default `false`
     */
    concatFilters = false;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    hideRemoveAllDisclaimer = false;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicSearchOptions`,
     * onde o usuário poderá customizar novos filtros, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicSearchOptions {
     * return {
     *   actions: [
     *     { label: 'Find on Google' },
     *   ],
     *   filters: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     */
    onLoad;
    /** Título da página. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Valor padrão na busca rápida ao inicializar o componente
     *
     */
    quickSearchValue;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
     *
     * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
     */
    advancedSearch = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
     */
    changeDisclaimers = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
     */
    quickSearch = new EventEmitter();
    advancedFilterLiterals;
    _filters = [];
    _hideCloseDisclaimers = [];
    _literals;
    _quickSearchWidth;
    previousFilters;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-dynamic-search`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-search
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-search>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageDynamicSearchLiteralsDefault[poLocaleDefault],
                ...poPageDynamicSearchLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageDynamicSearchLiteralsDefault[this.language];
        }
        this.setAdvancedFilterLiterals(this.literals);
    }
    get literals() {
        return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
        if (this.stringify(this._filters) !== this.stringify(this.previousFilters)) {
            this.onChangeFilters(this.filters);
            this.previousFilters = [...this._filters];
        }
    }
    get filters() {
        return this._filters;
    }
    /**
     * @optional
     *
     * @description
     *
     * Largura do campo de busca, utilizando o *Grid System*,
     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado
     * conforme resolução de tela para manter a consistência do layout.
     */
    set quickSearchWidth(value) {
        this._quickSearchWidth = convertToInt(value);
    }
    get quickSearchWidth() {
        return this._quickSearchWidth;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de filtros que terão a opção de fechar ocultada
     * em seu respectivo disclaimer. Utilizar o atributo `property` do filtro.
     *
     * Exemplo de utilização:
     * ```
     * ['city','name'];
     * ```
     */
    set hideCloseDisclaimers(value) {
        this._hideCloseDisclaimers = Array.isArray(value) ? value : [];
    }
    get hideCloseDisclaimers() {
        return this._hideCloseDisclaimers;
    }
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    setAdvancedFilterLiterals(literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    }
    stringify(columns) {
        // não faz o stringify da propriedade searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'searchService') {
                return value;
            }
        });
    }
    static ɵfac = function PoPageDynamicSearchBaseComponent_Factory(t) { return new (t || PoPageDynamicSearchBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDynamicSearchBaseComponent, inputs: { actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], keepFilters: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-keep-filters", "keepFilters", convertToBoolean], concatFilters: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-concat-filters", "concatFilters", convertToBoolean], hideRemoveAllDisclaimer: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-remove-all-disclaimer", "hideRemoveAllDisclaimer", convertToBoolean], onLoad: [i0.ɵɵInputFlags.None, "p-load", "onLoad"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], quickSearchValue: [i0.ɵɵInputFlags.None, "p-quick-search-value", "quickSearchValue"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], filters: [i0.ɵɵInputFlags.None, "p-filters", "filters"], quickSearchWidth: [i0.ɵɵInputFlags.None, "p-quick-search-width", "quickSearchWidth"], hideCloseDisclaimers: [i0.ɵɵInputFlags.None, "p-hide-close-disclaimers", "hideCloseDisclaimers"] }, outputs: { advancedSearch: "p-advanced-search", changeDisclaimers: "p-change-disclaimers", quickSearch: "p-quick-search" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicSearchBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { actions: [{
            type: Input,
            args: ['p-actions']
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], keepFilters: [{
            type: Input,
            args: [{ alias: 'p-keep-filters', transform: convertToBoolean }]
        }], concatFilters: [{
            type: Input,
            args: [{ alias: 'p-concat-filters', transform: convertToBoolean }]
        }], hideRemoveAllDisclaimer: [{
            type: Input,
            args: [{ alias: 'p-hide-remove-all-disclaimer', transform: convertToBoolean }]
        }], onLoad: [{
            type: Input,
            args: ['p-load']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], quickSearchValue: [{
            type: Input,
            args: ['p-quick-search-value']
        }], advancedSearch: [{
            type: Output,
            args: ['p-advanced-search']
        }], changeDisclaimers: [{
            type: Output,
            args: ['p-change-disclaimers']
        }], quickSearch: [{
            type: Output,
            args: ['p-quick-search']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], filters: [{
            type: Input,
            args: ['p-filters']
        }], quickSearchWidth: [{
            type: Input,
            args: ['p-quick-search-width']
        }], hideCloseDisclaimers: [{
            type: Input,
            args: ['p-hide-close-disclaimers']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,