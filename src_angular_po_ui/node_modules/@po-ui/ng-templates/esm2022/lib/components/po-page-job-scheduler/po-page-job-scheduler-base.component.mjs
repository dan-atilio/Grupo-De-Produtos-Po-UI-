import { Input, Directive, Output, EventEmitter } from '@angular/core';
import { PoStepperOrientation } from '@po-ui/ng-components';
import { PoPageJobSchedulerInternal } from './po-page-job-scheduler-internal';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./po-page-job-scheduler.service";
/**
 * @description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
export class PoPageJobSchedulerBaseComponent {
    poPageJobSchedulerService;
    /** Objeto com as propriedades do breadcrumb. */
    breadcrumb = { items: [] };
    /**
     * Endpoint usado pelo componente para busca dos processos e parâmetros que serão utilizados para criação e edição dos agendamentos.
     *
     * #### Processos
     *
     * Os processos são as tarefas que estarão disponíveis para o usuário poder fazer os agendamentos.
     * Ao inicializar o componente, será feito uma requisição `GET` para o endpoint `{service-api}/processes`, para buscar
     * essa lista de processos.
     *
     * Este endpoint `{service-api}/processes` deve retornar uma lista de objetos que seguem a definição de dados abaixo:
     *
     * ```
     * GET {service-api}/processes
     * ```
     *
     * ```
     * {
     *   items: [
     *     { "processID": "ac4f", "description": "Gerar folha de pagamento" },
     *     { "processID": "df6l", "description": "Relatório de imposto a recolher" },
     *     { "processID": "dk3p", "description": "Títulos em aberto" },
     *   ]
     * }
     * ```
     *
     * Desta forma será renderizado um componente para selecionar o processo e/ou filtrá-los.
     *
     * Para realizar o filtro de busca do processo, será feita uma requisição enviando o conteúdo digitado na busca através do
     * parâmetro `search`. Da seguinte forma:
     *
     * ```
     * GET {service-api}/processes?search=relatorio
     * ```
     *
     * > Veja mais sobre paginação e filtros no [Guia de implementação de APIs](guides/api).
     * Caso seja informada a propriedade `p-parameters` não serão realizadas as requisições de processos e nem de parametros automaticamente.
     *
     * Também é possível fazer um agendamento de um processo específico, sem que seja necessário um endpoint para busca desses
     * processos. Então, caso o endpoint `{service-api}/processes` não seja válido, será apresentado um campo de entrada de
     * texto para o usuário informar diretamente
     * o **identificador do processo - `processID`** e ao salvar será enviado um `POST` para o endpoint difinido `serviceApi` conforme abaixo:
     *
     * ```
     * POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "daily": { "hour": 10, "minute": 12 },
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "processID": "ac0405"
     *   ...
     * }
     * ```
     *
     * Caso seja necessário informar parâmetros e adicionar configurações no processo selecionado, será realizado um `GET`
     * como exemplificado abaixo. Os parâmetros devem retornar uma lista de objetos que seguem a interface
     * [PoDynamicFormField](/documentation/po-dynamic-form). Porém, caso utilizar a propriedade `p-parameters` o componente não
     * realizará a busca automática e o campo de processos não será exibido.
     *
     * ```
     * GET {service-api}/processes/:id/parameters
     * ...
     * {
     *   items: [
     *     { "property": "vencimento", type: "date" },
     *     { "property": "imposto-retido", "label": "Imposto Retido", type: "boolean" }
     *   ]
     * }
     * ```
     *
     * #### Salvar e Atualizar
     *
     * Para salvar o agendamento, será feita uma requisição de criação, passando os valores preenchidos pelo usuário via *payload*.
     * Abaixo uma requisição `POST` disparada, onde as propriedades do *Job Scheduler* foram preenchidas:
     *
     * ```
     *  POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "monthly": { "day": 1, "hour": 10, "minute": 0 },
     *   "processID": "ac0405",
     *   "rangeExecutions: { "frequency": { "type": "hour", "value": 2 }, "rangeLimit": { "hour": 18, "minute": 0, "day": 20 } }
     * }
     * ```
     *
     * Caso queira que o componente carregue um agendamento já existente, deve ser incluído um parâmetro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.
     *
     * ```
     * GET {service-api}/{id}
     * ```
     *
     * Ao atualizar o agendamento, será disparado um `PUT` com os dados preenchidos.
     * Veja abaixo uma requisição `PUT` disparada, onde a propriedade *recurrent* e *daily* foram atualizadas:
     *
     * ```
     *  PUT {service-api}/{id}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "processID": "ac0405",
     *   "monthly": { "day": 1, "hour": 10, "minute": 0 },
     *   "processID": "ac0405",
     *   "rangeExecutions: { "frequency": { "type": "hour", "value": 2 }, "rangeLimit": { "hour": 18, "minute": 0, "day": 20 } }
     * }
     * ```
     */
    serviceApi;
    /** Título da página. */
    title;
    /**
     * Parâmetros que serão utilizados para criação e edição dos agendamentos.
     *
     * Ao utilizar esta propriedade, o componente não buscará automaticamente os parâmetros da API e o campo para preenchimento do processo não será exibido.
     *
     */
    parameters = [];
    set value(value) {
        this.model = this.poPageJobSchedulerService.convertToJobSchedulerInternal(value);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `po-stepper`.
     *
     * > Quando não utilizada, segue o comportamento com base nas dimensões da tela.
     *
     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
     *
     */
    set stepperDefaultOrientation(value) {
        this._orientation = Object.values(PoStepperOrientation).includes(value) ? value : undefined;
    }
    get stepperDefaultOrientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Função chamada após realizar a confirmação da execução no PoPageJobScheduler.
     * Permite alterar os valores do model do PoPageJobScheduler antes de realizar o envio para a Api.
     *
     * > Deve retornar um objeto do tipo `PoPageJobScheduler` para ser adicionado ao model do PoPageJobScheduler.
     *
     * > Ao ser disparada, a mesma receberá por parâmetro o model do PoPageJobScheduler de interface `PoJobSchedulerInternal`.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoPageJobScheduler`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `beforeSend`:
     *
     * ```
     * <po-page-job-scheduler [p-service-api]="serviceApi" [p-parameters]="params" [p-before-send]="beforeSend.bind(this)">
     * ...
     * </po-page-job-scheduler>
     * ```
     */
    beforeSendAction;
    /**
     * @optional
     *
     * @description
     *
     * Define se o step `Agendamento` deve ser exibido como o último na sequência de steps
     *
     * > Aplicável apenas quando utilizado `PoJobSchedulerParametersTemplateDirective`
     */
    stepExecutionLast;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao concluir o processo de agendamento com sucesso.
     */
    success = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao ocorrer um erro impossibilitando a conclusão do agendamento.
     * Para este evento será passado como parâmetro os detalhes do erro.
     */
    error = new EventEmitter();
    model = new PoPageJobSchedulerInternal();
    _subscription = new Subscription();
    _orientation;
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
    }
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    loadData(id) {
        if (!id) {
            this.model = this.model || new PoPageJobSchedulerInternal();
            return;
        }
        this._subscription.add(this.poPageJobSchedulerService.getResource(id).subscribe((response) => {
            this.model = response;
        }, () => {
            this.model = new PoPageJobSchedulerInternal();
        }));
    }
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
    static ɵfac = function PoPageJobSchedulerBaseComponent_Factory(t) { return new (t || PoPageJobSchedulerBaseComponent)(i0.ɵɵdirectiveInject(i1.PoPageJobSchedulerService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageJobSchedulerBaseComponent, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], serviceApi: [i0.ɵɵInputFlags.None, "p-service-api", "serviceApi"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], parameters: [i0.ɵɵInputFlags.None, "p-parameters", "parameters"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], stepperDefaultOrientation: [i0.ɵɵInputFlags.None, "p-orientation", "stepperDefaultOrientation"], beforeSendAction: [i0.ɵɵInputFlags.None, "p-before-send", "beforeSendAction"], stepExecutionLast: [i0.ɵɵInputFlags.None, "p-step-execution-last", "stepExecutionLast"] }, outputs: { success: "p-success", error: "p-error" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageJobSchedulerBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoPageJobSchedulerService }], { breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], serviceApi: [{
            type: Input,
            args: ['p-service-api']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], parameters: [{
            type: Input,
            args: ['p-parameters']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], stepperDefaultOrientation: [{
            type: Input,
            args: ['p-orientation']
        }], beforeSendAction: [{
            type: Input,
            args: ['p-before-send']
        }], stepExecutionLast: [{
            type: Input,
            args: ['p-step-execution-last']
        }], success: [{
            type: Output,
            args: ['p-success']
        }], error: [{
            type: Output,
            args: ['p-error']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,