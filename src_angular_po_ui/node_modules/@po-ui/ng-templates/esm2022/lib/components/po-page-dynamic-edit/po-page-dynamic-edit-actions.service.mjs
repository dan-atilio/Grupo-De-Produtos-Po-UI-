import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageDynamicEditActionsService {
    http;
    headers = new HttpHeaders({
        'X-PO-SCREEN-LOCK': 'true'
    });
    constructor(http) {
        this.http = http;
    }
    beforeCancel(action) {
        return this.executeAction({ action });
    }
    beforeSave(action, id, body) {
        const resource = body ?? {};
        return this.executeAction({ action, resource, id });
    }
    beforeSaveNew(action, id, body) {
        const resource = body ?? {};
        return this.executeAction({ action, resource, id });
    }
    executeAction({ action, resource = {}, id }) {
        if (!action) {
            return of({});
        }
        if (typeof action === 'string') {
            const url = id ? `${action}/${id}` : action;
            return this.http.post(url, resource, { headers: this.headers });
        }
        return of(action(resource, id));
    }
    static ɵfac = function PoPageDynamicEditActionsService_Factory(t) { return new (t || PoPageDynamicEditActionsService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoPageDynamicEditActionsService, factory: PoPageDynamicEditActionsService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicEditActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLWVkaXQtYWN0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGVtcGxhdGVzL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlLWR5bmFtaWMtZWRpdC9wby1wYWdlLWR5bmFtaWMtZWRpdC1hY3Rpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLEVBQUUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7O0FBZ0J0QyxNQUFNLE9BQU8sK0JBQStCO0lBS3RCO0lBSlgsT0FBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztRQUM5QyxrQkFBa0IsRUFBRSxNQUFNO0tBQzNCLENBQUMsQ0FBQztJQUVILFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBRyxDQUFDO0lBRXhDLFlBQVksQ0FBQyxNQUFnRDtRQUMzRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxVQUFVLENBQ1IsTUFBOEMsRUFDOUMsRUFBVSxFQUNWLElBQVM7UUFFVCxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsYUFBYSxDQUNYLE1BQWlELEVBQ2pELEVBQVUsRUFDVixJQUFTO1FBRVQsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLGFBQWEsQ0FBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBMEI7UUFDNUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sRUFBRSxDQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDOUIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBRTVDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNwRTtRQUVELE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO3lGQXpDVSwrQkFBK0I7Z0VBQS9CLCtCQUErQixXQUEvQiwrQkFBK0IsbUJBRjlCLE1BQU07O2lGQUVQLCtCQUErQjtjQUgzQyxVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNFZGl0QWN0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtZWRpdC1hY3Rpb25zLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljRWRpdEJlZm9yZUNhbmNlbCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtZWRpdC1iZWZvcmUtY2FuY2VsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljRWRpdEJlZm9yZVNhdmUgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLWVkaXQtYmVmb3JlLXNhdmUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNFZGl0QmVmb3JlU2F2ZU5ldyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtZWRpdC1iZWZvcmUtc2F2ZS1uZXcuaW50ZXJmYWNlJztcblxuaW50ZXJmYWNlIEV4ZWN1dGVBY3Rpb25QYXJhbWV0ZXIge1xuICBhY3Rpb246IHN0cmluZyB8IEZ1bmN0aW9uO1xuICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgcmVzb3VyY2U/OiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUR5bmFtaWNFZGl0QWN0aW9uc1NlcnZpY2Uge1xuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgJ1gtUE8tU0NSRUVOLUxPQ0snOiAndHJ1ZSdcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGJlZm9yZUNhbmNlbChhY3Rpb246IFBvUGFnZUR5bmFtaWNFZGl0QWN0aW9uc1snYmVmb3JlQ2FuY2VsJ10pOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNFZGl0QmVmb3JlQ2FuY2VsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiB9KTtcbiAgfVxuXG4gIGJlZm9yZVNhdmUoXG4gICAgYWN0aW9uOiBQb1BhZ2VEeW5hbWljRWRpdEFjdGlvbnNbJ2JlZm9yZVNhdmUnXSxcbiAgICBpZDogc3RyaW5nLFxuICAgIGJvZHk6IGFueVxuICApOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNFZGl0QmVmb3JlU2F2ZT4ge1xuICAgIGNvbnN0IHJlc291cmNlID0gYm9keSA/PyB7fTtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uLCByZXNvdXJjZSwgaWQgfSk7XG4gIH1cblxuICBiZWZvcmVTYXZlTmV3KFxuICAgIGFjdGlvbjogUG9QYWdlRHluYW1pY0VkaXRBY3Rpb25zWydiZWZvcmVTYXZlTmV3J10sXG4gICAgaWQ6IHN0cmluZyxcbiAgICBib2R5OiBhbnlcbiAgKTogT2JzZXJ2YWJsZTxQb1BhZ2VEeW5hbWljRWRpdEJlZm9yZVNhdmVOZXc+IHtcbiAgICBjb25zdCByZXNvdXJjZSA9IGJvZHkgPz8ge307XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgcmVzb3VyY2UsIGlkIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBleGVjdXRlQWN0aW9uPFQ+KHsgYWN0aW9uLCByZXNvdXJjZSA9IHt9LCBpZCB9OiBFeGVjdXRlQWN0aW9uUGFyYW1ldGVyKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgIHJldHVybiBvZig8VD57fSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB1cmwgPSBpZCA/IGAke2FjdGlvbn0vJHtpZH1gIDogYWN0aW9uO1xuXG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8VD4odXJsLCByZXNvdXJjZSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKGFjdGlvbihyZXNvdXJjZSwgaWQpKTtcbiAgfVxufVxuIl19