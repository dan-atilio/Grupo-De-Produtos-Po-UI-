import { Component, Input } from '@angular/core';
import { EMPTY, Subscription, of } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
import { PoTableColumnSortType, PoTableColumnSpacing, poLocaleDefault } from '@po-ui/ng-components';
import * as util from '../../utils/util';
import { convertToBoolean } from '../../utils/util';
import { PoPageDynamicDetailComponent } from '../po-page-dynamic-detail/po-page-dynamic-detail.component';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { isExternalLink, openExternalLink, removeDuplicateItemsWithArrayKey } from '../../utils/util';
import { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';
import { poPageDynamicTableLiteralsDefault } from './po-page-dynamic-table-literals';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@po-ui/ng-components";
import * as i3 from "../../services/po-page-dynamic/po-page-dynamic.service";
import * as i4 from "./../../services/po-page-customization/po-page-customization.service";
import * as i5 from "./po-page-dynamic-table-actions.service";
import * as i6 from "../po-page-dynamic-search/po-page-dynamic-search.component";
const PAGE_SIZE_DEFAULT = 10;
/**
 * @docsExtends PoPageDynamicListBaseComponent
 *
 * @description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para inicializar o template, o `page-dynamic-table` disponibiliza propriedades que devem ser fornecidas no arquivo de configuração de rotas da aplicação, para
 * poder especificar o endpoint dos dados e dos metadados que serão carregados na inicialização.
 *
 * Exemplo de utilização:
 *
 * Arquivo de configuração de rotas da aplicação: `app-routing.module.ts`
 * ```
 * const routes: Routes = [
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post
 *   }
 *  },
 *  {
 *   path: 'home',
 *   component: HomeExampleComponent
 *  }
 * ];
 *
 * ```
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi.
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * > Caso o servidor retornar um erro ao recuperar os metadados, serão repassados os metadados salvos em cache,
 * se o cache não existir será disparada uma notificação.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ],
 *   keepFilters: true
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-table-basic" title="PO Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-people" title="PO Page Dynamic Table - People">
 *  <file name="sample-po-page-dynamic-table-people/sample-po-page-dynamic-table-people.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-people/sample-po-page-dynamic-table-people.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="PO Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.service.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-hotels" title="PO Page Dynamic Table - Hotels">
 *  <file name="sample-po-page-dynamic-table-hotels/sample-po-page-dynamic-table-hotels.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-hotels/sample-po-page-dynamic-table-hotels.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-drag-and-drop" title="PO Page Dynamic Table - Drag and Drop">
 *  <file name="sample-po-page-dynamic-table-drag-and-drop/sample-po-page-dynamic-table-drag-and-drop.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-drag-and-drop/sample-po-page-dynamic-table-drag-and-drop.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent {
    router;
    activatedRoute;
    poDialogService;
    poNotification;
    poPageDynamicService;
    poPageCustomizationService;
    poPageDynamicTableActionsService;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicTableOptions`,
     * onde o usuário poderá customizar novos campos, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicTableOptions {
     * return {
     *   actions:
     *     { new: 'new', edit: 'edit/:id', remove: true },
     *   fields: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     */
    onLoad;
    /**
     * @optional
     *
     * @description
     *
     * Mantém na modal de `Busca Avançada` os valores preenchidos do último filtro realizado pelo usuário.
     *
     * @default `false`
     */
    keepFilters = false;
    /**
     * @optional
     *
     * @description
     *
     * Define que a coluna de ações ficará no lado direito da tabela.
     *
     * @default `false`
     */
    actionRight = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
     *
     * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
     * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
     * rápida também na lista de `disclaimers` a aplicando uma nova busca com a concatenação.
     *
     * Por exemplo, com os seguintes filtros aplicados:
     *   - filtro avançado: `{ name: 'Mike', age: '12' }`
     *   - filtro rápido: `{ search: 'paper' }`
     *
     * A requisição dos dados na API ficará com os parâmetros:
     * ```
     * page=1&pageSize=10&name=Mike&age=12&search=paper
     * ```
     *
     * @default `false`
     */
    concatFilters = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
     *
     * @default `false`
     */
    hideColumnsManager = false;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    hideRemoveAllDisclaimer = false;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão "Carregar Mais" deixará de ser exibido. Ao chegar no fim da tabela
     * executará a função `p-show-more`.
     *
     * **Regras de utilização:**
     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.
     *
     * @default `false`
     */
    infiniteScroll = false;
    hasNext = false;
    items = [];
    literals;
    pageActions = [];
    tableActions = [];
    _actions = {};
    _pageCustomActions = [];
    _height;
    _oldQuickSearchParam;
    _quickSearchParam = 'search';
    _quickSearchValue;
    _quickSearchWidth;
    _tableCustomActions = [];
    page = 1;
    currentPage = 1;
    itemSelectedAction;
    params = {};
    sortedColumn;
    subscriptions = new Subscription();
    hasCustomActionWithSelectable = false;
    _customPageListActions = [];
    _customTableActions = [];
    _defaultPageActions = [];
    _defaultTableActions = [];
    _hideCloseDisclaimers = [];
    _draggable = false;
    _spacing = PoTableColumnSpacing.Medium;
    set defaultPageActions(value) {
        this._defaultPageActions = value;
        this.updatePageActions();
    }
    set defaultTableActions(value) {
        this._defaultTableActions = value;
        this.updateTableActions();
    }
    set customPageListActions(value) {
        this._customPageListActions = value;
        this.updatePageActions();
    }
    set customTableActions(value) {
        this._customTableActions = value;
        this.updateTableActions();
    }
    /**
     * @optional
     *
     * @description
     *
     * Ações da página e da tabela.
     * > Caso utilizar a ação padrão de excluir, a mesma será exibida por último na tabela.
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações customizadas da página que serão incorporadas às ações
     * informadas através da propriedade `p-actions`.
     *
     * Essas ações ficam localizadas na parte superior da página em botões com ações.
     *
     * Exemplo de utilização:
     * ```
     * [
     *  { label: 'Export', action: this.export.bind(this) },
     *  { label: 'Print', action: this.print.bind(this) }
     * ];
     * ```
     */
    set pageCustomActions(value) {
        this._pageCustomActions = Array.isArray(value) ? value : [];
        this.customPageListActions = this.transformCustomActionsToPageListAction(this.pageCustomActions);
        this.hasCustomActionWithSelectable = this.pageCustomActions.some(customAction => customAction.selectable);
    }
    get pageCustomActions() {
        return this._pageCustomActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações customizadas na tabela da página que serão incorporadas às ações
     * informadas através da propriedade `p-actions`.
     *
     * Exemplo de utilização:
     * ```
     * [
     *  { label: 'Apply discount', action: this.applyDiscount.bind(this) },
     *  { label: 'Details', action: this.details.bind(this) }
     * ];
     * ```
     * > Caso utilizar a ação padrão de excluir, a mesma será exibida por último na tabela.
     */
    set tableCustomActions(value) {
        this._tableCustomActions = Array.isArray(value) ? value : [];
        this.customTableActions = this.transformTableCustomActionsToTableActions(this.tableCustomActions);
    }
    get tableCustomActions() {
        return this._tableCustomActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Largura do campo de busca, utilizando o *Grid System*,
     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado
     * conforme resolução de tela para manter a consistência do layout.
     */
    set quickSearchWidth(value) {
        this._quickSearchWidth = util.convertToInt(value);
    }
    get quickSearchWidth() {
        return this._quickSearchWidth;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     */
    set height(value) {
        this._height = util.convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de filtros que terão a opção de fechar ocultada
     * em seu respectivo disclaimer. Utilizar o atributo `property` do campo.
     *
     * Exemplo de utilização:
     * ```
     * ['city','name'];
     * ```
     */
    set hideCloseDisclaimers(value) {
        this._hideCloseDisclaimers = Array.isArray(value) ? value : [];
    }
    get hideCloseDisclaimers() {
        return this._hideCloseDisclaimers;
    }
    /**
     * @optional
     *
     * @description
     *
     * Identificador do parâmetro enviado ao serviço ao realizar uma busca rápida.
     *
     * @default 'search'
     */
    set quickSearchParam(value) {
        this._quickSearchParam = value ?? 'search';
    }
    get quickSearchParam() {
        return this._quickSearchParam;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor padrão na busca rápida ao inicializar o componente
     *
     */
    set quickSearchValue(value) {
        this._quickSearchValue = value;
    }
    get quickSearchValue() {
        return this._quickSearchValue;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-dynamic-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-table
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-table>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    searchLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Responsável por aplicar espaçamento nas colunas.
     *
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     *
     * @default `medium`
     */
    set spacing(value) {
        if (value === 'small' || value === 'medium' || value === 'large') {
            this._spacing = value;
        }
        else {
            this._spacing = PoTableColumnSpacing.Medium;
        }
    }
    get spacing() {
        return this._spacing;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     *
     * @default `false`
     */
    textWrap = false;
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo drag and drop para as colunas da tabela.
     *
     */
    set draggable(value) {
        this._draggable = value;
    }
    get draggable() {
        return this._draggable;
    }
    constructor(router, activatedRoute, poDialogService, poNotification, poPageDynamicService, poPageCustomizationService, poPageDynamicTableActionsService, languageService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poDialogService = poDialogService;
        this.poNotification = poNotification;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageCustomizationService = poPageCustomizationService;
        this.poPageDynamicTableActionsService = poPageDynamicTableActionsService;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poPageDynamicTableLiteralsDefault[poLocaleDefault],
            ...poPageDynamicTableLiteralsDefault[language]
        };
    }
    ngOnInit() {
        this.loadDataFromAPI();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    onAdvancedSearch(filter) {
        this.subscriptions.add(this.loadData({ page: 1, ...filter }).subscribe());
        this.params = filter;
        if (this.keepFilters) {
            this.updateFilterValue(filter);
        }
    }
    onChangeDisclaimers(disclaimers) {
        const filter = {};
        disclaimers.forEach(disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        });
        this.onAdvancedSearch(filter);
    }
    onQuickSearch(termTypedInQuickSearch) {
        const quickSearchParam = termTypedInQuickSearch ? { [this.quickSearchParam]: termTypedInQuickSearch } : {};
        this.params = this.concatFilters ? { ...this.params, ...quickSearchParam } : { ...quickSearchParam };
        if (this._oldQuickSearchParam in this.params && this._oldQuickSearchParam !== this.quickSearchParam) {
            delete this.params[this._oldQuickSearchParam];
        }
        this._oldQuickSearchParam = this.quickSearchParam;
        this.subscriptions.add(this.loadData(termTypedInQuickSearch ? { page: 1, ...this.params } : undefined).subscribe());
    }
    onSort(sortedColumn) {
        if (this.height) {
            const order = sortedColumn.type === 'ascending' ? true : false;
            util.sortArrayOfObjects(this.items, sortedColumn.column.property, order);
        }
        this.sortedColumn = sortedColumn;
    }
    onChangeVisibleColumns(value) {
        this.changeVisibleColumns.emit(value);
    }
    onColumnRestoreManager(value) {
        this.columnRestoreManager.emit(value);
    }
    onSortBy(sortedColumn) {
        this.sortBy.emit(sortedColumn);
    }
    showMore() {
        this.subscriptions.add(this.loadData({ page: ++this.page, ...this.params }).subscribe());
    }
    get enableSelectionTable() {
        return this.hasActionRemoveAll || this.hasCustomActionWithSelectable;
    }
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    /**
     * Função que realiza a atualização dos dados da tabela.
     *
     * Para utilizá-la é necessário capturar a instância do `page dynamic table`, como por exemplo:
     *
     * ``` html
     * <po-page-dynamic-table #dynamicTable [p-service-api]="serviceApi"></po-page-dynamic-table>
     * ```
     *
     * ``` javascript
     * import { PoPageDynamicTableComponent, PoDynamicFormField } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('dynamicTable', { static: true }) dynamicTable: PoPageDynamicTableComponent;
     *
     * pageCustomActions: Array<PoPageDynamicTableCustomAction> = [
     * {
     *   label: 'Update',
     *   action: this.updateTable.bind(this),
     *   icon: 'po-icon-refresh'
     * }]
     *
     * updateTable() {
     *   this.dynamicTable.updateDataTable();
     * }
     * ```
     *
     *
     * @param {{page: number, key: value }} filter Propriedade para envio de um filtro customizado.
     * Exemplo de envio:
     *
     *```
     * this.dynamicTable.updateDataTable({page: 3, search: 'Brasil'});
     * ```
     * Caso não seja passado um filtro customizado para o método `updateDataTable` a tabela será atualizada conforme a página do ultimo item modificado.
     */
    updateDataTable(filter) {
        const indexItemSelected = this.items.findIndex(item => item === this.itemSelectedAction);
        const pageNumber = Math.floor(indexItemSelected / PAGE_SIZE_DEFAULT);
        this.currentPage = pageNumber < 0 ? this.currentPage : pageNumber + 1;
        if (this.currentPage === undefined) {
            this.currentPage = 1;
        }
        if (filter) {
            this.subscriptions.add(this.loadData(filter).subscribe());
        }
        else {
            this.subscriptions.add(this.loadData({ page: this.currentPage, ...this.params }).subscribe());
        }
    }
    confirmRemove(actionRemove, actionBeforeRemove, item) {
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item, actionRemove, actionBeforeRemove)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    confirmRemoveAll(actionRemoveAll, actionBeforeRemoveAll) {
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this, actionRemoveAll, actionBeforeRemoveAll)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    formatUniqueKey(item) {
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    getOrderParam(sortedColumn = { type: undefined }) {
        const { column, type } = sortedColumn;
        if (!column) {
            return {};
        }
        if (type === PoTableColumnSortType.Descending) {
            return { order: `-${column.property}` };
        }
        return { order: `${column.property}` };
    }
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.poNotification.error(this.literals.loadDataErrorNotification);
            return EMPTY;
        }
        const orderParam = this.getOrderParam(this.sortedColumn);
        const defaultParams = { page: 1, pageSize: PAGE_SIZE_DEFAULT };
        const fullParams = { ...defaultParams, ...params, ...orderParam };
        return this.poPageDynamicService.getResources(fullParams).pipe(tap(response => {
            let newArray;
            if (fullParams.page === 1) {
                newArray = removeDuplicateItemsWithArrayKey(response.items, response.items, this.keys);
            }
            else {
                newArray = removeDuplicateItemsWithArrayKey(this.items, response.items, this.keys);
            }
            this.items = newArray ? [...newArray] : this.items;
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        }));
    }
    getMetadata(serviceApiFromRoute, onLoad) {
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata().pipe(tap(response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
                this.pageCustomActions = response.pageCustomActions || this.pageCustomActions;
                this.tableCustomActions = response.tableCustomActions || this.tableCustomActions;
                this.keepFilters = response.keepFilters || this.keepFilters;
                this.concatFilters = response.concatFilters || this.concatFilters;
                this.hideRemoveAllDisclaimer = response.hideRemoveAllDisclaimer || this.hideRemoveAllDisclaimer;
                this.hideCloseDisclaimers = response.hideCloseDisclaimers || this.hideCloseDisclaimers;
                this.quickSearchWidth = response.quickSearchWidth || this.quickSearchWidth;
            }), switchMap(() => this.loadOptionsOnInitialize(onLoad)));
        }
        return this.loadOptionsOnInitialize(onLoad);
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params }).catch(() => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift({
                path: route.path,
                component: route.component,
                data: { serviceApi: this.serviceApi, autoRouter: true }
            });
            this.navigateTo(route, true);
        });
    }
    createConcatenatedUrl(concatKeys, url, selectedItem) {
        const keys = this.keys.map(key => encodeURIComponent(selectedItem[key])).join();
        return concatKeys ? `${url}/${keys}` : url;
    }
    openDetail(action, item) {
        const id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDetail(this.actions.beforeDetail, id, item)
            .subscribe((beforeDetailResult) => this.executeDetail(action, beforeDetailResult, id, item)));
    }
    executeDetail(action, beforeDetailResult, id, item) {
        const before = beforeDetailResult ?? {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const { newUrl } = before;
        if (allowAction && action) {
            if (newUrl) {
                const path = this.getPathFromNewUrl(newUrl, id);
                return this.navigateTo({ path });
            }
            if (typeof action === 'string') {
                const url = this.resolveUrl(item, action);
                this.navigateTo({ path: action, url, component: PoPageDynamicDetailComponent });
            }
            else {
                action(id, item);
            }
        }
    }
    getPathFromNewUrl(newUrl, id) {
        if (newUrl.includes(':id')) {
            return newUrl.replace(/:id/g, id);
        }
        return newUrl;
    }
    openDuplicate(actionDuplicate, item) {
        const id = this.formatUniqueKey(item);
        const duplicates = util.removeKeysProperties(this.keys, util.mapObjectByProperties(item, this.duplicates));
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDuplicate(this.actions.beforeDuplicate, id, duplicates)
            .subscribe((beforeDuplicateResult) => this.executeDuplicate(actionDuplicate, beforeDuplicateResult, duplicates)));
    }
    executeDuplicate(actionDuplicate, beforeDuplicateResult, duplicates) {
        const before = beforeDuplicateResult ?? {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const beforeDuplicateResource = before.resource;
        const newAction = before.newUrl ?? actionDuplicate;
        if (allowAction && actionDuplicate) {
            if (typeof beforeDuplicateResource === 'object' && beforeDuplicateResource !== null) {
                duplicates = util.removeKeysProperties(this.keys, beforeDuplicateResource);
            }
            if (typeof newAction === 'string') {
                return this.navigateTo({ path: newAction, params: { duplicate: JSON.stringify(duplicates) } });
            }
            return newAction(duplicates);
        }
    }
    openEdit(actionEdit, item) {
        const id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeEdit(this.actions.beforeEdit, id, item)
            .pipe(switchMap((beforeEditResult) => this.executeEditAction(actionEdit, beforeEditResult, item, id)))
            .subscribe());
    }
    executeEditAction(action, beforeEditResult, item, id) {
        const newEditAction = beforeEditResult?.newUrl ?? action;
        const allowAction = beforeEditResult?.allowAction ?? true;
        if (!allowAction) {
            return EMPTY;
        }
        if (typeof newEditAction === 'string') {
            this.openEditUrl(newEditAction, item);
        }
        else {
            const updatedItem = newEditAction(id, item);
            if (typeof updatedItem === 'object' && updatedItem !== null) {
                this.modifyUITableItem(item, util.removeKeysProperties(this.keys, updatedItem));
            }
        }
        return EMPTY;
    }
    openEditUrl(path, item) {
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
    }
    modifyUITableItem(currentItem, newItemValue) {
        const tableItem = this.items.findIndex(item => item === currentItem);
        this.items[tableItem] = { ...currentItem, ...newItemValue };
    }
    openNew(actionNew) {
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeNew(this.actions.beforeNew)
            .subscribe((beforeNewResult) => this.executeNew(actionNew, beforeNewResult)));
    }
    executeNew(actionNew, beforeNewResult) {
        const before = beforeNewResult ?? {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const { newUrl } = before;
        if (allowAction && actionNew) {
            if (newUrl) {
                return this.navigateTo({ path: newUrl });
            }
            if (typeof actionNew === 'string') {
                return this.navigateTo({ path: actionNew });
            }
            return actionNew();
        }
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'po' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|po
     */
    remove(item, actionRemove, actionBeforeRemove) {
        const uniqueKey = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemove(actionBeforeRemove, uniqueKey, item)
            .pipe(switchMap(beforeRemove => this.deleteAction(item, actionRemove, beforeRemove)))
            .subscribe());
    }
    deleteAction(item, actionRemove, beforeRemove) {
        const { allowAction, newUrl } = beforeRemove || {};
        const allow = allowAction ?? true;
        if (allow) {
            let uniqueKey = this.formatUniqueKey(item);
            const resourceToRemoveKey = this.returnResourcesKeys([item]);
            if (typeof actionRemove === 'boolean' || newUrl) {
                uniqueKey = newUrl ? undefined : uniqueKey;
                return this.poPageDynamicService
                    .deleteResource(uniqueKey, newUrl)
                    .pipe(map(() => this.removeFromUI(resourceToRemoveKey, this.literals.removeSuccessNotification)));
            }
            return of(actionRemove(uniqueKey, item)).pipe(tap(remove => {
                const removeItem = remove ?? false;
                this.removeFromUI(resourceToRemoveKey, this.literals.removeSuccessNotification, removeItem);
            }));
        }
        return of({});
    }
    removeFromUI(items, message, remove = true) {
        if (remove === true && items?.length) {
            this.removeLocalItems(items);
            this.poNotification.success(message);
        }
    }
    removeAll(actionRemoveAll, actionBeforeRemoveAll) {
        const originalResourcesKeys = this.getSelectedItemsKeys();
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemoveAll(actionBeforeRemoveAll, originalResourcesKeys)
            .pipe(switchMap(beforeRemove => this.deleteAllAction(actionRemoveAll, beforeRemove, originalResourcesKeys)))
            .subscribe());
    }
    getSelectedItemsKeys() {
        const resources = this.items.filter(item => item.$selected);
        if (resources.length === 0) {
            return;
        }
        return this.returnResourcesKeys(resources);
    }
    returnResourcesKeys(resources) {
        return util.mapArrayByProperties(resources, this.keys);
    }
    deleteAllAction(actionRemoveAll, beforeRemoveAll, originalResources) {
        const { allowAction, newUrl, resources } = beforeRemoveAll ?? {};
        const allow = allowAction ?? true;
        const resourcestoDelete = resources ?? originalResources;
        if (allow && Array.isArray(resourcestoDelete)) {
            if (typeof actionRemoveAll === 'boolean' || newUrl) {
                return this.poPageDynamicService.deleteResources(resourcestoDelete, newUrl).pipe(tap(() => {
                    this.removeFromUI(resourcestoDelete, this.literals.removeAllSuccessNotification);
                }));
            }
            return of(actionRemoveAll(resourcestoDelete)).pipe(tap(removeItems => this.removeFromUI(removeItems, this.literals.removeSuccessNotification)));
        }
        return of({});
    }
    removeLocalItems(itemsKeysToRemove = []) {
        if (itemsKeysToRemove.length) {
            this.items = this.items.filter(item => {
                const itemKey = this.formatUniqueKey(item);
                return !itemsKeysToRemove.find(itemKeyToRemove => util.valuesFromObject(itemKeyToRemove).join('|') === itemKey);
            });
        }
    }
    resolveUrl(item, path) {
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    setPageActions(actions) {
        if (actions?.new) {
            this.defaultPageActions = [{ label: this.literals.pageAction, action: this.openNew.bind(this, actions.new) }];
        }
    }
    transformCustomActionsToPageListAction(customActions) {
        /* istanbul ignore next */
        return customActions.map(customAction => ({
            label: customAction.label,
            action: this.callPageCustomAction.bind(this, customAction),
            disabled: this.isDisablePageCustomAction.bind(this, customAction),
            ...(customAction.icon && { icon: customAction.icon }),
            visible: customAction.visible
        }));
    }
    transformTableCustomActionsToTableActions(tableCustomActions) {
        return tableCustomActions.map(tableCustomAction => ({
            label: tableCustomAction.label,
            icon: tableCustomAction.icon,
            action: this.callTableCustomAction.bind(this, tableCustomAction),
            disabled: tableCustomAction.disabled,
            visible: tableCustomAction.visible
        }));
    }
    isDisablePageCustomAction(customAction) {
        return customAction.selectable && !this.getSelectedItemsKeys();
    }
    callPageCustomAction(customAction) {
        if (customAction.action) {
            const selectedItems = customAction.selectable ? this.getSelectedItemsKeys() : undefined;
            const sendCustomActionSubscription = this.poPageDynamicTableActionsService
                .customAction(customAction.action, selectedItems)
                .subscribe();
            this.subscriptions.add(sendCustomActionSubscription);
        }
        else if (customAction.url) {
            this.navigateTo({ path: customAction.url });
        }
    }
    callTableCustomAction(customAction, selectedItem) {
        this.itemSelectedAction = selectedItem;
        if (customAction.action) {
            const sendCustomActionSubscription = this.poPageDynamicTableActionsService
                .customAction(customAction.action, selectedItem)
                .subscribe(updatedItem => {
                if (typeof updatedItem === 'object' && updatedItem !== null) {
                    this.modifyUITableItem(selectedItem, util.removeKeysProperties(this.keys, updatedItem));
                }
            });
            this.subscriptions.add(sendCustomActionSubscription);
        }
        else if (customAction.url) {
            if (isExternalLink(customAction.url)) {
                openExternalLink(this.createConcatenatedUrl(customAction.concatKeys, customAction.url, selectedItem));
            }
            else {
                this.navigateTo({
                    path: this.createConcatenatedUrl(customAction.concatKeys, customAction.url, selectedItem)
                });
            }
        }
    }
    setRemoveAllAction() {
        const action = this._actions;
        if (this.showRemove(action.removeAll)) {
            this.defaultPageActions = [
                ...this._defaultPageActions,
                {
                    label: this.literals.pageActionRemoveAll,
                    action: this.confirmRemoveAll.bind(this, action.removeAll, action.beforeRemoveAll),
                    disabled: this.disableRemoveAll.bind(this),
                    type: 'danger'
                }
            ];
        }
    }
    disableRemoveAll() {
        return !this.getSelectedItemsKeys();
    }
    setTableActions(actions) {
        if (actions) {
            const visibleRemove = this.showRemove(actions.remove);
            this.defaultTableActions = [
                {
                    action: this.openDetail.bind(this, actions.detail),
                    label: this.literals.tableActionView,
                    visible: !!this._actions.detail
                },
                {
                    action: this.openEdit.bind(this, actions.edit),
                    label: this.literals.tableActionEdit,
                    visible: !!this._actions.edit
                },
                {
                    action: this.openDuplicate.bind(this, actions.duplicate),
                    label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                {
                    action: this.confirmRemove.bind(this, actions.remove, actions.beforeRemove),
                    label: this.literals.tableActionDelete,
                    separator: true,
                    type: 'danger',
                    visible: visibleRemove
                }
            ];
        }
    }
    loadDataFromAPI() {
        const { serviceApi: serviceApiFromRoute, serviceMetadataApi, serviceLoadApi } = this.activatedRoute.snapshot.data;
        const onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        const metadata$ = this.getMetadata(serviceApiFromRoute, onLoad);
        let data$;
        if (this.quickSearchValue) {
            const paramsQuickSearchValue = { [this.quickSearchParam]: this.quickSearchValue };
            data$ = this.loadData(paramsQuickSearchValue);
        }
        else {
            data$ = this.loadData();
        }
        this.subscriptions.add(metadata$
            .pipe(switchMap(() => {
            const initialFilters = this.getInitialValuesFromFilter();
            if (!Object.keys(initialFilters).length) {
                return data$;
            }
            return EMPTY;
        }))
            .subscribe());
    }
    getInitialValuesFromFilter() {
        const initialFilters = this.filters.reduce((result, item) => Object.assign(result, { [item.property]: item.initValue }), {});
        Object.keys(initialFilters).forEach(key => {
            if (!initialFilters[key]) {
                delete initialFilters[key];
            }
        });
        return initialFilters;
    }
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
        }
        return of(null);
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title,
            keepFilters: this.keepFilters,
            concatFilters: this.concatFilters,
            hideRemoveAllDisclaimer: this.hideRemoveAllDisclaimer,
            hideCloseDisclaimers: this.hideCloseDisclaimers,
            pageCustomActions: this.pageCustomActions,
            tableCustomActions: this.tableCustomActions,
            quickSearchWidth: this.quickSearchWidth
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                },
                {
                    nameProp: 'keepFilters'
                },
                {
                    nameProp: 'quickSearchWidth'
                },
                {
                    nameProp: 'concatFilters'
                },
                {
                    nameProp: 'hideRemoveAllDisclaimer'
                },
                {
                    nameProp: 'hideCloseDisclaimers'
                },
                {
                    nameProp: 'pageCustomActions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'tableCustomActions',
                    merge: true,
                    keyForMerge: 'label'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
    showRemove(actionRemove) {
        const action = actionRemove ?? false;
        if (typeof action === 'boolean') {
            return action;
        }
        return true;
    }
    updateFilterValue(filter) {
        return this.fields.map(item => {
            if (filter.hasOwnProperty(item.property)) {
                item.initValue = filter[item.property];
            }
        });
    }
    updatePageActions() {
        this.pageActions = [...this._defaultPageActions, ...this._customPageListActions];
    }
    updateTableActions() {
        const defaultTableActionsWithoutActionDelete = this._defaultTableActions.filter(tableAction => tableAction.label !== this.literals.tableActionDelete);
        const tableActionDelete = this._defaultTableActions.find(tableAction => tableAction.label === this.literals.tableActionDelete);
        const newTableActions = [...defaultTableActionsWithoutActionDelete, ...this._customTableActions];
        if (tableActionDelete) {
            newTableActions.push(tableActionDelete);
        }
        this.tableActions = newTableActions;
    }
    static ɵfac = function PoPageDynamicTableComponent_Factory(t) { return new (t || PoPageDynamicTableComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PoDialogService), i0.ɵɵdirectiveInject(i2.PoNotificationService), i0.ɵɵdirectiveInject(i3.PoPageDynamicService), i0.ɵɵdirectiveInject(i4.PoPageCustomizationService), i0.ɵɵdirectiveInject(i5.PoPageDynamicTableActionsService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDynamicTableComponent, selectors: [["po-page-dynamic-table"]], inputs: { onLoad: [i0.ɵɵInputFlags.None, "p-load", "onLoad"], keepFilters: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-keep-filters", "keepFilters", convertToBoolean], actionRight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-actions-right", "actionRight", convertToBoolean], concatFilters: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-concat-filters", "concatFilters", convertToBoolean], hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], hideRemoveAllDisclaimer: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-remove-all-disclaimer", "hideRemoveAllDisclaimer", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], pageCustomActions: [i0.ɵɵInputFlags.None, "p-page-custom-actions", "pageCustomActions"], tableCustomActions: [i0.ɵɵInputFlags.None, "p-table-custom-actions", "tableCustomActions"], quickSearchWidth: [i0.ɵɵInputFlags.None, "p-quick-search-width", "quickSearchWidth"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], hideCloseDisclaimers: [i0.ɵɵInputFlags.None, "p-hide-close-disclaimers", "hideCloseDisclaimers"], quickSearchParam: [i0.ɵɵInputFlags.None, "p-quick-search-param", "quickSearchParam"], quickSearchValue: [i0.ɵɵInputFlags.None, "p-quick-search-value", "quickSearchValue"], searchLiterals: [i0.ɵɵInputFlags.None, "p-literals", "searchLiterals"], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], draggable: [i0.ɵɵInputFlags.None, "p-draggable", "draggable"] }, features: [i0.ɵɵProvidersFeature([PoPageDynamicService]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 24, consts: [[3, "p-actions", "p-breadcrumb", "p-hide-close-disclaimers", "p-filters", "p-keep-filters", "p-literals", "p-concat-filters", "p-hide-remove-all-disclaimer", "p-quick-search-width", "p-title", "p-quick-search-value", "p-advanced-search", "p-change-disclaimers", "p-quick-search"], [3, "p-sort", "p-actions", "p-actions-right", "p-selectable", "p-columns", "p-items", "p-height", "p-hide-columns-manager", "p-infinite-scroll", "p-show-more-disabled", "p-text-wrap", "p-draggable", "p-spacing", "p-show-more", "p-sort-by", "p-change-visible-columns", "p-restore-column-manager"]], template: function PoPageDynamicTableComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-page-dynamic-search", 0);
            i0.ɵɵlistener("p-advanced-search", function PoPageDynamicTableComponent_Template_po_page_dynamic_search_p_advanced_search_0_listener($event) { return ctx.onAdvancedSearch($event); })("p-change-disclaimers", function PoPageDynamicTableComponent_Template_po_page_dynamic_search_p_change_disclaimers_0_listener($event) { return ctx.onChangeDisclaimers($event); })("p-quick-search", function PoPageDynamicTableComponent_Template_po_page_dynamic_search_p_quick_search_0_listener($event) { return ctx.onQuickSearch($event); });
            i0.ɵɵelementStart(1, "po-table", 1);
            i0.ɵɵlistener("p-show-more", function PoPageDynamicTableComponent_Template_po_table_p_show_more_1_listener() { return ctx.showMore(); })("p-sort-by", function PoPageDynamicTableComponent_Template_po_table_p_sort_by_1_listener($event) { return ctx.onSort($event); })("p-change-visible-columns", function PoPageDynamicTableComponent_Template_po_table_p_change_visible_columns_1_listener($event) { return ctx.onChangeVisibleColumns($event); })("p-restore-column-manager", function PoPageDynamicTableComponent_Template_po_table_p_restore_column_manager_1_listener($event) { return ctx.onColumnRestoreManager($event); })("p-sort-by", function PoPageDynamicTableComponent_Template_po_table_p_sort_by_1_listener($event) { return ctx.onSortBy($event); });
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("p-actions", ctx.pageActions)("p-breadcrumb", ctx.breadcrumb)("p-hide-close-disclaimers", ctx.hideCloseDisclaimers)("p-filters", ctx.filters)("p-keep-filters", ctx.keepFilters)("p-literals", ctx.searchLiterals)("p-concat-filters", ctx.concatFilters)("p-hide-remove-all-disclaimer", ctx.hideRemoveAllDisclaimer)("p-quick-search-width", ctx.quickSearchWidth)("p-title", ctx.title)("p-quick-search-value", ctx.quickSearchValue || "");
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-sort", true)("p-actions", ctx.tableActions)("p-actions-right", ctx.actionRight)("p-selectable", ctx.enableSelectionTable)("p-columns", ctx.columns)("p-items", ctx.items)("p-height", ctx.height)("p-hide-columns-manager", ctx.hideColumnsManager)("p-infinite-scroll", ctx.infiniteScroll)("p-show-more-disabled", !ctx.hasNext)("p-text-wrap", ctx.textWrap)("p-draggable", ctx.draggable)("p-spacing", ctx.spacing);
        } }, dependencies: [i2.PoTableComponent, i6.PoPageDynamicSearchComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicTableComponent, [{
        type: Component,
        args: [{ selector: 'po-page-dynamic-table', providers: [PoPageDynamicService], template: "<po-page-dynamic-search\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-hide-close-disclaimers]=\"hideCloseDisclaimers\"\n  [p-filters]=\"filters\"\n  [p-keep-filters]=\"keepFilters\"\n  [p-literals]=\"searchLiterals\"\n  [p-concat-filters]=\"concatFilters\"\n  [p-hide-remove-all-disclaimer]=\"hideRemoveAllDisclaimer\"\n  [p-quick-search-width]=\"quickSearchWidth\"\n  [p-title]=\"title\"\n  (p-advanced-search)=\"onAdvancedSearch($event)\"\n  (p-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (p-quick-search)=\"onQuickSearch($event)\"\n  [p-quick-search-value]=\"quickSearchValue || ''\"\n>\n  <po-table\n    [p-sort]=\"true\"\n    [p-actions]=\"tableActions\"\n    [p-actions-right]=\"actionRight\"\n    [p-selectable]=\"enableSelectionTable\"\n    [p-columns]=\"columns\"\n    [p-items]=\"items\"\n    [p-height]=\"height\"\n    [p-hide-columns-manager]=\"hideColumnsManager\"\n    [p-infinite-scroll]=\"infiniteScroll\"\n    [p-show-more-disabled]=\"!hasNext\"\n    (p-show-more)=\"showMore()\"\n    (p-sort-by)=\"onSort($event)\"\n    (p-change-visible-columns)=\"onChangeVisibleColumns($event)\"\n    (p-restore-column-manager)=\"onColumnRestoreManager($event)\"\n    (p-sort-by)=\"onSortBy($event)\"\n    [p-text-wrap]=\"textWrap\"\n    [p-draggable]=\"draggable\"\n    [p-spacing]=\"spacing\"\n  >\n  </po-table>\n</po-page-dynamic-search>\n" }]
    }], () => [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.PoDialogService }, { type: i2.PoNotificationService }, { type: i3.PoPageDynamicService }, { type: i4.PoPageCustomizationService }, { type: i5.PoPageDynamicTableActionsService }, { type: i2.PoLanguageService }], { onLoad: [{
            type: Input,
            args: ['p-load']
        }], keepFilters: [{
            type: Input,
            args: [{ alias: 'p-keep-filters', transform: convertToBoolean }]
        }], actionRight: [{
            type: Input,
            args: [{ alias: 'p-actions-right', transform: convertToBoolean }]
        }], concatFilters: [{
            type: Input,
            args: [{ alias: 'p-concat-filters', transform: convertToBoolean }]
        }], hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], hideRemoveAllDisclaimer: [{
            type: Input,
            args: [{ alias: 'p-hide-remove-all-disclaimer', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], pageCustomActions: [{
            type: Input,
            args: ['p-page-custom-actions']
        }], tableCustomActions: [{
            type: Input,
            args: ['p-table-custom-actions']
        }], quickSearchWidth: [{
            type: Input,
            args: ['p-quick-search-width']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], hideCloseDisclaimers: [{
            type: Input,
            args: ['p-hide-close-disclaimers']
        }], quickSearchParam: [{
            type: Input,
            args: ['p-quick-search-param']
        }], quickSearchValue: [{
            type: Input,
            args: ['p-quick-search-value']
        }], searchLiterals: [{
            type: Input,
            args: ['p-literals']
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], draggable: [{
            type: Input,
            args: ['p-draggable']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageDynamicTableComponent, { className: "PoPageDynamicTableComponent", filePath: "lib/components/po-page-dynamic-table/po-page-dynamic-table.component.ts", lineNumber: 151 }); })();
//# sourceMappingURL=data:application/json;base64,