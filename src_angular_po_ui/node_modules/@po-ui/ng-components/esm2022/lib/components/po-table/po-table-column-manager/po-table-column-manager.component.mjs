import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { capitalizeFirstLetter, convertToBoolean, convertToInt } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
import * as i2 from "@angular/forms";
import * as i3 from "../../po-button/po-button.component";
import * as i4 from "../../po-page/po-page-slide/po-page-slide.component";
import * as i5 from "../po-table-list-manager/po-table-list-manager.component";
const _c0 = ["pageSlideColumnsManager"];
const PoTableColumnManagerMaxColumnsDefault = 99999;
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
export class PoTableColumnManagerComponent {
    renderer;
    popover;
    pageSlideColumnsManager;
    columns = [];
    target;
    colunsDefault;
    lastVisibleColumnsSelected = [];
    visibleColumnsChange = new EventEmitter();
    // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
    // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
    changeVisibleColumns = new EventEmitter();
    initialColumns = new EventEmitter();
    hideActionFixedColumns = false;
    literals;
    columnsOptions = [];
    visibleColumns = [];
    columnUpdate;
    _maxColumns = PoTableColumnManagerMaxColumnsDefault;
    defaultColumns = [];
    resizeListener;
    restoreDefaultEvent;
    lastEmittedValue;
    minColumns = 1;
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    constructor(renderer, languageService) {
        this.renderer = renderer;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTableColumnManagerLiteralsDefault[poLocaleDefault],
            ...poTableColumnManagerLiteralsDefault[language]
        };
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target, lastVisibleColumnsSelected } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
        if (lastVisibleColumnsSelected?.currentValue) {
            this.pageSlideColumnsManager.open();
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        this.defaultColumns = this.removePropertyFixed(this.defaultColumns);
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.initialColumns.emit(this.getVisibleColumns(this.colunsDefault));
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    changePosition({ option, direction }) {
        const indexColumn = this.columns.findIndex(el => el.property === option.value);
        const newColumn = [...this.columns];
        this.changePositionColumn(newColumn, indexColumn, direction);
        this.columns = newColumn;
        this.visibleColumnsChange.emit(this.columns);
    }
    emitColumnFixed(option) {
        const newColumn = [...this.columns];
        if (option) {
            newColumn.forEach(itemColumn => {
                if (itemColumn.property === option.value) {
                    itemColumn.fixed = option.fixed;
                }
            });
            const amountOfFixed = newColumn.filter(itemFixed => itemFixed.fixed === true).length;
            const indexColumn = newColumn.findIndex(el => el.property === option.value);
            const item = newColumn.splice(indexColumn, 1)[0];
            if (option.fixed) {
                newColumn.splice(amountOfFixed - 1, 0, item);
            }
            if (option.fixed === false) {
                newColumn.splice(amountOfFixed, 0, item);
            }
            this.columns = [...newColumn];
        }
        this.visibleColumnsChange.emit(newColumn);
    }
    changePositionColumn(array, index, direction) {
        if (direction === 'up') {
            array.splice(index, 0, array.splice(index - 1, 1)[0]);
        }
        if (direction === 'down') {
            array.splice(index, 0, array.splice(index + 1, 1)[0]);
        }
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (newColumns.length >= 1 && this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
        // Desabilita ultimo checkbox ativo
        if (newColumns.length === 1) {
            const columnsOptions = this.mapTableColumnsToCheckboxOptions(this.columnUpdate);
            this.columnsOptions = this.disabledLastColumn(columnsOptions);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.visibleColumnsChange.emit(this.defaultColumns);
        }
        this.restoreDefaultEvent = false;
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice();
        const secondSort = two.slice();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => ({
            ...column,
            disabled: this.isDisableColumn(column.value)
        }));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => ({
            ...column,
            visible: visibleColumns.includes(column.property) || column.type === 'detail'
        }));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property),
                    visible: column.visible
                });
            }
        });
        return columnsOptions;
    }
    disabledLastColumn(columns) {
        return columns.map(column => ({
            ...column,
            disabled: column.type !== 'detail' && column.visible ? true : false
        }));
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        this.columnUpdate = columns.currentValue;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
    removePropertyFixed(arr) {
        return arr.map(obj => {
            if (obj.hasOwnProperty('fixed')) {
                obj.fixed = false;
            }
            return obj;
        });
    }
    static ɵfac = function PoTableColumnManagerComponent_Factory(t) { return new (t || PoTableColumnManagerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnManagerComponent, selectors: [["po-table-column-manager"]], viewQuery: function PoTableColumnManagerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPopoverComponent, 5);
            i0.ɵɵviewQuery(_c0, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageSlideColumnsManager = _t.first);
        } }, inputs: { columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], target: [i0.ɵɵInputFlags.None, "p-target", "target"], colunsDefault: [i0.ɵɵInputFlags.None, "p-columns-default", "colunsDefault"], lastVisibleColumnsSelected: [i0.ɵɵInputFlags.None, "p-last-visible-columns-selected", "lastVisibleColumnsSelected"], hideActionFixedColumns: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-action-fixed-columns", "hideActionFixedColumns", convertToBoolean], maxColumns: [i0.ɵɵInputFlags.None, "p-max-columns", "maxColumns"] }, outputs: { visibleColumnsChange: "p-visible-columns-change", changeVisibleColumns: "p-change-visible-columns", initialColumns: "p-initial-columns" }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 7, consts: [["p-size", "auto", 3, "p-title", "p-click-out", "p-close"], ["pageSlideColumnsManager", ""], [1, "po-table-column-manager-body"], ["name", "visibleColumns", "p-columns", "1", 3, "ngModel", "p-options", "p-hide-action-fixed-columns", "p-columns-manager", "ngModelChange", "p-change", "p-change-position", "p-change-fixed"], [1, "po-table-column-manager-footer"], ["p-kind", "tertiary", 1, "po-table-column-manager-footer-restore", 3, "p-label", "p-click"]], template: function PoTableColumnManagerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-page-slide", 0, 1);
            i0.ɵɵlistener("p-close", function PoTableColumnManagerComponent_Template_po_page_slide_p_close_0_listener() { return ctx.checkChanges([], true); });
            i0.ɵɵelementStart(2, "div")(3, "div", 2)(4, "po-table-list-manager", 3);
            i0.ɵɵtwoWayListener("ngModelChange", function PoTableColumnManagerComponent_Template_po_table_list_manager_ngModelChange_4_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.visibleColumns, $event) || (ctx.visibleColumns = $event); return $event; });
            i0.ɵɵlistener("p-change", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_4_listener($event) { return ctx.checkChanges($event, false); })("p-change-position", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_position_4_listener($event) { return ctx.changePosition($event); })("p-change-fixed", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_fixed_4_listener($event) { return ctx.emitColumnFixed($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(5, "div", 4)(6, "po-button", 5);
            i0.ɵɵlistener("p-click", function PoTableColumnManagerComponent_Template_po_button_p_click_6_listener() { return ctx.restore(); });
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            i0.ɵɵproperty("p-title", ctx.literals.columnsManager)("p-click-out", true);
            i0.ɵɵadvance(4);
            i0.ɵɵtwoWayProperty("ngModel", ctx.visibleColumns);
            i0.ɵɵproperty("p-options", ctx.columnsOptions)("p-hide-action-fixed-columns", ctx.hideActionFixedColumns)("p-columns-manager", ctx.columns);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-label", ctx.literals.restoreDefault);
        } }, dependencies: [i2.NgControlStatus, i2.NgModel, i3.PoButtonComponent, i4.PoPageSlideComponent, i5.PoTableListManagerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-manager', template: "<po-page-slide\n  #pageSlideColumnsManager\n  p-size=\"auto\"\n  [p-title]=\"literals.columnsManager\"\n  [p-click-out]=\"true\"\n  (p-close)=\"checkChanges([], true)\"\n>\n  <div>\n    <div class=\"po-table-column-manager-body\">\n      <po-table-list-manager\n        name=\"visibleColumns\"\n        [(ngModel)]=\"visibleColumns\"\n        p-columns=\"1\"\n        [p-options]=\"columnsOptions\"\n        [p-hide-action-fixed-columns]=\"hideActionFixedColumns\"\n        (p-change)=\"checkChanges($event, false)\"\n        (p-change-position)=\"changePosition($event)\"\n        (p-change-fixed)=\"emitColumnFixed($event)\"\n        [p-columns-manager]=\"columns\"\n      >\n      </po-table-list-manager>\n    </div>\n\n    <div class=\"po-table-column-manager-footer\">\n      <po-button\n        class=\"po-table-column-manager-footer-restore\"\n        p-kind=\"tertiary\"\n        [p-label]=\"literals.restoreDefault\"\n        (p-click)=\"restore()\"\n      >\n      </po-button>\n    </div>\n  </div>\n</po-page-slide>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: i1.PoLanguageService }], { popover: [{
            type: ViewChild,
            args: [PoPopoverComponent]
        }], pageSlideColumnsManager: [{
            type: ViewChild,
            args: ['pageSlideColumnsManager']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], colunsDefault: [{
            type: Input,
            args: ['p-columns-default']
        }], lastVisibleColumnsSelected: [{
            type: Input,
            args: ['p-last-visible-columns-selected']
        }], visibleColumnsChange: [{
            type: Output,
            args: ['p-visible-columns-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], initialColumns: [{
            type: Output,
            args: ['p-initial-columns']
        }], hideActionFixedColumns: [{
            type: Input,
            args: [{ alias: 'p-hide-action-fixed-columns', transform: convertToBoolean }]
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableColumnManagerComponent, { className: "PoTableColumnManagerComponent", filePath: "lib/components/po-table/po-table-column-manager/po-table-column-manager.component.ts", lineNumber: 50 }); })();
//# sourceMappingURL=data:application/json;base64,