import { debounceTime } from 'rxjs/operators';
import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { fromEvent } from 'rxjs';
import { isTypeof } from '../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoTableService {
    http;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    url;
    urlDelete;
    constructor(http) {
        this.http = http;
    }
    getFilteredItems(filteredParams) {
        const params = this.validateParams(filteredParams);
        return this.http.get(this.url, { headers: this.headers, params });
    }
    deleteItem(paramDelete, paramResponse) {
        const params = {
            [paramDelete]: paramResponse
        };
        return this.http.delete(this.urlDelete, { headers: this.headers, params });
    }
    setUrl(url, method) {
        if (method === 'GET') {
            this.url = url;
        }
        else {
            this.urlDelete = url;
        }
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime(100));
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
    static ɵfac = function PoTableService_Factory(t) { return new (t || PoTableService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTableService, factory: PoTableService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9zZXJ2aWNlcy9wby10YWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTy9DLE1BQU0sT0FBTyxjQUFjO0lBUUw7SUFQWCxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDO1FBQzlDLGlCQUFpQixFQUFFLE1BQU07S0FDMUIsQ0FBQyxDQUFDO0lBRUssR0FBRyxDQUFTO0lBQ1osU0FBUyxDQUFTO0lBRTFCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBRyxDQUFDO0lBRXhDLGdCQUFnQixDQUFDLGNBQTJDO1FBQzFELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsVUFBVSxDQUFDLFdBQW1CLEVBQUUsYUFBa0I7UUFDaEQsTUFBTSxNQUFNLEdBQUc7WUFDYixDQUFDLFdBQVcsQ0FBQyxFQUFFLGFBQWE7U0FDN0IsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXLEVBQUUsTUFBd0I7UUFDMUMsSUFBSSxNQUFNLEtBQUssS0FBSyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRCxjQUFjLENBQUMsZ0JBQTZCO1FBQzFDLE9BQU8sU0FBUyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU8sY0FBYyxDQUFDLE1BQVc7UUFDaEMsT0FBTyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkYsQ0FBQzt3RUF0Q1UsY0FBYztnRUFBZCxjQUFjLFdBQWQsY0FBYyxtQkFGYixNQUFNOztpRkFFUCxjQUFjO2NBSDFCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9UYWJsZUZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdGFibGUtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlRmlsdGVyZWRJdGVtc1BhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdGFibGUtZmlsdGVyZWQtaXRlbXMtcGFyYW1zLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvVGFibGVTZXJ2aWNlIGltcGxlbWVudHMgUG9UYWJsZUZpbHRlciB7XG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAnWC1QTy1Oby1NZXNzYWdlJzogJ3RydWUnXG4gIH0pO1xuXG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgdXJsRGVsZXRlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEZpbHRlcmVkSXRlbXMoZmlsdGVyZWRQYXJhbXM/OiBQb1RhYmxlRmlsdGVyZWRJdGVtc1BhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJlZFBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIGRlbGV0ZUl0ZW0ocGFyYW1EZWxldGU6IHN0cmluZywgcGFyYW1SZXNwb25zZTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBbcGFyYW1EZWxldGVdOiBwYXJhbVJlc3BvbnNlXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMudXJsRGVsZXRlLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zIH0pO1xuICB9XG5cbiAgc2V0VXJsKHVybDogc3RyaW5nLCBtZXRob2Q6ICdHRVQnIHwgJ0RFTEVURScpIHtcbiAgICBpZiAobWV0aG9kID09PSAnR0VUJykge1xuICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsRGVsZXRlID0gdXJsO1xuICAgIH1cbiAgfVxuXG4gIHNjcm9sbExpc3RlbmVyKGNvbXBvbmVudExpc3RuZXI6IEhUTUxFbGVtZW50KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gZnJvbUV2ZW50KGNvbXBvbmVudExpc3RuZXIsICdzY3JvbGwnKS5waXBlKGRlYm91bmNlVGltZSgxMDApKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVQYXJhbXMocGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gaXNUeXBlb2YocGFyYW1zLCAnb2JqZWN0JykgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zKSA/IHBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19