import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
 * será adicionado o conteúdo do template.
 *
 * Retorno:
 *  - value: valor referente ao conteúdo da linha corrente.
 *
 * Modo de uso:
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
 *     <span [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
 * sendo que `value` refere-se ao conteúdo da linha.
 *
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
 *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
 *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
 * definir o template exato para adicionar a uma específica célula.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```typescript
 * ...
 * export class AppComponent {
 *
 *    targetProperty= 'status';
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED'
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED'
 *    }];
 *
 *    columns = [
 *      { property: 'code', label: 'ID' },
 *      { property: 'product', label: 'PRODUTO' },
 *      { property: 'status', label: 'STATUS', type: 'columnTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `columnTemplate`
 */
export class PoTableColumnTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Variável responsável por armazenar a property da coluna da tabela que será adicionado o template.
     *
     * Caso não seja informada esta propriedade, serão apresentados normalmente os dados da coluna.
     */
    targetProperty;
    // Necessário manter templateRef para o funcionamento do column template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoTableColumnTemplateDirective_Factory(t) { return new (t || PoTableColumnTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableColumnTemplateDirective, selectors: [["", "p-table-column-template", ""]], inputs: { targetProperty: [i0.ɵɵInputFlags.None, "p-property", "targetProperty"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-column-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { targetProperty: [{
            type: Input,
            args: ['p-property']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4tdGVtcGxhdGUvcG8tdGFibGUtY29sdW1uLXRlbXBsYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxNQUFNLGVBQWUsQ0FBQzs7QUFFOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzRUc7QUFLSCxNQUFNLE9BQU8sOEJBQThCO0lBYXRCO0lBWm5COzs7Ozs7OztPQVFHO0lBQ2tCLGNBQWMsQ0FBUztJQUU1Qyx5RUFBeUU7SUFDekUsWUFBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUcsQ0FBQzt3RkFiekMsOEJBQThCOzZEQUE5Qiw4QkFBOEI7O2lGQUE5Qiw4QkFBOEI7Y0FIMUMsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7NENBV3NCLGNBQWM7a0JBQWxDLEtBQUs7bUJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb1RhYmxlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphIHBvc3PDrXZlbCBhbHRlcmFyIG8gY29udGXDumRvIGRhcyBjw6lsdWxhcyBkZSB1bWEgY29sdW5hLCBwYXJhIHF1ZSBvcyB2YWxvcmVzIHBvc3NhbSBzZXIgZXhpYmlkb3NcbiAqIGRlIGFjb3JkbyBjb20gYSBuZWNlc3NpZGFkZSBkbyB1c3XDoXJpby5cbiAqXG4gKiBFbSBzZXUgdXNvLCBkZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBkZSBlbnRyYWRhIG8gaW5wdXQgW3AtcHJvcGVydHldLCBvIHF1YWwgw6kgcmVzcG9uc8OhdmVsIHBvciBpbmZvcm1hciBhbyBQTy1UQUJMRSBxdWFsIGEgY29sdW5hIHF1ZVxuICogc2Vyw6EgYWRpY2lvbmFkbyBvIGNvbnRlw7pkbyBkbyB0ZW1wbGF0ZS5cbiAqXG4gKiBSZXRvcm5vOlxuICogIC0gdmFsdWU6IHZhbG9yIHJlZmVyZW50ZSBhbyBjb250ZcO6ZG8gZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogTW9kbyBkZSB1c286XG4gKiBgYGBodG1sXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICA8bmctdGVtcGxhdGUgcC10YWJsZS1jb2x1bW4tdGVtcGxhdGUgW3AtcHJvcGVydHldPVwidGFyZ2V0UHJvcGVydHlcIiBsZXQtdmFsdWU+XG4gKiAgICAgPHNwYW4gW2lubmVyVGV4dF09XCJ2YWx1ZVwiPjwvc3Bhbj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqIDwvcG8tdGFibGU+XG4gKiAuLi5cbiAqIGBgYFxuICogPiBObyBleGVtcGxvIGFjaW1hLCB0b2RhcyBhcyBjw6lsdWxhcyBjb3JyZXNwb25kZW50ZXMgYSBjb2x1bmEgYHN0YXR1c2AgdGVyw6NvIG8gY29udGXDumRvIGFsdGVyYWRvIHBhcmEgYDxoMT4ke3ZhbHVlfTwvaDE+YCxcbiAqIHNlbmRvIHF1ZSBgdmFsdWVgIHJlZmVyZS1zZSBhbyBjb250ZcO6ZG8gZGEgbGluaGEuXG4gKlxuICogYGBgaHRtbFxuICogLi4uXG4gKiA8cG8tdGFibGVcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgPG5nLXRlbXBsYXRlICBwLXRhYmxlLWNvbHVtbi10ZW1wbGF0ZSBbcC1wcm9wZXJ0eV09XCJ0YXJnZXRQcm9wZXJ0eVwiIGxldC12YWx1ZT5cbiAqICAgICA8c3BhbiAqbmdJZj1cInZhbHVlID09PSAnRklOSVNIRUQnXCIgW3N0eWxlLmJhY2tncm91bmRdPVwiJ3NpbHZlcidcIiBbaW5uZXJUZXh0XT1cInZhbHVlXCI+PC9zcGFuPlxuICogICAgIDxzcGFuICpuZ0lmPVwidmFsdWUgPT09ICdPUEVORUQnXCIgW3N0eWxlLmJhY2tncm91bmRdPVwiJ2dyYXknXCIgW2lubmVyVGV4dF09XCJ2YWx1ZVwiPjwvc3Bhbj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqIDwvcG8tdGFibGU+XG4gKiAuLi5cbiAqIGBgYFxuICogPiBBZ29yYSwgbmVzdGUgZXhlbXBsbywgY29tIG8gdmFsb3IgZGEgbGluaGEgY29ycmVudGUgcmV0b3JuYWRvICh2YWx1ZSksIMOpIGZlaXRvIHVtYSB2YWxpZGHDp8OjbyBwYXJhXG4gKiBkZWZpbmlyIG8gdGVtcGxhdGUgZXhhdG8gcGFyYSBhZGljaW9uYXIgYSB1bWEgZXNwZWPDrWZpY2EgY8OpbHVsYS5cbiAqXG4gKiBBYmFpeG8sIGEgZGVjbGFyYcOnw6NvIGRvcyBkYWRvcyBkZSBlbnRyYWRhIGRvIFBPLVRBQkxFIHBhcmEgbyB1c28gZGEgZGlyZWN0aXZhLlxuICogYGBgdHlwZXNjcmlwdFxuICogLi4uXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqXG4gKiAgICB0YXJnZXRQcm9wZXJ0eT0gJ3N0YXR1cyc7XG4gKlxuICogICAgaXRlbXMgPSBbe1xuICogICAgICBjb2RlOiAxMjAwLFxuICogICAgICBwcm9kdWN0OiAnUmljZScsXG4gKiAgICAgIHN0YXR1czogJ0NBTkNFTEVEJ1xuICogICAgICB9LHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBzdGF0dXM6ICdGSU5JU0hFRCdcbiAqICAgIH1dO1xuICpcbiAqICAgIGNvbHVtbnMgPSBbXG4gKiAgICAgIHsgcHJvcGVydHk6ICdjb2RlJywgbGFiZWw6ICdJRCcgfSxcbiAqICAgICAgeyBwcm9wZXJ0eTogJ3Byb2R1Y3QnLCBsYWJlbDogJ1BST0RVVE8nIH0sXG4gKiAgICAgIHsgcHJvcGVydHk6ICdzdGF0dXMnLCBsYWJlbDogJ1NUQVRVUycsIHR5cGU6ICdjb2x1bW5UZW1wbGF0ZScgfVxuICogICAgXTtcbiAqIH1cbiAqIC4uLlxuICogYGBgXG4gKiA+IE9ic2VydmHDp8OjbzogU2VtcHJlIGFkaWNpb25hciBvICoqdHlwZSoqIGRhIGNvbHVuYSBxdWUgZGVzZWphIG1hbmlwdWxhciBjb20gYSBkaXJlY3RpdmEgY29tbyBgY29sdW1uVGVtcGxhdGVgXG4gKi9cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3AtdGFibGUtY29sdW1uLXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZUNvbHVtblRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmFyacOhdmVsIHJlc3BvbnPDoXZlbCBwb3IgYXJtYXplbmFyIGEgcHJvcGVydHkgZGEgY29sdW5hIGRhIHRhYmVsYSBxdWUgc2Vyw6EgYWRpY2lvbmFkbyBvIHRlbXBsYXRlLlxuICAgKlxuICAgKiBDYXNvIG7Do28gc2VqYSBpbmZvcm1hZGEgZXN0YSBwcm9wcmllZGFkZSwgc2Vyw6NvIGFwcmVzZW50YWRvcyBub3JtYWxtZW50ZSBvcyBkYWRvcyBkYSBjb2x1bmEuXG4gICAqL1xuICBASW5wdXQoJ3AtcHJvcGVydHknKSB0YXJnZXRQcm9wZXJ0eTogc3RyaW5nO1xuXG4gIC8vIE5lY2Vzc8OhcmlvIG1hbnRlciB0ZW1wbGF0ZVJlZiBwYXJhIG8gZnVuY2lvbmFtZW50byBkbyBjb2x1bW4gdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cbiJdfQ==