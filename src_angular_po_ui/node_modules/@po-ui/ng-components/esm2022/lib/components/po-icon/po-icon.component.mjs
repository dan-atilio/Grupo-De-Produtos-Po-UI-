import { Input, TemplateRef, Component, ChangeDetectionStrategy } from '@angular/core';
import { PoIconService } from './po-icon.service';
import * as i0 from "@angular/core";
import * as i1 from "./po-icon.service";
import * as i2 from "@angular/common";
function PoIconComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoIconComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "i", 2);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.class);
} }
const _c0 = ["*"];
/**
 * @docsPrivate
 *
 * @usedBy PoButton
 *
 * @description
 *
 * Permite a exibição de ícones.
 */
export class PoIconComponent {
    poIconService;
    class;
    _icon;
    constructor(poIconService) {
        this.poIconService = poIconService;
    }
    /**
     * Define o ícone a ser exibido.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    set icon(value) {
        if (typeof value === 'string') {
            this.processIcon(value);
        }
        else if (value instanceof TemplateRef) {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    addClasses(value, iconToken = false) {
        this.class = iconToken
            ? value
            : value.startsWith('po-icon-')
                ? (this.class = `po-icon ${value}`)
                : (this.class = `po-fonts-icon ${value}`);
    }
    getIcon(iconName) {
        return this.poIconService.icons.hasOwnProperty(iconName)
            ? this.poIconService.icons[iconName].startsWith('po-icon ')
                ? this.poIconService.icons[iconName]
                : 'po-fonts-icon ' + this.poIconService.icons[iconName]
            : '';
    }
    processIcon(icon) {
        const iconToken = this.processIconTokens(icon);
        if (iconToken !== '') {
            this.addClasses(iconToken, true);
        }
        else {
            this.addClasses(icon);
        }
    }
    processIconTokens(value) {
        const iconTokens = this.splitIconNames(value);
        let icon = '';
        if (Array.isArray(iconTokens)) {
            iconTokens.map(iconName => {
                icon += this.getIcon(iconName) !== '' ? ' ' + this.getIcon(iconName) : icon !== '' ? ' ' + iconName : iconName;
            });
        }
        else {
            icon = this.getIcon(iconTokens);
        }
        return icon.trim();
    }
    splitIconNames(iconName) {
        return iconName.includes(' ') ? iconName.split(' ') : iconName;
    }
    static ɵfac = function PoIconComponent_Factory(t) { return new (t || PoIconComponent)(i0.ɵɵdirectiveInject(i1.PoIconService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoIconComponent, selectors: [["po-icon"]], inputs: { icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"] }, features: [i0.ɵɵProvidersFeature([PoIconService])], ngContentSelectors: _c0, decls: 3, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["fontTemplate", ""], ["aria-hidden", "true"]], template: function PoIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoIconComponent_ng_container_0_Template, 1, 0, "ng-container", 0)(1, PoIconComponent_ng_template_1_Template, 2, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx.class)("ngIfThen", _r2)("ngIfElse", ctx.icon);
        } }, dependencies: [i2.NgIf], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconComponent, [{
        type: Component,
        args: [{ selector: 'po-icon', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PoIconService], template: "<ng-container *ngIf=\"class; then fontTemplate; else icon\"></ng-container>\n\n<ng-template #fontTemplate>\n  <i [class]=\"class\" aria-hidden=\"true\">\n    <ng-content></ng-content>\n  </i>\n</ng-template>\n" }]
    }], () => [{ type: i1.PoIconService }], { icon: [{
            type: Input,
            args: ['p-icon']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoIconComponent, { className: "PoIconComponent", filePath: "lib/components/po-icon/po-icon.component.ts", lineNumber: 18 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8taWNvbi9wby1pY29uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1pY29uL3BvLWljb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7O0lDRGxELHdCQUF5RTs7O0lBR3ZFLDRCQUFzQztJQUNwQyxrQkFBeUI7SUFDM0IsaUJBQUk7OztJQUZELDJCQUFlOzs7QUREcEI7Ozs7Ozs7O0dBUUc7QUFPSCxNQUFNLE9BQU8sZUFBZTtJQUlOO0lBSHBCLEtBQUssQ0FBUztJQUNOLEtBQUssQ0FBNkI7SUFFMUMsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW9CRztJQUNILElBQXFCLElBQUksQ0FBQyxLQUFpQztRQUN6RCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO2FBQU0sSUFBSSxLQUFLLFlBQVksV0FBVyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQWEsRUFBRSxZQUFxQixLQUFLO1FBQzFELElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUztZQUNwQixDQUFDLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLEtBQUssRUFBRSxDQUFDO2dCQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyxPQUFPLENBQUMsUUFBZ0I7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1lBQ3RELENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO2dCQUN6RCxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUNwQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ3pELENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRU8sV0FBVyxDQUFDLElBQVk7UUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksU0FBUyxLQUFLLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQVcsRUFBRSxDQUFDO1FBRXRCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDakgsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQWdCO1FBQ3JDLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ2pFLENBQUM7eUVBaEZVLGVBQWU7NkRBQWYsZUFBZSx5SEFGZixDQUFDLGFBQWEsQ0FBQzs7WUNmNUIsa0ZBQXlFLG9HQUFBOzs7WUFBMUQsZ0NBQWEsaUJBQUEsc0JBQUE7OztpRkRpQmYsZUFBZTtjQU4zQixTQUFTOzJCQUNFLFNBQVMsbUJBRUYsdUJBQXVCLENBQUMsTUFBTSxhQUNwQyxDQUFDLGFBQWEsQ0FBQzs4Q0E2QkwsSUFBSTtrQkFBeEIsS0FBSzttQkFBQyxRQUFROztrRkEzQkosZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBUZW1wbGF0ZVJlZiwgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvSWNvblNlcnZpY2UgfSBmcm9tICcuL3BvLWljb24uc2VydmljZSc7XG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEB1c2VkQnkgUG9CdXR0b25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQZXJtaXRlIGEgZXhpYmnDp8OjbyBkZSDDrWNvbmVzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbUG9JY29uU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUG9JY29uQ29tcG9uZW50IHtcbiAgY2xhc3M6IHN0cmluZztcbiAgcHJpdmF0ZSBfaWNvbjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb0ljb25TZXJ2aWNlOiBQb0ljb25TZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgbyDDrWNvbmUgYSBzZXIgZXhpYmlkby5cbiAgICpcbiAgICogw4kgcG9zc8OtdmVsIHVzYXIgcXVhbHF1ZXIgdW0gZG9zIMOtY29uZXMgZGEgW0JpYmxpb3RlY2EgZGUgw61jb25lc10oL2d1aWRlcy9pY29ucykuIGNvbmZvcm1lIGV4ZW1wbG8gYWJhaXhvOlxuICAgKiBgYGBcbiAgICogPHBvLWJ1dHRvbiBwLWljb249XCJwby1pY29uLXVzZXJcIiBwLWxhYmVsPVwiUE8gYnV0dG9uXCI+PC9wby1idXR0b24+XG4gICAqIGBgYFxuICAgKiBUYW1iw6ltIMOpIHBvc3PDrXZlbCB1dGlsaXphciBvdXRyYXMgZm9udGVzIGRlIMOtY29uZXMsIHBvciBleGVtcGxvIGEgYmlibGlvdGVjYSAqRm9udCBBd2Vzb21lKiwgZGEgc2VndWludGUgZm9ybWE6XG4gICAqIGBgYFxuICAgKiA8cG8tYnV0dG9uIHAtaWNvbj1cImZhIGZhLXBvZGNhc3RcIiBwLWxhYmVsPVwiUE8gYnV0dG9uXCI+PC9wby1idXR0b24+XG4gICAqIGBgYFxuICAgKiBPdXRyYSBvcMOnw6NvIHNlcmlhIGEgY3VzdG9taXphw6fDo28gZG8gw61jb25lIGF0cmF2w6lzIGRvIGBUZW1wbGF0ZVJlZmAsIGNvbmZvcm1lIGV4ZW1wbG8gYWJhaXhvOlxuICAgKiBgYGBcbiAgICogPHBvLWJ1dHRvbiBbcC1pY29uXT1cInRlbXBsYXRlXCIgcC1sYWJlbD1cImJ1dHRvbiB0ZW1wbGF0ZSBpb25pY1wiPjwvcG8tYnV0dG9uPlxuICAgKlxuICAgKiA8bmctdGVtcGxhdGUgI3RlbXBsYXRlPlxuICAgKiAgPGlvbi1pY29uIHN0eWxlPVwiZm9udC1zaXplOiBpbmhlcml0XCIgbmFtZT1cImhlYXJ0XCI+PC9pb24taWNvbj5cbiAgICogPC9uZy10ZW1wbGF0ZT5cbiAgICogYGBgXG4gICAqID4gUGFyYSBvIMOtY29uZSBlbnF1YWRyYXIgY29ycmV0YW1lbnRlLCBkZXZlLXNlIHV0aWxpemFyIGBmb250LXNpemU6IGluaGVyaXRgIGNhc28gbyDDrWNvbmUgdXRpbGl6YWRvIG7Do28gYXBsaXF1ZS1vLlxuICAgKi9cbiAgQElucHV0KCdwLWljb24nKSBzZXQgaWNvbih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5wcm9jZXNzSWNvbih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLl9pY29uID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb247XG4gIH1cblxuICBwcml2YXRlIGFkZENsYXNzZXModmFsdWU6IHN0cmluZywgaWNvblRva2VuOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLmNsYXNzID0gaWNvblRva2VuXG4gICAgICA/IHZhbHVlXG4gICAgICA6IHZhbHVlLnN0YXJ0c1dpdGgoJ3BvLWljb24tJylcbiAgICAgICAgPyAodGhpcy5jbGFzcyA9IGBwby1pY29uICR7dmFsdWV9YClcbiAgICAgICAgOiAodGhpcy5jbGFzcyA9IGBwby1mb250cy1pY29uICR7dmFsdWV9YCk7XG4gIH1cblxuICBwcml2YXRlIGdldEljb24oaWNvbk5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucG9JY29uU2VydmljZS5pY29ucy5oYXNPd25Qcm9wZXJ0eShpY29uTmFtZSlcbiAgICAgID8gdGhpcy5wb0ljb25TZXJ2aWNlLmljb25zW2ljb25OYW1lXS5zdGFydHNXaXRoKCdwby1pY29uICcpXG4gICAgICAgID8gdGhpcy5wb0ljb25TZXJ2aWNlLmljb25zW2ljb25OYW1lXVxuICAgICAgICA6ICdwby1mb250cy1pY29uICcgKyB0aGlzLnBvSWNvblNlcnZpY2UuaWNvbnNbaWNvbk5hbWVdXG4gICAgICA6ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzSWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpY29uVG9rZW4gPSB0aGlzLnByb2Nlc3NJY29uVG9rZW5zKGljb24pO1xuICAgIGlmIChpY29uVG9rZW4gIT09ICcnKSB7XG4gICAgICB0aGlzLmFkZENsYXNzZXMoaWNvblRva2VuLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRDbGFzc2VzKGljb24pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcHJvY2Vzc0ljb25Ub2tlbnModmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgaWNvblRva2VucyA9IHRoaXMuc3BsaXRJY29uTmFtZXModmFsdWUpO1xuICAgIGxldCBpY29uOiBzdHJpbmcgPSAnJztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGljb25Ub2tlbnMpKSB7XG4gICAgICBpY29uVG9rZW5zLm1hcChpY29uTmFtZSA9PiB7XG4gICAgICAgIGljb24gKz0gdGhpcy5nZXRJY29uKGljb25OYW1lKSAhPT0gJycgPyAnICcgKyB0aGlzLmdldEljb24oaWNvbk5hbWUpIDogaWNvbiAhPT0gJycgPyAnICcgKyBpY29uTmFtZSA6IGljb25OYW1lO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGljb24gPSB0aGlzLmdldEljb24oaWNvblRva2Vucyk7XG4gICAgfVxuICAgIHJldHVybiBpY29uLnRyaW0oKTtcbiAgfVxuXG4gIHByaXZhdGUgc3BsaXRJY29uTmFtZXMoaWNvbk5hbWU6IHN0cmluZyk6IHN0cmluZyB8IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBpY29uTmFtZS5pbmNsdWRlcygnICcpID8gaWNvbk5hbWUuc3BsaXQoJyAnKSA6IGljb25OYW1lO1xuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiY2xhc3M7IHRoZW4gZm9udFRlbXBsYXRlOyBlbHNlIGljb25cIj48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlICNmb250VGVtcGxhdGU+XG4gIDxpIFtjbGFzc109XCJjbGFzc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgPC9pPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==