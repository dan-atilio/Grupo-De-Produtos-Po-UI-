import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoDisclaimerLiterals } from './po-disclaimer.literals';
import * as i0 from "@angular/core";
import * as i1 from "./../../services/po-language/po-language.service";
const PO_DISCLAIMER_TYPES = ['default', 'danger'];
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
export class PoDisclaimerBaseComponent {
    languageService;
    /**
     * Label que aparecerá dentro do po-disclaimer.
     * Quando não for definido um label será apresentada a propriedade p-value.
     */
    label;
    /** Valor do po-disclaimer. */
    value;
    /** Nome da propriedade vinculada à este po-disclaimer. */
    property;
    disclaimerCustomWidth = 201;
    lastDisclaimer = false;
    tooltipPosition = 'bottom';
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao fechar o disclaimer.
     * Para este evento será passado como parâmetro um objeto com value, label e property.
     */
    closeAction = new EventEmitter();
    clickNumber = new EventEmitter();
    literals;
    showDisclaimer = true;
    _type = 'default';
    _hideClose = false;
    /**
     * @description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * @default false
     */
    set hideClose(value) {
        this._hideClose = value === '' ? true : convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * @default default
     * @optional
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    get type() {
        return this._type;
    }
    constructor(languageService) {
        this.languageService = languageService;
        const language = this.languageService?.getShortLanguage();
        this.literals = {
            ...PoDisclaimerLiterals[language]
        };
    }
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    getLabel() {
        return this.label ? this.label : this.value;
    }
    setAriaLabel() {
        return this.label ? this.label + ' ' + this.literals.remove : this.value + ' ' + this.literals.remove;
    }
    static ɵfac = function PoDisclaimerBaseComponent_Factory(t) { return new (t || PoDisclaimerBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], property: [i0.ɵɵInputFlags.None, "p-property", "property"], disclaimerCustomWidth: [i0.ɵɵInputFlags.None, "p-disclaimer-custom-width", "disclaimerCustomWidth"], lastDisclaimer: [i0.ɵɵInputFlags.None, "p-last-disclaimer", "lastDisclaimer"], tooltipPosition: [i0.ɵɵInputFlags.None, "p-tooltip-position", "tooltipPosition"], hideClose: [i0.ɵɵInputFlags.None, "p-hide-close", "hideClose"], type: [i0.ɵɵInputFlags.None, "p-type", "type"] }, outputs: { closeAction: "p-close-action", clickNumber: "p-click-number" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { label: [{
            type: Input,
            args: ['p-label']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], property: [{
            type: Input,
            args: ['p-property']
        }], disclaimerCustomWidth: [{
            type: Input,
            args: ['p-disclaimer-custom-width']
        }], lastDisclaimer: [{
            type: Input,
            args: ['p-last-disclaimer']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], closeAction: [{
            type: Output,
            args: ['p-close-action']
        }], clickNumber: [{
            type: Output,
            args: ['p-click-number']
        }], hideClose: [{
            type: Input,
            args: ['p-hide-close']
        }], type: [{
            type: Input,
            args: ['p-type']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1kaXNjbGFpbWVyL3BvLWRpc2NsYWltZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7O0FBRWhFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbEQsTUFBTSwwQkFBMEIsR0FBRyxTQUFTLENBQUM7QUFFN0M7Ozs7Ozs7OztHQVNHO0FBRUgsTUFBTSxPQUFPLHlCQUF5QjtJQXFFaEI7SUFwRXBCOzs7T0FHRztJQUNlLEtBQUssQ0FBVTtJQUVqQyw4QkFBOEI7SUFDWixLQUFLLENBQVM7SUFFaEMsMERBQTBEO0lBQ3JDLFFBQVEsQ0FBVTtJQUVILHFCQUFxQixHQUFXLEdBQUcsQ0FBQztJQUU1QyxjQUFjLEdBQVksS0FBSyxDQUFDO0lBRS9CLGVBQWUsR0FBVyxRQUFRLENBQUM7SUFFaEU7Ozs7Ozs7T0FPRztJQUN1QixXQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFekQsV0FBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRW5GLFFBQVEsQ0FBTTtJQUNkLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFFZCxLQUFLLEdBQVcsU0FBUyxDQUFDO0lBQzFCLFVBQVUsR0FBYSxLQUFLLENBQUM7SUFFckM7Ozs7Ozs7T0FPRztJQUNILElBQTJCLFNBQVMsQ0FBQyxLQUFjO1FBQ2pELElBQUksQ0FBQyxVQUFVLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBcUIsSUFBSSxDQUFDLElBQVk7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUM7SUFDdEYsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQ3BELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7U0FDbEMsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUN4RyxDQUFDO21GQXZGVSx5QkFBeUI7NkRBQXpCLHlCQUF5Qjs7aUZBQXpCLHlCQUF5QjtjQURyQyxTQUFTO2tEQU1VLEtBQUs7a0JBQXRCLEtBQUs7bUJBQUMsU0FBUztZQUdFLEtBQUs7a0JBQXRCLEtBQUs7bUJBQUMsU0FBUztZQUdLLFFBQVE7a0JBQTVCLEtBQUs7bUJBQUMsWUFBWTtZQUVpQixxQkFBcUI7a0JBQXhELEtBQUs7bUJBQUMsMkJBQTJCO1lBRU4sY0FBYztrQkFBekMsS0FBSzttQkFBQyxtQkFBbUI7WUFFRyxlQUFlO2tCQUEzQyxLQUFLO21CQUFDLG9CQUFvQjtZQVVELFdBQVc7a0JBQXBDLE1BQU07bUJBQUMsZ0JBQWdCO1lBRUUsV0FBVztrQkFBcEMsTUFBTTttQkFBQyxnQkFBZ0I7WUFnQkcsU0FBUztrQkFBbkMsS0FBSzttQkFBQyxjQUFjO1lBZ0JBLElBQUk7a0JBQXhCLEtBQUs7bUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvRGlzY2xhaW1lckxpdGVyYWxzIH0gZnJvbSAnLi9wby1kaXNjbGFpbWVyLmxpdGVyYWxzJztcblxuY29uc3QgUE9fRElTQ0xBSU1FUl9UWVBFUyA9IFsnZGVmYXVsdCcsICdkYW5nZXInXTtcbmNvbnN0IFBPX0RJU0NMQUlNRVJfREVGQVVMVF9UWVBFID0gJ2RlZmF1bHQnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBwby1kaXNjbGFpbWVyIMOpIHJlc3BvbnPDoXZlbCBwb3IgcmVwcmVzZW50YXIgdGFncy5cbiAqIFNldSB1c28gw6kgcmVjb21lbmRhZG8gZW0gYnVzY2FzIGUgZW0gY2FtcG9zIG9uZGUgw6kgbmVjZXNzw6FyaW8gcmVwcmVzZW50YXIgb2JqZXRvcyBzZWxlY2lvbmFkb3MsXG4gKiBjb21vIHBvciBleGVtcGxvLCBubyBwby1tdWx0aS1zZWxlY3QuXG4gKlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0Rpc2NsYWltZXJCYXNlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIExhYmVsIHF1ZSBhcGFyZWNlcsOhIGRlbnRybyBkbyBwby1kaXNjbGFpbWVyLlxuICAgKiBRdWFuZG8gbsOjbyBmb3IgZGVmaW5pZG8gdW0gbGFiZWwgc2Vyw6EgYXByZXNlbnRhZGEgYSBwcm9wcmllZGFkZSBwLXZhbHVlLlxuICAgKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFZhbG9yIGRvIHBvLWRpc2NsYWltZXIuICovXG4gIEBJbnB1dCgncC12YWx1ZScpIHZhbHVlOiBzdHJpbmc7XG5cbiAgLyoqIE5vbWUgZGEgcHJvcHJpZWRhZGUgdmluY3VsYWRhIMOgIGVzdGUgcG8tZGlzY2xhaW1lci4gKi9cbiAgQElucHV0KCdwLXByb3BlcnR5JykgcHJvcGVydHk/OiBzdHJpbmc7XG5cbiAgQElucHV0KCdwLWRpc2NsYWltZXItY3VzdG9tLXdpZHRoJykgZGlzY2xhaW1lckN1c3RvbVdpZHRoOiBudW1iZXIgPSAyMDE7XG5cbiAgQElucHV0KCdwLWxhc3QtZGlzY2xhaW1lcicpIGxhc3REaXNjbGFpbWVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KCdwLXRvb2x0aXAtcG9zaXRpb24nKSB0b29sdGlwUG9zaXRpb246IHN0cmluZyA9ICdib3R0b20nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBkaXNwYXJhZG8gYW8gZmVjaGFyIG8gZGlzY2xhaW1lci5cbiAgICogUGFyYSBlc3RlIGV2ZW50byBzZXLDoSBwYXNzYWRvIGNvbW8gcGFyw6JtZXRybyB1bSBvYmpldG8gY29tIHZhbHVlLCBsYWJlbCBlIHByb3BlcnR5LlxuICAgKi9cbiAgQE91dHB1dCgncC1jbG9zZS1hY3Rpb24nKSBjbG9zZUFjdGlvbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KCdwLWNsaWNrLW51bWJlcicpIGNsaWNrTnVtYmVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGxpdGVyYWxzOiBhbnk7XG4gIHNob3dEaXNjbGFpbWVyID0gdHJ1ZTtcblxuICBwcml2YXRlIF90eXBlOiBzdHJpbmcgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgX2hpZGVDbG9zZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEVzdGEgcHJvcHJpZWRhZGUgZXNjb25kZSBvIGJvdMOjbyBwYXJhIGZlY2hhbWVudG8gZG8gcG8tZGlzY2xhaW1lciwgYW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZVxuICAgKiBzZW0gcGFzc2FyIHZhbG9yIGEgbWVzbWEgw6kgc2V0YWRhIGNvbW8gZmFsc2UsIG9uZGUgbyBib3TDo28gZGUgZmVjaGFtZW50byBlc3TDoSB2aXPDrXZlbC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLWNsb3NlJykgc2V0IGhpZGVDbG9zZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVDbG9zZSA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhpZGVDbG9zZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZUNsb3NlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaXBvIGRvIHBvLWRpc2NsYWltZXIuIFBvZGUgc2VyICdkZWZhdWx0JyBvdSAnZGFuZ2VyJy5cbiAgICpcbiAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIEBJbnB1dCgncC10eXBlJykgc2V0IHR5cGUodHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdHlwZSA9IFBPX0RJU0NMQUlNRVJfVFlQRVMuaW5jbHVkZXModHlwZSkgPyB0eXBlIDogUE9fRElTQ0xBSU1FUl9ERUZBVUxUX1RZUEU7XG4gIH1cblxuICBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZT8uZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi5Qb0Rpc2NsYWltZXJMaXRlcmFsc1tsYW5ndWFnZV1cbiAgICB9O1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGlzY2xhaW1lciA9IGZhbHNlO1xuICAgIHRoaXMuY2xvc2VBY3Rpb24uZW1pdCh7IHZhbHVlOiB0aGlzLnZhbHVlLCBsYWJlbDogdGhpcy5sYWJlbCwgcHJvcGVydHk6IHRoaXMucHJvcGVydHkgfSk7XG4gIH1cblxuICBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbCA/IHRoaXMubGFiZWwgOiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgc2V0QXJpYUxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmxhYmVsID8gdGhpcy5sYWJlbCArICcgJyArIHRoaXMubGl0ZXJhbHMucmVtb3ZlIDogdGhpcy52YWx1ZSArICcgJyArIHRoaXMubGl0ZXJhbHMucmVtb3ZlO1xuICB9XG59XG4iXX0=