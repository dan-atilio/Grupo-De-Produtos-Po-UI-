import { Component, ElementRef, HostListener, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { PoChartAxisXLabelArea, PoChartPadding } from './helpers/po-chart-default-values.constant';
import { PoDefaultColors } from '../../services/po-color/po-colors.constant';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartType } from './enums/po-chart-type.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-color/po-color.service";
import * as i2 from "./services/po-chart-svg-container.service";
import * as i3 from "./services/po-chart-maths.service";
import * as i4 from "@angular/common";
import * as i5 from "./po-chart-container/po-chart-container.component";
import * as i6 from "./po-chart-legend/po-chart-legend.component";
import * as i7 from "./directives/po-resize-observer.directive";
const _c0 = ["chartContainer"];
const _c1 = ["chartHeader"];
const _c2 = ["chartLegend"];
const _c3 = ["chartWrapper"];
function PoChartComponent_ng_template_7_Template(rf, ctx) { }
function PoChartComponent_div_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoChartComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoChartComponent_div_9_ng_container_1_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(11);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoChartComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-chart-legend", 10, 11);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-series", ctx_r5.chartSeries)("p-type", ctx_r5.type);
} }
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
export class PoChartComponent extends PoChartBaseComponent {
    colorService;
    changeDetector;
    containerService;
    componentFactoryResolver;
    elementRef;
    mathsService;
    renderer;
    chartContainer;
    chartHeader;
    chartLegend;
    chartWrapper;
    calculatedComponentRefElement = false;
    calculatedSvgContainerElement = false;
    componentRef;
    initialized = false;
    windowResizeListener = new Subject();
    subscription = new Subscription();
    mappings = {};
    constructor(colorService, changeDetector, containerService, componentFactoryResolver, elementRef, mathsService, renderer) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
        this.containerService = containerService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.elementRef = elementRef;
        this.mathsService = mathsService;
        this.renderer = renderer;
    }
    onResize = () => {
        this.getSvgContainerSize();
        this.windowResizeListener.next({});
    };
    ngAfterViewInit() {
        this.initialized = true;
        this.getSvgContainerSize();
    }
    ngDoCheck() {
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const isDynamicChart = this.getComponentType(this.type);
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        // Quando modificada a estrutura dos gráficos do tipo circular isto será melhorado.
        if (charWrapperWidth && this.initialized && !isDynamicChart && !this.calculatedSvgContainerElement) {
            this.getSvgContainerSize();
            this.calculatedSvgContainerElement = true;
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.removeWindowResizeListener();
    }
    resizeAction() {
        this.getSvgContainerSize();
        this.windowResizeListener.next({});
        this.changeDetector.detectChanges();
    }
    ngOnInit() {
        this.getSvgContainerSize();
    }
    rebuildComponentRef() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    calculateAxisXLabelArea() {
        const axisXLabels = this.chartType === PoChartType.Bar ? this.categories : this.chartSeries;
        return this.getAxisXLabelArea(this.mathsService.getLongestDataValue(axisXLabels, this.chartType, this.options));
    }
    getSvgContainerSize() {
        let axisXLabelWidth;
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        if (!this.isTypeCircular) {
            axisXLabelWidth = this.calculateAxisXLabelArea();
        }
        this.svgContainerSize = {
            ...this.containerService.calculateSVGContainerMeasurements(this.height, chartWrapperWidth, chartHeaderHeight, chartLegendHeight),
            axisXLabelWidth
        };
    }
    chartLegendHeight(chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    }
    createComponent() {
        const componentType = this.getComponentType(this.type);
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        const instance = this.componentRef.instance;
        this.setComponentRefProperties(instance);
        return instance;
    }
    dynamicComponentSetting() {
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    getAxisXLabelArea(axisXLabel) {
        const labelPoChartPadding = PoChartPadding / 3;
        const spanElement = this.renderer.createElement('span');
        this.renderer.addClass(spanElement, 'po-chart-axis-x-label');
        spanElement.innerHTML = axisXLabel;
        this.renderer.appendChild(this.elementRef.nativeElement, spanElement);
        const axisXLabelWidth = Math.ceil(spanElement.offsetWidth) + labelPoChartPadding;
        this.renderer.removeChild(this.elementRef.nativeElement, spanElement);
        return axisXLabelWidth > PoChartAxisXLabelArea ? axisXLabelWidth : PoChartAxisXLabelArea;
    }
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    getChartMeasurements() {
        const chartWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const chartHeaderHeight = this.chartHeader.nativeElement.offsetHeight;
        const chartLegendHeight = this.chartLegendHeight(this.chartLegend);
        return { chartWrapperWidth, chartHeaderHeight, chartLegendHeight };
    }
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = () => { };
        }
    }
    setComponentRefProperties(instance) {
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        instance.chartHeader = chartHeaderHeight;
        instance.chartLegend = chartLegendHeight;
        instance.chartWrapper = chartWrapperWidth;
        instance.colors = PoDefaultColors[0];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    }
    setClickSubscribe(instance) {
        this.subscription.add(instance.onSerieClick.subscribe(event => {
            this.onSeriesClick(event);
        }));
    }
    setHoverSubscribe(instance) {
        this.subscription.add(instance.onSerieHover.subscribe(event => {
            this.onSeriesHover(event);
        }));
    }
    setResizeListenerSubscribe(instance) {
        this.subscription.add(this.windowResizeListener.subscribe(() => {
            const measuresForComponentRef = this.getChartMeasurements();
            instance.chartWrapper = measuresForComponentRef.chartWrapperWidth;
            instance.chartHeader = measuresForComponentRef.chartHeaderHeight;
            instance.chartLegend = measuresForComponentRef.chartLegendHeight;
        }));
    }
    static ɵfac = function PoChartComponent_Factory(t) { return new (t || PoChartComponent)(i0.ɵɵdirectiveInject(i1.PoColorService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.PoChartSvgContainerService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartComponent, selectors: [["po-chart"]], viewQuery: function PoChartComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);
            i0.ɵɵviewQuery(_c1, 7);
            i0.ɵɵviewQuery(_c2, 5, ElementRef);
            i0.ɵɵviewQuery(_c3, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartHeader = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLegend = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartWrapper = _t.first);
        } }, hostBindings: function PoChartComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("resize", function PoChartComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "po-chart-wrapper", 3, "p-resize-observer"], ["chartWrapper", ""], [1, "po-chart-header"], ["chartHeader", ""], [1, "po-chart-title"], [3, "p-options", "p-type", "p-series", "p-categories", "p-container-size", "p-serie-click", "p-serie-hover"], ["chartContainer", ""], [4, "ngIf"], ["chartLegendGroup", ""], [4, "ngTemplateOutlet"], [3, "p-series", "p-type"], ["chartLegend", ""]], template: function PoChartComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("p-resize-observer", function PoChartComponent_Template_div_p_resize_observer_0_listener() { return ctx.resizeAction(); });
            i0.ɵɵelementStart(2, "div", 2, 3)(4, "div", 4);
            i0.ɵɵtext(5);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "po-chart-container", 5);
            i0.ɵɵlistener("p-serie-click", function PoChartComponent_Template_po_chart_container_p_serie_click_6_listener($event) { return ctx.onSeriesClick($event); })("p-serie-hover", function PoChartComponent_Template_po_chart_container_p_serie_hover_6_listener($event) { return ctx.onSeriesHover($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoChartComponent_ng_template_7_Template, 0, 0, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor)(9, PoChartComponent_div_9_Template, 2, 1, "div", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoChartComponent_ng_template_10_Template, 2, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵadvance(5);
            i0.ɵɵtextInterpolate(ctx.title);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-options", ctx.options)("p-type", ctx.chartType)("p-series", ctx.chartSeries)("p-categories", ctx.categories)("p-container-size", ctx.svgContainerSize);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.options == null ? null : ctx.options.legend) !== false);
        } }, dependencies: [i4.NgIf, i4.NgTemplateOutlet, i5.PoChartContainerComponent, i6.PoChartLegendComponent, i7.PoResizeObserverDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartComponent, [{
        type: Component,
        args: [{ selector: 'po-chart', template: "<div #chartWrapper class=\"po-chart-wrapper\" (p-resize-observer)=\"resizeAction()\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n\n  <po-chart-container\n    [p-options]=\"options\"\n    [p-type]=\"chartType\"\n    [p-series]=\"chartSeries\"\n    [p-categories]=\"categories\"\n    [p-container-size]=\"svgContainerSize\"\n    (p-serie-click)=\"onSeriesClick($event)\"\n    (p-serie-hover)=\"onSeriesHover($event)\"\n  ></po-chart-container>\n\n  <!-- Inje\u00E7\u00E3o de gr\u00E1ficos do tipo gauge. Remover na deprecia\u00E7\u00E3o.  -->\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"options?.legend !== false\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-series]=\"chartSeries\" [p-type]=\"type\"> </po-chart-legend>\n</ng-template>\n" }]
    }], () => [{ type: i1.PoColorService }, { type: i0.ChangeDetectorRef }, { type: i2.PoChartSvgContainerService }, { type: i0.ComponentFactoryResolver }, { type: i0.ElementRef }, { type: i3.PoChartMathsService }, { type: i0.Renderer2 }], { chartContainer: [{
            type: ViewChild,
            args: ['chartContainer', { read: ViewContainerRef, static: true }]
        }], chartHeader: [{
            type: ViewChild,
            args: ['chartHeader', { static: true }]
        }], chartLegend: [{
            type: ViewChild,
            args: ['chartLegend', { read: ElementRef }]
        }], chartWrapper: [{
            type: ViewChild,
            args: ['chartWrapper', { static: true }]
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartComponent, { className: "PoChartComponent", filePath: "lib/components/po-chart/po-chart.component.ts", lineNumber: 53 }); })();
//# sourceMappingURL=data:application/json;base64,