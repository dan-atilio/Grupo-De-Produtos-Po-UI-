import { Component, Input, ViewChild } from '@angular/core';
import { convertToBoolean, isIE } from '../../../../../utils/util';
import * as i0 from "@angular/core";
const _c0 = ["chartPath"];
const _c1 = ["po-chart-path", ""];
const pathDashoffsetDefaultWidth = 0;
export class PoChartPathComponent {
    changeDetector;
    isActive = true;
    chartLine = false;
    coordinates;
    chartPath;
    pathWidth;
    _animate;
    _color;
    set color(value) {
        this._color = value.includes('po-color') && this.chartLine ? value.replace('po-color', 'po-border-color') : value;
    }
    get color() {
        return this._color;
    }
    set animate(value) {
        this._animate = value;
        if (!this.animate) {
            this.pathWidth = pathDashoffsetDefaultWidth;
        }
    }
    get animate() {
        return this._animate;
    }
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        if (!isIE()) {
            this.pathAnimation();
        }
    }
    pathAnimation() {
        this.pathWidth = this.chartPath.nativeElement.getTotalLength();
        this.changeDetector.detectChanges();
        setTimeout(this.preventsAnimatingAgain.bind(this), 700);
    }
    // Redefine pathWidth para zero após o período da animação para que a linha se expanda normalmente on resize.
    preventsAnimatingAgain() {
        this.pathWidth = pathDashoffsetDefaultWidth;
    }
    static ɵfac = function PoChartPathComponent_Factory(t) { return new (t || PoChartPathComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPathComponent, selectors: [["", "po-chart-path", ""]], viewQuery: function PoChartPathComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartPath = _t.first);
        } }, inputs: { isActive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-active", "isActive", convertToBoolean], chartLine: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-chart-line", "chartLine", convertToBoolean], coordinates: [i0.ɵɵInputFlags.None, "p-coordinates", "coordinates"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], animate: [i0.ɵɵInputFlags.None, "p-animate", "animate"] }, features: [i0.ɵɵInputTransformsFeature], attrs: _c1, decls: 2, vars: 11, consts: [[1, "po-chart-path"], ["chartPath", ""]], template: function PoChartPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelement(0, "path", 0, 1);
        } if (rf & 2) {
            i0.ɵɵclassMap((ctx.color == null ? null : ctx.color.includes("po-border-color")) || (ctx.color == null ? null : ctx.color.includes("po-color")) ? ctx.color : "");
            i0.ɵɵclassProp("po-chart-active-path", ctx.isActive)("po-chart-line-path", ctx.chartLine);
            i0.ɵɵattribute("fill", ctx.chartLine ? "none" : ctx.color)("stroke-dasharray", ctx.pathWidth)("stroke-dashoffset", ctx.pathWidth)("stroke", ctx.chartLine ? ctx.color : "")("d", ctx.coordinates);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-path]', template: "<svg:path #chartPath\n  class=\"po-chart-path\"\n  [class.po-chart-active-path]=\"isActive\"\n  [class.po-chart-line-path]=\"chartLine\"\n  [class]=\"color?.includes('po-border-color') || color?.includes('po-color') ? color : ''\"\n  [attr.fill]=\"chartLine ? 'none' : color\"\n  [attr.stroke-dasharray]=\"pathWidth\"\n  [attr.stroke-dashoffset]=\"pathWidth\"\n  [attr.stroke]=\"chartLine ? color : ''\"\n  [attr.d]=\"coordinates\">\n</svg:path> " }]
    }], () => [{ type: i0.ChangeDetectorRef }], { isActive: [{
            type: Input,
            args: [{ alias: 'p-is-active', transform: convertToBoolean }]
        }], chartLine: [{
            type: Input,
            args: [{ alias: 'p-chart-line', transform: convertToBoolean }]
        }], coordinates: [{
            type: Input,
            args: ['p-coordinates']
        }], chartPath: [{
            type: ViewChild,
            args: ['chartPath', { static: true }]
        }], color: [{
            type: Input,
            args: ['p-color']
        }], animate: [{
            type: Input,
            args: ['p-animate']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartPathComponent, { className: "PoChartPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-line/po-chart-path/po-chart-path.component.ts", lineNumber: 11 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtcGF0aC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtY29udGFpbmVyL3BvLWNoYXJ0LWxpbmUvcG8tY2hhcnQtcGF0aC9wby1jaGFydC1wYXRoLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC1jb250YWluZXIvcG8tY2hhcnQtbGluZS9wby1jaGFydC1wYXRoL3BvLWNoYXJ0LXBhdGguY29tcG9uZW50LnN2ZyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9DLFNBQVMsRUFBYyxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQUVuRSxNQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQztBQU1yQyxNQUFNLE9BQU8sb0JBQW9CO0lBa0NYO0lBakMwQyxRQUFRLEdBQVksSUFBSSxDQUFDO0lBRXhCLFNBQVMsR0FBWSxLQUFLLENBQUM7SUFFbEUsV0FBVyxDQUFTO0lBRUYsU0FBUyxDQUFhO0lBRWhFLFNBQVMsQ0FBUztJQUVWLFFBQVEsQ0FBVTtJQUNsQixNQUFNLENBQVM7SUFFdkIsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNwSCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUF3QixPQUFPLENBQUMsS0FBYztRQUM1QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLDBCQUEwQixDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsWUFBb0IsY0FBaUM7UUFBakMsbUJBQWMsR0FBZCxjQUFjLENBQW1CO0lBQUcsQ0FBQztJQUV6RCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVPLGFBQWE7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMvRCxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCw2R0FBNkc7SUFDckcsc0JBQXNCO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLENBQUM7SUFDOUMsQ0FBQzs4RUFuRFUsb0JBQW9COzZEQUFwQixvQkFBb0I7Ozs7O3lHQUNXLGdCQUFnQix3RkFFZixnQkFBZ0I7WUNiN0QsbUJBU3lCO1lBVHpCLDZCQVVXOztZQU5ULGlLQUF3RjtZQUZ4RixvREFBdUMscUNBQUE7WUFHdkMsMERBQXdDLG1DQUFBLG9DQUFBLDBDQUFBLHNCQUFBOzs7aUZESzdCLG9CQUFvQjtjQUpoQyxTQUFTOzJCQUNFLGlCQUFpQjtrREFJbUMsUUFBUTtrQkFBckUsS0FBSzttQkFBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO1lBRUcsU0FBUztrQkFBdkUsS0FBSzttQkFBQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO1lBRXJDLFdBQVc7a0JBQWxDLEtBQUs7bUJBQUMsZUFBZTtZQUVvQixTQUFTO2tCQUFsRCxTQUFTO21CQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7WUFPbEIsS0FBSztrQkFBMUIsS0FBSzttQkFBQyxTQUFTO1lBUVEsT0FBTztrQkFBOUIsS0FBSzttQkFBQyxXQUFXOztrRkF0QlAsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCBpc0lFIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IHBhdGhEYXNob2Zmc2V0RGVmYXVsdFdpZHRoID0gMDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3BvLWNoYXJ0LXBhdGhdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LXBhdGguY29tcG9uZW50LnN2Zydcbn0pXG5leHBvcnQgY2xhc3MgUG9DaGFydFBhdGhDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KHsgYWxpYXM6ICdwLWlzLWFjdGl2ZScsIHRyYW5zZm9ybTogY29udmVydFRvQm9vbGVhbiB9KSBpc0FjdGl2ZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KHsgYWxpYXM6ICdwLWNoYXJ0LWxpbmUnLCB0cmFuc2Zvcm06IGNvbnZlcnRUb0Jvb2xlYW4gfSkgY2hhcnRMaW5lOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KCdwLWNvb3JkaW5hdGVzJykgY29vcmRpbmF0ZXM6IHN0cmluZztcblxuICBAVmlld0NoaWxkKCdjaGFydFBhdGgnLCB7IHN0YXRpYzogdHJ1ZSB9KSBjaGFydFBhdGg6IEVsZW1lbnRSZWY7XG5cbiAgcGF0aFdpZHRoOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBfYW5pbWF0ZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfY29sb3I6IHN0cmluZztcblxuICBASW5wdXQoJ3AtY29sb3InKSBzZXQgY29sb3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbG9yID0gdmFsdWUuaW5jbHVkZXMoJ3BvLWNvbG9yJykgJiYgdGhpcy5jaGFydExpbmUgPyB2YWx1ZS5yZXBsYWNlKCdwby1jb2xvcicsICdwby1ib3JkZXItY29sb3InKSA6IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgfVxuXG4gIEBJbnB1dCgncC1hbmltYXRlJykgc2V0IGFuaW1hdGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hbmltYXRlID0gdmFsdWU7XG5cbiAgICBpZiAoIXRoaXMuYW5pbWF0ZSkge1xuICAgICAgdGhpcy5wYXRoV2lkdGggPSBwYXRoRGFzaG9mZnNldERlZmF1bHRXaWR0aDtcbiAgICB9XG4gIH1cblxuICBnZXQgYW5pbWF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYW5pbWF0ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIWlzSUUoKSkge1xuICAgICAgdGhpcy5wYXRoQW5pbWF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXRoQW5pbWF0aW9uKCkge1xuICAgIHRoaXMucGF0aFdpZHRoID0gdGhpcy5jaGFydFBhdGgubmF0aXZlRWxlbWVudC5nZXRUb3RhbExlbmd0aCgpO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHNldFRpbWVvdXQodGhpcy5wcmV2ZW50c0FuaW1hdGluZ0FnYWluLmJpbmQodGhpcyksIDcwMCk7XG4gIH1cblxuICAvLyBSZWRlZmluZSBwYXRoV2lkdGggcGFyYSB6ZXJvIGFww7NzIG8gcGVyw61vZG8gZGEgYW5pbWHDp8OjbyBwYXJhIHF1ZSBhIGxpbmhhIHNlIGV4cGFuZGEgbm9ybWFsbWVudGUgb24gcmVzaXplLlxuICBwcml2YXRlIHByZXZlbnRzQW5pbWF0aW5nQWdhaW4oKSB7XG4gICAgdGhpcy5wYXRoV2lkdGggPSBwYXRoRGFzaG9mZnNldERlZmF1bHRXaWR0aDtcbiAgfVxufVxuIiwiPHN2ZzpwYXRoICNjaGFydFBhdGhcbiAgY2xhc3M9XCJwby1jaGFydC1wYXRoXCJcbiAgW2NsYXNzLnBvLWNoYXJ0LWFjdGl2ZS1wYXRoXT1cImlzQWN0aXZlXCJcbiAgW2NsYXNzLnBvLWNoYXJ0LWxpbmUtcGF0aF09XCJjaGFydExpbmVcIlxuICBbY2xhc3NdPVwiY29sb3I/LmluY2x1ZGVzKCdwby1ib3JkZXItY29sb3InKSB8fCBjb2xvcj8uaW5jbHVkZXMoJ3BvLWNvbG9yJykgPyBjb2xvciA6ICcnXCJcbiAgW2F0dHIuZmlsbF09XCJjaGFydExpbmUgPyAnbm9uZScgOiBjb2xvclwiXG4gIFthdHRyLnN0cm9rZS1kYXNoYXJyYXldPVwicGF0aFdpZHRoXCJcbiAgW2F0dHIuc3Ryb2tlLWRhc2hvZmZzZXRdPVwicGF0aFdpZHRoXCJcbiAgW2F0dHIuc3Ryb2tlXT1cImNoYXJ0TGluZSA/IGNvbG9yIDogJydcIlxuICBbYXR0ci5kXT1cImNvb3JkaW5hdGVzXCI+XG48L3N2ZzpwYXRoPiAiXX0=