import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoChartType } from '../../enums/po-chart-type.enum';
import { PoChartPlotAreaPaddingTop } from '../../helpers/po-chart-default-values.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-chart-maths.service";
const _c0 = ["chartLine"];
export class PoChartLineBaseComponent {
    mathsService;
    renderer;
    elementRef;
    alignByTheCorners = false;
    categories;
    categoriesCoordinates;
    svgSpace;
    pointClick = new EventEmitter();
    pointHover = new EventEmitter();
    chartLine;
    activeTooltip;
    animate = true;
    chartType;
    seriesPathsCoordinates;
    seriesPointsCoordinates = [];
    firstValidItemFromSerieArray;
    seriesLength;
    _containerSize = {};
    _range = {};
    _series = [];
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.seriePathPointsDefinition(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.seriePathPointsDefinition(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.animate = true;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.chartType = this._series[0].type;
            this.seriePathPointsDefinition(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    constructor(mathsService, renderer, elementRef) {
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onSeriePointClick(selectedItem) {
        this.pointClick.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    svgPathCommand() {
        const command = this.firstValidItemFromSerieArray ? 'M' : 'L';
        // firstValidItemFromSerieArray: tratamento para permitir ao usuário definir o primeiro valor como null para que seja ignorado;
        this.firstValidItemFromSerieArray = false;
        return command;
    }
    xCoordinate(index, containerSize) {
        const halfCategoryWidth = !this.alignByTheCorners
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / this.seriesLength / 2
            : 0;
        const divideIndexBySeriesLength = index / (this.alignByTheCorners ? this.seriesLength - 1 : this.seriesLength);
        const xRatio = isNaN(divideIndexBySeriesLength) ? 0 : divideIndexBySeriesLength;
        return Math.floor(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    serieCategory(index, categories = []) {
        return categories[index] ?? undefined;
    }
    seriePathPointsDefinition(containerSize, series, range) {
        this.seriesPointsCoordinates = [];
        this.seriesPathsCoordinates = series.map((serie) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = '';
                let pointCoordinates = [];
                const color = serie.color;
                this.firstValidItemFromSerieArray = true;
                serie.data.forEach((data, index) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const svgPathCommand = this.svgPathCommand();
                        const xCoordinate = this.xCoordinate(index, containerSize);
                        const yCoordinate = this.yCoordinate(range, data, containerSize);
                        const category = this.serieCategory(index, this.categories);
                        const label = serie.label;
                        const tooltip = serie.tooltip;
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        const isActive = this.chartType === PoChartType.Line;
                        pointCoordinates = [
                            ...pointCoordinates,
                            { category, label, tooltipLabel, data: data, xCoordinate, yCoordinate, color, isActive }
                        ];
                        pathCoordinates += ` ${svgPathCommand}${xCoordinate} ${yCoordinate}`;
                    }
                });
                pathCoordinates = this.verifyIfClosePath(pathCoordinates, serie.data.length - 1, range, 0, containerSize);
                this.seriesPointsCoordinates = [...this.seriesPointsCoordinates, pointCoordinates];
                return { coordinates: pathCoordinates, color, isActive: true };
            }
        });
    }
    verifyIfClosePath(pathCoordinates, lastIndex, range, data, containerSize) {
        const { axisXLabelWidth, svgWidth } = containerSize;
        if (this.chartType === PoChartType.Area) {
            const xLastPosition = this.xCoordinate(lastIndex, containerSize);
            const baseYCoordinate = this.yCoordinate(range, data, containerSize);
            const xInitialPosition = Math.floor(this.alignByTheCorners
                ? axisXLabelWidth
                : axisXLabelWidth + (svgWidth - axisXLabelWidth) / this.seriesLength / 2);
            return `${pathCoordinates} ${xLastPosition} ${baseYCoordinate} L${xInitialPosition} ${baseYCoordinate} Z`;
        }
        return pathCoordinates;
    }
    yCoordinate(range, data, containerSize) {
        const yRratio = this.mathsService.getSeriePercentage(range, data);
        const yCoordinate = containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRratio + PoChartPlotAreaPaddingTop;
        return Math.floor(yCoordinate);
    }
    static ɵfac = function PoChartLineBaseComponent_Factory(t) { return new (t || PoChartLineBaseComponent)(i0.ɵɵdirectiveInject(i1.PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartLineBaseComponent, viewQuery: function PoChartLineBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLine = _t.first);
        } }, inputs: { alignByTheCorners: [i0.ɵɵInputFlags.None, "p-align-by-the-corners", "alignByTheCorners"], categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], categoriesCoordinates: [i0.ɵɵInputFlags.None, "p-categories-coordinates", "categoriesCoordinates"], svgSpace: [i0.ɵɵInputFlags.None, "p-svg-space", "svgSpace"], range: [i0.ɵɵInputFlags.None, "p-range", "range"], containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, outputs: { pointClick: "p-point-click", pointHover: "p-point-hover" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLineBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }], { alignByTheCorners: [{
            type: Input,
            args: ['p-align-by-the-corners']
        }], categories: [{
            type: Input,
            args: ['p-categories']
        }], categoriesCoordinates: [{
            type: Input,
            args: ['p-categories-coordinates']
        }], svgSpace: [{
            type: Input,
            args: ['p-svg-space']
        }], pointClick: [{
            type: Output,
            args: ['p-point-click']
        }], pointHover: [{
            type: Output,
            args: ['p-point-hover']
        }], chartLine: [{
            type: ViewChild,
            args: ['chartLine']
        }], range: [{
            type: Input,
            args: ['p-range']
        }], containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,