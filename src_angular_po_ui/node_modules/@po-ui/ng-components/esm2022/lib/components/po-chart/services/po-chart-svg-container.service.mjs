import { Injectable } from '@angular/core';
import { PoChartPadding } from '../helpers/po-chart-default-values.constant';
import * as i0 from "@angular/core";
export class PoChartSvgContainerService {
    constructor() { }
    /**
     * Retorna um objeto do tipo PoChartContainerSize contendo as dimensões necessárias para plotagem do SVG.
     *
     * @param chartHeight
     * @param chartWrapperWidth
     * @param chartHeaderHeight
     * @param chartLegendHeight
     */
    calculateSVGContainerMeasurements(chartHeight = 0, chartWrapperWidth = 0, chartHeaderHeight = 0, chartLegendHeight = 0) {
        const svgWidth = this.svgWidth(chartWrapperWidth);
        const centerX = this.center(chartWrapperWidth);
        const svgHeight = this.svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight);
        const centerY = this.center(svgHeight);
        const svgPlottingAreaHeight = this.svgPlottingAreaHeight(svgHeight);
        return {
            svgWidth,
            svgHeight,
            centerX,
            centerY,
            svgPlottingAreaHeight
        };
    }
    // Largura do container.
    svgWidth(chartWrapperWidth) {
        const wrapperWidth = chartWrapperWidth - PoChartPadding * 2;
        return wrapperWidth > 0 ? wrapperWidth : 0;
    }
    // O centro do container. Usado para gráficos do tipo circular.
    center(dimension) {
        return dimension / 2;
    }
    // Altura do container
    svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight) {
        const subtractedHeights = chartHeight - chartHeaderHeight - chartLegendHeight - PoChartPadding * 2;
        return subtractedHeights <= 0 ? 0 : subtractedHeights;
    }
    /**
     * Altura da área de plotagem.
     * Subtrai a altura do container SVG pelo padding superior + área para overflow de labels do eixo X.
     */
    svgPlottingAreaHeight(svgHeight) {
        return svgHeight - PoChartPadding - 8;
    }
    static ɵfac = function PoChartSvgContainerService_Factory(t) { return new (t || PoChartSvgContainerService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartSvgContainerService, factory: PoChartSvgContainerService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartSvgContainerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtc3ZnLWNvbnRhaW5lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3NlcnZpY2VzL3BvLWNoYXJ0LXN2Zy1jb250YWluZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7QUFNN0UsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxnQkFBZSxDQUFDO0lBRWhCOzs7Ozs7O09BT0c7SUFDSCxpQ0FBaUMsQ0FDL0IsY0FBc0IsQ0FBQyxFQUN2QixvQkFBNEIsQ0FBQyxFQUM3QixvQkFBNEIsQ0FBQyxFQUM3QixvQkFBNEIsQ0FBQztRQUU3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDcEYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVwRSxPQUFPO1lBQ0wsUUFBUTtZQUNSLFNBQVM7WUFDVCxPQUFPO1lBQ1AsT0FBTztZQUNQLHFCQUFxQjtTQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QjtJQUNoQixRQUFRLENBQUMsaUJBQXlCO1FBQ3hDLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixHQUFHLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFFNUQsT0FBTyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0RBQStEO0lBQ3ZELE1BQU0sQ0FBQyxTQUFpQjtRQUM5QixPQUFPLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELHNCQUFzQjtJQUNkLFNBQVMsQ0FBQyxXQUFtQixFQUFFLGlCQUF5QixFQUFFLGlCQUF5QjtRQUN6RixNQUFNLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRW5HLE9BQU8saUJBQWlCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSyxxQkFBcUIsQ0FBQyxTQUFpQjtRQUM3QyxPQUFPLFNBQVMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7b0ZBekRVLDBCQUEwQjtnRUFBMUIsMEJBQTBCLFdBQTFCLDBCQUEwQixtQkFGekIsTUFBTTs7aUZBRVAsMEJBQTBCO2NBSHRDLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9DaGFydFBhZGRpbmcgfSBmcm9tICcuLi9oZWxwZXJzL3BvLWNoYXJ0LWRlZmF1bHQtdmFsdWVzLmNvbnN0YW50JztcbmltcG9ydCB7IFBvQ2hhcnRDb250YWluZXJTaXplIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1jaGFydC1jb250YWluZXItc2l6ZS5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0U3ZnQ29udGFpbmVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogUmV0b3JuYSB1bSBvYmpldG8gZG8gdGlwbyBQb0NoYXJ0Q29udGFpbmVyU2l6ZSBjb250ZW5kbyBhcyBkaW1lbnPDtWVzIG5lY2Vzc8OhcmlhcyBwYXJhIHBsb3RhZ2VtIGRvIFNWRy5cbiAgICpcbiAgICogQHBhcmFtIGNoYXJ0SGVpZ2h0XG4gICAqIEBwYXJhbSBjaGFydFdyYXBwZXJXaWR0aFxuICAgKiBAcGFyYW0gY2hhcnRIZWFkZXJIZWlnaHRcbiAgICogQHBhcmFtIGNoYXJ0TGVnZW5kSGVpZ2h0XG4gICAqL1xuICBjYWxjdWxhdGVTVkdDb250YWluZXJNZWFzdXJlbWVudHMoXG4gICAgY2hhcnRIZWlnaHQ6IG51bWJlciA9IDAsXG4gICAgY2hhcnRXcmFwcGVyV2lkdGg6IG51bWJlciA9IDAsXG4gICAgY2hhcnRIZWFkZXJIZWlnaHQ6IG51bWJlciA9IDAsXG4gICAgY2hhcnRMZWdlbmRIZWlnaHQ6IG51bWJlciA9IDBcbiAgKTogUG9DaGFydENvbnRhaW5lclNpemUge1xuICAgIGNvbnN0IHN2Z1dpZHRoID0gdGhpcy5zdmdXaWR0aChjaGFydFdyYXBwZXJXaWR0aCk7XG4gICAgY29uc3QgY2VudGVyWCA9IHRoaXMuY2VudGVyKGNoYXJ0V3JhcHBlcldpZHRoKTtcbiAgICBjb25zdCBzdmdIZWlnaHQgPSB0aGlzLnN2Z0hlaWdodChjaGFydEhlaWdodCwgY2hhcnRIZWFkZXJIZWlnaHQsIGNoYXJ0TGVnZW5kSGVpZ2h0KTtcbiAgICBjb25zdCBjZW50ZXJZID0gdGhpcy5jZW50ZXIoc3ZnSGVpZ2h0KTtcbiAgICBjb25zdCBzdmdQbG90dGluZ0FyZWFIZWlnaHQgPSB0aGlzLnN2Z1Bsb3R0aW5nQXJlYUhlaWdodChzdmdIZWlnaHQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN2Z1dpZHRoLFxuICAgICAgc3ZnSGVpZ2h0LFxuICAgICAgY2VudGVyWCxcbiAgICAgIGNlbnRlclksXG4gICAgICBzdmdQbG90dGluZ0FyZWFIZWlnaHRcbiAgICB9O1xuICB9XG5cbiAgLy8gTGFyZ3VyYSBkbyBjb250YWluZXIuXG4gIHByaXZhdGUgc3ZnV2lkdGgoY2hhcnRXcmFwcGVyV2lkdGg6IG51bWJlcikge1xuICAgIGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNoYXJ0V3JhcHBlcldpZHRoIC0gUG9DaGFydFBhZGRpbmcgKiAyO1xuXG4gICAgcmV0dXJuIHdyYXBwZXJXaWR0aCA+IDAgPyB3cmFwcGVyV2lkdGggOiAwO1xuICB9XG5cbiAgLy8gTyBjZW50cm8gZG8gY29udGFpbmVyLiBVc2FkbyBwYXJhIGdyw6FmaWNvcyBkbyB0aXBvIGNpcmN1bGFyLlxuICBwcml2YXRlIGNlbnRlcihkaW1lbnNpb246IG51bWJlcikge1xuICAgIHJldHVybiBkaW1lbnNpb24gLyAyO1xuICB9XG5cbiAgLy8gQWx0dXJhIGRvIGNvbnRhaW5lclxuICBwcml2YXRlIHN2Z0hlaWdodChjaGFydEhlaWdodDogbnVtYmVyLCBjaGFydEhlYWRlckhlaWdodDogbnVtYmVyLCBjaGFydExlZ2VuZEhlaWdodDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3VidHJhY3RlZEhlaWdodHMgPSBjaGFydEhlaWdodCAtIGNoYXJ0SGVhZGVySGVpZ2h0IC0gY2hhcnRMZWdlbmRIZWlnaHQgLSBQb0NoYXJ0UGFkZGluZyAqIDI7XG5cbiAgICByZXR1cm4gc3VidHJhY3RlZEhlaWdodHMgPD0gMCA/IDAgOiBzdWJ0cmFjdGVkSGVpZ2h0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbHR1cmEgZGEgw6FyZWEgZGUgcGxvdGFnZW0uXG4gICAqIFN1YnRyYWkgYSBhbHR1cmEgZG8gY29udGFpbmVyIFNWRyBwZWxvIHBhZGRpbmcgc3VwZXJpb3IgKyDDoXJlYSBwYXJhIG92ZXJmbG93IGRlIGxhYmVscyBkbyBlaXhvIFguXG4gICAqL1xuICBwcml2YXRlIHN2Z1Bsb3R0aW5nQXJlYUhlaWdodChzdmdIZWlnaHQ6IG51bWJlcikge1xuICAgIHJldHVybiBzdmdIZWlnaHQgLSBQb0NoYXJ0UGFkZGluZyAtIDg7XG4gIH1cbn1cbiJdfQ==