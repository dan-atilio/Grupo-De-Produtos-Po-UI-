import { Component } from '@angular/core';
import { PoChartPlotAreaPaddingTop } from '../../../helpers/po-chart-default-values.constant';
import { PoChartBarBaseComponent } from '../po-chart-bar-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-chart-maths.service";
import * as i2 from "@angular/common";
import * as i3 from "../po-chart-bar-path/po-chart-bar-path.component";
const _c0 = ["po-chart-column", ""];
function PoChartColumnComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 1);
    i0.ɵɵlistener("p-bar-click", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
    i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
} }
export class PoChartColumnComponent extends PoChartBarBaseComponent {
    mathsService;
    tooltipPosition = 'top';
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgWidth, axisXLabelWidth, svgPlottingAreaHeight } = containerSize;
        const { chartBarPlotArea, barWidth, spaceBetweenBars } = this.calculateElementsMeasurements(svgWidth, axisXLabelWidth);
        const { x1, x2 } = this.xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth);
        const { y1, y2 } = this.yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(svgWidth, axisXLabelWidth) {
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const chartBarPlotArea = svgWidth - axisXLabelWidth;
        const categoryWidth = chartBarPlotArea / this.seriesGreaterLength;
        const columnFraction = categoryWidth / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barWidth = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { chartBarPlotArea, barWidth, spaceBetweenBars };
    }
    xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth) {
        // A área lateral entre a coluna e a linha do eixo Y do grid será sempre equivalente à largura da coluna.
        const spaceBetweenAxisAndBars = barWidth;
        const xRatio = serieItemDataIndex / this.seriesGreaterLength;
        const x1 = Math.round(axisXLabelWidth +
            chartBarPlotArea * xRatio +
            spaceBetweenAxisAndBars +
            barWidth * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const x2 = Math.round(x1 + barWidth);
        return { x1, x2 };
    }
    yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const minValuePercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const y1 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * minValuePercentage + PoChartPlotAreaPaddingTop);
        const yRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const y2 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        return { y1, y2 };
    }
    static ɵfac = function PoChartColumnComponent_Factory(t) { return new (t || PoChartColumnComponent)(i0.ɵɵdirectiveInject(i1.PoChartMathsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartColumnComponent, selectors: [["", "po-chart-column", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartColumnComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartColumnComponent__svg_g_1_Template, 2, 6, "g", 0);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i2.NgForOf, i3.PoChartBarPathComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartColumnComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-column]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
    }], () => [{ type: i1.PoChartMathsService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartColumnComponent, { className: "PoChartColumnComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-bar/po-chart-column/po-chart-column.component.ts", lineNumber: 15 }); })();
//# sourceMappingURL=data:application/json;base64,