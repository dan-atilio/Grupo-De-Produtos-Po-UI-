import { Injectable } from '@angular/core';
import { PoChartGridLines } from '../helpers/po-chart-default-values.constant';
import { PoChartType } from '../enums/po-chart-type.enum';
import * as i0 from "@angular/core";
export class PoChartMathsService {
    /**
     * Calcula e retorna os válores mínimo e máximo das séries.
     *
     * @param series Lista de séries.
     * @param acceptNegativeValues boolean.
     */
    calculateMinAndMaxValues(series, acceptNegativeValues = true) {
        const minValue = this.getDomain(series, 'min');
        const maxValue = this.getDomain(series, 'max');
        return {
            minValue: !acceptNegativeValues && minValue < 0 ? 0 : minValue,
            maxValue: acceptNegativeValues && maxValue < 0 ? 0 : maxValue
        };
    }
    /**
     * Retorna o valor com maior quantidade de dígitos entre todas as séries.
     * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.
     *
     * @param data Lista de séries.
     * @param type O tipo do gráfico'.
     * @param options As opções para validação de número de linhas do eixo X'.
     */
    getLongestDataValue(data = [], type, options) {
        if (type === PoChartType.Bar) {
            return this.getLongestData(data);
        }
        else {
            return this.getAxisXLabelLongestValue(data, this.amountOfGridLines(options?.axis));
        }
    }
    /**
     * Retorna o tamanho da série que tiver mais itens.
     *
     * @param series Lista de séries.
     */
    seriesGreaterLength(series) {
        return series.reduce((result, serie) => (result > serie.data.length ? result : serie.data.length), 0);
    }
    /**
     * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.
     *
     * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.
     *
     * Por exemplo:
     *    minValue = -10;
     *    maxValue = 0;
     *    serieValue = -8
     *    O resultado será de 0.20;
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param serieValue O valor da série.
     */
    getSeriePercentage(minMaxValues, serieValue) {
        const { minValue, maxValue } = minMaxValues;
        const range = maxValue - minValue;
        const displacement = serieValue - minValue;
        const result = displacement / range;
        return isNaN(result) ? 0 : result;
    }
    /**
     * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param gridLines Quantidade de linhas horizontais. Valor default é 5.
     */
    range(minMaxValues, gridLines = 5) {
        const { minValue, maxValue } = minMaxValues;
        const result = [];
        const step = this.getGridLineArea(minMaxValues, gridLines);
        for (let index = minValue; index <= maxValue; index = (index * 10 + step * 10) / 10) {
            result.push(index);
        }
        return result;
    }
    /**
     *
     * Verifica se o valor passado é um Integer ou Float.
     *
     * @param number O valor a ser validado
     */
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    amountOfGridLines(options) {
        const gridLines = options?.gridLines ?? PoChartGridLines;
        return gridLines && gridLines >= 2 && gridLines <= 10 ? gridLines : PoChartGridLines;
    }
    getAxisXLabelLongestValue(data, gridLines) {
        const allowNegativeData = data.every(dataItem => dataItem.type === PoChartType.Line);
        const domain = this.calculateMinAndMaxValues(data, allowNegativeData);
        const axisXLabelsList = this.range(domain, gridLines);
        return this.getLongestData(axisXLabelsList);
    }
    // Cálculo que retorna o valor obtido de gridLines em relação ao alcance dos valores mínimos e máximos das séries (maxMinValues)
    getGridLineArea(minMaxValues, gridLines) {
        const percentageValue = this.getFractionFromInt(gridLines - 1);
        const { minValue, maxValue } = minMaxValues;
        const result = (percentageValue * (maxValue - minValue)) / 100;
        return result === 0 ? 1 : result;
    }
    // Retorna o valor máximo ou mínimo das séries baseado no tipo passado(type).
    getDomain(series, type) {
        const result = Math[type](...series.map(serie => {
            if (Array.isArray(serie.data)) {
                return Math[type](...serie.data);
            }
        }));
        return isNaN(result) ? 0 : result;
    }
    // Retorna a fração do número passado referente à quantidade de linhas no eixo X (gridLines)
    getFractionFromInt(value) {
        return (1 / value) * (100 / 1);
    }
    getLongestData(serie) {
        const newSerie = [...serie];
        return newSerie.sort((longest, current) => current.toString().length - longest.toString().length)['0'];
    }
    static ɵfac = function PoChartMathsService_Factory(t) { return new (t || PoChartMathsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartMathsService, factory: PoChartMathsService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartMathsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,