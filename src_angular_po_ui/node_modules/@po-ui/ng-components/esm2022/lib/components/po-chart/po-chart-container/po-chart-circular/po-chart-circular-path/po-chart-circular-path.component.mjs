import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./po-chart-tooltip.directive";
const _c0 = ["svgPath"];
const _c1 = ["po-chart-circular-path", ""];
export class PoChartCircularPathComponent {
    renderer;
    serie;
    onClick = new EventEmitter();
    onHover = new EventEmitter();
    svgPath;
    constructor(renderer) {
        this.renderer = renderer;
    }
    applyCoordinates(coordinates) {
        this.renderer.setAttribute(this.svgPath.nativeElement, 'd', coordinates);
    }
    onMouseClick() {
        const { label, data } = this.serie;
        this.onClick.emit({ label, data });
    }
    onMouseEnter() {
        const { label, data } = this.serie;
        this.onHover.emit({ label, data });
    }
    static ɵfac = function PoChartCircularPathComponent_Factory(t) { return new (t || PoChartCircularPathComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartCircularPathComponent, selectors: [["", "po-chart-circular-path", ""]], viewQuery: function PoChartCircularPathComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPath = _t.first);
        } }, inputs: { serie: [i0.ɵɵInputFlags.None, "p-serie", "serie"] }, outputs: { onClick: "p-on-click", onHover: "p-on-hover" }, attrs: _c1, decls: 2, vars: 4, consts: [[1, "po-path-item", 3, "p-chart-tooltip", "click", "mouseenter"], ["svgPath", ""]], template: function PoChartCircularPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "path", 0, 1);
            i0.ɵɵlistener("click", function PoChartCircularPathComponent_Template__svg_path_click_0_listener() { return ctx.onMouseClick(); })("mouseenter", function PoChartCircularPathComponent_Template__svg_path_mouseenter_0_listener() { return ctx.onMouseEnter(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMap((ctx.serie == null ? null : ctx.serie.color.includes("po-color")) ? ctx.serie.color : "");
            i0.ɵɵproperty("p-chart-tooltip", ctx.serie == null ? null : ctx.serie.tooltipLabel);
            i0.ɵɵattribute("fill", ctx.serie == null ? null : ctx.serie.color);
        } }, dependencies: [i1.PoChartTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-circular-path]', template: "<svg:path #svgPath\n  class=\"po-path-item\"\n  [class]=\"serie?.color.includes('po-color') ? serie.color : ''\"\n  [p-chart-tooltip]=\"serie?.tooltipLabel\"\n  [attr.fill]=\"serie?.color\"\n  (click)=\"onMouseClick()\"\n  (mouseenter)=\"onMouseEnter()\"\n  >\n</svg:path> \n" }]
    }], () => [{ type: i0.Renderer2 }], { serie: [{
            type: Input,
            args: ['p-serie']
        }], onClick: [{
            type: Output,
            args: ['p-on-click']
        }], onHover: [{
            type: Output,
            args: ['p-on-hover']
        }], svgPath: [{
            type: ViewChild,
            args: ['svgPath', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartCircularPathComponent, { className: "PoChartCircularPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-circular-path/po-chart-circular-path.component.ts", lineNumber: 9 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtY2lyY3VsYXItcGF0aC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtY29udGFpbmVyL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLXBhdGgvcG8tY2hhcnQtY2lyY3VsYXItcGF0aC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtY29udGFpbmVyL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLXBhdGgvcG8tY2hhcnQtY2lyY3VsYXItcGF0aC5jb21wb25lbnQuc3ZnIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFRekcsTUFBTSxPQUFPLDRCQUE0QjtJQVNuQjtJQVJGLEtBQUssQ0FBeUI7SUFFMUIsT0FBTyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFFbEMsT0FBTyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFFWixPQUFPLENBQWE7SUFFaEUsWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUFHLENBQUM7SUFFM0MsZ0JBQWdCLENBQUMsV0FBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxZQUFZO1FBQ1YsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELFlBQVk7UUFDVixNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO3NGQXpCVSw0QkFBNEI7NkRBQTVCLDRCQUE0QjttQ0FPVCxVQUFVOzs7OztZQ2YxQyxtQkFPRztZQVBILGtDQU9HO1lBRkQsNEdBQVMsa0JBQWMsSUFBQyx5R0FDVixrQkFBYyxJQURKO1lBRzFCLGlCQUFXOztZQU5ULHVHQUE4RDtZQUM5RCxtRkFBdUM7WUFDdkMsa0VBQTBCOzs7aUZESWYsNEJBQTRCO2NBSnhDLFNBQVM7MkJBQ0UsMEJBQTBCOzBDQUlsQixLQUFLO2tCQUF0QixLQUFLO21CQUFDLFNBQVM7WUFFTSxPQUFPO2tCQUE1QixNQUFNO21CQUFDLFlBQVk7WUFFRSxPQUFPO2tCQUE1QixNQUFNO21CQUFDLFlBQVk7WUFFd0IsT0FBTztrQkFBbEQsU0FBUzttQkFBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFOztrRkFQL0IsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ2hhcnRQYXRoQ29vcmRpbmF0ZXMgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LXBhdGgtY29vcmRpbmF0ZXMuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3BvLWNoYXJ0LWNpcmN1bGFyLXBhdGhdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LWNpcmN1bGFyLXBhdGguY29tcG9uZW50LnN2Zydcbn0pXG5leHBvcnQgY2xhc3MgUG9DaGFydENpcmN1bGFyUGF0aENvbXBvbmVudCB7XG4gIEBJbnB1dCgncC1zZXJpZScpIHNlcmllOiBQb0NoYXJ0UGF0aENvb3JkaW5hdGVzO1xuXG4gIEBPdXRwdXQoJ3Atb24tY2xpY2snKSBvbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC1vbi1ob3ZlcicpIG9uSG92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAVmlld0NoaWxkKCdzdmdQYXRoJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHN2Z1BhdGg6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIGFwcGx5Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXM6IHN0cmluZykge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuc3ZnUGF0aC5uYXRpdmVFbGVtZW50LCAnZCcsIGNvb3JkaW5hdGVzKTtcbiAgfVxuXG4gIG9uTW91c2VDbGljaygpIHtcbiAgICBjb25zdCB7IGxhYmVsLCBkYXRhIH0gPSB0aGlzLnNlcmllO1xuXG4gICAgdGhpcy5vbkNsaWNrLmVtaXQoeyBsYWJlbCwgZGF0YSB9KTtcbiAgfVxuXG4gIG9uTW91c2VFbnRlcigpIHtcbiAgICBjb25zdCB7IGxhYmVsLCBkYXRhIH0gPSB0aGlzLnNlcmllO1xuXG4gICAgdGhpcy5vbkhvdmVyLmVtaXQoeyBsYWJlbCwgZGF0YSB9KTtcbiAgfVxufVxuIiwiPHN2ZzpwYXRoICNzdmdQYXRoXG4gIGNsYXNzPVwicG8tcGF0aC1pdGVtXCJcbiAgW2NsYXNzXT1cInNlcmllPy5jb2xvci5pbmNsdWRlcygncG8tY29sb3InKSA/IHNlcmllLmNvbG9yIDogJydcIlxuICBbcC1jaGFydC10b29sdGlwXT1cInNlcmllPy50b29sdGlwTGFiZWxcIlxuICBbYXR0ci5maWxsXT1cInNlcmllPy5jb2xvclwiXG4gIChjbGljayk9XCJvbk1vdXNlQ2xpY2soKVwiXG4gIChtb3VzZWVudGVyKT1cIm9uTW91c2VFbnRlcigpXCJcbiAgPlxuPC9zdmc6cGF0aD4gXG4iXX0=