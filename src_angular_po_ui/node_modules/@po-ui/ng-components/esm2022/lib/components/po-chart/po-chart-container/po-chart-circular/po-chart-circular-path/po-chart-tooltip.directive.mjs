import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class PoChartTooltipDirective {
    elementRef;
    renderer;
    tooltip;
    lastTooltipText;
    tooltipElement;
    tooltipText;
    tooltipTextContent;
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    onMouseEnter(event) {
        this.tooltipElement ? this.showTooltip() : this.createTooltip();
        this.tooltipPosition(event);
        this.lastTooltipText = this.tooltip;
    }
    onMouseLeave() {
        this.hideTooltip();
    }
    onMouseMove(event) {
        this.tooltipPosition(event);
    }
    calculateTooltipPosition(event) {
        const displacement = 12;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    createTooltip() {
        const chartWrapper = this.elementRef.nativeElement.closest('.po-chart-wrapper');
        this.tooltipElement = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipElement, 'po-chart-tooltip');
        this.renderer.addClass(this.tooltipElement, 'po-tooltip');
        this.renderer.setStyle(this.tooltipElement, 'transition', 'visibility .3s, opacity .3s linear');
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0.9);
        const divArrow = this.renderer.createElement('div');
        this.renderer.addClass(divArrow, 'po-tooltip-arrow');
        this.renderer.addClass(divArrow, 'po-arrow-bottom');
        this.tooltipText = this.renderer.createElement('p');
        this.renderer.addClass(this.tooltipText, 'po-tooltip-content');
        this.tooltipTextContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        this.renderer.appendChild(this.tooltipElement, divArrow);
        this.renderer.appendChild(this.tooltipElement, this.tooltipText);
        this.renderer.appendChild(chartWrapper, this.tooltipElement);
    }
    hideTooltip() {
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0);
        this.renderer.setStyle(this.tooltipElement, 'visibility', 'hidden');
    }
    showTooltip() {
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0.9);
        this.renderer.setStyle(this.tooltipElement, 'visibility', 'visible');
        this.updatetooltipTextContent();
    }
    tooltipPosition(event) {
        const tooltipPositions = this.calculateTooltipPosition(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    updatetooltipTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.tooltipText, this.tooltipTextContent);
            this.tooltipTextContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        }
    }
    static ɵfac = function PoChartTooltipDirective_Factory(t) { return new (t || PoChartTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartTooltipDirective, selectors: [["", "p-chart-tooltip", ""]], hostBindings: function PoChartTooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("mouseenter", function PoChartTooltipDirective_mouseenter_HostBindingHandler($event) { return ctx.onMouseEnter($event); })("mouseleave", function PoChartTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("mousemove", function PoChartTooltipDirective_mousemove_HostBindingHandler($event) { return ctx.onMouseMove($event); });
        } }, inputs: { tooltip: [i0.ɵɵInputFlags.None, "p-chart-tooltip", "tooltip"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartTooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[p-chart-tooltip]'
            }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], { tooltip: [{
            type: Input,
            args: ['p-chart-tooltip']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onMouseMove: [{
            type: HostListener,
            args: ['mousemove', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,