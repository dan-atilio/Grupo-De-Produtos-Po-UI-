import { ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
const _c0 = ["chartBody"];
const _c1 = ["svgContainer"];
const Padding = 24;
/* eslint-disable @angular-eslint/directive-class-suffix */
export class PoChartDynamicTypeComponent {
    chartBody;
    svgContainer;
    centerX;
    chartElementCategory;
    chartElementDescription;
    chartElementValue;
    chartHeader;
    chartLegend;
    chartWrapper;
    colors;
    height;
    innerRadius = 0;
    onSerieClick = new Subject();
    onSerieHover = new Subject();
    svgElement;
    svgHeight;
    target;
    tooltipElement;
    tooltipText;
    totalValue;
    type;
    windowResizeListener;
    windowScrollListener;
    // eslint-disable-next-line
    _series = [];
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue = this.series.reduce((previousValue, serie) => previousValue + (serie.data ? serie.data : serie.value), 0);
    }
    set series(value) {
        this._series = this.getSeriesWithValue(value);
    }
    get series() {
        return this._series;
    }
    getSeriesWithValue(value) {
        return value;
    }
    static ɵfac = function PoChartDynamicTypeComponent_Factory(t) { return new (t || PoChartDynamicTypeComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartDynamicTypeComponent, viewQuery: function PoChartDynamicTypeComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
            i0.ɵɵviewQuery(_c1, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartBody = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgContainer = _t.first);
        } } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartDynamicTypeComponent, [{
        type: Directive
    }], null, { chartBody: [{
            type: ViewChild,
            args: ['chartBody', { static: true }]
        }], svgContainer: [{
            type: ViewChild,
            args: ['svgContainer', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFJL0IsTUFBTSxPQUFPLEdBQVcsRUFBRSxDQUFDO0FBRTNCLDJEQUEyRDtBQUUzRCxNQUFNLE9BQWdCLDJCQUEyQjtJQUNMLFNBQVMsQ0FBYTtJQUVuQixZQUFZLENBQWE7SUFFdEUsT0FBTyxDQUFTO0lBQ2hCLG9CQUFvQixDQUFNO0lBQzFCLHVCQUF1QixDQUFNO0lBQzdCLGlCQUFpQixDQUFNO0lBQ3ZCLFdBQVcsQ0FBUztJQUNwQixXQUFXLENBQVM7SUFDcEIsWUFBWSxDQUFTO0lBQ3JCLE1BQU0sQ0FBZ0I7SUFDdEIsTUFBTSxDQUFTO0lBQ2YsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUN4QixZQUFZLEdBQWlCLElBQUksT0FBTyxFQUFFLENBQUM7SUFDM0MsWUFBWSxHQUFpQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzNDLFVBQVUsQ0FBb0I7SUFDOUIsU0FBUyxDQUFTO0lBQ2xCLE1BQU0sQ0FBaUM7SUFDdkMsY0FBYyxDQUFvQjtJQUNsQyxXQUFXLENBQVM7SUFDcEIsVUFBVSxDQUFTO0lBQ25CLElBQUksQ0FBYztJQUVSLG9CQUFvQixDQUFhO0lBQ2pDLG9CQUFvQixDQUFhO0lBQzNDLDJCQUEyQjtJQUNqQixPQUFPLEdBQWUsRUFBRSxDQUFDO0lBRW5DLCtCQUErQixDQUFDLG1CQUEyQixFQUFFLGtCQUEwQixFQUFFLGtCQUEwQjtRQUNqSCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUVuRyxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUMxRSxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQ2xDLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNqRixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFpQjtRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxLQUFLO1FBQ2hDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztxRkF0RG1CLDJCQUEyQjs2REFBM0IsMkJBQTJCOzs7Ozs7Ozs7aUZBQTNCLDJCQUEyQjtjQURoRCxTQUFTO2dCQUVrQyxTQUFTO2tCQUFsRCxTQUFTO21CQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7WUFFSyxZQUFZO2tCQUF4RCxTQUFTO21CQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvQ2hhcnRUeXBlIH0gZnJvbSAnLi4vZW51bXMvcG8tY2hhcnQtdHlwZS5lbnVtJztcblxuY29uc3QgUGFkZGluZzogbnVtYmVyID0gMjQ7XG5cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9kaXJlY3RpdmUtY2xhc3Mtc3VmZml4ICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb0NoYXJ0RHluYW1pY1R5cGVDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdjaGFydEJvZHknLCB7IHN0YXRpYzogdHJ1ZSB9KSBjaGFydEJvZHk6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnc3ZnQ29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgc3ZnQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gIGNlbnRlclg6IG51bWJlcjtcbiAgY2hhcnRFbGVtZW50Q2F0ZWdvcnk6IGFueTtcbiAgY2hhcnRFbGVtZW50RGVzY3JpcHRpb246IGFueTtcbiAgY2hhcnRFbGVtZW50VmFsdWU6IGFueTtcbiAgY2hhcnRIZWFkZXI6IG51bWJlcjtcbiAgY2hhcnRMZWdlbmQ6IG51bWJlcjtcbiAgY2hhcnRXcmFwcGVyOiBudW1iZXI7XG4gIGNvbG9yczogQXJyYXk8c3RyaW5nPjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGlubmVyUmFkaXVzOiBudW1iZXIgPSAwO1xuICBvblNlcmllQ2xpY2s6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTtcbiAgc3ZnRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHN2Z0hlaWdodDogbnVtYmVyO1xuICB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgJiBFdmVudFRhcmdldDtcbiAgdG9vbHRpcEVsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xuICB0b29sdGlwVGV4dDogc3RyaW5nO1xuICB0b3RhbFZhbHVlOiBudW1iZXI7XG4gIHR5cGU6IFBvQ2hhcnRUeXBlO1xuXG4gIHByb3RlY3RlZCB3aW5kb3dSZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcbiAgcHJvdGVjdGVkIHdpbmRvd1Njcm9sbExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgcHJvdGVjdGVkIF9zZXJpZXM6IEFycmF5PGFueT4gPSBbXTtcblxuICBjYWxjdWxhdGVTVkdDb250YWluZXJEaW1lbnNpb25zKGNoYXJ0V3JhcHBlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRIZWFkZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0TGVnZW5kRWxlbWVudDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA9IHRoaXMuaGVpZ2h0IC0gY2hhcnRIZWFkZXJFbGVtZW50IC0gY2hhcnRMZWdlbmRFbGVtZW50IC0gUGFkZGluZyAqIDI7XG5cbiAgICB0aGlzLnN2Z0hlaWdodCA9IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPD0gMCA/IDAgOiBzdmdDb250YWluZXJIZWlnaHRDYWxjO1xuICAgIHRoaXMuY2VudGVyWCA9IGNoYXJ0V3JhcHBlckVsZW1lbnQgLyAyO1xuICB9XG5cbiAgY2FsY3VsYXRlVG90YWxWYWx1ZSgpIHtcbiAgICB0aGlzLnRvdGFsVmFsdWUgPSB0aGlzLnNlcmllcy5yZWR1Y2UoXG4gICAgICAocHJldmlvdXNWYWx1ZSwgc2VyaWUpID0+IHByZXZpb3VzVmFsdWUgKyAoc2VyaWUuZGF0YSA/IHNlcmllLmRhdGEgOiBzZXJpZS52YWx1ZSksXG4gICAgICAwXG4gICAgKTtcbiAgfVxuXG4gIHNldCBzZXJpZXModmFsdWU6IEFycmF5PGFueT4pIHtcbiAgICB0aGlzLl9zZXJpZXMgPSB0aGlzLmdldFNlcmllc1dpdGhWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBnZXQgc2VyaWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJpZXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U2VyaWVzV2l0aFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iXX0=