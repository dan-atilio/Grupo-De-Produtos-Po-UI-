import { Component } from '@angular/core';
import { PoChartCircularComponent } from '../po-chart-circular.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-chart-circular-path/po-chart-circular-path.component";
import * as i3 from "../po-chart-circular-label/po-chart-circular-label.component";
const _c0 = ["po-chart-pie", ""];
function PoChartPieComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
    i0.ɵɵlistener("p-on-click", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieClick($event)); })("p-on-hover", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSerieHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r2);
    i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
} }
function PoChartPieComponent__svg_g_2__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵelement(1, "g", 4, 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const i_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
    i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
} }
function PoChartPieComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
} }
export class PoChartPieComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            radius,
            radius,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    static ɵfac = function PoChartPieComponent_Factory(t) { return new (t || PoChartPieComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPieComponent, selectors: [["", "po-chart-pie", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartPieComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_1_Template, 3, 2, "g", 0)(2, PoChartPieComponent__svg_g_2_Template, 2, 1, "g", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesList);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i2.PoChartCircularPathComponent, i3.PoChartCircularLabelComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPieComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-pie]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
    }], () => [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartPieComponent, { className: "PoChartPieComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-pie/po-chart-pie.component.ts", lineNumber: 9 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtcGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC1jb250YWluZXIvcG8tY2hhcnQtY2lyY3VsYXIvcG8tY2hhcnQtcGllL3BvLWNoYXJ0LXBpZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtY29udGFpbmVyL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbXBvbmVudC5zdmciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixTQUFTLEVBQW9DLE1BQU0sZUFBZSxDQUFDO0FBRS9GLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7Ozs7SUNBeEUseUJBQXNELGNBQUE7SUFJbEQsbUxBQWMsZUFBQSwyQkFBb0IsQ0FBQSxJQUFDLHNLQUNyQixlQUFBLDJCQUFvQixDQUFBLElBREM7SUFFckMsaUJBQVEsRUFBQTs7OztJQUhOLGNBQWdCO0lBQWhCLGlDQUFnQjtJQURoQix1REFBMEM7Ozs7SUFTNUMseUJBQXdEO0lBQ3RELDBCQUlRO0lBQ1YsaUJBQVE7Ozs7O0lBSEosY0FBZ0I7SUFBaEIsaUNBQWdCLG1DQUFBO0lBRGhCLHlEQUEyQzs7OztJQUhqRCx5QkFBZ0M7SUFDOUIsOEVBTVE7SUFDVixpQkFBUTs7O0lBUGtCLGNBQWlCO0lBQWpCLDZDQUFpQjs7QURMN0MsTUFBTSxPQUFPLG1CQUFvQixTQUFRLHdCQUF3QjtJQUMvRCwwQkFBMEI7SUFDMUIsWUFBWSxNQUFjLEVBQUUsY0FBaUM7UUFDM0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQztJQUVTLG9CQUFvQixDQUFDLE1BQWMsRUFBRSxnQkFBd0IsRUFBRSxjQUFzQjtRQUM3RixNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFNUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQzFDLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBRTFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXZDLE1BQU0sUUFBUSxHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRTdELE9BQU87WUFDTCxHQUFHO1lBQ0gsTUFBTTtZQUNOLE1BQU07WUFDTixHQUFHO1lBQ0gsTUFBTTtZQUNOLE1BQU07WUFDTixDQUFDO1lBQ0QsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDeEIsSUFBSTtZQUNKLElBQUk7WUFDSixHQUFHO1lBQ0gsTUFBTTtZQUNOLE1BQU07WUFDTixHQUFHO1NBQ0osQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxDQUFDO0lBRVMsZUFBZSxDQUFDLElBQVksRUFBRSxLQUFjLEVBQUUsWUFBcUI7UUFDM0UsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWxDLE9BQU8sWUFBWSxJQUFJLEdBQUcsU0FBUyxHQUFHLFNBQVMsRUFBRSxDQUFDO0lBQ3BELENBQUM7NkVBcERVLG1CQUFtQjs2REFBbkIsbUJBQW1CO1lDUmhDLG1CQUFPO1lBQVAseUJBQU87WUFFTCxxRUFPUSx3REFBQTtZQVlWLGlCQUFROztZQW5Ca0IsY0FBZTtZQUFmLHdDQUFlO1lBVS9CLGNBQXNCO1lBQXRCLDJDQUFzQjs7O2lGREpuQixtQkFBbUI7Y0FKL0IsU0FBUzsyQkFDRSxnQkFBZ0I7O2tGQUdmLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIE5nWm9uZSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ2hhcnRDaXJjdWxhckNvbXBvbmVudCB9IGZyb20gJy4uL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1twby1jaGFydC1waWVdJyxcbiAgdGVtcGxhdGVVcmw6ICcuLi9wby1jaGFydC1jaXJjdWxhci5jb21wb25lbnQuc3ZnJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0UGllQ29tcG9uZW50IGV4dGVuZHMgUG9DaGFydENpcmN1bGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKG5nWm9uZSwgY2hhbmdlRGV0ZWN0b3IpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnNlcmllcyB8fCBjaGFuZ2VzLmNvbnRhaW5lclNpemUpIHtcbiAgICAgIHRoaXMuZHJhd1Nlcmllcyh0aGlzLnNlcmllcywgdGhpcy5jb250YWluZXJTaXplLnN2Z0hlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGN1bGF0ZUNvb3JkaW5hdGVzKGhlaWdodDogbnVtYmVyLCBzdGFydFJhZGlhbkFuZ2xlOiBudW1iZXIsIGVuZFJhZGlhbkFuZ2xlOiBudW1iZXIpIHtcbiAgICBjb25zdCByYWRpdXMgPSBoZWlnaHQgLyAyO1xuXG4gICAgY29uc3Qgc2luQWxwaGEgPSBNYXRoLnNpbihzdGFydFJhZGlhbkFuZ2xlKTtcbiAgICBjb25zdCBjb3NBbHBoYSA9IE1hdGguY29zKHN0YXJ0UmFkaWFuQW5nbGUpO1xuXG4gICAgY29uc3Qgc2luQmV0YSA9IE1hdGguc2luKGVuZFJhZGlhbkFuZ2xlKTtcbiAgICBjb25zdCBjb3NCZXRhID0gTWF0aC5jb3MoZW5kUmFkaWFuQW5nbGUpO1xuXG4gICAgY29uc3Qgc3RhcnRYID0gcmFkaXVzICsgY29zQWxwaGEgKiByYWRpdXM7XG4gICAgY29uc3Qgc3RhcnRZID0gcmFkaXVzICsgc2luQWxwaGEgKiByYWRpdXM7XG5cbiAgICBjb25zdCBlbmRYID0gcmFkaXVzICsgY29zQmV0YSAqIHJhZGl1cztcbiAgICBjb25zdCBlbmRZID0gcmFkaXVzICsgc2luQmV0YSAqIHJhZGl1cztcblxuICAgIGNvbnN0IGxhcmdlQXJjID0gZW5kUmFkaWFuQW5nbGUgLSBzdGFydFJhZGlhbkFuZ2xlID4gTWF0aC5QSTtcblxuICAgIHJldHVybiBbXG4gICAgICAnTScsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICAnQScsXG4gICAgICByYWRpdXMsXG4gICAgICByYWRpdXMsXG4gICAgICAwLFxuICAgICAgbGFyZ2VBcmMgPyAnMSwxJyA6ICcwLDEnLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICAnTCcsXG4gICAgICByYWRpdXMsXG4gICAgICByYWRpdXMsXG4gICAgICAnWidcbiAgICBdLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRUb29sdGlwTGFiZWwoZGF0YTogbnVtYmVyLCBsYWJlbD86IHN0cmluZywgdG9vbHRpcExhYmVsPzogc3RyaW5nKSB7XG4gICAgY29uc3QgZGF0YUxhYmVsID0gbGFiZWwgPyBgJHtsYWJlbH06IGAgOiAnJztcbiAgICBjb25zdCBkYXRhVmFsdWUgPSBkYXRhLnRvU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gdG9vbHRpcExhYmVsIHx8IGAke2RhdGFMYWJlbH0ke2RhdGFWYWx1ZX1gO1xuICB9XG59XG4iLCI8c3ZnOmc+XG4gIDwhLS0gU0VSSUVTIFBBVEhTIC0tPlxuICA8c3ZnOmcgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc2VyaWVzTGlzdDsgbGV0IGkgPSBpbmRleFwiPlxuICAgIDxzdmc6ZyAjc3ZnUGF0aHMgcG8tY2hhcnQtY2lyY3VsYXItcGF0aFxuICAgICAgW2F0dHIua2V5XT1cIidwby1jaGFydC1jaXJjdWxhci1wYXRoLScgKyBpXCJcbiAgICAgIFtwLXNlcmllXT1cIml0ZW1cIlxuICAgICAgKHAtb24tY2xpY2spPVwib25TZXJpZUNsaWNrKCRldmVudClcIlxuICAgICAgKHAtb24taG92ZXIpPVwib25TZXJpZUhvdmVyKCRldmVudClcIj5cbiAgICA8L3N2ZzpnPlxuICA8L3N2ZzpnPlxuXG4gIDwhLS0gU0VSSUVTIExBQkVMUyAtLT5cbiAgPHN2ZzpnICpuZ0lmPVwiY2FuRGlzcGxheUxhYmVsc1wiPlxuICAgIDxzdmc6ZyAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzZXJpZXNMYWJlbHM7IGxldCBpID0gaW5kZXhcIj5cbiAgICAgIDxzdmc6ZyAjc3ZnTGFiZWxzIHBvLWNoYXJ0LWNpcmN1bGFyLWxhYmVsXG4gICAgICAgIFthdHRyLmtleV09XCIncG8tY2hhcnQtY2lyY3VsYXItbGFiZWwtJyArIGlcIlxuICAgICAgICBbcC1zZXJpZV09XCJpdGVtXCJcbiAgICAgICAgW3Atc2hvdy1sYWJlbF09XCJzaG93TGFiZWxzXCI+XG4gICAgICA8L3N2ZzpnPlxuICAgIDwvc3ZnOmc+XG4gIDwvc3ZnOmc+XG48L3N2ZzpnPlxuXG4iXX0=