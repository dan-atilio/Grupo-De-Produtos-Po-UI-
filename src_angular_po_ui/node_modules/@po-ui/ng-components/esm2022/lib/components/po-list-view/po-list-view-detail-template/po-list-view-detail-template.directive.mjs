import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
export class PoListViewDetailTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     */
    showDetail;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoListViewDetailTemplateDirective_Factory(t) { return new (t || PoListViewDetailTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewDetailTemplateDirective, selectors: [["", "p-list-view-detail-template", ""]], inputs: { showDetail: [i0.ɵɵInputFlags.None, "p-show-detail", "showDetail"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewDetailTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-list-view-detail-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { showDetail: [{
            type: Input,
            args: ['p-show-detail']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tbGlzdC12aWV3L3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUvcG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTlEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRDRztBQUlILE1BQU0sT0FBTyxpQ0FBaUM7SUFhekI7SUFabkI7Ozs7Ozs7O09BUUc7SUFDcUIsVUFBVSxDQUFvQjtJQUV0RCxzRUFBc0U7SUFDdEUsWUFBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUcsQ0FBQzsyRkFiekMsaUNBQWlDOzZEQUFqQyxpQ0FBaUM7O2lGQUFqQyxpQ0FBaUM7Y0FIN0MsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSwrQkFBK0I7YUFDMUM7NENBV3lCLFVBQVU7a0JBQWpDLEtBQUs7bUJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIGRlIGNhZGEgaXRlbSwgY29uc3RydWluZG8gdW1cbiAqIGJvdMOjbyBgRXhpYmlyIGRldGFsaGVzYCBhYmFpeG8gZG8gY29udGXDumRvIHByaW5jaXBhbCBkbyBpdGVtLlxuICpcbiAqIERldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZG8gaXRlbSBlL291IMOtbmRpY2UsIHNlbmRvIHBvciBwYWRyw6NvIG8gaXRlbS5cbiAqICAtIEl0ZW06IGBpdGVtYCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcG9kZSBzZXIgdXNhZGEgZGUgZHVhcyBmb3JtYXM6IGV4cGzDrWNpdGEgb3UgKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cImNvZGVcIj48L3BvLWluZm8+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgPGRpdiAqcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvcG8tbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUge1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBxdWUgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvIGBib29sZWFuYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGEgdmFsaWRhw6fDo28gcGFyYSBxdWUgbyBkZXRhbGhlIGRlIGl0ZW1cbiAgICogZGEgbGlzdGEgaW5pY2llIGFiZXJ0byBvdSBmZWNoYWRvLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdwLXNob3ctZGV0YWlsJykgc2hvd0RldGFpbDogKGl0ZW0pID0+IGJvb2xlYW47XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19