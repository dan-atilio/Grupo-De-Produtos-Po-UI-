import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { poSearchLiteralsDefault } from './literals/po-search-literals-default';
import { PoSearchFilterMode } from './enum/po-search-filter-mode.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
/**
 * @description
 *
 * O componente search, também conhecido como barra de pesquisa, é utilizado para ajudar os usuários a localizar um determinado conteúdo
 *
 * Normalmente localizado no canto superior direito, junto com o ícone de lupa, uma vez que este ícone é amplamente reconhecido.
 *
 * Portanto, é de extrema importância que, ao utilizar este componente, as pessoas responsáveis por seu desenvolvimento considerem os seguintes critérios.
 *
 * #### Boas práticas
 *
 * Foram estruturados os padrões de usabilidade para auxiliar na utilização do componente e garantir uma boa experiência aos usuários. Por isso, é muito importante que ao utilizar este componente, as pessoas que o projetarem devem levar em consideração os seguintes critérios:
 * - Utilize labels para apresentar resultados que estão sendo exibidos e apresente os resultados mais relevantes primeiro.
 * - Exiba uma mensagem clara quando não forem encontrados resultados para busca e sempre que possível ofereça outras sugestões de busca.
 * - Mantenha o texto original no campo de input, que facilita a ação do usuário caso queira fazer uma nova busca com alguma modificação na pesquisa.
 * - Caso seja possível detectar um erro de digitação, mostre os resultados para a palavra "corrigida", isso evita a frustração de não obter resultados e não força o usuário a realizar uma nova busca.
 * - Quando apropriado, destaque os termos da busca nos resultados.
 * - A entrada do campo de pesquisa deve caber em uma linha. Não use entradas de pesquisa de várias linhas.
 * - Recomenda-se ter apenas uma pesquisa por página. Se você precisar de várias pesquisas, rotule-as claramente para indicar sua finalidade.
 * - Se possível, forneça sugestões de pesquisa, seja em um helptext ou sugestão de pesquisa que é um autocomplete. Isso ajuda os usuários a encontrar o que estão procurando, especialmente se os itens pesquisáveis forem complexos.
 *
 * #### Acessibilidade tratada no componente
 *
 *  Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Permitir a interação via teclado (2.1.1: Keyboard (A));
 * - Alteração entre os estados precisa ser indicada por mais de um elemento além da cor (1.4.1: Use of Color);
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                             | Descrição                                            | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--text-color-placeholder`             | Cor do texto no placeholder                           | `var(--color-neutral-light-30)`                   |
 * | `--color`                              | Cor principal do search                               | `var(--color-neutral-dark-70)`                    |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                   |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                    |
 * | `--color-clear`                        | Cor principal do icone close                          | `var(--color-action-default)`                     |
 * | **Icon**                               |                                                       |                                                   |
 * | `--color-icon-read`                    | Cor principal do icone de leitura                     | `var(--color-neutral-dark-70)`                    |
 * | `--color-icon`                         | Cor principal do icone                                | `var(--color-action-default)`                     |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                  |
 * | **Focused**                            |                                                       |                                                   |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                     |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                    |
 * | `--background-color-disabled`          | Cor de background no estado disabled                  | `var(--color-neutral-light-20)`                   |
 *
 */
export class PoSearchBaseComponent {
    _literals;
    _ariaLabel;
    language;
    _filterSelect;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o po-search e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    disabled;
    /**
     * @optional
     *
     * @description
     *
     * Lista de itens que serão utilizados para pesquisa
     */
    items = [];
    /**
     * @optional
     *
     * @description
     *
     * Define um aria-label para o po-search.
     *
     * > Devido o componente não possuir uma label assim como outros campos de texto, o `aria-label` é utilizado para acessibilidade.
     */
    set ariaLabel(value) {
        this._ariaLabel = value;
        if (value !== this.literals.search) {
            this._ariaLabel = `${this._ariaLabel} ${this.literals.search}`;
        }
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * @description
     *
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente (p-items), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     */
    filterKeys = [];
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente (p-items), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Determina a forma de realizar a pesquisa no componente
     *
     * Valores aceitos:
     * - `action`: Realiza a busca a cada caractere digitado.
     * - `trigger`: Realiza a busca ao pressionar `enter` ou clicar no ícone de busca.
     *
     * @default `action`
     */
    type = 'action';
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-search`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoSearchLiterals = {
     *    search: 'Pesquisar',
     *    clean: 'Limpar',
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-search
     *   [p-literals]="customLiterals">
     * </po-search>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poSearchLiteralsDefault[poLocaleDefault],
                ...poSearchLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poSearchLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poSearchLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado. Valores definidos no enum: PoSearchFilterMode
     *
     * @default `startsWith`
     */
    filterType = PoSearchFilterMode.startsWith;
    /**
     * @optional
     *
     * @description
     *
     * Exibe uma lista (auto-complete) com as opções definidas no `p-filter-keys` enquanto realiza uma busca,
     * respeitando o `p-filter-type` como modo de pesquisa.
     *
     * @default `false`
     */
    showListbox = false;
    /**
     * @description
     *
     * Define os tipos de filtros (p-filter-keys) a serem aplicados na busca ou lista do componente (p-items).
     * Automaticamente adiciona a opção 'Todos', com um mapeamento de todas as opções passadas.
     *
     * > O uso desta propriedade torna a propriedade 'p-filter-keys' inválida.
     *
     * Exemplo de uso:
     * ```typescript
     * const filterSelect = [
     *   { label: 'personal', value: ['name', 'email', 'nickname'] },
     *   { label: 'address', value: ['country', 'state', 'city', 'street'] },
     *   { label: 'family', value: ['father', 'mother', 'dependents'] }
     * ];
     * ```
     */
    set filterSelect(values) {
        if (!Array.isArray(values) || values.length === 0 || values.every(value => Object.keys(value).length === 0)) {
            this._filterSelect = undefined;
            return;
        }
        const _values = this.ensureFilterSelectOption(values);
        const allValues = _values.flatMap(e => e.value);
        const uniqueValues = [...new Set(allValues)];
        const filterOptionAll = {
            label: this.literals.all,
            value: uniqueValues
        };
        this._filterSelect = [filterOptionAll, ..._values];
    }
    get filterSelect() {
        return this._filterSelect;
    }
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do model.
     */
    changeModel = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver alterações no input.
     */
    filteredItemsChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver alterações nos filtros.
     */
    filter = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver click no listbox.
     */
    listboxOnClick = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    ensureFilterSelectOption(values) {
        const _values = Array.isArray(values) ? values : Array.of(values);
        return _values.map(value => (typeof value === 'object' ? value : { label: value, value }));
    }
    static ɵfac = function PoSearchBaseComponent_Factory(t) { return new (t || PoSearchBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSearchBaseComponent, inputs: { disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabled", convertToBoolean], items: [i0.ɵɵInputFlags.None, "p-items", "items"], ariaLabel: [i0.ɵɵInputFlags.None, "p-aria-label", "ariaLabel"], filterKeys: [i0.ɵɵInputFlags.None, "p-filter-keys", "filterKeys"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], type: [i0.ɵɵInputFlags.None, "p-search-type", "type"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], filterType: [i0.ɵɵInputFlags.None, "p-filter-type", "filterType"], showListbox: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-listbox", "showListbox", convertToBoolean], filterSelect: [i0.ɵɵInputFlags.None, "p-filter-select", "filterSelect"] }, outputs: { changeModel: "p-change-model", filteredItemsChange: "p-filtered-items-change", filter: "p-filter", listboxOnClick: "p-listbox-onclick" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSearchBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { disabled: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], items: [{
            type: Input,
            args: ['p-items']
        }], ariaLabel: [{
            type: Input,
            args: ['p-aria-label']
        }], filterKeys: [{
            type: Input,
            args: ['p-filter-keys']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], type: [{
            type: Input,
            args: ['p-search-type']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], filterType: [{
            type: Input,
            args: ['p-filter-type']
        }], showListbox: [{
            type: Input,
            args: [{ alias: 'p-show-listbox', transform: convertToBoolean }]
        }], filterSelect: [{
            type: Input,
            args: ['p-filter-select']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], filteredItemsChange: [{
            type: Output,
            args: ['p-filtered-items-change']
        }], filter: [{
            type: Output,
            args: ['p-filter']
        }], listboxOnClick: [{
            type: Output,
            args: ['p-listbox-onclick']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,