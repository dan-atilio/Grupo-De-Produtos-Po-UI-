import { Component, ContentChild } from '@angular/core';
import { NavigationCancel, NavigationEnd } from '@angular/router';
import { map } from 'rxjs/operators';
import { getFormattedLink, isMobile, openExternalLink, uuid } from '../../utils/util';
import { PoMenuBaseComponent } from './po-menu-base.component';
import { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';
import { PoMenuItemsService } from './services/po-menu-items.service';
import { PoMenuService } from './services/po-menu.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./services/po-menu-items.service";
import * as i3 from "./services/po-menu-global.service";
import * as i4 from "./services/po-menu.service";
import * as i5 from "../../services/po-language/po-language.service";
import * as i6 from "@angular/common";
import * as i7 from "../po-logo/po-logo.component";
import * as i8 from "../po-icon/po-icon.component";
import * as i9 from "./po-menu-filter/po-menu-filter.component";
import * as i10 from "./po-menu-item/po-menu-item.component";
function PoMenuComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17);
    i0.ɵɵlistener("click", function PoMenuComponent_div_0_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.toggleMenuMobile()); });
    i0.ɵɵelementEnd();
} }
function PoMenuComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵelement(1, "po-logo", 19);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-class", ctx_r1.enableCollapse ? "po-menu-short-logo" : "po-menu-logo")("p-logo", ctx_r1.enableCollapse ? ctx_r1.shortLogo || ctx_r1.logo : ctx_r1.logo)("p-logo-alt", ctx_r1.logoAlt);
} }
function PoMenuComponent_div_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵtemplate(1, PoMenuComponent_div_8_ng_container_1_Template, 1, 0, "ng-container", 21);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.menuHeaderTemplate.templateRef);
} }
function PoMenuComponent_po_menu_filter_9_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-menu-filter", 22);
    i0.ɵɵlistener("p-filter", function PoMenuComponent_po_menu_filter_9_Template_po_menu_filter_p_filter_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.debounceFilter($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-enable-collapse", ctx_r3.enableCollapse)("p-loading", ctx_r3.filterLoading);
} }
function PoMenuComponent_li_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 23);
    i0.ɵɵelement(1, "po-menu-item", 24);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-level", 1)("p-label", ctx_r4.literals.itemNotFound)("p-short-label", ctx_r4.literals.itemNotFound);
} }
function PoMenuComponent_li_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 23);
    i0.ɵɵelement(1, "po-menu-item", 25);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const menu_r12 = ctx.$implicit;
    const menuIndex_r13 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-menu-item-first", menuIndex_r13 === 0);
    i0.ɵɵattribute("aria-level", menu_r12.level);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", menu_r12.action)("p-badge-alert", menu_r12.badgeAlert)("p-badge-color", menu_r12.badge ? menu_r12.badge.color : undefined)("p-badge-value", menu_r12.badge ? menu_r12.badge.value : undefined)("p-collapsed-menu", ctx_r5.enableCollapse)("p-icon", ctx_r5.allowIcons ? menu_r12.icon : null)("p-id", menu_r12.id)("p-label", menu_r12.label)("p-level", menu_r12.level)("p-link", menu_r12.link)("p-short-label", menu_r12.shortLabel)("p-sub-items", menu_r12.subItems)("p-type", menu_r12.type);
} }
function PoMenuComponent_div_17_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 30);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r14.literals.close);
} }
function PoMenuComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 26)(1, "button", 27);
    i0.ɵɵlistener("click", function PoMenuComponent_div_17_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.toggle()); });
    i0.ɵɵtemplate(2, PoMenuComponent_div_17_span_2_Template, 2, 1, "span", 28);
    i0.ɵɵelement(3, "po-icon", 29);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵattribute("aria-label", ctx_r6.enableCollapseButton ? ctx_r6.literals.close : ctx_r6.literals.open);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r6.enableCollapseButton);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-icon", ctx_r6.enableCollapse ? "ICON_MENU_OPEN" : "ICON_MENU_CLOSE");
} }
const _c0 = a0 => ({ "po-menu-animation": a0 });
const poMenuDebounceTime = 400;
const poMenuMinLength = 3;
const poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ```
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="PO Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="PO Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
export class PoMenuComponent extends PoMenuBaseComponent {
    changeDetector;
    element;
    renderer;
    router;
    menuItemsService;
    menuHeaderTemplate;
    activeMenuItem;
    collapsedMobile;
    filterLoading = false;
    groupedMenuItem;
    id = uuid();
    linkActive;
    mobileOpened = false;
    noData = false;
    timeoutFilter;
    filteringItems = false;
    menuInitialized = false;
    menuPrevious = null;
    resizeListener;
    itemSubscription;
    routeSubscription;
    constructor(changeDetector, element, renderer, router, menuItemsService, menuGlobalService, menuService, languageService) {
        super(menuGlobalService, menuService, languageService);
        this.changeDetector = changeDetector;
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.menuItemsService = menuItemsService;
    }
    get isActiveItemMenuSubMenu() {
        return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
    }
    get enableCollapse() {
        return this.isCollapsed && !this.collapsedMobile;
    }
    get enableCollapseButton() {
        return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
    }
    get hasFooter() {
        return this.enableCollapseButton || this.enableCollapse;
    }
    get isCollapsed() {
        return this.allowCollapseMenu && this.collapsed;
    }
    ngDoCheck() {
        if (this.filteringItems && this.filter) {
            return;
        }
        const menuCurrent = this.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
        this.menuGlobalService.sendRemovedApplicationMenu(this.id);
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    ngAfterViewInit() {
        this.menuGlobalService.sendApplicationMenu(this);
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            const urlPathWithoutLastFragment = urlPath.substr(0, urlPath.lastIndexOf('/'));
            return menus.some(menu => {
                const formattedMenuLink = getFormattedLink(menu.link);
                const menuLinkPath = `${urlPathWithoutLastFragment}${formattedMenuLink.substr(formattedMenuLink.lastIndexOf('/'))}`;
                if (menuLinkPath === urlPath && menuLinkPath === formattedMenuLink) {
                    this.linkActive = formattedMenuLink;
                    this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    collapse() {
        this.validateToggleMenu(true);
    }
    debounceFilter(filter) {
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(() => {
            this.filterProcess(filter);
        }, poMenuDebounceTime);
    }
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    expand() {
        this.validateToggleMenu(false);
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu) => {
            this.clickMenuItem(menu);
        });
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkingRouterChildrenFragments();
                this.checkActiveMenuByUrl(urlRouter);
            }
        });
    }
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    toggle() {
        this.validateToggleMenu(!this.collapsed);
    }
    toggleMenuMobile() {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    }
    onMouseEnter() {
        if (this.collapsed && this.automaticToggle) {
            this.collapsed = false;
            this.allowCollapseHover = true;
        }
    }
    onMouseLeave() {
        if (!this.collapsed && this.allowCollapseHover && this.automaticToggle) {
            this.collapsed = true;
        }
    }
    checkingRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    validateCollapseClass(collapsedMobile = false) {
        const wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    }
    activateCollapseSubMenuItem() {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({
            active: this.activeMenuItem,
            grouped: this.groupedMenuItem,
            activatedByRoute: true
        });
    }
    areSubMenus(menus) {
        return menus.every(menu => menu['level'] > poMenuRootLevel);
    }
    clearGroupMenuIfFirstLevel(activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    }
    convertToMenuItemFiltered(menuItem = { label: '', link: '', action: () => { } }) {
        const { label, link, action } = menuItem;
        const menuItemFiltered = { label, link, action };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    }
    createResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.toggleResize();
            this.resizeListener();
        });
    }
    executeMenuAction(menu) {
        menu.action(menu);
    }
    async filterItems(filter) {
        const trimFilter = filter && filter.trim();
        if (trimFilter) {
            this.filteredItems = [];
            this.filteredItems = this.filterService
                ? await this.filterOnService(trimFilter)
                : this.filterLocalItems(trimFilter);
            this.filteringItems = true;
        }
        else {
            this.filteredItems = [...this.menus];
            this.filteringItems = false;
        }
    }
    filterLocalItems(filter) {
        const filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    }
    filterProcess(filter) {
        this.filterLoading = true;
        this.filterItems(filter)
            .then(() => {
            this.filterLoading = false;
            this.showNoData();
            this.changeDetector.detectChanges();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        })
            .catch(error => {
            this.filterLoading = false;
            Promise.reject(error);
        });
    }
    async filterOnService(search = '') {
        if (search.length >= poMenuMinLength) {
            return await this.filterService
                .getFilteredData(search, this.params)
                .pipe(map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem))))
                .toPromise();
        }
        else {
            return this.filteredItems;
        }
    }
    findItems(menus, filter, filteredItems) {
        menus.forEach(menu => {
            const hasAction = menu.action || menu.link;
            const labelHasFilter = menu.label.toLowerCase().includes(filter);
            if (labelHasFilter && hasAction) {
                const newMenu = { ...menu };
                if (newMenu.subItems?.length) {
                    delete newMenu.subItems;
                    newMenu['type'] = this.setMenuType(newMenu);
                }
                filteredItems.push(newMenu);
            }
            if (menu.subItems) {
                this.findItems(menu.subItems, filter, filteredItems);
            }
        });
    }
    findParent(menus, menuItem) {
        const getParent = function (menuItems, id) {
            if (menuItems) {
                for (let index = 0; index < menuItems.length; index++) {
                    const menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {
                        return menu;
                    }
                    const found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    }
    findRootParent(menus, menu) {
        const findParent = this.findParent;
        const getRootParent = function (menuItems, menuItem) {
            let parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    }
    getActiveMenuParent(menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    }
    groupMenuItem(menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem &&
            menu['isOpened'] &&
            this.isActiveItemMenuSubMenu &&
            this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    }
    isRootMenuEqualGroupedMenu(menus, activeMenuItem, groupedMenuItem) {
        const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    }
    openParentMenu(childMenu) {
        const parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    }
    showNoData() {
        this.noData = this.filteredItems.length === 0;
    }
    stringify(menus) {
        // não faz o stringify da propriedade icon, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(this.menus, (key, value) => {
            if (key !== 'icon') {
                return value;
            }
        });
    }
    toggleGroupedMenuItem() {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    }
    toggleMenuCollapse(collapsed = false) {
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem =
                this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        }
        this.updateMenu();
    }
    toggleResize() {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    }
    validateToggleMenu(collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    }
    updateMenu() {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = [...this.menus];
        this.menuPrevious = this.stringify(this.menus);
        this.validateMenus(this.menus);
    }
    static ɵfac = function PoMenuComponent_Factory(t) { return new (t || PoMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PoMenuItemsService), i0.ɵɵdirectiveInject(i3.PoMenuGlobalService), i0.ɵɵdirectiveInject(i4.PoMenuService), i0.ɵɵdirectiveInject(i5.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuComponent, selectors: [["po-menu"]], contentQueries: function PoMenuComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoMenuHeaderTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuHeaderTemplate = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoMenuItemsService, PoMenuService]), i0.ɵɵInheritDefinitionFeature], decls: 18, vars: 11, consts: [["class", "po-menu-overlay", 3, "click", 4, "ngIf"], [1, "po-menu-mobile", "po-clickable", 3, "click"], ["p-icon", "ICON_MENU"], [1, "po-menu", 3, "ngClass"], [1, "po-menu-container", 3, "mouseenter", "mouseleave"], [1, "po-menu-header"], ["class", "po-menu-header-container-logo", 4, "ngIf"], ["class", "po-menu-header-template", 4, "ngIf"], [3, "p-enable-collapse", "p-loading", "p-filter", 4, "ngIf"], [1, "po-menu-body"], [1, "po-menu-outer"], [1, "po-menu-inner"], [1, "po-menu-nav"], ["role", "menu", 1, "po-menu-list"], ["class", "po-menu-list-item", "role", "presentation", 4, "ngIf"], ["class", "po-menu-list-item", "role", "presentation", 3, "po-menu-item-first", 4, "ngFor", "ngForOf"], ["class", "po-menu-footer", 4, "ngIf"], [1, "po-menu-overlay", 3, "click"], [1, "po-menu-header-container-logo"], [3, "p-class", "p-logo", "p-logo-alt"], [1, "po-menu-header-template"], [4, "ngTemplateOutlet"], [3, "p-enable-collapse", "p-loading", "p-filter"], ["role", "presentation", 1, "po-menu-list-item"], ["p-icon", "ICON_INFO", "p-type", "noData", 3, "p-level", "p-label", "p-short-label"], [3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-collapsed-menu", "p-icon", "p-id", "p-label", "p-level", "p-link", "p-short-label", "p-sub-items", "p-type"], [1, "po-menu-footer"], ["type", "button", 1, "po-menu-collapse-button-icon", 3, "click"], ["aria-hidden", "true", 4, "ngIf"], [3, "p-icon"], ["aria-hidden", "true"]], template: function PoMenuComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuComponent_div_0_Template, 1, 0, "div", 0);
            i0.ɵɵelementStart(1, "div")(2, "div", 1);
            i0.ɵɵlistener("click", function PoMenuComponent_Template_div_click_2_listener() { return ctx.toggleMenuMobile(); });
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵlistener("mouseenter", function PoMenuComponent_Template_div_mouseenter_5_listener() { return ctx.onMouseEnter(); })("mouseleave", function PoMenuComponent_Template_div_mouseleave_5_listener() { return ctx.onMouseLeave(); });
            i0.ɵɵelementStart(6, "div", 5);
            i0.ɵɵtemplate(7, PoMenuComponent_div_7_Template, 2, 3, "div", 6)(8, PoMenuComponent_div_8_Template, 2, 1, "div", 7)(9, PoMenuComponent_po_menu_filter_9_Template, 1, 2, "po-menu-filter", 8);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "div", 9)(11, "div", 10)(12, "div", 11)(13, "nav", 12)(14, "ul", 13);
            i0.ɵɵtemplate(15, PoMenuComponent_li_15_Template, 2, 3, "li", 14)(16, PoMenuComponent_li_16_Template, 2, 16, "li", 15);
            i0.ɵɵelementEnd()()()()()();
            i0.ɵɵtemplate(17, PoMenuComponent_div_17_Template, 4, 3, "div", 16);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.mobileOpened);
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0, ctx.mobileOpened));
            i0.ɵɵattribute("aria-expanded", !ctx.collapsed);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.logo || ctx.shortLogo && ctx.enableCollapse);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.enableCollapse && ctx.menuHeaderTemplate);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.filter);
            i0.ɵɵadvance(6);
            i0.ɵɵproperty("ngIf", ctx.noData);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.filteredItems);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasFooter);
        } }, dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i6.NgTemplateOutlet, i7.PoLogoComponent, i8.PoIconComponent, i9.PoMenuFilterComponent, i10.PoMenuItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuComponent, [{
        type: Component,
        args: [{ selector: 'po-menu', providers: [PoMenuItemsService, PoMenuService], template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n\n<div>\n  <div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n    <po-icon p-icon=\"ICON_MENU\"></po-icon>\n  </div>\n\n  <div class=\"po-menu\" [attr.aria-expanded]=\"!collapsed\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n    <div class=\"po-menu-container\" (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n      <div class=\"po-menu-header\">\n        <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n          <po-logo\n            [p-class]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n            [p-logo]=\"enableCollapse ? shortLogo || logo : logo\"\n            [p-logo-alt]=\"logoAlt\"\n          ></po-logo>\n        </div>\n\n        <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n          <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n        </div>\n\n        <po-menu-filter\n          *ngIf=\"filter\"\n          [p-enable-collapse]=\"enableCollapse\"\n          [p-loading]=\"filterLoading\"\n          (p-filter)=\"debounceFilter($event)\"\n        ></po-menu-filter>\n      </div>\n\n      <div class=\"po-menu-body\">\n        <div class=\"po-menu-outer\">\n          <div class=\"po-menu-inner\">\n            <nav class=\"po-menu-nav\">\n              <ul class=\"po-menu-list\" role=\"menu\">\n                <li *ngIf=\"noData\" class=\"po-menu-list-item\" role=\"presentation\">\n                  <po-menu-item\n                    p-icon=\"ICON_INFO\"\n                    p-type=\"noData\"\n                    [p-level]=\"1\"\n                    [p-label]=\"literals.itemNotFound\"\n                    [p-short-label]=\"literals.itemNotFound\"\n                  ></po-menu-item>\n                </li>\n                <li\n                  *ngFor=\"let menu of filteredItems; let menuIndex = index\"\n                  class=\"po-menu-list-item\"\n                  role=\"presentation\"\n                  [attr.aria-level]=\"menu.level\"\n                  [class.po-menu-item-first]=\"menuIndex === 0\"\n                >\n                  <po-menu-item\n                    [p-action]=\"menu.action\"\n                    [p-badge-alert]=\"menu.badgeAlert\"\n                    [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n                    [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n                    [p-collapsed-menu]=\"enableCollapse\"\n                    [p-icon]=\"allowIcons ? menu.icon : null\"\n                    [p-id]=\"menu.id\"\n                    [p-label]=\"menu.label\"\n                    [p-level]=\"menu.level\"\n                    [p-link]=\"menu.link\"\n                    [p-short-label]=\"menu.shortLabel\"\n                    [p-sub-items]=\"menu.subItems\"\n                    [p-type]=\"menu.type\"\n                  ></po-menu-item>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n      <button\n        class=\"po-menu-collapse-button-icon\"\n        type=\"button\"\n        [attr.aria-label]=\"enableCollapseButton ? literals.close : literals.open\"\n        (click)=\"toggle()\"\n      >\n        <span *ngIf=\"enableCollapseButton\" aria-hidden=\"true\">{{ literals.close }}</span>\n\n        <po-icon [p-icon]=\"enableCollapse ? 'ICON_MENU_OPEN' : 'ICON_MENU_CLOSE'\"></po-icon>\n      </button>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.Router }, { type: i2.PoMenuItemsService }, { type: i3.PoMenuGlobalService }, { type: i4.PoMenuService }, { type: i5.PoLanguageService }], { menuHeaderTemplate: [{
            type: ContentChild,
            args: [PoMenuHeaderTemplateDirective, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuComponent, { className: "PoMenuComponent", filePath: "lib/components/po-menu/po-menu.component.ts", lineNumber: 120 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tbWVudS9wby1tZW51LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1tZW51L3BvLW1lbnUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLFNBQVMsRUFDVCxZQUFZLEVBTWIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBVSxNQUFNLGlCQUFpQixDQUFDO0FBRzFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3RGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBSTVHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUMxQjNELCtCQUErRTtJQUE3Qix5SkFBUyxlQUFBLHlCQUFrQixDQUFBLElBQUM7SUFBQyxpQkFBTTs7O0lBVTdFLCtCQUF5RjtJQUN2Riw4QkFJVztJQUNiLGlCQUFNOzs7SUFKRixjQUFrRTtJQUFsRSx1RkFBa0UsaUZBQUEsOEJBQUE7OztJQU9wRSx3QkFBZ0Y7OztJQURsRiwrQkFBbUY7SUFDakYseUZBQWdGO0lBQ2xGLGlCQUFNOzs7SUFEVyxjQUFnRDtJQUFoRCx3RUFBZ0Q7Ozs7SUFHakUsMENB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Q0FBa0I7WUFPaUMsZUFBaUQ7WUFBakQsc0VBQWlEO1lBQW5GLCtDQUFpQztZQUcxQyxlQUEyQztZQUEzQyxzRUFBMkM7WUFRM0MsY0FBMkM7WUFBM0Msb0VBQTJDO1lBSzlDLGNBQVk7WUFBWixpQ0FBWTtZQVlGLGVBQVk7WUFBWixpQ0FBWTtZQVVFLGNBQWtCO1lBQWxCLDJDQUFrQjtZQTZCM0MsY0FBZTtZQUFmLG9DQUFlOzs7aUZENkNaLGVBQWU7Y0FMM0IsU0FBUzsyQkFDRSxTQUFTLGFBRVIsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7dVBBR2lCLGtCQUFrQjtrQkFBaEYsWUFBWTttQkFBQyw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O2tGQURsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBEb0NoZWNrLFxuICBFbGVtZW50UmVmLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRW5kLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgZ2V0Rm9ybWF0dGVkTGluaywgaXNNb2JpbGUsIG9wZW5FeHRlcm5hbExpbmssIHV1aWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTWVudUJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLW1lbnUtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9NZW51SGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3BvLW1lbnUtaGVhZGVyLXRlbXBsYXRlL3BvLW1lbnUtaGVhZGVyLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQb01lbnVJdGVtIH0gZnJvbSAnLi9wby1tZW51LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTWVudUl0ZW1GaWx0ZXJlZCB9IGZyb20gJy4vcG8tbWVudS1pdGVtL3BvLW1lbnUtaXRlbS1maWx0ZXJlZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9NZW51R2xvYmFsU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcG8tbWVudS1nbG9iYWwuc2VydmljZSc7XG5pbXBvcnQgeyBQb01lbnVJdGVtc1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3BvLW1lbnUtaXRlbXMuc2VydmljZSc7XG5pbXBvcnQgeyBQb01lbnVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wby1tZW51LnNlcnZpY2UnO1xuXG5jb25zdCBwb01lbnVEZWJvdW5jZVRpbWUgPSA0MDA7XG5jb25zdCBwb01lbnVNaW5MZW5ndGggPSAzO1xuY29uc3QgcG9NZW51Um9vdExldmVsID0gMTtcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9NZW51QmFzZUNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEFwYXJlY2UgY29tcGxldG8gZW0gdGVsYXMgY29tIGxhcmd1cmEgbWFpb3IgcXVlIDEyMDBweCwgY2FzbyBjb250csOhcmlvIG8gbWVudSDDqSBlc2NvbmRpZG8gZSBjaGFtYWRvIHBvciBtZWlvIGRlIHVtIGJvdMOjby5cbiAqXG4gKiBPIG1lbnUgdGFtYsOpbSBwb2RlIHNlciBjb2xhcHNhZG8uIEVzc2Egb3DDp8OjbyDDqSBoYWJpbGl0YWRhIHF1YW5kbyB0b2RvcyBvcyBpdGVucyBkZSBwcmltZWlybyBuw612ZWwgcG9zc3XDrXJlbSDDrWNvbmVzIGUgdGV4dG9zIGN1cnRvcy5cbiAqIFNlIGNvbGFwc2Fkbywgc29tZW50ZSBvcyBpdGVucyBkZSBwcmltZWlybyBuw612ZWwgc2Vyw6NvIGV4aWJpZG9zIGUsIGNhc28gbyBpdGVtIHNlbGVjaW9uYWRvIHBvc3N1YSBzdWItbsOtdmVpcyxcbiAqIGVudMOjbyBvIG1lbnUgYWx0ZXJuYXLDoSBub3ZhbWVudGUgcGFyYSBvIGVzdGFkbyBhYmVydG8uXG4gKlxuICogRXhpc3RlIGEgcG9zc2liaWxpZGFkZSBkZSBjdXN0b21pemFyIGEgbG9nb21hcmNhLCBxdWUgw6kgZXhpYmlkYSBuYSBwYXJ0ZSBzdXBlcmlvciBkbyBjb21wb25lbnRlLlxuICpcbiAqIEUgcGFyYSBhZGljaW9uYXIgdW0gY29udGXDumRvIHBlcnNvbmFsaXphZG8gZW50cmUgYSBsb2dvbWFyY2EgZSBvIGNhbXBvIGRlIGZpbHRybyxcbiAqIGJhc3RhIGFkaWNpb25hciBlc3RlIGNvbnRlw7pkbyBjb20gYSBkaXJldGl2YSBbKipwLW1lbnUtaGVhZGVyLXRlbXBsYXRlKipdKC9kb2N1bWVudGF0aW9uL3BvLW1lbnUtaGVhZGVyLXRlbXBsYXRlKS5cbiAqXG4gKiBDYXNvIHV0aWxpemFyIG8gZmlsdHJvIGRlIG1lbnVzLCDDqSBwb3Nzw612ZWwgcmVhbGl6YXIgYnVzY2FzIGVtIHNlcnZpw6dvLCBhcGVuYXMgaW5mb3JtYW5kbyBhIFVSTCBkbyBzZXJ2acOnbyBvdSBhIGluc3TDom5jaWEgZGVcbiAqIHVtIHNlcnZpw6dvIGN1c3RvbWl6YWRvIGltcGxlbWVudGFuZG8gYSBpbnRlcmZhY2UgYFBvTWVudUZpbHRlcmAuXG4gKlxuICogUGFyYSBvIG1lbnUgZnVuY2lvbmFyIGNvcnJldGFtZW50ZSDDqSBuZWNlc3PDoXJpbyBpbXBvcnRhciBvIGBSb3V0ZXJNb2R1bGVgIGUgYFJvdXRlc2AgZG8gbcOzZHVsbyBwcmluY2lwYWwgZGVcbiAqICBzdWEgYXBsaWNhw6fDo286XG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG4gKlxuICogLi4uXG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIFJvdXRlck1vZHVsZSxcbiAqICAgICBSb3V0ZXMsXG4gKiAgICAgLi4uXG4gKiAgICAgUG9Nb2R1bGUsXG4gKiAgICAgLi4uXG4gKiAgIF0sXG4gKiAgIGRlY2xhcmF0aW9uczogW1xuICogICAgIEFwcENvbXBvbmVudFxuICogICBdLFxuICogICBwcm92aWRlcnM6IFtdLFxuICogICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cbiAqIGBgYFxuICpcbiAqIEFsw6ltIGRpc3NvIMOpIG5lY2Vzc8OhcmlvIGNyaWFyIHVtIG3Ds2R1bG8gY29uZmlndXJhbmRvIGFzIHJvdGFzIGRhIGFwbGljYcOnw6NvLlxuICpcbiAqIGBgYFxuICogaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqXG4gKiBpbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG4gKlxuICogaW1wb3J0IHsgSGVsbG9Xb3JsZENvbXBvbmVudCB9IGZyb20gJy4vaGVsbG8td29ybGQvaGVsbG8td29ybGQuY29tcG9uZW50JztcbiAqXG4gKiBjb25zdCByb3V0ZXM6IFJvdXRlcyA9IFtcbiAqICAge3BhdGg6ICdoZWxsby13b3JsZCcsIGNvbXBvbmVudDogSGVsbG9Xb3JsZENvbXBvbmVudH1cbiAqIF07XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1JvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcywge3VzZUhhc2g6IHRydWV9KV0sXG4gKiAgIGV4cG9ydHM6IFtSb3V0ZXJNb2R1bGVdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW1lbnUtYmFzaWNcIiB0aXRsZT1cIlBPIE1lbnUgQmFzaWNcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tZW51LWJhc2ljL3NhbXBsZS1wby1tZW51LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tZW51LWJhc2ljL3NhbXBsZS1wby1tZW51LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW1lbnUtbGFic1wiIHRpdGxlPVwiUE8gTWVudSBMYWJzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbWVudS1sYWJzL3NhbXBsZS1wby1tZW51LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW1lbnUtbGFicy9zYW1wbGUtcG8tbWVudS1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW1lbnUtaHVtYW4tcmVzb3VyY2VzXCIgdGl0bGU9XCJQTyBNZW51IC0gSHVtYW4gUmVzb3VyY2VzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbWVudS1odW1hbi1yZXNvdXJjZXMvc2FtcGxlLXBvLW1lbnUtaHVtYW4tcmVzb3VyY2VzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tZW51LWh1bWFuLXJlc291cmNlcy9zYW1wbGUtcG8tbWVudS1odW1hbi1yZXNvdXJjZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tZW51LWh1bWFuLXJlc291cmNlcy9zYW1wbGUtcG8tbWVudS1odW1hbi1yZXNvdXJjZXMuc2VydmljZS50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLW1lbnUnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tbWVudS5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1BvTWVudUl0ZW1zU2VydmljZSwgUG9NZW51U2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUG9NZW51Q29tcG9uZW50IGV4dGVuZHMgUG9NZW51QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25Jbml0LCBEb0NoZWNrIHtcbiAgQENvbnRlbnRDaGlsZChQb01lbnVIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSkgbWVudUhlYWRlclRlbXBsYXRlOiBQb01lbnVIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICBhY3RpdmVNZW51SXRlbTogUG9NZW51SXRlbTtcbiAgY29sbGFwc2VkTW9iaWxlOiBib29sZWFuO1xuICBmaWx0ZXJMb2FkaW5nID0gZmFsc2U7XG4gIGdyb3VwZWRNZW51SXRlbTogUG9NZW51SXRlbTtcbiAgaWQgPSB1dWlkKCk7XG4gIGxpbmtBY3RpdmU6IHN0cmluZztcbiAgbW9iaWxlT3BlbmVkOiBib29sZWFuID0gZmFsc2U7XG4gIG5vRGF0YTogYm9vbGVhbiA9IGZhbHNlO1xuICB0aW1lb3V0RmlsdGVyOiBhbnk7XG5cbiAgcHJpdmF0ZSBmaWx0ZXJpbmdJdGVtczogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIG1lbnVJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIG1lbnVQcmV2aW91cyA9IG51bGw7XG4gIHByaXZhdGUgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBpdGVtU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgcm91dGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIG1lbnVJdGVtc1NlcnZpY2U6IFBvTWVudUl0ZW1zU2VydmljZSxcbiAgICBtZW51R2xvYmFsU2VydmljZTogUG9NZW51R2xvYmFsU2VydmljZSxcbiAgICBtZW51U2VydmljZTogUG9NZW51U2VydmljZSxcbiAgICBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKG1lbnVHbG9iYWxTZXJ2aWNlLCBtZW51U2VydmljZSwgbGFuZ3VhZ2VTZXJ2aWNlKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGlzQWN0aXZlSXRlbU1lbnVTdWJNZW51KCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU1lbnVJdGVtWydsZXZlbCddID4gdGhpcy5ncm91cGVkTWVudUl0ZW1bJ2xldmVsJ107XG4gIH1cblxuICBnZXQgZW5hYmxlQ29sbGFwc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDb2xsYXBzZWQgJiYgIXRoaXMuY29sbGFwc2VkTW9iaWxlO1xuICB9XG5cbiAgZ2V0IGVuYWJsZUNvbGxhcHNlQnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLmFsbG93Q29sbGFwc2VNZW51ICYmICF0aGlzLmNvbGxhcHNlZCAmJiAhdGhpcy5tb2JpbGVPcGVuZWQ7XG4gIH1cblxuICBnZXQgaGFzRm9vdGVyKCkge1xuICAgIHJldHVybiB0aGlzLmVuYWJsZUNvbGxhcHNlQnV0dG9uIHx8IHRoaXMuZW5hYmxlQ29sbGFwc2U7XG4gIH1cblxuICBnZXQgaXNDb2xsYXBzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsb3dDb2xsYXBzZU1lbnUgJiYgdGhpcy5jb2xsYXBzZWQ7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYgKHRoaXMuZmlsdGVyaW5nSXRlbXMgJiYgdGhpcy5maWx0ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZW51Q3VycmVudCA9IHRoaXMuc3RyaW5naWZ5KHRoaXMubWVudXMpO1xuXG4gICAgaWYgKHRoaXMubWVudVByZXZpb3VzICE9PSBtZW51Q3VycmVudCB8fCAhdGhpcy5tZW51SW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlTWVudSgpO1xuICAgICAgdGhpcy52YWxpZGF0ZUNvbGxhcHNlQ2xhc3MoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLml0ZW1TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnJvdXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cbiAgICBpZiAodGhpcy5yZXNpemVMaXN0ZW5lcikge1xuICAgICAgdGhpcy5yZXNpemVMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHRoaXMubWVudUdsb2JhbFNlcnZpY2Uuc2VuZFJlbW92ZWRBcHBsaWNhdGlvbk1lbnUodGhpcy5pZCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmliZVRvTWVudUl0ZW0oKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvUm91dGUoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLm1lbnVHbG9iYWxTZXJ2aWNlLnNlbmRBcHBsaWNhdGlvbk1lbnUodGhpcyk7XG4gIH1cblxuICBhY3RpdmF0ZU1lbnVCeVVybCh1cmxQYXRoOiBzdHJpbmcsIG1lbnVzOiBBcnJheTxQb01lbnVJdGVtPikge1xuICAgIGlmIChtZW51cykge1xuICAgICAgY29uc3QgdXJsUGF0aFdpdGhvdXRMYXN0RnJhZ21lbnQgPSB1cmxQYXRoLnN1YnN0cigwLCB1cmxQYXRoLmxhc3RJbmRleE9mKCcvJykpO1xuICAgICAgcmV0dXJuIG1lbnVzLnNvbWUobWVudSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZE1lbnVMaW5rID0gZ2V0Rm9ybWF0dGVkTGluayhtZW51LmxpbmspO1xuICAgICAgICBjb25zdCBtZW51TGlua1BhdGggPSBgJHt1cmxQYXRoV2l0aG91dExhc3RGcmFnbWVudH0ke2Zvcm1hdHRlZE1lbnVMaW5rLnN1YnN0cihcbiAgICAgICAgICBmb3JtYXR0ZWRNZW51TGluay5sYXN0SW5kZXhPZignLycpXG4gICAgICAgICl9YDtcblxuICAgICAgICBpZiAobWVudUxpbmtQYXRoID09PSB1cmxQYXRoICYmIG1lbnVMaW5rUGF0aCA9PT0gZm9ybWF0dGVkTWVudUxpbmspIHtcbiAgICAgICAgICB0aGlzLmxpbmtBY3RpdmUgPSBmb3JtYXR0ZWRNZW51TGluaztcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlTWVudUl0ZW0obWVudSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVNZW51QnlVcmwodXJsUGF0aCwgbWVudS5zdWJJdGVtcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNoZWNrQWN0aXZlTWVudUJ5VXJsKHVybFBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5saW5rQWN0aXZlIHx8IHRoaXMubGlua0FjdGl2ZSAhPT0gdXJsUGF0aCkge1xuICAgICAgdGhpcy5hY3RpdmF0ZU1lbnVCeVVybCh1cmxQYXRoLCB0aGlzLm1lbnVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogPGEgaWQ9XCJjb2xhcHNlTWV0aG9kXCI+PC9hPlxuICAgKlxuICAgKiAqTcOpdG9kbyBwYXJhIGNvbGFwc2FyIChyZXRyYWlyKSBvIG1lbnUuXG4gICAqL1xuICBjb2xsYXBzZSgpIHtcbiAgICB0aGlzLnZhbGlkYXRlVG9nZ2xlTWVudSh0cnVlKTtcbiAgfVxuXG4gIGRlYm91bmNlRmlsdGVyKGZpbHRlcjogc3RyaW5nKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dEZpbHRlcik7XG5cbiAgICB0aGlzLnRpbWVvdXRGaWx0ZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZmlsdGVyUHJvY2VzcyhmaWx0ZXIpO1xuICAgIH0sIHBvTWVudURlYm91bmNlVGltZSk7XG4gIH1cblxuICAvKipcbiAgICogPGEgaWQ9XCJleHBhbmRNZXRob2RcIj48L2E+XG4gICAqXG4gICAqICpNw6l0b2RvIHBhcmEgZXhwYW5kaXIgKGF1bWVudGFyKSBvIG1lbnUuXG4gICAqL1xuICBleHBhbmQoKSB7XG4gICAgdGhpcy52YWxpZGF0ZVRvZ2dsZU1lbnUoZmFsc2UpO1xuICB9XG5cbiAgc3Vic2NyaWJlVG9NZW51SXRlbSgpIHtcbiAgICB0aGlzLml0ZW1TdWJzY3JpcHRpb24gPSB0aGlzLm1lbnVJdGVtc1NlcnZpY2UucmVjZWl2ZUZyb21DaGlsZE1lbnVDbGlja2VkKCkuc3Vic2NyaWJlKChtZW51OiBQb01lbnVJdGVtKSA9PiB7XG4gICAgICB0aGlzLmNsaWNrTWVudUl0ZW0obWVudSk7XG4gICAgfSk7XG4gIH1cblxuICBzdWJzY3JpYmVUb1JvdXRlKCkge1xuICAgIHRoaXMucm91dGVTdWJzY3JpcHRpb24gPSB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCB8fCB2YWwgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XG4gICAgICAgIGNvbnN0IHVybFJvdXRlciA9IHRoaXMuY2hlY2tpbmdSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpO1xuICAgICAgICB0aGlzLmNoZWNrQWN0aXZlTWVudUJ5VXJsKHVybFJvdXRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogPGEgaWQ9XCJ0b2dnbGVNZXRob2RcIj48L2E+XG4gICAqICpNw6l0b2RvIHF1ZSBjb2xhcHNhIGUgZXhwYW5kZSBvIG1lbnUgYWx0ZXJuYWRhbWVudGUuXG4gICAqXG4gICAqID4gKk9zIG3DqXRvZG9zIGFwZW5hcyB2w6NvIGNvbGFwc2FyL2V4cGFuZGlyIG8gbWVudSBzZTpcbiAgICogIC0gVG9kb3Mgb3MgaXRlbnMgZGUgbWVudSB0aXZlcmVtIHZhbG9yIG5hcyBwcm9wcmllZGFkZXMgYGljb25gIGUgYHNob3J0TGFiZWxgLlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMudmFsaWRhdGVUb2dnbGVNZW51KCF0aGlzLmNvbGxhcHNlZCk7XG4gIH1cblxuICB0b2dnbGVNZW51TW9iaWxlKCk6IHZvaWQge1xuICAgIHRoaXMubW9iaWxlT3BlbmVkID0gIXRoaXMubW9iaWxlT3BlbmVkO1xuICAgIHRoaXMuY29sbGFwc2VkTW9iaWxlID0gdGhpcy5jb2xsYXBzZWQgJiYgdGhpcy5tb2JpbGVPcGVuZWQ7XG5cbiAgICB0aGlzLnZhbGlkYXRlQ29sbGFwc2VDbGFzcyh0aGlzLmNvbGxhcHNlZE1vYmlsZSk7XG5cbiAgICBpZiAoaXNNb2JpbGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vYmlsZU9wZW5lZCkge1xuICAgICAgdGhpcy5jcmVhdGVSZXNpemVMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VFbnRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb2xsYXBzZWQgJiYgdGhpcy5hdXRvbWF0aWNUb2dnbGUpIHtcbiAgICAgIHRoaXMuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgICB0aGlzLmFsbG93Q29sbGFwc2VIb3ZlciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VzZUxlYXZlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5jb2xsYXBzZWQgJiYgdGhpcy5hbGxvd0NvbGxhcHNlSG92ZXIgJiYgdGhpcy5hdXRvbWF0aWNUb2dnbGUpIHtcbiAgICAgIHRoaXMuY29sbGFwc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY2hlY2tpbmdSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpIHtcbiAgICBjb25zdCBjaGlsZHJlblByaW1hcnkgPSB0aGlzLnJvdXRlci5wYXJzZVVybCh0aGlzLnJvdXRlci51cmwpLnJvb3QuY2hpbGRyZW5bJ3ByaW1hcnknXTtcblxuICAgIHJldHVybiBjaGlsZHJlblByaW1hcnkgPyBgLyR7Y2hpbGRyZW5QcmltYXJ5LnNlZ21lbnRzLm1hcChpdCA9PiBpdC5wYXRoKS5qb2luKCcvJyl9YCA6ICcnO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlQ29sbGFwc2VDbGFzcyhjb2xsYXBzZWRNb2JpbGU6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHRoaXMucmVuZGVyZXJbdGhpcy5pc0NvbGxhcHNlZCAmJiAhY29sbGFwc2VkTW9iaWxlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHdyYXBwZXIsICdwby1jb2xsYXBzZWQtbWVudScpO1xuICB9XG5cbiAgcHJpdmF0ZSBhY3RpdmF0ZUNvbGxhcHNlU3ViTWVudUl0ZW0oKSB7XG4gICAgdGhpcy5jbGVhckdyb3VwTWVudUlmRmlyc3RMZXZlbCh0aGlzLmFjdGl2ZU1lbnVJdGVtKTtcblxuICAgIGlmICghdGhpcy5jb2xsYXBzZWQgJiYgdGhpcy5hY3RpdmVNZW51SXRlbVsnbGV2ZWwnXSA+IHBvTWVudVJvb3RMZXZlbCAmJiB0aGlzLmlzQWN0aXZlSXRlbU1lbnVTdWJNZW51KSB7XG4gICAgICB0aGlzLm9wZW5QYXJlbnRNZW51KHRoaXMuYWN0aXZlTWVudUl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGVNZW51SXRlbShtZW51OiBQb01lbnVJdGVtKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVNZW51SXRlbSA9IG1lbnU7XG4gICAgdGhpcy5saW5rQWN0aXZlID0gbWVudS5saW5rO1xuXG4gICAgaWYgKHRoaXMuYWN0aXZlTWVudUl0ZW1bJ2xldmVsJ10gPiBwb01lbnVSb290TGV2ZWwpIHtcbiAgICAgIHRoaXMub3BlblBhcmVudE1lbnUodGhpcy5hY3RpdmVNZW51SXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ3JvdXBlZE1lbnVJdGVtID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLm1lbnVJdGVtc1NlcnZpY2Uuc2VuZFRvQ2hpbGRNZW51Q2xpY2tlZCh7XG4gICAgICBhY3RpdmU6IHRoaXMuYWN0aXZlTWVudUl0ZW0sXG4gICAgICBncm91cGVkOiB0aGlzLmdyb3VwZWRNZW51SXRlbSxcbiAgICAgIGFjdGl2YXRlZEJ5Um91dGU6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXJlU3ViTWVudXMobWVudXM6IEFycmF5PFBvTWVudUl0ZW0+KSB7XG4gICAgcmV0dXJuIG1lbnVzLmV2ZXJ5KG1lbnUgPT4gbWVudVsnbGV2ZWwnXSA+IHBvTWVudVJvb3RMZXZlbCk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyR3JvdXBNZW51SWZGaXJzdExldmVsKGFjdGl2ZU1lbnVJdGVtOiBQb01lbnVJdGVtKSB7XG4gICAgaWYgKGFjdGl2ZU1lbnVJdGVtWydsZXZlbCddID09PSBwb01lbnVSb290TGV2ZWwpIHtcbiAgICAgIHRoaXMuZ3JvdXBlZE1lbnVJdGVtID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2xpY2tNZW51SXRlbShtZW51OiBQb01lbnVJdGVtKSB7XG4gICAgaWYgKG1lbnUuYWN0aW9uKSB7XG4gICAgICB0aGlzLmV4ZWN1dGVNZW51QWN0aW9uKG1lbnUpO1xuICAgIH1cblxuICAgIGlmIChtZW51Wyd0eXBlJ10gPT09ICdleHRlcm5hbExpbmsnKSB7XG4gICAgICBvcGVuRXh0ZXJuYWxMaW5rKG1lbnUubGluayk7XG4gICAgfSBlbHNlIGlmIChtZW51Wyd0eXBlJ10gPT09ICdpbnRlcm5hbExpbmsnKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlTWVudUl0ZW0obWVudSk7XG4gICAgfSBlbHNlIGlmIChtZW51Wyd0eXBlJ10gPT09ICdzdWJJdGVtcycpIHtcbiAgICAgIGlmICh0aGlzLmZpbHRlcmluZ0l0ZW1zKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyaW5nSXRlbXMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ncm91cE1lbnVJdGVtKG1lbnUpO1xuICAgIH1cblxuICAgIGlmIChtZW51Wyd0eXBlJ10gIT09ICdzdWJJdGVtcycpIHtcbiAgICAgIHRoaXMubW9iaWxlT3BlbmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VG9NZW51SXRlbUZpbHRlcmVkKG1lbnVJdGVtOiBhbnkgPSB7IGxhYmVsOiAnJywgbGluazogJycsIGFjdGlvbjogKCkgPT4ge30gfSk6IFBvTWVudUl0ZW1GaWx0ZXJlZCB7XG4gICAgY29uc3QgeyBsYWJlbCwgbGluaywgYWN0aW9uIH0gPSBtZW51SXRlbTtcblxuICAgIGNvbnN0IG1lbnVJdGVtRmlsdGVyZWQ6IFBvTWVudUl0ZW1GaWx0ZXJlZCA9IHsgbGFiZWwsIGxpbmssIGFjdGlvbiB9O1xuXG4gICAgdGhpcy5zZXRNZW51SXRlbVByb3BlcnRpZXMobWVudUl0ZW1GaWx0ZXJlZCk7XG5cbiAgICByZXR1cm4gbWVudUl0ZW1GaWx0ZXJlZDtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUmVzaXplTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVSZXNpemUoKTtcbiAgICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZXhlY3V0ZU1lbnVBY3Rpb24obWVudTogUG9NZW51SXRlbSk6IHZvaWQge1xuICAgIG1lbnUuYWN0aW9uKG1lbnUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBmaWx0ZXJJdGVtcyhmaWx0ZXI6IHN0cmluZykge1xuICAgIGNvbnN0IHRyaW1GaWx0ZXIgPSBmaWx0ZXIgJiYgZmlsdGVyLnRyaW0oKTtcblxuICAgIGlmICh0cmltRmlsdGVyKSB7XG4gICAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuZmlsdGVyU2VydmljZVxuICAgICAgICA/IGF3YWl0IHRoaXMuZmlsdGVyT25TZXJ2aWNlKHRyaW1GaWx0ZXIpXG4gICAgICAgIDogdGhpcy5maWx0ZXJMb2NhbEl0ZW1zKHRyaW1GaWx0ZXIpO1xuICAgICAgdGhpcy5maWx0ZXJpbmdJdGVtcyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IFsuLi50aGlzLm1lbnVzXTtcbiAgICAgIHRoaXMuZmlsdGVyaW5nSXRlbXMgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckxvY2FsSXRlbXMoZmlsdGVyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEl0ZW1zID0gW107XG5cbiAgICB0aGlzLmZpbmRJdGVtcyh0aGlzLm1lbnVzLCBmaWx0ZXIudG9Mb3dlckNhc2UoKSwgZmlsdGVyZWRJdGVtcyk7XG5cbiAgICByZXR1cm4gZmlsdGVyZWRJdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyUHJvY2VzcyhmaWx0ZXI6IHN0cmluZykge1xuICAgIHRoaXMuZmlsdGVyTG9hZGluZyA9IHRydWU7XG5cbiAgICB0aGlzLmZpbHRlckl0ZW1zKGZpbHRlcilcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5maWx0ZXJMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zaG93Tm9EYXRhKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB0aGlzLm1lbnVJdGVtc1NlcnZpY2Uuc2VuZFRvQ2hpbGRNZW51Q2xpY2tlZCh7IGFjdGl2ZTogdGhpcy5hY3RpdmVNZW51SXRlbSwgZ3JvdXBlZDogdGhpcy5ncm91cGVkTWVudUl0ZW0gfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhpcy5maWx0ZXJMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBmaWx0ZXJPblNlcnZpY2Uoc2VhcmNoOiBzdHJpbmcgPSAnJykge1xuICAgIGlmIChzZWFyY2gubGVuZ3RoID49IHBvTWVudU1pbkxlbmd0aCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmlsdGVyU2VydmljZVxuICAgICAgICAuZ2V0RmlsdGVyZWREYXRhKHNlYXJjaCwgdGhpcy5wYXJhbXMpXG4gICAgICAgIC5waXBlKG1hcChtZW51SXRlbXNGaWx0ZXJlZCA9PiBtZW51SXRlbXNGaWx0ZXJlZC5tYXAobWVudUl0ZW0gPT4gdGhpcy5jb252ZXJ0VG9NZW51SXRlbUZpbHRlcmVkKG1lbnVJdGVtKSkpKVxuICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVkSXRlbXM7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaW5kSXRlbXMobWVudXM6IEFycmF5PFBvTWVudUl0ZW0+LCBmaWx0ZXI6IHN0cmluZywgZmlsdGVyZWRJdGVtczogQXJyYXk8YW55Pikge1xuICAgIG1lbnVzLmZvckVhY2gobWVudSA9PiB7XG4gICAgICBjb25zdCBoYXNBY3Rpb24gPSBtZW51LmFjdGlvbiB8fCBtZW51Lmxpbms7XG4gICAgICBjb25zdCBsYWJlbEhhc0ZpbHRlciA9IG1lbnUubGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXIpO1xuXG4gICAgICBpZiAobGFiZWxIYXNGaWx0ZXIgJiYgaGFzQWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IG5ld01lbnUgPSB7IC4uLm1lbnUgfTtcblxuICAgICAgICBpZiAobmV3TWVudS5zdWJJdGVtcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgZGVsZXRlIG5ld01lbnUuc3ViSXRlbXM7XG4gICAgICAgICAgbmV3TWVudVsndHlwZSddID0gdGhpcy5zZXRNZW51VHlwZShuZXdNZW51KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbHRlcmVkSXRlbXMucHVzaChuZXdNZW51KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lbnUuc3ViSXRlbXMpIHtcbiAgICAgICAgdGhpcy5maW5kSXRlbXMobWVudS5zdWJJdGVtcywgZmlsdGVyLCBmaWx0ZXJlZEl0ZW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZmluZFBhcmVudChtZW51czogQXJyYXk8UG9NZW51SXRlbT4sIG1lbnVJdGVtOiBQb01lbnVJdGVtKTogUG9NZW51SXRlbSB7XG4gICAgY29uc3QgZ2V0UGFyZW50ID0gZnVuY3Rpb24gKG1lbnVJdGVtczogQXJyYXk8UG9NZW51SXRlbT4sIGlkKSB7XG4gICAgICBpZiAobWVudUl0ZW1zKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBtZW51SXRlbXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgY29uc3QgbWVudSA9IG1lbnVJdGVtc1tpbmRleF07XG4gICAgICAgICAgaWYgKG1lbnUuc3ViSXRlbXMgJiYgbWVudS5zdWJJdGVtcy5maW5kKHN1Ykl0ZW0gPT4gc3ViSXRlbVsnaWQnXSA9PT0gaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVudTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZm91bmQgPSBnZXRQYXJlbnQobWVudS5zdWJJdGVtcywgaWQpO1xuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGdldFBhcmVudChtZW51cywgbWVudUl0ZW1bJ2lkJ10pO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kUm9vdFBhcmVudChtZW51czogQXJyYXk8UG9NZW51SXRlbT4sIG1lbnU6IFBvTWVudUl0ZW0pOiBQb01lbnVJdGVtIHtcbiAgICBjb25zdCBmaW5kUGFyZW50ID0gdGhpcy5maW5kUGFyZW50O1xuXG4gICAgY29uc3QgZ2V0Um9vdFBhcmVudCA9IGZ1bmN0aW9uIChtZW51SXRlbXM6IEFycmF5PFBvTWVudUl0ZW0+LCBtZW51SXRlbSk6IFBvTWVudUl0ZW0ge1xuICAgICAgbGV0IHBhcmVudCA9IGZpbmRQYXJlbnQobWVudUl0ZW1zLCBtZW51SXRlbSk7XG5cbiAgICAgIGlmIChwYXJlbnRbJ2xldmVsJ10gIT09IHBvTWVudVJvb3RMZXZlbCkge1xuICAgICAgICBwYXJlbnQgPSBnZXRSb290UGFyZW50KG1lbnVJdGVtcywgcGFyZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0Um9vdFBhcmVudChtZW51cywgbWVudSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFjdGl2ZU1lbnVQYXJlbnQobWVudXM6IEFycmF5PFBvTWVudUl0ZW0+LCBhY3RpdmVNZW51SXRlbTogUG9NZW51SXRlbSwgZ3JvdXBlZE1lbnVJdGVtOiBQb01lbnVJdGVtKSB7XG4gICAgaWYgKHRoaXMuYXJlU3ViTWVudXMoW2dyb3VwZWRNZW51SXRlbSwgYWN0aXZlTWVudUl0ZW1dKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZFJvb3RQYXJlbnQobWVudXMsIGFjdGl2ZU1lbnVJdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdyb3VwTWVudUl0ZW0obWVudTogUG9NZW51SXRlbSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbGxhcHNlZCkge1xuICAgICAgdGhpcy50b2dnbGVNZW51Q29sbGFwc2UoKTtcbiAgICB9XG5cbiAgICBtZW51Wydpc09wZW5lZCddID0gIW1lbnVbJ2lzT3BlbmVkJ107XG4gICAgdGhpcy5ncm91cGVkTWVudUl0ZW0gPSBtZW51O1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5hY3RpdmVNZW51SXRlbSAmJlxuICAgICAgbWVudVsnaXNPcGVuZWQnXSAmJlxuICAgICAgdGhpcy5pc0FjdGl2ZUl0ZW1NZW51U3ViTWVudSAmJlxuICAgICAgdGhpcy5pc1Jvb3RNZW51RXF1YWxHcm91cGVkTWVudSh0aGlzLm1lbnVzLCB0aGlzLmFjdGl2ZU1lbnVJdGVtLCBtZW51KVxuICAgICkge1xuICAgICAgdGhpcy5hY3RpdmF0ZU1lbnVJdGVtKHRoaXMuYWN0aXZlTWVudUl0ZW0pO1xuICAgIH1cblxuICAgIHRoaXMubWVudUl0ZW1zU2VydmljZS5zZW5kVG9DaGlsZE1lbnVDbGlja2VkKHsgYWN0aXZlOiB0aGlzLmFjdGl2ZU1lbnVJdGVtLCBncm91cGVkOiB0aGlzLmdyb3VwZWRNZW51SXRlbSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaXNSb290TWVudUVxdWFsR3JvdXBlZE1lbnUoXG4gICAgbWVudXM6IEFycmF5PFBvTWVudUl0ZW0+LFxuICAgIGFjdGl2ZU1lbnVJdGVtOiBQb01lbnVJdGVtLFxuICAgIGdyb3VwZWRNZW51SXRlbTogUG9NZW51SXRlbVxuICApIHtcbiAgICBjb25zdCBhY3RpdmVNZW51Um9vdFBhcmVudCA9IHRoaXMuZmluZFJvb3RQYXJlbnQobWVudXMsIGFjdGl2ZU1lbnVJdGVtKTtcbiAgICByZXR1cm4gYWN0aXZlTWVudVJvb3RQYXJlbnRbJ2lkJ10gPT09IGdyb3VwZWRNZW51SXRlbVsnaWQnXTtcbiAgfVxuXG4gIHByaXZhdGUgb3BlblBhcmVudE1lbnUoY2hpbGRNZW51OiBQb01lbnVJdGVtKTogdm9pZCB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5maW5kUGFyZW50KHRoaXMubWVudXMsIGNoaWxkTWVudSk7XG4gICAgcGFyZW50Wydpc09wZW5lZCddID0gdHJ1ZTtcbiAgICB0aGlzLmdyb3VwZWRNZW51SXRlbSA9IHBhcmVudDtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd05vRGF0YSgpIHtcbiAgICB0aGlzLm5vRGF0YSA9IHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGggPT09IDA7XG4gIH1cblxuICBwcml2YXRlIHN0cmluZ2lmeShtZW51czogQXJyYXk8UG9NZW51SXRlbT4pOiBzdHJpbmcge1xuICAgIC8vIG7Do28gZmF6IG8gc3RyaW5naWZ5IGRhIHByb3ByaWVkYWRlIGljb24sIHBvaXMgcG9kZSBjb250ZXIgb2JqZXRvIGNvbXBsZXhvIGUgZGlzcGFyYXIgdW0gZXJyby5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5tZW51cywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChrZXkgIT09ICdpY29uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZUdyb3VwZWRNZW51SXRlbSgpIHtcbiAgICB0aGlzLmdyb3VwZWRNZW51SXRlbVsnaXNPcGVuZWQnXSA9ICF0aGlzLmNvbGxhcHNlZCAmJiB0aGlzLmFsbG93Q29sbGFwc2VNZW51O1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVNZW51Q29sbGFwc2UoY29sbGFwc2VkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLmNvbGxhcHNlZCA9IGNvbGxhcHNlZDtcblxuICAgIGlmICh0aGlzLmdyb3VwZWRNZW51SXRlbSAmJiB0aGlzLmFjdGl2ZU1lbnVJdGVtKSB7XG4gICAgICB0aGlzLmdyb3VwZWRNZW51SXRlbSA9XG4gICAgICAgIHRoaXMuZ2V0QWN0aXZlTWVudVBhcmVudCh0aGlzLm1lbnVzLCB0aGlzLmFjdGl2ZU1lbnVJdGVtLCB0aGlzLmdyb3VwZWRNZW51SXRlbSkgfHwgdGhpcy5ncm91cGVkTWVudUl0ZW07XG4gICAgICB0aGlzLnRvZ2dsZUdyb3VwZWRNZW51SXRlbSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdGl2ZU1lbnVJdGVtKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlQ29sbGFwc2VTdWJNZW51SXRlbSgpO1xuICAgICAgdGhpcy5tZW51SXRlbXNTZXJ2aWNlLnNlbmRUb0NoaWxkTWVudUNsaWNrZWQoe1xuICAgICAgICBhY3RpdmU6IHRoaXMuYWN0aXZlTWVudUl0ZW0sXG4gICAgICAgIGdyb3VwZWQ6IHRoaXMuZ3JvdXBlZE1lbnVJdGVtLFxuICAgICAgICBhY3RpdmF0ZWRCeVJvdXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZU1lbnUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlUmVzaXplKCkge1xuICAgIGlmICh0aGlzLm1vYmlsZU9wZW5lZCkge1xuICAgICAgdGhpcy5tb2JpbGVPcGVuZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY29sbGFwc2VkTW9iaWxlID0gZmFsc2U7XG4gICAgICB0aGlzLnZhbGlkYXRlQ29sbGFwc2VDbGFzcyh0aGlzLmNvbGxhcHNlZE1vYmlsZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVRvZ2dsZU1lbnUoY29sbGFwc2VkOiBib29sZWFuKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93Q29sbGFwc2VNZW51KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50b2dnbGVNZW51Q29sbGFwc2UoY29sbGFwc2VkKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWVudSgpIHtcbiAgICB0aGlzLm1lbnVJbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5zZXRNZW51RXh0cmFQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gWy4uLnRoaXMubWVudXNdO1xuICAgIHRoaXMubWVudVByZXZpb3VzID0gdGhpcy5zdHJpbmdpZnkodGhpcy5tZW51cyk7XG4gICAgdGhpcy52YWxpZGF0ZU1lbnVzKHRoaXMubWVudXMpO1xuICB9XG59XG4iLCI8ZGl2ICpuZ0lmPVwibW9iaWxlT3BlbmVkXCIgY2xhc3M9XCJwby1tZW51LW92ZXJsYXlcIiAoY2xpY2spPVwidG9nZ2xlTWVudU1vYmlsZSgpXCI+PC9kaXY+XG5cbjxkaXY+XG4gIDxkaXYgY2xhc3M9XCJwby1tZW51LW1vYmlsZSBwby1jbGlja2FibGVcIiAoY2xpY2spPVwidG9nZ2xlTWVudU1vYmlsZSgpXCI+XG4gICAgPHBvLWljb24gcC1pY29uPVwiSUNPTl9NRU5VXCI+PC9wby1pY29uPlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwicG8tbWVudVwiIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiIWNvbGxhcHNlZFwiIFtuZ0NsYXNzXT1cInsgJ3BvLW1lbnUtYW5pbWF0aW9uJzogbW9iaWxlT3BlbmVkIH1cIj5cbiAgICA8ZGl2IGNsYXNzPVwicG8tbWVudS1jb250YWluZXJcIiAobW91c2VlbnRlcik9XCJvbk1vdXNlRW50ZXIoKVwiIChtb3VzZWxlYXZlKT1cIm9uTW91c2VMZWF2ZSgpXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicG8tbWVudS1oZWFkZXJcIj5cbiAgICAgICAgPGRpdiAqbmdJZj1cImxvZ28gfHwgKHNob3J0TG9nbyAmJiBlbmFibGVDb2xsYXBzZSlcIiBjbGFzcz1cInBvLW1lbnUtaGVhZGVyLWNvbnRhaW5lci1sb2dvXCI+XG4gICAgICAgICAgPHBvLWxvZ29cbiAgICAgICAgICAgIFtwLWNsYXNzXT1cImVuYWJsZUNvbGxhcHNlID8gJ3BvLW1lbnUtc2hvcnQtbG9nbycgOiAncG8tbWVudS1sb2dvJ1wiXG4gICAgICAgICAgICBbcC1sb2dvXT1cImVuYWJsZUNvbGxhcHNlID8gc2hvcnRMb2dvIHx8IGxvZ28gOiBsb2dvXCJcbiAgICAgICAgICAgIFtwLWxvZ28tYWx0XT1cImxvZ29BbHRcIlxuICAgICAgICAgID48L3BvLWxvZ28+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgKm5nSWY9XCIhZW5hYmxlQ29sbGFwc2UgJiYgbWVudUhlYWRlclRlbXBsYXRlXCIgY2xhc3M9XCJwby1tZW51LWhlYWRlci10ZW1wbGF0ZVwiPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJtZW51SGVhZGVyVGVtcGxhdGUudGVtcGxhdGVSZWZcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHBvLW1lbnUtZmlsdGVyXG4gICAgICAgICAgKm5nSWY9XCJmaWx0ZXJcIlxuICAgICAgICAgIFtwLWVuYWJsZS1jb2xsYXBzZV09XCJlbmFibGVDb2xsYXBzZVwiXG4gICAgICAgICAgW3AtbG9hZGluZ109XCJmaWx0ZXJMb2FkaW5nXCJcbiAgICAgICAgICAocC1maWx0ZXIpPVwiZGVib3VuY2VGaWx0ZXIoJGV2ZW50KVwiXG4gICAgICAgID48L3BvLW1lbnUtZmlsdGVyPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJwby1tZW51LWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBvLW1lbnUtb3V0ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicG8tbWVudS1pbm5lclwiPlxuICAgICAgICAgICAgPG5hdiBjbGFzcz1cInBvLW1lbnUtbmF2XCI+XG4gICAgICAgICAgICAgIDx1bCBjbGFzcz1cInBvLW1lbnUtbGlzdFwiIHJvbGU9XCJtZW51XCI+XG4gICAgICAgICAgICAgICAgPGxpICpuZ0lmPVwibm9EYXRhXCIgY2xhc3M9XCJwby1tZW51LWxpc3QtaXRlbVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj5cbiAgICAgICAgICAgICAgICAgIDxwby1tZW51LWl0ZW1cbiAgICAgICAgICAgICAgICAgICAgcC1pY29uPVwiSUNPTl9JTkZPXCJcbiAgICAgICAgICAgICAgICAgICAgcC10eXBlPVwibm9EYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgW3AtbGV2ZWxdPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgIFtwLWxhYmVsXT1cImxpdGVyYWxzLml0ZW1Ob3RGb3VuZFwiXG4gICAgICAgICAgICAgICAgICAgIFtwLXNob3J0LWxhYmVsXT1cImxpdGVyYWxzLml0ZW1Ob3RGb3VuZFwiXG4gICAgICAgICAgICAgICAgICA+PC9wby1tZW51LWl0ZW0+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBtZW51IG9mIGZpbHRlcmVkSXRlbXM7IGxldCBtZW51SW5kZXggPSBpbmRleFwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInBvLW1lbnUtbGlzdC1pdGVtXCJcbiAgICAgICAgICAgICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1sZXZlbF09XCJtZW51LmxldmVsXCJcbiAgICAgICAgICAgICAgICAgIFtjbGFzcy5wby1tZW51LWl0ZW0tZmlyc3RdPVwibWVudUluZGV4ID09PSAwXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8cG8tbWVudS1pdGVtXG4gICAgICAgICAgICAgICAgICAgIFtwLWFjdGlvbl09XCJtZW51LmFjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIFtwLWJhZGdlLWFsZXJ0XT1cIm1lbnUuYmFkZ2VBbGVydFwiXG4gICAgICAgICAgICAgICAgICAgIFtwLWJhZGdlLWNvbG9yXT1cIm1lbnUuYmFkZ2UgPyBtZW51LmJhZGdlLmNvbG9yIDogdW5kZWZpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgW3AtYmFkZ2UtdmFsdWVdPVwibWVudS5iYWRnZSA/IG1lbnUuYmFkZ2UudmFsdWUgOiB1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgICAgICBbcC1jb2xsYXBzZWQtbWVudV09XCJlbmFibGVDb2xsYXBzZVwiXG4gICAgICAgICAgICAgICAgICAgIFtwLWljb25dPVwiYWxsb3dJY29ucyA/IG1lbnUuaWNvbiA6IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICBbcC1pZF09XCJtZW51LmlkXCJcbiAgICAgICAgICAgICAgICAgICAgW3AtbGFiZWxdPVwibWVudS5sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIFtwLWxldmVsXT1cIm1lbnUubGV2ZWxcIlxuICAgICAgICAgICAgICAgICAgICBbcC1saW5rXT1cIm1lbnUubGlua1wiXG4gICAgICAgICAgICAgICAgICAgIFtwLXNob3J0LWxhYmVsXT1cIm1lbnUuc2hvcnRMYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIFtwLXN1Yi1pdGVtc109XCJtZW51LnN1Ykl0ZW1zXCJcbiAgICAgICAgICAgICAgICAgICAgW3AtdHlwZV09XCJtZW51LnR5cGVcIlxuICAgICAgICAgICAgICAgICAgPjwvcG8tbWVudS1pdGVtPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgKm5nSWY9XCJoYXNGb290ZXJcIiBjbGFzcz1cInBvLW1lbnUtZm9vdGVyXCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwicG8tbWVudS1jb2xsYXBzZS1idXR0b24taWNvblwiXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImVuYWJsZUNvbGxhcHNlQnV0dG9uID8gbGl0ZXJhbHMuY2xvc2UgOiBsaXRlcmFscy5vcGVuXCJcbiAgICAgICAgKGNsaWNrKT1cInRvZ2dsZSgpXCJcbiAgICAgID5cbiAgICAgICAgPHNwYW4gKm5nSWY9XCJlbmFibGVDb2xsYXBzZUJ1dHRvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPnt7IGxpdGVyYWxzLmNsb3NlIH19PC9zcGFuPlxuXG4gICAgICAgIDxwby1pY29uIFtwLWljb25dPVwiZW5hYmxlQ29sbGFwc2UgPyAnSUNPTl9NRU5VX09QRU4nIDogJ0lDT05fTUVOVV9DTE9TRSdcIj48L3BvLWljb24+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==