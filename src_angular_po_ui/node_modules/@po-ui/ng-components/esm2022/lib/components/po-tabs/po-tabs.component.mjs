import { Component, ContentChildren, ElementRef, ViewChild, ViewChildren } from '@angular/core';
import { Subscription, fromEvent } from 'rxjs';
import { PoTabComponent } from './po-tab/po-tab.component';
import { PoTabsBaseComponent } from './po-tabs-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
import * as i2 from "./po-tabs.service";
import * as i3 from "@angular/common";
import * as i4 from "./po-tab-button/po-tab-button.component";
import * as i5 from "./po-tab-dropdown/po-tab-dropdown.component";
const _c0 = ["tabDropdown"];
const _c1 = ["containerTabs"];
const _c2 = ["tabButton"];
function PoTabsComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-tab-button", 7, 8);
    i0.ɵɵlistener("keyup.enter", function PoTabsComponent_ng_container_4_Template_po_tab_button_keyup_enter_1_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.closePopover()); })("p-activated", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_activated_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onTabActive(tab_r3)); })("p-change-state", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_change_state_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onTabChangeState(tab_r3)); })("p-click", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.selectedTab(tab_r3)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r3 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-active", tab_r3.active)("p-disabled", tab_r3.disabled)("p-hide", tab_r3.hide)("p-id", tab_r3.id)("hidden", tab_r3.hide)("p-label", tab_r3.label)("p-small", ctx_r1.small)("id", tab_r3.id);
    i0.ɵɵattribute("disabled", tab_r3.disabled);
} }
function PoTabsComponent_po_tab_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-tab-dropdown", 9, 10);
    i0.ɵɵlistener("p-change-state", function PoTabsComponent_po_tab_dropdown_5_Template_po_tab_dropdown_p_change_state_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.onTabChangeState($event)); })("p-click", function PoTabsComponent_po_tab_dropdown_5_Template_po_tab_dropdown_p_click_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onTabActiveByDropdown($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-tab-dropdown-device", !(ctx_r2.tabsDefault == null ? null : ctx_r2.tabsDefault.length));
    i0.ɵɵproperty("p-label", ctx_r2.literals.moreTabs)("p-small", ctx_r2.small)("p-tabs", ctx_r2.overflowedTabs);
} }
const _c3 = ["*"];
export const poTabsLiterals = {
    en: {
        moreTabs: 'More'
    },
    es: {
        moreTabs: 'Más'
    },
    pt: {
        moreTabs: 'Mais'
    },
    ru: {
        moreTabs: 'Ещё'
    }
};
const poTabsMaxNumberOfTabs = 5;
/**
 * @docsExtends PoTabsBaseComponent
 *
 * @example
 *
 * <example name="po-tabs-basic" title="PO Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="PO Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="PO Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
export class PoTabsComponent extends PoTabsBaseComponent {
    changeDetector;
    languageService;
    tabsService;
    // Tabs utilizados no ng-content
    tabsChildren;
    tabButton;
    tabDropdown;
    containerTabs;
    maxNumberOfTabs = poTabsMaxNumberOfTabs;
    literals;
    tabsDefault = [];
    tabsDropdown = [];
    initializeCalculation = true;
    initializeComponent = false;
    quantityTabsButton;
    defaultLastTabWidth;
    previousActiveTab;
    subscription = new Subscription();
    subscriptionTabsService = new Subscription();
    subscriptionTabActive = new Subscription();
    constructor(changeDetector, languageService, tabsService) {
        super();
        this.changeDetector = changeDetector;
        this.languageService = languageService;
        this.tabsService = tabsService;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTabsLiterals[language]
        };
    }
    ngOnInit() {
        this.subscriptionTabsService = this.tabsService.onChangesTriggered$.subscribe(() => {
            this.updateTabsState();
            if (this.initializeComponent) {
                this.handleKeyboardNavigationTab();
            }
        });
        this.subscriptionTabActive = this.tabsService.triggerActiveOnChanges$.subscribe(tab => {
            const isTabInDropdown = this.tabsDropdown.some(t => t.id === tab.id);
            if (isTabInDropdown) {
                this.onTabActiveByDropdown(tab);
            }
        });
    }
    ngAfterViewInit() {
        this.calculateTabs(this.initializeCalculation);
        this.initializeCalculation = false;
        this.updateTabsState();
        this.changeDetector.detectChanges();
        this.handleKeyboardNavigationTab();
        this.initializeComponent = true;
    }
    ngAfterContentInit() {
        this.updateTabsState(true);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.subscriptionTabsService.unsubscribe();
        this.subscriptionTabActive.unsubscribe();
    }
    get isShowTabDropdown() {
        return this.tabsChildren['_results'].slice(this.quantityTabsButton).filter(item => !item.hide).length;
    }
    // tabs que serão apresentadas na aba "Mais"
    get overflowedTabs() {
        return this.tabsChildren['_results'].slice(this.quantityTabsButton);
    }
    get tabs() {
        return this.tabsChildren['_results'].slice(0, this.quantityTabsButton);
    }
    get tabsChildrenArray() {
        return this.tabsChildren.toArray();
    }
    closePopover() {
        const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    }
    isVisibleTab(tab) {
        return !tab.hide;
    }
    onTabActiveByDropdown(tab) {
        this.changeTabPositionByDropdown(tab);
        const lastTabWidth = this.defaultLastTabWidth > 0
            ? this.defaultLastTabWidth
            : this.tabsChildren.find(e => e === this.tabsChildrenArray[this.quantityTabsButton - 1])?.widthButton;
        this.reorderTabs(tab);
        tab.widthButton = lastTabWidth;
        this.tabButton.last.nativeElement.style.width = `${lastTabWidth}px`;
        this.handleKeyboardNavigationTab();
    }
    // Função disparada quando alguma tab ficar ativa
    onTabActive(tab) {
        this.previousActiveTab = this.tabsChildren.find(tabChild => tabChild.active && tabChild.id !== tab.id);
        this.deactivateTab();
    }
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    onTabChangeState(tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    }
    reorderTabs(tabToReorder) {
        const tabsArray = this.tabsChildrenArray;
        const tabIndex = tabsArray.findIndex(item => item.id === tabToReorder.id);
        if (tabIndex !== -1) {
            const [tab] = tabsArray.splice(tabIndex, 1);
            tabsArray.splice(this.quantityTabsButton - 1, 0, tab);
        }
        this.tabsChildren.reset(tabsArray);
        this.changeDetector.detectChanges();
    }
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    selectedTab(tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        const isTabInDropdown = this.tabsDropdown.some(t => t.id === tab.id);
        if (isTabInDropdown) {
            this.onTabActiveByDropdown(tab);
        }
        this.changeDetector.detectChanges();
    }
    trackByFn(_i, tab) {
        return tab.id;
    }
    // ativa a previousActiveTab ou primeira tab encontrada.
    activeDistinctTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    }
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    activeFirstTab() {
        this.tabs.some(tabChild => {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    }
    // Movimenta a tab da visão de tabs para o dropdown, e vice-versa.
    changeTabPositionByDropdown(tabToActivate) {
        const lastTab = this.tabsDefault[this.tabsDefault.length - 1];
        this.tabsDefault = this.tabsDefault.filter(tab => tab.id !== lastTab.id);
        this.tabsDefault.push(tabToActivate);
        const _tabsDropdown = this.tabsDropdown.filter(tab => tab.id !== tabToActivate.id);
        _tabsDropdown.unshift(lastTab);
        this.tabsDropdown = _tabsDropdown;
        tabToActivate.active = true;
        this.onTabActive(tabToActivate);
    }
    // desativa previousActiveTab e dispara a detecção de mudança.
    deactivateTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    }
    updateTabsState(initialState = false) {
        this.defaultLastTabWidth = this.tabButton?.last?.nativeElement?.getBoundingClientRect().width;
        if (this.defaultLastTabWidth <= 0) {
            return;
        }
        const lastTabChildren = this.tabsChildrenArray[this.quantityTabsButton - 1];
        if (lastTabChildren) {
            lastTabChildren.widthButton = this.defaultLastTabWidth;
        }
        if (this.tabsChildren) {
            const _tabsChildren = this.tabsChildrenArray;
            if (initialState) {
                this.tabsDefault = _tabsChildren;
                this.tabsDropdown = _tabsChildren;
            }
            else {
                this.tabsDefault = _tabsChildren.slice(0, this.quantityTabsButton);
                this.tabsDropdown = _tabsChildren.slice(this.quantityTabsButton);
            }
        }
    }
    calculateTabs(initializeCalculation) {
        if (initializeCalculation) {
            let sumOfWidth = 150;
            const screenSize = this.containerTabs.nativeElement.offsetWidth;
            const listTabButton = [];
            if (this.tabButton?.length) {
                this.tabButton.forEach(element => {
                    const width = element.nativeElement.offsetWidth;
                    if (sumOfWidth + width <= screenSize || screenSize < 1) {
                        listTabButton.push(element);
                    }
                    sumOfWidth += width;
                });
            }
            this.quantityTabsButton = listTabButton.length;
        }
    }
    handleKeyboardNavigationTab(initialIndex = 0) {
        this.subscription.unsubscribe();
        this.subscription = new Subscription();
        if (this.tabButton?.length) {
            const tabFocusable = this.tabButton
                .filter((element, index) => element.nativeElement.children[0]?.id === this.tabsChildren['_results'][index]?.id)
                .map(el => {
                if (el.nativeElement.children[0].classList.contains('po-tab-focusable')) {
                    return el.nativeElement.children[0];
                }
            })
                .filter(Boolean);
            if (tabFocusable) {
                this.initializeTabAccessibilityElements(tabFocusable, initialIndex);
            }
        }
    }
    /**
     * Função que atribui o número de tabs fora do dropdown.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTabsComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('poTab', { static: true }) poTab: PoTabsComponent;
     *
     * changeQuantityTabs() {
     *   this.poTab.setQuantityTabsButton(1); //Número de tabs
     * }
     * ```
     */
    setQuantityTabsButton(number) {
        this.quantityTabsButton = number;
    }
    initializeTabAccessibilityElements(tabRemoveElements, initialIndex) {
        tabRemoveElements.forEach((tabRemoveElement, index) => {
            if (index === initialIndex) {
                this.setTabIndex(tabRemoveElements[initialIndex], 0);
            }
            else if (tabRemoveElements.length === initialIndex) {
                this.setTabIndex(tabRemoveElements[initialIndex - 1], 0);
            }
            else {
                this.setTabIndex(tabRemoveElement, -1);
            }
            this.subscription.add(fromEvent(tabRemoveElement, 'keydown').subscribe((event) => {
                this.handleKeyDown(event, tabRemoveElements, index);
            }));
            if (index !== 0) {
                this.subscription.add(fromEvent(tabRemoveElements, 'blur').subscribe(() => {
                    this.setTabIndex(tabRemoveElements[index], -1);
                    this.setTabIndex(tabRemoveElements[0], 0);
                }));
            }
        });
    }
    setTabIndex(element, tabIndex) {
        element.setAttribute('tabindex', tabIndex);
    }
    handleKeyDown(event, tabRemoveElements, index) {
        const KEY_SPACE = 'Space';
        const KEY_ARROW_LEFT = 'ArrowLeft';
        const KEY_ARROW_RIGHT = 'ArrowRight';
        const KEY_HOME = 'Home';
        const KEY_END = 'End';
        if (event.code === KEY_SPACE || event.code === KEY_HOME || event.code === KEY_END) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (event.key === KEY_ARROW_LEFT) {
            this.handleArrowLeft(tabRemoveElements, index);
        }
        else if (event.key === KEY_ARROW_RIGHT) {
            this.handleArrowRight(tabRemoveElements, index);
        }
        else if (event.key === KEY_HOME) {
            this.handleHomeKey(tabRemoveElements, index);
        }
        else if (event.key === KEY_END) {
            this.handleEndKey(tabRemoveElements, index);
        }
    }
    handleArrowLeft(tabRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[index - 1].focus();
            this.setTabIndex(tabRemoveElements[index - 1], 0);
        }
        else {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[tabRemoveElements.length - 1].focus();
            this.setTabIndex(tabRemoveElements[tabRemoveElements.length - 1], 0);
        }
    }
    handleHomeKey(tabRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[0].focus();
            this.setTabIndex(tabRemoveElements[0], 0);
        }
    }
    handleEndKey(tabRemoveElements, index) {
        if (index < tabRemoveElements.length - 1) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[tabRemoveElements.length - 1].focus();
            this.setTabIndex(tabRemoveElements[tabRemoveElements.length - 1], 0);
        }
    }
    handleArrowRight(tabRemoveElements, index) {
        if (index < tabRemoveElements.length - 1) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[index + 1].focus();
            this.setTabIndex(tabRemoveElements[index + 1], 0);
        }
        else {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[0].focus();
            this.setTabIndex(tabRemoveElements[0], 0);
        }
    }
    static ɵfac = function PoTabsComponent_Factory(t) { return new (t || PoTabsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i2.PoTabsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabsComponent, selectors: [["po-tabs"]], contentQueries: function PoTabsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoTabComponent, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabsChildren = _t);
        } }, viewQuery: function PoTabsComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
            i0.ɵɵviewQuery(_c1, 7, ElementRef);
            i0.ɵɵviewQuery(_c2, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabDropdown = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerTabs = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabButton = _t);
        } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 8, vars: 3, consts: [[1, "po-tabs-container"], [1, "po-tabs-header"], ["containerTabs", ""], ["role", "tablist", 1, "po-tabs-button-wrapper"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-tab-dropdown", 3, "po-tab-dropdown-device", "p-label", "p-small", "p-tabs", "p-change-state", "p-click", 4, "ngIf"], [1, "po-tabs-content"], [1, "po-tab-button", 3, "p-active", "p-disabled", "p-hide", "p-id", "hidden", "p-label", "p-small", "id", "keyup.enter", "p-activated", "p-change-state", "p-click"], ["tabButton", ""], [1, "po-tab-dropdown", 3, "p-label", "p-small", "p-tabs", "p-change-state", "p-click"], ["tabDropdown", ""]], template: function PoTabsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1, 2)(3, "div", 3);
            i0.ɵɵtemplate(4, PoTabsComponent_ng_container_4_Template, 3, 9, "ng-container", 4)(5, PoTabsComponent_po_tab_dropdown_5_Template, 2, 5, "po-tab-dropdown", 5);
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵprojection(7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngForOf", ctx.tabs)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isShowTabDropdown);
        } }, dependencies: [i3.NgForOf, i3.NgIf, i4.PoTabButtonComponent, i5.PoTabDropdownComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsComponent, [{
        type: Component,
        args: [{ selector: 'po-tabs', template: "<div class=\"po-tabs-container\">\n  <div #containerTabs class=\"po-tabs-header\">\n    <div class=\"po-tabs-button-wrapper\" role=\"tablist\">\n      <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n        <po-tab-button\n          #tabButton\n          class=\"po-tab-button\"\n          [p-active]=\"tab.active\"\n          [p-disabled]=\"tab.disabled\"\n          [p-hide]=\"tab.hide\"\n          [p-id]=\"tab.id\"\n          [hidden]=\"tab.hide\"\n          [attr.disabled]=\"tab.disabled\"\n          [p-label]=\"tab.label\"\n          [p-small]=\"small\"\n          [id]=\"tab.id\"\n          (keyup.enter)=\"closePopover()\"\n          (p-activated)=\"onTabActive(tab)\"\n          (p-change-state)=\"onTabChangeState(tab)\"\n          (p-click)=\"selectedTab(tab)\"\n        >\n        </po-tab-button>\n      </ng-container>\n\n      <po-tab-dropdown\n        #tabDropdown\n        *ngIf=\"isShowTabDropdown\"\n        class=\"po-tab-dropdown\"\n        [class.po-tab-dropdown-device]=\"!tabsDefault?.length\"\n        [p-label]=\"literals.moreTabs\"\n        [p-small]=\"small\"\n        [p-tabs]=\"overflowedTabs\"\n        (p-change-state)=\"onTabChangeState($event)\"\n        (p-click)=\"onTabActiveByDropdown($event)\"\n      >\n      </po-tab-dropdown>\n    </div>\n  </div>\n</div>\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i1.PoLanguageService }, { type: i2.PoTabsService }], { tabsChildren: [{
            type: ContentChildren,
            args: [PoTabComponent]
        }], tabButton: [{
            type: ViewChildren,
            args: ['tabButton', { read: ElementRef }]
        }], tabDropdown: [{
            type: ViewChild,
            args: ['tabDropdown', { static: true }]
        }], containerTabs: [{
            type: ViewChild,
            args: ['containerTabs', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabsComponent, { className: "PoTabsComponent", filePath: "lib/components/po-tabs/po-tabs.component.ts", lineNumber: 69 }); })();
//# sourceMappingURL=data:application/json;base64,