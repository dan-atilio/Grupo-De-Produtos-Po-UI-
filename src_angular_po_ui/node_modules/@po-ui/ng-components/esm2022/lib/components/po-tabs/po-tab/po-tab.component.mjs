import { Component } from '@angular/core';
import { PoTabBaseComponent } from './po-tab-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-tabs.service";
const _c0 = ["*"];
/**
 * @docsExtends PoTabBaseComponent
 */
export class PoTabComponent extends PoTabBaseComponent {
    elementRef;
    tabsService;
    constructor(elementRef, tabsService) {
        super();
        this.elementRef = elementRef;
        this.tabsService = tabsService;
    }
    ngAfterContentInit() {
        this.setDisplayOnActive();
    }
    ngOnChanges(changes) {
        setTimeout(() => {
            this.tabsService.triggerOnChanges();
            if (changes?.active?.currentValue) {
                this.tabsService.triggerActiveOnChanges(this);
            }
        }, 100);
    }
    setDisplayOnActive() {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    }
    static ɵfac = function PoTabComponent_Factory(t) { return new (t || PoTabComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.PoTabsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabComponent, selectors: [["po-tab"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function PoTabComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabComponent, [{
        type: Component,
        args: [{ selector: 'po-tab', template: "<ng-content></ng-content>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i1.PoTabsService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabComponent, { className: "PoTabComponent", filePath: "lib/components/po-tabs/po-tab/po-tab.component.ts", lineNumber: 13 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJzL3BvLXRhYi9wby10YWIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYnMvcG8tdGFiL3BvLXRhYi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBd0MsTUFBTSxlQUFlLENBQUM7QUFFbEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFHN0Q7O0dBRUc7QUFLSCxNQUFNLE9BQU8sY0FBZSxTQUFRLGtCQUFrQjtJQUUxQztJQUNBO0lBRlYsWUFDVSxVQUFzQixFQUN0QixXQUEwQjtRQUVsQyxLQUFLLEVBQUUsQ0FBQztRQUhBLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsZ0JBQVcsR0FBWCxXQUFXLENBQWU7SUFHcEMsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDcEMsSUFBSSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRTtnQkFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQztRQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFUyxrQkFBa0I7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMxRSxDQUFDO3dFQXZCVSxjQUFjOzZEQUFkLGNBQWM7O1lDWjNCLGtCQUF5Qjs7O2lGRFlaLGNBQWM7Y0FKMUIsU0FBUzsyQkFDRSxRQUFROztrRkFHUCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UYWJCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby10YWItYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9UYWJzU2VydmljZSB9IGZyb20gJy4uL3BvLXRhYnMuc2VydmljZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvVGFiQmFzZUNvbXBvbmVudFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFiLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYkNvbXBvbmVudCBleHRlbmRzIFBvVGFiQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHRhYnNTZXJ2aWNlOiBQb1RhYnNTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmUoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudGFic1NlcnZpY2UudHJpZ2dlck9uQ2hhbmdlcygpO1xuICAgICAgaWYgKGNoYW5nZXM/LmFjdGl2ZT8uY3VycmVudFZhbHVlKSB7XG4gICAgICAgIHRoaXMudGFic1NlcnZpY2UudHJpZ2dlckFjdGl2ZU9uQ2hhbmdlcyh0aGlzKTtcbiAgICAgIH1cbiAgICB9LCAxMDApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldERpc3BsYXlPbkFjdGl2ZSgpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5hY3RpdmUgPyAnJyA6ICdub25lJztcbiAgfVxufVxuIiwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19