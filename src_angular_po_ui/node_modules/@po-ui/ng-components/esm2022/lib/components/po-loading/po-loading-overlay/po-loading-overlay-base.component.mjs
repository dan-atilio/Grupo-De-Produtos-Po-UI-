import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
export const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'Загрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: Só é possível realizar alterações ao adicionar a classe `.po-loading`
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-normal)`                       |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-70)`                    |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--border-width`                       | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-sm)`                          |
 * | `--border-color`                       | Cor da borda                                          | `var(--color-neutral-light-20)`                   |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-00)`                   |
 * | `--shadow`                             | Contém o valor da sombra do elemento                  | `var(--shadow-md)`                                |
 * | **po-loading-icon**                    |                                                       |                                                   |
 * | `--color`                              | Cor principal do spinner                              | `var(--color-action-default)`                     |
 *
 */
export class PoLoadingOverlayBaseComponent {
    languageService;
    _screenLock = false;
    _text;
    _size;
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamnho do componente.
     *
     * @default `lg`
     */
    set size(value) {
        this._size = value === '' || !value ? 'lg' : value;
    }
    get size() {
        return this._size;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.text = this.getTextDefault();
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
    static ɵfac = function PoLoadingOverlayBaseComponent_Factory(t) { return new (t || PoLoadingOverlayBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingOverlayBaseComponent, inputs: { screenLock: [i0.ɵɵInputFlags.None, "p-screen-lock", "screenLock"], text: [i0.ɵɵInputFlags.None, "p-text", "text"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { screenLock: [{
            type: Input,
            args: ['p-screen-lock']
        }], text: [{
            type: Input,
            args: ['p-text']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,