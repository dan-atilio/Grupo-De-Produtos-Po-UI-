import { Input, Directive } from '@angular/core';
import { PoLoadingIconSize } from './po-loading-icon/po-loading-icon-size-enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
export const poLoadingLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'Загрузка'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
export class PoLoadingBaseComponent {
    languageService;
    _text;
    _size;
    /**
     * Texto a ser exibido no componente.
     */
    set text(value) {
        this._text = value || (value === '' ? '' : this.getTextDefault());
    }
    get text() {
        return this._text;
    }
    /**
     * Define o tamanho do ícone.
     *
     * @default `lg`
     *
     * Valores válidos:
     *  - `xs`: tamanho `extra small`
     *  - `sm`: tamanho `small`
     *  - `md`: tamanho `medium`
     *  - `lg`: tamanho `large`
     */
    set size(value) {
        this._size = PoLoadingIconSize[value] ? PoLoadingIconSize[value] : PoLoadingIconSize.lg;
    }
    get size() {
        return this._size;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.text = this.getTextDefault();
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingLiteralsDefault[language].loading;
    }
    static ɵfac = function PoLoadingBaseComponent_Factory(t) { return new (t || PoLoadingBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingBaseComponent, inputs: { text: [i0.ɵɵInputFlags.None, "p-text", "text"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { text: [{
            type: Input,
            args: ['p-text']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7OztBQUNoRixNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRztJQUN0QyxFQUFFLEVBQXFCO1FBQ3JCLE9BQU8sRUFBRSxTQUFTO0tBQ25CO0lBQ0QsRUFBRSxFQUFxQjtRQUNyQixPQUFPLEVBQUUsVUFBVTtLQUNwQjtJQUNELEVBQUUsRUFBcUI7UUFDckIsT0FBTyxFQUFFLFlBQVk7S0FDdEI7SUFDRCxFQUFFLEVBQXFCO1FBQ3JCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFFSCxNQUFNLE9BQU8sc0JBQXNCO0lBa0NiO0lBakNaLEtBQUssQ0FBVTtJQUNmLEtBQUssQ0FBcUI7SUFFbEM7O09BRUc7SUFDSCxJQUFxQixJQUFJLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILElBQXFCLElBQUksQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7SUFDMUYsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFTyxjQUFjO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV6RCxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNwRCxDQUFDO2dGQTFDVSxzQkFBc0I7NkRBQXRCLHNCQUFzQjs7aUZBQXRCLHNCQUFzQjtjQURsQyxTQUFTO2tEQVFhLElBQUk7a0JBQXhCLEtBQUs7bUJBQUMsUUFBUTtZQW1CTSxJQUFJO2tCQUF4QixLQUFLO21CQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Mb2FkaW5nTGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbG9hZGluZy1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb2FkaW5nSWNvblNpemUgfSBmcm9tICcuL3BvLWxvYWRpbmctaWNvbi9wby1sb2FkaW5nLWljb24tc2l6ZS1lbnVtJztcbmV4cG9ydCBjb25zdCBwb0xvYWRpbmdMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9Mb2FkaW5nTGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdMb2FkaW5nJ1xuICB9LFxuICBlczogPFBvTG9hZGluZ0xpdGVyYWxzPntcbiAgICBsb2FkaW5nOiAnQ2FyZ2FuZG8nXG4gIH0sXG4gIHB0OiA8UG9Mb2FkaW5nTGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdDYXJyZWdhbmRvJ1xuICB9LFxuICBydTogPFBvTG9hZGluZ0xpdGVyYWxzPntcbiAgICBsb2FkaW5nOiAn0JfQsNCz0YDRg9C30LrQsCdcbiAgfVxufTtcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgdGVtIG8gb2JqZXRpdm8gZGUgbW9zdHJhciB2aXN1YWxtZW50ZSBhb3MgdXN1w6FyaW9zIHF1ZSBhIGFwbGljYcOnw6NvIGVzdMOhIHByb2Nlc3NhbmRvXG4gKiBvdSBhZ3VhcmRhbmRvIGEgcmVzcG9zdGEgZGUgYWxndW1hIHJlcXVpc2nDp8Ojby5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3RleHQ/OiBzdHJpbmc7XG4gIHByaXZhdGUgX3NpemU/OiBQb0xvYWRpbmdJY29uU2l6ZTtcblxuICAvKipcbiAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgKi9cbiAgQElucHV0KCdwLXRleHQnKSBzZXQgdGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGV4dCA9IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgPyAnJyA6IHRoaXMuZ2V0VGV4dERlZmF1bHQoKSk7XG4gIH1cblxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBvIHRhbWFuaG8gZG8gw61jb25lLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgbGdgXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGB4c2A6IHRhbWFuaG8gYGV4dHJhIHNtYWxsYFxuICAgKiAgLSBgc21gOiB0YW1hbmhvIGBzbWFsbGBcbiAgICogIC0gYG1kYDogdGFtYW5obyBgbWVkaXVtYFxuICAgKiAgLSBgbGdgOiB0YW1hbmhvIGBsYXJnZWBcbiAgICovXG4gIEBJbnB1dCgncC1zaXplJykgc2V0IHNpemUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpemUgPSBQb0xvYWRpbmdJY29uU2l6ZVt2YWx1ZV0gPyBQb0xvYWRpbmdJY29uU2l6ZVt2YWx1ZV0gOiBQb0xvYWRpbmdJY29uU2l6ZS5sZztcbiAgfVxuXG4gIGdldCBzaXplKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICB0aGlzLnRleHQgPSB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIGdldFRleHREZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gcG9Mb2FkaW5nTGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXS5sb2FkaW5nO1xuICB9XG59XG4iXX0=