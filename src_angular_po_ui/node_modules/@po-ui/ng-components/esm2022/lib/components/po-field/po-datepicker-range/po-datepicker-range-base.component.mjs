import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoMask } from '../po-input/po-mask';
import { requiredFailed } from '../validators';
import { convertIsoToDate, convertToBoolean, replaceFormatSeparator, setYearFrom0To100, validateDateRange } from './../../../utils/util';
import { poDatepickerRangeLiteralsDefault } from './po-datepicker-range.literals';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/po-date/po-date.service";
import * as i2 from "../../../services/po-language/po-language.service";
/**
 * @description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 */
export class PoDatepickerRangeBaseComponent {
    poDateService;
    languageService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    onChange = new EventEmitter();
    errorMessage = '';
    dateRange = { start: '', end: '' };
    format = 'dd/mm/yyyy';
    isDateRangeInputFormatValid = true;
    isStartDateRangeInputValid = true;
    onTouchedModel;
    poMaskObject;
    _clean = false;
    _disabled;
    _endDate;
    _literals;
    _maxDate;
    _minDate;
    _noAutocomplete = false;
    _readonly = false;
    _required = false;
    _startDate;
    _locale;
    language;
    onChangeModel;
    validatorChange;
    get isDateRangeInputValid() {
        return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita ação para limpar o campo.
     *
     * @default `false`
     */
    set clean(clean) {
        this._clean = convertToBoolean(clean);
    }
    get clean() {
        return this._clean;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data final.
     */
    set endDate(date) {
        this._endDate = this.convertPatternDateFormat(date);
        this.dateRange.end = this.endDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get endDate() {
        return this._endDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-datepicker-range`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format',
     *    startDateGreaterThanEndDate: 'End date less than start date'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-datepicker-range
     *   [p-literals]="customLiterals">
     * </po-datepicker-range>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poDatepickerRangeLiteralsDefault[poLocaleDefault],
                ...poDatepickerRangeLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poDatepickerRangeLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poDatepickerRangeLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker-range`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker-range`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.dateRange);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @optional
     *
     * @description
     *
     * Data inicial.
     */
    set startDate(date) {
        this._startDate = this.convertPatternDateFormat(date);
        this.dateRange.start = this.startDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get startDate() {
        return this._startDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma que o calendário utilizará para exibir as datas.
     *
     * > O locale padrão será recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
        else {
            this._locale = this.language;
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
    }
    get locale() {
        return this._locale || this.language;
    }
    constructor(poDateService, languageService) {
        this.poDateService = poDateService;
        this.languageService = languageService;
        this.language = languageService.getShortLanguage();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(control) {
        const value = control.value || {};
        const startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        const endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return {
                required: {
                    valid: false
                }
            };
        }
        if (!this.verifyValidDate(startDate, endDate)) {
            this.errorMessage = this.literals.invalidDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if ((startDate && !this.validateDateInRange(startDate)) || (endDate && !this.validateDateInRange(endDate))) {
            this.errorMessage = this.literals.dateOutOfPeriod;
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateDateInRange(startDate) {
        return validateDateRange(convertIsoToDate(startDate, false, false), this._minDate, this._maxDate);
    }
    writeValue(dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask(format = this.format) {
        let mask = format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
    dateFormatFailed(value) {
        return value && !this.poDateService.isValidIso(value);
    }
    // Executa a função onChange
    updateModel(value) {
        const model = typeof value === 'object' ? { ...value } : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    }
    validateModel(value) {
        const model = { ...value };
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    verifyValidDate(startDate, endDate) {
        if (startDate !== '' && endDate !== '') {
            return this.dateIsValid(startDate) && this.dateIsValid(endDate);
        }
        else if (startDate !== '') {
            return this.dateIsValid(startDate);
        }
        else {
            return this.dateIsValid(endDate);
        }
    }
    convertPatternDateFormat(value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    }
    dateRangeFailed(startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    }
    dateRangeFormatFailed(startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    }
    dateRangeObjectFailed(value) {
        return value && !this.isDateRangeObject(value);
    }
    isDateRangeObject(value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    }
    requiredDateRangeFailed(startDate, endDate) {
        return (this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate));
    }
    dateIsValid(date) {
        const [strYear, strMonth, strDay] = date.split('-');
        const year = Number(strYear);
        const month = Number(strMonth);
        const day = Number(strDay);
        //verificação dos meses com 31 dias
        if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
            return day < 1 || day > 31 ? false : true;
        }
        else if (month === 4 || month === 6 || month === 9 || month === 11) {
            //verificação dos meses com 30 dias
            return day < 1 || day > 30 ? false : true;
        }
        else {
            //verificacao de ano bissexto para verificar até qual dia irá o mês de fevereiro
            if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
                return day < 1 || day > 29 ? false : true;
            }
            else {
                return day < 1 || day > 28 ? false : true;
            }
        }
    }
    static ɵfac = function PoDatepickerRangeBaseComponent_Factory(t) { return new (t || PoDatepickerRangeBaseComponent)(i0.ɵɵdirectiveInject(i1.PoDateService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDatepickerRangeBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], help: [i0.ɵɵInputFlags.None, "p-help", "help"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], clean: [i0.ɵɵInputFlags.None, "p-clean", "clean"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], endDate: [i0.ɵɵInputFlags.None, "p-end-date", "endDate"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], startDate: [i0.ɵɵInputFlags.None, "p-start-date", "startDate"], locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"] }, outputs: { onChange: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoDateService }, { type: i2.PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], help: [{
            type: Input,
            args: ['p-help']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], onChange: [{
            type: Output,
            args: ['p-change']
        }], clean: [{
            type: Input,
            args: ['p-clean']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], endDate: [{
            type: Input,
            args: ['p-end-date']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], startDate: [{
            type: Input,
            args: ['p-start-date']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,