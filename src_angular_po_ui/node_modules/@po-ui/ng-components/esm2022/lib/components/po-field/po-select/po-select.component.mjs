import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { convertToBoolean, isSafari, removeDuplicatedOptions, removeUndefinedAndNullOptions, uuid, validValue } from '../../../utils/util';
import { PoFieldValidateModel } from '../po-field-validate.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i4 from "../po-field-container/po-field-container.component";
const _c0 = ["select"];
function PoSelectComponent_ng_container_4_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 8);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    let tmp_3_0;
    i0.ɵɵproperty("disabled", !!ctx_r5.placeholder)("hidden", !(ctx_r5.selectedValue == null ? null : ctx_r5.selectedValue.toString()) && !ctx_r5.placeholder)("selected", !(ctx_r5.selectedValue == null ? null : ctx_r5.selectedValue.toString()))("value", (tmp_3_0 = ctx_r5.placeholder) !== null && tmp_3_0 !== undefined ? tmp_3_0 : "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r5.placeholder, " ");
} }
function PoSelectComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_4_option_1_Template, 2, 5, "option", 6);
    i0.ɵɵelementStart(2, "option", 7);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !(ctx_r1.selectedValue == null ? null : ctx_r1.selectedValue.toString()) || !!ctx_r1.placeholder);
    i0.ɵɵadvance();
    i0.ɵɵproperty("hidden", true);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.displayValue);
} }
function PoSelectComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "option");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r2.displayValue || ctx_r2.placeholder);
} }
function PoSelectComponent_ng_container_6_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r6.readonly)("value", item_r7 == null ? null : item_r7[ctx_r6.fieldValue]);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", item_r7 == null ? null : item_r7[ctx_r6.fieldLabel], " ");
} }
function PoSelectComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_6_option_1_Template, 2, 3, "option", 9);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r3.optionWithoutGroup);
} }
function PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 15);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const subItem_r12 = ctx.$implicit;
    const ctx_r11 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("value", subItem_r12 == null ? null : subItem_r12[ctx_r11.fieldValue])("disabled", ctx_r11.readonly);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", subItem_r12 == null ? null : subItem_r12[ctx_r11.fieldLabel], " ");
} }
function PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "optgroup", 13);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_option_1_Template, 2, 3, "option", 14);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵpropertyInterpolate("label", item_r9 == null ? null : item_r9.label);
    i0.ɵɵproperty("disabled", ctx_r10.readonly);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", item_r9.options);
} }
function PoSelectComponent_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_Template, 2, 3, "optgroup", 12);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", (item_r9 == null ? null : item_r9.options.length) > 0);
} }
function PoSelectComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_Template, 2, 1, "ng-container", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r4.listGroupOptions);
} }
const PO_SELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_SELECT_FIELD_VALUE_DEFAULT = 'value';
/**
 * @docsExtends PoFieldValidateModel
 *
 * @example
 *
 * <example name="po-select-basic" title="PO Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="PO Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="PO Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 *
 * <example name="po-select-companies" title="PO Select Companies">
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.html"> </file>
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.ts"> </file>
 * </example>
 *
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-combo-option-template](/documentation/po-combo-option-template)**.
 *
 * > Obs: o template **[p-select-option-template](/documentation/po-select-option-template)** será depreciado na versão 14.x.x.
 */
export class PoSelectComponent extends PoFieldValidateModel {
    changeDetector;
    renderer;
    selectElement;
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
     * ```
     */
    ngModelChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente para leitura.
     *
     * @default `false`
     */
    readonly = false;
    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada. */
    placeholder;
    displayValue;
    id = `po-select[${uuid()}]`;
    modelValue;
    selectedValue;
    optionsDefault = [];
    listGroupOptions = [];
    optionWithoutGroup = [];
    isSafari = isSafari();
    onModelTouched;
    _fieldLabel = PO_SELECT_FIELD_LABEL_DEFAULT;
    _fieldValue = PO_SELECT_FIELD_VALUE_DEFAULT;
    _options;
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`,
     * ou uma coleção de objetos dentro de grupos diferentes, que seriam da interface `PoSelectOptionGroup`.
     *
     * Caso esta lista estiver vazia, o model será `undefined`.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     *
     * > Para coleção de objetos dentro de grupos distintos será exibido a label e opções somente se a propriedade `options` possua valores.
     *  Sendo assim, a estrutura seguiria dessa forma:
     *
     * ```
     * this.options = [{
     *  label: 'Opções',
     *  options: [
     *    { value: 1, label: 'opção 1' },
     *    { value: 2, label: 'opção 2' }
     *  ],
     * }];
     * ```
     *
     * É possível a utilização de opções agrupadas e desagrupadas em conjunto, porém será feita a ordenação de exibir as opções
     * desagrupadas acima.
     *
     */
    set options(options) {
        this.listGroupOptions = [];
        this.optionWithoutGroup = [];
        if (this.fieldLabel && this.fieldValue && options) {
            options.map(option => {
                if (this.isItemGroup(option)) {
                    option.options.map(opt => {
                        opt.label = opt[this.fieldLabel];
                        opt.value = opt[this.fieldValue];
                    });
                }
                else {
                    option.label = option[this.fieldLabel];
                    option.value = option[this.fieldValue];
                }
            });
        }
        if (options) {
            this.optionsDefault = [...options];
            this.separateOptions();
            this.optionsDefault = [];
            this.optionsDefault = [...this.optionWithoutGroup, ...this.transformInArray(this.listGroupOptions)];
            this.onUpdateOptions();
            this._options = [...this.optionsDefault];
        }
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_SELECT_FIELD_LABEL_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_SELECT_FIELD_VALUE_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    /* istanbul ignore next */
    constructor(changeDetector, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
    }
    ngOnChanges(changes) {
        if (changes.options?.currentValue) {
            this.options = changes.options.currentValue;
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    onBlur() {
        this.onModelTouched?.();
    }
    // Altera o valor ao selecionar um item.
    onSelectChange(value) {
        this.onModelTouched?.();
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateValues(optionFound);
            }
        }
    }
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    // Atualiza valores
    updateValues(option) {
        if (this.selectedValue !== option[this.fieldValue]) {
            this.selectedValue = option[this.fieldValue];
            this.selectElement.nativeElement.value = option[this.fieldValue];
            this.updateModel(option[this.fieldValue]);
            this.displayValue = option[this.fieldLabel];
            this.emitChange(option[this.fieldValue]);
        }
    }
    // Recebe as alterações do model
    onWriteValue(value) {
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound[this.fieldValue];
            this.displayValue = optionFound[this.fieldLabel];
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.updateModel(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    extraValidation(c) {
        return null;
    }
    isItemGroup(item) {
        if (item.options) {
            return Array.isArray(item.options) ? true : false;
        }
        return false;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    findOptionValue(value) {
        if (this.options) {
            return this.options.find(option => this.isEqual(option.value, value));
        }
    }
    transformInArray(objectWithArray) {
        return objectWithArray.reduce((options, items) => {
            if (items.options) {
                return options.concat(items.options);
            }
            return [];
        }, []);
    }
    separateOptions() {
        this.optionsDefault.forEach(option => {
            if (this.isItemGroup(option)) {
                this.validateOptions(option.options);
                this.listGroupOptions.push(option);
            }
            else {
                this.optionWithoutGroup.push(option);
            }
        });
        if (this.optionWithoutGroup.length > 0) {
            this.validateOptions(this.optionWithoutGroup);
        }
    }
    validateOptions(options) {
        removeDuplicatedOptions(options);
        removeUndefinedAndNullOptions(options);
    }
    static ɵfac = function PoSelectComponent_Factory(t) { return new (t || PoSelectComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSelectComponent, selectors: [["po-select"]], viewQuery: function PoSelectComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElement = _t.first);
        } }, inputs: { readonly: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-readonly", "readonly", convertToBoolean], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"] }, outputs: { ngModelChange: "ngModelChange" }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoSelectComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoSelectComponent),
                    multi: true
                }
            ]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 9, vars: 18, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-select", 3, "disabled", "id", "required", "change"], ["select", ""], [4, "ngIf"], [3, "p-help", "p-disabled"], [3, "disabled", "hidden", "selected", "value", 4, "ngIf"], [3, "hidden"], [3, "disabled", "hidden", "selected", "value"], [3, "disabled", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "value"], [4, "ngFor", "ngForOf"], [3, "label", "disabled", 4, "ngIf"], [3, "label", "disabled"], [3, "value", "disabled", 4, "ngFor", "ngForOf"], [3, "value", "disabled"]], template: function PoSelectComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "select", 2, 3);
            i0.ɵɵlistener("change", function PoSelectComponent_Template_select_change_2_listener($event) { return ctx.onSelectChange($event.target.value); });
            i0.ɵɵtemplate(4, PoSelectComponent_ng_container_4_Template, 4, 3, "ng-container", 4)(5, PoSelectComponent_ng_container_5_Template, 3, 1, "ng-container", 4)(6, PoSelectComponent_ng_container_6_Template, 2, 1, "ng-container", 4)(7, PoSelectComponent_ng_container_7_Template, 2, 1, "ng-container", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(8, "po-field-container-bottom", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-select-placeholder", !(ctx.selectedValue == null ? null : ctx.selectedValue.toString()) && !!ctx.placeholder);
            i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.isSafari);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isSafari);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.optionWithoutGroup.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.listGroupOptions.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i3.PoFieldContainerBottomComponent, i4.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSelectComponent, [{
        type: Component,
        args: [{ selector: 'po-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <select\n      #select\n      class=\"po-select\"\n      [attr.name]=\"name\"\n      [class.po-select-placeholder]=\"!selectedValue?.toString() && !!placeholder\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [required]=\"required\"\n      (change)=\"onSelectChange($event.target.value)\"\n    >\n      <ng-container *ngIf=\"!isSafari\">\n        <option\n          *ngIf=\"!selectedValue?.toString() || !!placeholder\"\n          [disabled]=\"!!placeholder\"\n          [hidden]=\"!selectedValue?.toString() && !placeholder\"\n          [selected]=\"!selectedValue?.toString()\"\n          [value]=\"placeholder ?? ''\"\n        >\n          {{ placeholder }}\n        </option>\n        <option [hidden]=\"true\">{{ displayValue }}</option>\n      </ng-container>\n\n      <ng-container *ngIf=\"isSafari\">\n        <option>{{ displayValue || placeholder }}</option>\n      </ng-container>\n\n      <ng-container *ngIf=\"optionWithoutGroup.length > 0\">\n        <option *ngFor=\"let item of optionWithoutGroup\" [disabled]=\"readonly\" [value]=\"item?.[this.fieldValue]\">\n          {{ item?.[this.fieldLabel] }}\n        </option>\n      </ng-container>\n      <ng-container *ngIf=\"listGroupOptions.length > 0\">\n        <ng-container *ngFor=\"let item of listGroupOptions\">\n          <optgroup *ngIf=\"item?.options.length > 0\" label=\"{{ item?.label }}\" [disabled]=\"readonly\">\n            <option *ngFor=\"let subItem of item.options\" [value]=\"subItem?.[this.fieldValue]\" [disabled]=\"readonly\">\n              {{ subItem?.[this.fieldLabel] }}\n            </option>\n          </optgroup>\n        </ng-container>\n      </ng-container>\n    </select>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { selectElement: [{
            type: ViewChild,
            args: ['select', { read: ElementRef, static: true }]
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], readonly: [{
            type: Input,
            args: [{ alias: 'p-readonly', transform: convertToBoolean }]
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSelectComponent, { className: "PoSelectComponent", filePath: "lib/components/po-field/po-select/po-select.component.ts", lineNumber: 92 }); })();
//# sourceMappingURL=data:application/json;base64,