import { ElementRef, HostListener, ViewChild, Directive } from '@angular/core';
import { PoInputBaseComponent } from '../po-input/po-input-base.component';
import * as i0 from "@angular/core";
const _c0 = ["inp"];
/* eslint-disable @angular-eslint/directive-class-suffix */
export class PoInputGeneric extends PoInputBaseComponent {
    inputEl;
    type = 'text';
    el;
    valueBeforeChange;
    timeoutChange;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    constructor(el, cd) {
        super(cd);
        this.el = el;
    }
    onKeydown(e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
            if (this.passedWriteValue) {
                this.validateClassesForMask(true);
            }
        }
    }
    onKeyup(e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    }
    ngAfterViewInit() {
        this.afterViewInit();
    }
    afterViewInit() {
        this.verifyAutoFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    eventOnInput(e) {
        let value = '';
        if (!this.mask) {
            value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
        }
        else {
            this.objMask.blur(e);
            this.inputEl.nativeElement.value = this.objMask.valueToInput;
            value = this.objMask.valueToModel;
        }
        this.inputEl.nativeElement.value = this.upperCase
            ? String(this.inputEl.nativeElement.value).toUpperCase()
            : this.inputEl.nativeElement.value;
        value = this.upperCase ? value.toUpperCase() : value;
        this.callOnChange(value);
    }
    validMaxLength(maxlength, value) {
        return (maxlength || maxlength === 0) && value.length > maxlength
            ? value.toString().substring(0, maxlength)
            : value;
    }
    eventOnFocus(e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur(e) {
        this.onTouched?.();
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    eventOnClick(e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    validateClassesForPattern() {
        const value = this.getScreenValue();
        const element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    }
    validateClassesForMask(keyDown = false) {
        const element = this.el.nativeElement;
        const elementValue = this.inputEl.nativeElement.value;
        if (!keyDown && !elementValue) {
            element.classList.add('ng-invalid-mask');
        }
        else {
            element.classList.remove('ng-invalid-mask');
        }
    }
    verifyPattern(pattern, value) {
        return new RegExp(pattern).test(value);
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    writeValueModel(value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.validateInitMask();
            this.changeModel.emit(value);
        }
    }
    getScreenValue() {
        const screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
        if (this.type === 'number') {
            const parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    }
    validateInitMask() {
        if (this.mask) {
            this.validateClassesForMask();
        }
    }
    static ɵfac = function PoInputGeneric_Factory(t) { return new (t || PoInputGeneric)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputGeneric, viewQuery: function PoInputGeneric_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, hostBindings: function PoInputGeneric_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("keydown", function PoInputGeneric_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("keyup", function PoInputGeneric_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); });
        } }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputGeneric, [{
        type: Directive
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onKeyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,