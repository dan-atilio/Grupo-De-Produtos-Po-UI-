import { EventEmitter, Input, Output, Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
export class PoCleanBaseComponent {
    /** Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizará o po-clean. */
    inputRef;
    /** Valor que será atribuído ao campo quando for clicado no po-clean. */
    defaultValue = '';
    /**
     * @optional
     *
     * @description
     *
     *
     * Evento disparado quando executada ação do po-clean.
     * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
     * e provavelmente será preciso emitir o evento para atualizar o model.
     */
    changeEvent = new EventEmitter();
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return this.defaultValue !== this.getInputValue();
    }
    static ɵfac = function PoCleanBaseComponent_Factory(t) { return new (t || PoCleanBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCleanBaseComponent, inputs: { inputRef: [i0.ɵɵInputFlags.None, "p-element-ref", "inputRef"], defaultValue: [i0.ɵɵInputFlags.None, "p-default-value", "defaultValue"] }, outputs: { changeEvent: "p-change-event" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanBaseComponent, [{
        type: Directive
    }], null, { inputRef: [{
            type: Input,
            args: ['p-element-ref']
        }], defaultValue: [{
            type: Input,
            args: ['p-default-value']
        }], changeEvent: [{
            type: Output,
            args: ['p-change-event']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY2xlYW4vcG8tY2xlYW4tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFbkY7Ozs7Ozs7R0FPRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBQ3hDLG9HQUFvRztJQUM1RSxRQUFRLENBQWE7SUFFN0Msd0VBQXdFO0lBQzlDLFlBQVksR0FBWSxFQUFFLENBQUM7SUFFckQ7Ozs7Ozs7OztPQVNHO0lBQ3VCLFdBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUVuRixLQUFLO1FBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNwRCxDQUFDOzhFQTFCbUIsb0JBQW9COzZEQUFwQixvQkFBb0I7O2lGQUFwQixvQkFBb0I7Y0FEekMsU0FBUztnQkFHZ0IsUUFBUTtrQkFBL0IsS0FBSzttQkFBQyxlQUFlO1lBR0ksWUFBWTtrQkFBckMsS0FBSzttQkFBQyxpQkFBaUI7WUFZRSxXQUFXO2tCQUFwQyxNQUFNO21CQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIMOpIGRlIHVzbyBpbnRlcm5vIHV0aWxpemFkbyBwb3IgY29tcG9uZW50ZXMgZGUgZW50cmFkYSBkZSBkYWRvcyBjb20gbyBvYmpldGl2byBkZSByZXNldGFyIGFzIGluZm9ybWHDp8O1ZXMgZG8gbW9kZWwuXG4gKlxuICogUG9yIHBhZHLDo28gbGltcGEgbyB2YWxvciBkbyBjYW1wbyBlIGV4ZWN1dGEgbyBtw6l0b2RvIG9uQ2hhbmdlUHJvcGFnYXRlLCBjYXNvIHRlbmhhIGEgbmVjZXNzaWRhZGUgZGUgdHJhdGFyIGEgZnVuw6fDo28gZGUgbGltcGFyIG8gY2FtcG8sXG4gKiBkZXZlIGltcGxlbWVudGFyIGEgaW50ZXJmYWNlIFBvQ2xlYW4uXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2xlYW5CYXNlQ29tcG9uZW50IHtcbiAgLyoqIE5lc3RhIHByb3ByaWVkYWRlIGRldmUtc2UgaW5mb3JtYXIgbyBlbGVtZW50UmVmIGRvIGNhbXBvIGRlIGVudHJhZGEgcXVlIHV0aWxpemFyw6EgbyBwby1jbGVhbi4gKi9cbiAgQElucHV0KCdwLWVsZW1lbnQtcmVmJykgaW5wdXRSZWY6IEVsZW1lbnRSZWY7XG5cbiAgLyoqIFZhbG9yIHF1ZSBzZXLDoSBhdHJpYnXDrWRvIGFvIGNhbXBvIHF1YW5kbyBmb3IgY2xpY2FkbyBubyBwby1jbGVhbi4gKi9cbiAgQElucHV0KCdwLWRlZmF1bHQtdmFsdWUnKSBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKlxuICAgKiBFdmVudG8gZGlzcGFyYWRvIHF1YW5kbyBleGVjdXRhZGEgYcOnw6NvIGRvIHBvLWNsZWFuLlxuICAgKiBFc3RlIGV2ZW50byBkZXZlIHNlciB1c2FkbyBwYXJhIGF2aXNhciBwYXJhIG8gY29tcG9uZW50ZSBxdWUgZXN0w6EgdXNhbmRvIG8gcG8tY2xlYW4sIHF1ZSBvIGJvdMOjbyBmb2kgZGlzcGFyYWRvLFxuICAgKiBlIHByb3ZhdmVsbWVudGUgc2Vyw6EgcHJlY2lzbyBlbWl0aXIgbyBldmVudG8gcGFyYSBhdHVhbGl6YXIgbyBtb2RlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlLWV2ZW50JykgY2hhbmdlRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB0aGlzLmNoYW5nZUV2ZW50LmVtaXQodGhpcy5kZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgc2hvd0ljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlICE9PSB0aGlzLmdldElucHV0VmFsdWUoKTtcbiAgfVxuXG4gIGFic3RyYWN0IHNldElucHV0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgZ2V0SW5wdXRWYWx1ZSgpOiBzdHJpbmc7XG59XG4iXX0=