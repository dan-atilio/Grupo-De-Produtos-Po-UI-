import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoMultiselectFilterService {
    http;
    fieldLabel = 'label';
    fieldValue = 'value';
    _url;
    messages = [];
    get url() {
        return this._url;
    }
    constructor(http) {
        this.http = http;
    }
    getFilteredData({ value }) {
        const params = value ? { filter: value } : {};
        return this.http
            .get(this.url, {
            params
        })
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    getObjectsByValues(value) {
        return this.http
            .get(`${this.url}?${this.fieldValue}=${value.toString()}`)
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayMultiselectOptions(items) {
        if (items && items.length > 0) {
            return items.map(item => this.parseToMultiselectOption(item));
        }
        return [];
    }
    parseToMultiselectOption(item) {
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { [this.fieldLabel]: label, [this.fieldValue]: value };
    }
    static ɵfac = function PoMultiselectFilterService_Factory(t) { return new (t || PoMultiselectFilterService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMultiselectFilterService, factory: PoMultiselectFilterService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectFilterService, [{
        type: Injectable
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3QtZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbXVsdGlzZWxlY3QvcG8tbXVsdGlzZWxlY3QtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUtyQyxNQUFNLE9BQU8sMEJBQTBCO0lBV2pCO0lBVnBCLFVBQVUsR0FBVyxPQUFPLENBQUM7SUFDN0IsVUFBVSxHQUFXLE9BQU8sQ0FBQztJQUVyQixJQUFJLENBQVM7SUFDYixRQUFRLEdBQUcsRUFBRSxDQUFDO0lBRXRCLElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFHLENBQUM7SUFFeEMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFPO1FBQzVCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNO1NBQ1AsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUE2QjtRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO2FBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRU8sOEJBQThCLENBQUMsS0FBaUI7UUFDdEQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyx3QkFBd0IsQ0FBQyxJQUFTO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ2hFLENBQUM7b0ZBL0NVLDBCQUEwQjtnRUFBMUIsMEJBQTBCLFdBQTFCLDBCQUEwQjs7aUZBQTFCLDBCQUEwQjtjQUR0QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBvTXVsdGlzZWxlY3RGaWx0ZXIgfSBmcm9tICcuL3BvLW11bHRpc2VsZWN0LWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9NdWx0aXNlbGVjdE9wdGlvbiB9IGZyb20gJy4vcG8tbXVsdGlzZWxlY3Qtb3B0aW9uLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb011bHRpc2VsZWN0RmlsdGVyU2VydmljZSBpbXBsZW1lbnRzIFBvTXVsdGlzZWxlY3RGaWx0ZXIge1xuICBmaWVsZExhYmVsOiBzdHJpbmcgPSAnbGFiZWwnO1xuICBmaWVsZFZhbHVlOiBzdHJpbmcgPSAndmFsdWUnO1xuXG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuICBwcml2YXRlIG1lc3NhZ2VzID0gW107XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0RmlsdGVyZWREYXRhKHsgdmFsdWUgfTogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxQb011bHRpc2VsZWN0T3B0aW9uIHwgYW55Pj4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHZhbHVlID8geyBmaWx0ZXI6IHZhbHVlIH0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMudXJsLCB7XG4gICAgICAgIHBhcmFtc1xuICAgICAgfSlcbiAgICAgIC5waXBlKG1hcChyZXNwb25zZSA9PiB0aGlzLnBhcnNlVG9BcnJheU11bHRpc2VsZWN0T3B0aW9ucyhyZXNwb25zZVsnaXRlbXMnXSkpKTtcbiAgfVxuXG4gIGdldE9iamVjdHNCeVZhbHVlcyh2YWx1ZTogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPik6IE9ic2VydmFibGU8QXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbiB8IGFueT4+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfT8ke3RoaXMuZmllbGRWYWx1ZX09JHt2YWx1ZS50b1N0cmluZygpfWApXG4gICAgICAucGlwZShtYXAocmVzcG9uc2UgPT4gdGhpcy5wYXJzZVRvQXJyYXlNdWx0aXNlbGVjdE9wdGlvbnMocmVzcG9uc2VbJ2l0ZW1zJ10pKSk7XG4gIH1cblxuICBjb25maWdQcm9wZXJ0aWVzKHVybDogc3RyaW5nLCBmaWVsZExhYmVsOiBzdHJpbmcsIGZpZWxkVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLmZpZWxkTGFiZWwgPSBmaWVsZExhYmVsO1xuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9BcnJheU11bHRpc2VsZWN0T3B0aW9ucyhpdGVtczogQXJyYXk8YW55Pik6IEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24gfCBhbnk+IHtcbiAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHRoaXMucGFyc2VUb011bHRpc2VsZWN0T3B0aW9uKGl0ZW0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9NdWx0aXNlbGVjdE9wdGlvbihpdGVtOiBhbnkpOiBQb011bHRpc2VsZWN0T3B0aW9uIHwgYW55IHtcbiAgICBjb25zdCBsYWJlbCA9IGl0ZW1bdGhpcy5maWVsZExhYmVsXTtcbiAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcblxuICAgIHJldHVybiB7IFt0aGlzLmZpZWxkTGFiZWxdOiBsYWJlbCwgW3RoaXMuZmllbGRWYWx1ZV06IHZhbHVlIH07XG4gIH1cbn1cbiJdfQ==