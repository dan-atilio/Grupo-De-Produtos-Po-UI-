import { Component, ElementRef, forwardRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoDatepickerRangeBaseComponent } from './po-datepicker-range-base.component';
import { replaceFormatSeparator } from './../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/po-control-position/po-control-position.service";
import * as i2 from "../../../services/po-language/po-language.service";
import * as i3 from "./../../../services/po-date/po-date.service";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../po-clean/po-clean.component";
import * as i7 from "../../po-calendar/po-calendar.component";
import * as i8 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i9 from "../po-field-container/po-field-container.component";
import * as i10 from "../../po-icon/po-icon.component";
const _c0 = ["dateRangeField"];
const _c1 = ["endDateInput"];
const _c2 = ["startDateInput"];
const _c3 = ["iconCalendar"];
const _c4 = ["calendarPicker"];
function PoDatepickerRangeComponent_po_clean_12_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 15);
    i0.ɵɵlistener("p-change-event", function PoDatepickerRangeComponent_po_clean_12_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.clear()); });
    i0.ɵɵelementEnd();
} }
function PoDatepickerRangeComponent_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 16, 17)(3, "po-calendar", 18);
    i0.ɵɵlistener("ngModelChange", function PoDatepickerRangeComponent_ng_container_17_Template_po_calendar_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onCalendarChange($event)); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngModel", ctx_r5.dateRange)("p-max-date", ctx_r5.maxDate)("p-min-date", ctx_r5.minDate)("p-locale", ctx_r5.locale);
} }
const arrowLeftKey = 37;
const arrowRightKey = 39;
const backspaceKey = 8;
const poDatepickerRangeDateLengthDefault = 10;
const poCalendarContentOffset = 8;
const poCalendarPositionDefault = 'bottom-left';
/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    PoControlPositionService
];
/**
 * @docsExtends PoDatepickerRangeBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
export class PoDatepickerRangeComponent extends PoDatepickerRangeBaseComponent {
    changeDetector;
    controlPosition;
    renderer;
    cd;
    poLanguageService;
    dateRangeField;
    endDateInput;
    startDateInput;
    iconCalendar;
    calendarPicker;
    isCalendarVisible = false;
    clickListener;
    eventResizeListener;
    poDatepickerRangeElement;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    get enableCleaner() {
        return this.clean && (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
    }
    get endDateInputName() {
        return 'end-date';
    }
    get endDateInputValue() {
        return this.endDateInput.nativeElement.value;
    }
    get getErrorMessage() {
        return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
    }
    get isDateRangeInputUncompleted() {
        return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
            this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
    }
    get isDirtyDateRangeInput() {
        return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
    }
    get startDateInputName() {
        return 'start-date';
    }
    get startDateInputValue() {
        return this.startDateInput.nativeElement.value;
    }
    constructor(changeDetector, controlPosition, renderer, cd, poLanguageService, poDateService, poDatepickerRangeElement) {
        super(poDateService, poLanguageService);
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.cd = cd;
        this.poLanguageService = poLanguageService;
        this.poDatepickerRangeElement = poDatepickerRangeElement;
    }
    static getKeyCode(event) {
        return event.keyCode || event.which;
    }
    static getTargetElement(event) {
        return event.target || event.srcElement;
    }
    static isValidKey(keyCode) {
        const isNumericKey = keyCode >= 48 && keyCode <= 57;
        const isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnInit() {
        // Classe de máscara
        this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.poLanguageService.getDateSeparator(this.locale)));
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.validateModel(this.dateRange);
        }
        if (changes.locale) {
            if (this.dateRange) {
                this.updateScreenByModel(this.dateRange);
            }
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.poLanguageService.getDateSeparator(this.locale)));
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    clear() {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    eventOnClick($event) {
        this.poMaskObject.click($event);
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    }
    onBlur(event) {
        this.onTouchedModel?.();
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.updateModelByScreen(isStartDateTargetEvent);
        this.removeFocusFromDatePickerRangeField();
    }
    onCalendarChange({ start, end }) {
        const isStartDateTargetEvent = start && !end;
        this.updateScreenByModel({ start: start || '', end: end || '' });
        this.updateModelByScreen(isStartDateTargetEvent, start || '', end || '');
        if (start && end) {
            setTimeout(() => {
                this.isCalendarVisible = false;
                this.cd.markForCheck();
            }, 300);
        }
    }
    onFocus(event) {
        this.applyFocusOnDatePickerRangeField();
        this.poMaskObject.resetPositions(event);
    }
    onKeydown(event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    }
    onKeyup(event) {
        if (this.readonly) {
            return;
        }
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelWhenComplete(isStartDateTargetEvent, this.startDateInputValue, this.endDateInputValue);
    }
    resetDateRangeInputValidation() {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    }
    toggleCalendar() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.isCalendarVisible = !this.isCalendarVisible;
        this.changeDetector.detectChanges();
        if (this.isCalendarVisible) {
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    }
    updateScreenByModel(model) {
        const dateRange = { start: model.start, end: model.end };
        const isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        const isDateValid = date => !this.dateFormatFailed(date) && isStartDateValid;
        const endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        const startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
        this.changeDetector.detectChanges();
    }
    applyFocusOnDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    }
    formatDate(format, day = '', month = '', year = '') {
        let dateFormatted = replaceFormatSeparator(format || this.format, this.poLanguageService.getDateSeparator(this.locale));
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    }
    formatScreenToModel(value = '') {
        const [day, month, year] = value.split(this.poLanguageService.getDateSeparator(this.locale));
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    }
    formatModelToScreen(value = '') {
        const [year, month, day] = value.split('-');
        return value ? this.formatDate(this.format, day, month, year) : '';
    }
    getDateRangeFormatValidation(startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid && this.verifyValidDate(startDate, endDate),
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    }
    getValidatedModel(startDate, endDate, isStartDateTargetEvent) {
        const dateRangeModel = { start: '', end: '' };
        dateRangeModel.end =
            (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start =
            (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                ? startDate
                : '';
        return dateRangeModel;
    }
    hasAttrCalendar(element) {
        const attrCalendar = 'attr-calendar';
        return element?.hasAttribute(attrCalendar) || element?.parentElement?.hasAttribute(attrCalendar);
    }
    hasInvalidClass() {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.isCalendarVisible = false;
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    isEqualBeforeValue(startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    }
    isSetFocusOnBackspace(event) {
        return (event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 &&
            this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey);
    }
    onScroll = () => {
        if (this.isCalendarVisible) {
            this.controlPosition.adjustPosition(poCalendarPositionDefault);
        }
    };
    removeFocusFromDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    }
    setDateRangeInputValidation(startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    }
    setFocus(event) {
        const inputElement = PoDatepickerRangeComponent.getTargetElement(event);
        const keyCode = PoDatepickerRangeComponent.getKeyCode(event);
        const inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    }
    setFocusAndPosition(position, inputElement, selectionRange) {
        this.focusOnElement(inputElement);
        setTimeout(() => {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            this.poMaskObject.initialPosition = position;
            this.poMaskObject.finalPosition = position;
        });
    }
    focusOnElement(inputElement) {
        inputElement.nativeElement.focus();
    }
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setCalendarPosition() {
        this.controlPosition.setElements(this.calendarPicker.nativeElement, poCalendarContentOffset, this.dateRangeField, ['bottom-left', 'bottom-right', 'top-left', 'top-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    }
    setFocusOnArrowLeft(keyCode, inputName) {
        const isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            const inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    }
    setFocusOnArrowRight(keyCode, inputName, inputElement) {
        const isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    setFocusOnBackspace() {
        const inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    }
    setFocusOnStartDateCompleted(keyCode, inputName) {
        const isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        const isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        const isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    updateModelWhenComplete(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = this.formatScreenToModel(endDate);
        const startDateFormatted = this.formatScreenToModel(startDate);
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit({ ...this.dateRange });
        }
    }
    updateModelByScreen(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = endDate || this.formatScreenToModel(this.endDateInputValue);
        const startDateFormatted = startDate || this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit({ ...this.dateRange });
        }
        if (!dateFormatValidation.isValid && this.verifyFormattedDates(startDateFormatted, endDateFormatted)) {
            this.dateRange = { ...dateFormatValidation.dateRangeModel };
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    }
    verifyFormattedDates(start, end) {
        return !!start || !!end;
    }
    wasClickedOnPicker(event) {
        if (!this.isCalendarVisible) {
            return;
        }
        if (!this.calendarPicker.nativeElement.contains(event.target) &&
            !this.iconCalendar.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.isCalendarVisible = false;
        }
        this.cd.markForCheck();
    }
    static ɵfac = function PoDatepickerRangeComponent_Factory(t) { return new (t || PoDatepickerRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PoControlPositionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.PoLanguageService), i0.ɵɵdirectiveInject(i3.PoDateService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDatepickerRangeComponent, selectors: [["po-datepicker-range"]], viewQuery: function PoDatepickerRangeComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ElementRef);
            i0.ɵɵviewQuery(_c1, 7, ElementRef);
            i0.ɵɵviewQuery(_c2, 7, ElementRef);
            i0.ɵɵviewQuery(_c3, 7, ElementRef);
            i0.ɵɵviewQuery(_c4, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateRangeField = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconCalendar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendarPicker = _t.first);
        } }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 18, vars: 30, consts: [[3, "p-disabled", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-datepicker-range-field", "po-input"], ["dateRangeField", ""], [1, "po-datepicker-range-start-date"], ["maxlength", "10", "type", "text", 1, "po-datepicker-range-input", 3, "autocomplete", "disabled", "name", "readonly", "blur", "focus", "keydown", "keyup", "click"], ["startDateInput", ""], [1, "po-datepicker-range-separator"], [1, "po-datepicker-range-end-date"], ["endDateInput", ""], [1, "po-datepicker-range-icon"], ["class", "po-icon-input", 3, "p-change-event", 4, "ngIf"], [3, "p-icon", "click"], ["iconCalendar", ""], [3, "p-help", "p-disabled", "p-error-pattern"], [4, "ngIf"], [1, "po-icon-input", 3, "p-change-event"], [1, "po-calendar-range-picker"], ["calendarPicker", ""], ["p-mode", "range", 3, "ngModel", "p-max-date", "p-min-date", "p-locale", "ngModelChange"]], template: function PoDatepickerRangeComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2)(3, "div", 3)(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_4_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_4_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_4_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtext(7, "-");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 7)(9, "input", 4, 8);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_9_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_9_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_9_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_9_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_9_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(11, "div", 9);
            i0.ɵɵtemplate(12, PoDatepickerRangeComponent_po_clean_12_Template, 1, 0, "po-clean", 10);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(13, "div", 9)(14, "po-icon", 11, 12);
            i0.ɵɵlistener("click", function PoDatepickerRangeComponent_Template_po_icon_click_14_listener() { return ctx.toggleCalendar(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵelement(16, "po-field-container-bottom", 13);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(17, PoDatepickerRangeComponent_ng_container_17_Template, 4, 4, "ng-container", 14);
        } if (rf & 2) {
            i0.ɵɵclassProp("po-date-picker-container-disabled", ctx.disabled);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-datepicker-range-field-disabled", ctx.disabled);
            i0.ɵɵattribute("disabled", ctx.disabled);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.startDateInputName)("readonly", ctx.readonly);
            i0.ɵɵattribute("aria-label", ctx.label);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.endDateInputName)("readonly", ctx.readonly);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.enableCleaner);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled || ctx.readonly);
            i0.ɵɵproperty("p-icon", !ctx.disabled || !ctx.readonly ? "ICON_CALENDAR po-clickable" : "ICON_CALENDAR");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorMessage);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isCalendarVisible);
        } }, dependencies: [i4.NgIf, i5.NgControlStatus, i5.NgModel, i6.PoCleanComponent, i7.PoCalendarComponent, i8.PoFieldContainerBottomComponent, i9.PoFieldContainerComponent, i10.PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeComponent, [{
        type: Component,
        args: [{ selector: 'po-datepicker-range', providers: providers, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container\n  [class.po-date-picker-container-disabled]=\"disabled\"\n  [p-disabled]=\"disabled\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div\n    #dateRangeField\n    class=\"po-datepicker-range-field po-input\"\n    [class.po-datepicker-range-field-disabled]=\"disabled\"\n    [attr.disabled]=\"disabled\"\n  >\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [attr.aria-label]=\"label\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean class=\"po-icon-input\" *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-icon\n        #iconCalendar\n        [p-icon]=\"!disabled || !readonly ? 'ICON_CALENDAR po-clickable' : 'ICON_CALENDAR'\"\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"toggleCalendar()\"\n      >\n      </po-icon>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorMessage\"\n  ></po-field-container-bottom>\n</po-field-container>\n\n<ng-container *ngIf=\"isCalendarVisible\">\n  <div #calendarPicker class=\"po-calendar-range-picker\">\n    <po-calendar\n      p-mode=\"range\"\n      [ngModel]=\"dateRange\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      [p-locale]=\"locale\"\n      (ngModelChange)=\"onCalendarChange($event)\"\n    ></po-calendar>\n  </div>\n</ng-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i1.PoControlPositionService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.PoLanguageService }, { type: i3.PoDateService }, { type: i0.ElementRef }], { dateRangeField: [{
            type: ViewChild,
            args: ['dateRangeField', { read: ElementRef, static: true }]
        }], endDateInput: [{
            type: ViewChild,
            args: ['endDateInput', { read: ElementRef, static: true }]
        }], startDateInput: [{
            type: ViewChild,
            args: ['startDateInput', { read: ElementRef, static: true }]
        }], iconCalendar: [{
            type: ViewChild,
            args: ['iconCalendar', { read: ElementRef, static: true }]
        }], calendarPicker: [{
            type: ViewChild,
            args: ['calendarPicker', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDatepickerRangeComponent, { className: "PoDatepickerRangeComponent", filePath: "lib/components/po-field/po-datepicker-range/po-datepicker-range.component.ts", lineNumber: 82 }); })();
//# sourceMappingURL=data:application/json;base64,