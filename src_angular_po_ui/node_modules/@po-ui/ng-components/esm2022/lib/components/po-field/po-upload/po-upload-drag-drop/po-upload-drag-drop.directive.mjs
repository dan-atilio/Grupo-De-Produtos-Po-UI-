import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/po-i18n/po-i18n.pipe";
import * as i2 from "../../../../services/po-notification/po-notification.service";
export class PoUploadDragDropDirective {
    i18nPipe;
    notification;
    areaElement;
    directoryCompatible;
    disabled;
    literals;
    dragLeave = new EventEmitter();
    dragOver = new EventEmitter();
    fileChange = new EventEmitter();
    timeout;
    files;
    invalidFileType;
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(() => this.dragLeave.emit(), 30);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(() => {
                    this.sendFiles(event, this.files);
                });
            }
            else {
                const files = this.getOnlyFiles(event.dataTransfer);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    async getFilesFromEntry(entry) {
        if (entry.isFile) {
            const file = await this.readFile(entry);
            return [file];
        }
        else if (entry.isDirectory) {
            return await this.readDirectory(entry);
        }
    }
    async getOnlyDirectories(dataTransferItems) {
        const entries = [];
        // lista todas as entradas antes de analisá-las
        for (const item of dataTransferItems) {
            entries.push(item.webkitGetAsEntry());
        }
        this.files = [];
        for (const entry of entries) {
            if (entry.isFile) {
                this.invalidFileType++;
            }
            else {
                const newFiles = await this.getFilesFromEntry(entry);
                this.files = this.files.concat(newFiles);
            }
        }
    }
    // return only files. If it is a directory, invalidFileType counts.
    getOnlyFiles(dataTransfer) {
        const fileList = Array.from(dataTransfer.files);
        const entriesFiles = Array.from(dataTransfer.items).map(item => item.webkitGetAsEntry());
        return fileList.reduce((newFiles, file) => {
            const entryFile = entriesFiles.find(entry => entry.name === file.name);
            if (entryFile.isFile) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }, []);
    }
    readFile(entry) {
        return new Promise(resolve => {
            entry.file(file => {
                resolve(file);
            });
        });
    }
    async readDirectory(entry) {
        const dirReader = entry.createReader();
        let files = [];
        const newFiles = await this.readDirectoryEntries(dirReader);
        files = files.concat(newFiles);
        return files;
    }
    readDirectoryEntries(dirReader) {
        return new Promise(resolve => {
            dirReader.readEntries(async (entries) => {
                let files = [];
                for (const entry of entries) {
                    const itemFiles = await this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            });
        });
    }
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    setPipeArguments(literalAttributes, args) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
    static ɵfac = function PoUploadDragDropDirective_Factory(t) { return new (t || PoUploadDragDropDirective)(i0.ɵɵdirectiveInject(i1.PoI18nPipe), i0.ɵɵdirectiveInject(i2.PoNotificationService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoUploadDragDropDirective, selectors: [["", "p-upload-drag-drop", ""]], hostBindings: function PoUploadDragDropDirective_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("dragleave", function PoUploadDragDropDirective_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); }, false, i0.ɵɵresolveDocument)("dragover", function PoUploadDragDropDirective_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); }, false, i0.ɵɵresolveDocument)("drop", function PoUploadDragDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); }, false, i0.ɵɵresolveDocument);
        } }, inputs: { areaElement: [i0.ɵɵInputFlags.None, "p-area-element", "areaElement"], directoryCompatible: [i0.ɵɵInputFlags.None, "p-directory-compatible", "directoryCompatible"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"] }, outputs: { dragLeave: "p-drag-leave", dragOver: "p-drag-over", fileChange: "p-file-change" }, features: [i0.ɵɵProvidersFeature([PoI18nPipe])] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropDirective, [{
        type: Directive,
        args: [{
                selector: '[p-upload-drag-drop]',
                providers: [PoI18nPipe]
            }]
    }], () => [{ type: i1.PoI18nPipe }, { type: i2.PoNotificationService }], { areaElement: [{
            type: Input,
            args: ['p-area-element']
        }], directoryCompatible: [{
            type: Input,
            args: ['p-directory-compatible']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], dragLeave: [{
            type: Output,
            args: ['p-drag-leave']
        }], dragOver: [{
            type: Output,
            args: ['p-drag-over']
        }], fileChange: [{
            type: Output,
            args: ['p-file-change']
        }], onDragLeave: [{
            type: HostListener,
            args: ['document:dragleave', ['$event']]
        }], onDragOver: [{
            type: HostListener,
            args: ['document:dragover', ['$event']]
        }], onDrop: [{
            type: HostListener,
            args: ['document:drop', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,