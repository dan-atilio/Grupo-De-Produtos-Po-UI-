import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, uuid } from './../../../utils/util';
import { PoCheckboxSize } from './po-checkbox-size.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado/mixed e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado/mixed.
 *
 * **Acessibilidade tratada no componente:**
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A cor não deve ser o único meio para diferenciar o componente do seu estado marcado e desmarcado. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                                    | Valor Padrão                                    |
 * |----------------------------------------|--------------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                              |                                                 |
 * | `--border-color`                       | Cor da borda                                                 | `var(--color-neutral-dark-70)`                  |
 * | `--color-unchecked`                    | Cor quando não selecionado                                   | `var(--color-neutral-light-00)`                 |
 * | `--color-checked`                      | Cor quando selecionado                                       | `var(--color-action-default)`                   |
 * | **Hover**                              |                                                              |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                                | `var(--color-action-hover)`                     |
 * | `--shadow-color-hover`                 | Cor da sombra no estado hover                                | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                              |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                            | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                              |                                                 |
 * | `--color-unchecked-disabled` &nbsp;    | Cor pricipal quando não selecionado no estado disabled&nbsp; | `var(--color-action-disabled)`                  |
 * | `--color-checked-disabled` &nbsp;      | Cor pricipal quando selecionado no estado disabled           | `var(--color-neutral-dark-70)`                  |
 *
 */
export class PoCheckboxBaseComponent {
    /** Define o nome do *checkbox*. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Texto de exibição do *checkbox*. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado quando o valor do *checkbox* for alterado.
     */
    change = new EventEmitter();
    //propriedade interna recebida do checkbox-group para verificar se o checkbox está ativo, inativo ou indeterminate
    checkboxValue;
    //propriedade interna recebida do checkbox-group para verificar se o checkbox é required
    checkBoxRequired;
    //propriedade interna recebida para desabilitar o tabindex do checkbox na utilização dentro de um list-box
    disabladTabindex = false;
    id = uuid();
    propagateChange;
    onTouched;
    _disabled = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    _size = PoCheckboxSize.medium;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *checkbox*
     *
     * Valores válidos:
     * - `medium`: o `po-checkbox` fica do tamanho padrão, com 24px de altura.;
     * - `large`: o `po-checkbox` fica maior, com 32px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value) {
        this._size = PoCheckboxSize[value] ? PoCheckboxSize[value] : PoCheckboxSize.medium;
    }
    get size() {
        return this._size;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    }
    checkOption(value) {
        if (!this.disabled) {
            value === 'mixed' ? this.changeModelValue(true) : this.changeModelValue(!value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    }
    static ɵfac = function PoCheckboxBaseComponent_Factory(t) { return new (t || PoCheckboxBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxBaseComponent, inputs: { name: "name", autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], checkboxValue: [i0.ɵɵInputFlags.None, "p-checkboxValue", "checkboxValue"], checkBoxRequired: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-required", "checkBoxRequired", convertToBoolean], disabladTabindex: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled-tabindex", "disabladTabindex", convertToBoolean], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxBaseComponent, [{
        type: Directive
    }], null, { name: [{
            type: Input,
            args: ['name']
        }], autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], checkboxValue: [{
            type: Input,
            args: ['p-checkboxValue']
        }], checkBoxRequired: [{
            type: Input,
            args: [{ alias: 'p-required', transform: convertToBoolean }]
        }], disabladTabindex: [{
            type: Input,
            args: [{ alias: 'p-disabled-tabindex', transform: convertToBoolean }]
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,