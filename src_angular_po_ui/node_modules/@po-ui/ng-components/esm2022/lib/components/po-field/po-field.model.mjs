import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import * as i0 from "@angular/core";
export class PoFieldModel {
    /** Rótulo exibido pelo componente. */
    label;
    /** Nome do componente. */
    name;
    /** Texto de apoio para o campo. */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    disabled = false;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    change = new EventEmitter();
    value;
    onTouched;
    propagateChange;
    constructor() { }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        this.onWriteValue(value);
    }
    emitChange(value) {
        this.change.emit(value);
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    static ɵfac = function PoFieldModel_Factory(t) { return new (t || PoFieldModel)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoFieldModel, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], name: "name", help: [i0.ɵɵInputFlags.None, "p-help", "help"], disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabled", convertToBoolean] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldModel, [{
        type: Directive
    }], () => [], { label: [{
            type: Input,
            args: ['p-label']
        }], name: [{
            type: Input,
            args: ['name']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], disabled: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], change: [{
            type: Output,
            args: ['p-change']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZmllbGQubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tZmllbGQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFHcEQsTUFBTSxPQUFnQixZQUFZO0lBQ2hDLHNDQUFzQztJQUNwQixLQUFLLENBQVM7SUFFaEMsMEJBQTBCO0lBQ1gsSUFBSSxDQUFTO0lBRTVCLG1DQUFtQztJQUNsQixJQUFJLENBQVM7SUFFOUI7Ozs7Ozs7O09BUUc7SUFDMEQsUUFBUSxHQUFZLEtBQUssQ0FBQztJQUV2Rjs7Ozs7O09BTUc7SUFDaUIsTUFBTSxHQUFvQixJQUFJLFlBQVksRUFBSyxDQUFDO0lBRXBFLEtBQUssQ0FBSTtJQUVDLFNBQVMsQ0FBQztJQUVaLGVBQWUsQ0FBTTtJQUU3QixnQkFBZSxDQUFDO0lBRWhCLDhDQUE4QztJQUM5QyxnRUFBZ0U7SUFDaEUsZ0JBQWdCLENBQUMsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQU87UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELGlCQUFpQixDQUFDLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFRO1FBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFRO1FBQzVCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztzRUFoRW1CLFlBQVk7NkRBQVosWUFBWSw4TUFtQlMsZ0JBQWdCOztpRkFuQnJDLFlBQVk7Y0FEakMsU0FBUztvQkFHVSxLQUFLO2tCQUF0QixLQUFLO21CQUFDLFNBQVM7WUFHRCxJQUFJO2tCQUFsQixLQUFLO21CQUFDLE1BQU07WUFHSSxJQUFJO2tCQUFwQixLQUFLO21CQUFDLFFBQVE7WUFXOEMsUUFBUTtrQkFBcEUsS0FBSzttQkFBQyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO1lBU3ZDLE1BQU07a0JBQXpCLE1BQU07bUJBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb0ZpZWxkTW9kZWw8VD4gaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8qKiBSw7N0dWxvIGV4aWJpZG8gcGVsbyBjb21wb25lbnRlLiAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8qKiBOb21lIGRvIGNvbXBvbmVudGUuICovXG4gIEBJbnB1dCgnbmFtZScpIG5hbWU6IHN0cmluZztcblxuICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xuICBASW5wdXQoJ3AtaGVscCcpIGhlbHA6IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbmRpY2Egc2UgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCh7IGFsaWFzOiAncC1kaXNhYmxlZCcsIHRyYW5zZm9ybTogY29udmVydFRvQm9vbGVhbiB9KSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBkaXNwYXJhZG8gYW8gYWx0ZXJhciB2YWxvciBkbyBjYW1wby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlJykgY2hhbmdlOiBFdmVudEVtaXR0ZXI8VD4gPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XG5cbiAgdmFsdWU6IFQ7XG5cbiAgcHJvdGVjdGVkIG9uVG91Y2hlZDtcblxuICBwcml2YXRlIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvLyBGdW7Dp8OjbyBpbXBsZW1lbnRhZGEgZG8gQ29udHJvbFZhbHVlQWNjZXNzb3JcbiAgLy8gVXNhZGEgcGFyYSBpbnRlcmNlcHRhciBvcyBlc3RhZG9zIGRlIGhhYmlsaXRhZG8gdmlhIGZvcm1zIGFwaVxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLm9uV3JpdGVWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBlbWl0Q2hhbmdlKHZhbHVlKSB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdXBkYXRlTW9kZWwodmFsdWU6IFQpIHtcbiAgICBpZiAodGhpcy5wcm9wYWdhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBhYnN0cmFjdCBvbldyaXRlVmFsdWUodmFsdWU6IFQpOiB2b2lkO1xufVxuIl19