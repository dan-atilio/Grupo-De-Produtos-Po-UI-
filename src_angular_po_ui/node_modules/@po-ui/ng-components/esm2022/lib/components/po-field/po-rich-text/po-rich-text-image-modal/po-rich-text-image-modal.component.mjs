import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { convertImageToBase64 } from '../../../../utils/util';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import * as i0 from "@angular/core";
import * as i1 from "./../../../../services/po-language/po-language.service";
import * as i2 from "@angular/forms";
import * as i3 from "../../../po-modal/po-modal.component";
import * as i4 from "../../po-upload/po-upload.component";
import * as i5 from "../../po-url/po-url.component";
const _c0 = ["modal"];
const _c1 = ["modalImageForm"];
const _c2 = ["upload"];
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
export class PoRichTextImageModalComponent {
    languageService;
    modal;
    modalImageForm;
    upload;
    command = new EventEmitter();
    savedCursorPosition;
    selection = document.getSelection();
    uploadModel;
    uploadRestrictions = {
        allowedExtensions: uploadRestrictions
    };
    urlImage;
    literals;
    modalCancelAction;
    modalConfirmAction;
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = {
            ...poRichTextLiteralsDefault[this.languageService.getShortLanguage()]
        };
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
    }
    openModal() {
        this.saveCursorPosition();
        this.modal.open();
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.uploadModel = undefined;
    }
    async convertToBase64() {
        if (this.isUploadValid) {
            const uploadImage = this.uploadModel[0].rawFile;
            return await convertImageToBase64(uploadImage);
        }
    }
    emitCommand(value) {
        let command;
        if (value) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    async insertElementRef() {
        let uploadImage;
        if (!this.urlImage) {
            uploadImage = await this.convertToBase64();
        }
        this.retrieveCursorPosition();
        this.modal.close();
        if (this.isUrlValid || this.isUploadValid) {
            this.emitCommand(this.urlImage || uploadImage);
        }
        this.cleanUpFields();
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    static ɵfac = function PoRichTextImageModalComponent_Factory(t) { return new (t || PoRichTextImageModalComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextImageModalComponent, selectors: [["po-rich-text-image-modal"]], viewQuery: function PoRichTextImageModalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
            i0.ɵɵviewQuery(_c1, 5);
            i0.ɵɵviewQuery(_c2, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalImageForm = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.upload = _t.first);
        } }, outputs: { command: "p-command" }, decls: 9, vars: 10, consts: [["p-hide-close", "", 3, "p-primary-action", "p-secondary-action", "p-title"], ["modal", ""], ["modalImageForm", "ngForm"], [1, "po-row"], ["name", "upload", "p-drag-drop-height", "160", "p-hide-restrictions-info", "", "p-hide-send-button", "", "p-url", "x", 1, "po-md-12", 3, "ngModel", "p-drag-drop", "p-disabled", "p-restrictions", "ngModelChange"], ["upload", ""], ["name", "url", 1, "po-md-12", "po-mt-3", 3, "ngModel", "p-label", "p-disabled", "ngModelChange"]], template: function PoRichTextImageModalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0, 1)(2, "form", null, 2)(4, "div", 3)(5, "po-upload", 4, 5);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextImageModalComponent_Template_po_upload_ngModelChange_5_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.uploadModel, $event) || (ctx.uploadModel = $event); return $event; });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "div", 3)(8, "po-url", 6);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextImageModalComponent_Template_po_url_ngModelChange_8_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.urlImage, $event) || (ctx.urlImage = $event); return $event; });
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵproperty("p-primary-action", ctx.modalConfirmAction)("p-secondary-action", ctx.modalCancelAction)("p-title", ctx.literals.insertImage);
            i0.ɵɵadvance(5);
            i0.ɵɵtwoWayProperty("ngModel", ctx.uploadModel);
            i0.ɵɵproperty("p-drag-drop", !_r0.isHidden)("p-disabled", ctx.isUrlValid)("p-restrictions", ctx.uploadRestrictions);
            i0.ɵɵadvance(3);
            i0.ɵɵtwoWayProperty("ngModel", ctx.urlImage);
            i0.ɵɵproperty("p-label", ctx.literals.urlImage)("p-disabled", ctx.isUploadValid);
        } }, dependencies: [i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm, i3.PoModalComponent, i4.PoUploadComponent, i5.PoUrlComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextImageModalComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-image-modal', template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"literals.insertImage\"\n>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n" }]
    }], () => [{ type: i1.PoLanguageService }], { modal: [{
            type: ViewChild,
            args: ['modal', { static: true }]
        }], modalImageForm: [{
            type: ViewChild,
            args: ['modalImageForm']
        }], upload: [{
            type: ViewChild,
            args: ['upload', { static: true }]
        }], command: [{
            type: Output,
            args: ['p-command']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextImageModalComponent, { className: "PoRichTextImageModalComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text-image-modal/po-rich-text-image-modal.component.ts", lineNumber: 18 }); })();
//# sourceMappingURL=data:application/json;base64,