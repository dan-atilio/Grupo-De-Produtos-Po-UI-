import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoMultiselectComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-multiselect-option-template` com `ng-template`
 * dentro da *tag* `po-multiselect`, o seu array de `p-options` repassado para com componente deve conter a propriedade `value` e `label`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Exemplo de uso:
 *
 * ```
 * ...
 * <po-multiselect
 *   name="multiselect"
 *   [(ngModel)]="multiselect"
 *   [p-options]="options"
 *   [p-hide-select-all]="true">
 *     <ng-template p-multiselect-option-template let-option>
 *        <!-- template customizado -->
 *       <div class="po-font-text-large-bold" [innerHtml]="option.label"></div>
 *       <!-- template customizado -->
 *     </ng-template>
 * </po-multiselect>
 * ...
 * ```
 *
 */
export class PoMultiselectOptionTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoMultiselectOptionTemplateDirective_Factory(t) { return new (t || PoMultiselectOptionTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMultiselectOptionTemplateDirective, selectors: [["", "p-multiselect-option-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectOptionTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-multiselect-option-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3Qtb3B0aW9uLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1tdWx0aXNlbGVjdC9wby1tdWx0aXNlbGVjdC1vcHRpb24tdGVtcGxhdGUvcG8tbXVsdGlzZWxlY3Qtb3B0aW9uLXRlbXBsYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFlLE1BQU0sZUFBZSxDQUFDOztBQUV2RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJHO0FBSUgsTUFBTSxPQUFPLG9DQUFvQztJQUU1QjtJQURuQixzRUFBc0U7SUFDdEUsWUFBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUcsQ0FBQzs4RkFGekMsb0NBQW9DOzZEQUFwQyxvQ0FBb0M7O2lGQUFwQyxvQ0FBb0M7Y0FIaEQsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7YUFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb011bHRpc2VsZWN0Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHBlcnNvbmFsaXphciBvIGNvbnRlw7pkbyBkb3MgaXRlbnMgZXhpYmlkb3MgbmEgbGlzdGEgZGUgb3DDp8O1ZXMgZG8gY29tcG9uZW50ZS5cbiAqXG4gKiBQYXJhIHBlcnNvbmFsaXphciBvIGNvbnRlw7pkbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEgZGV2ZS1zZSB1dGlsaXphciBhIGRpcmV0aXZhIGBwLW11bHRpc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZWAgY29tIGBuZy10ZW1wbGF0ZWBcbiAqIGRlbnRybyBkYSAqdGFnKiBgcG8tbXVsdGlzZWxlY3RgLCBvIHNldSBhcnJheSBkZSBgcC1vcHRpb25zYCByZXBhc3NhZG8gcGFyYSBjb20gY29tcG9uZW50ZSBkZXZlIGNvbnRlciBhIHByb3ByaWVkYWRlIGB2YWx1ZWAgZSBgbGFiZWxgLlxuICpcbiAqIFBhcmEgb2J0ZXIgYSByZWZlcsOqbmNpYSBkbyBpdGVtIGF0dWFsIHV0aWxpemUgYGxldC1vcHRpb25gLCBjb20gaXNzbyB2b2PDqiB0ZXLDoSBhY2Vzc28gYW9zIHZhbG9yZXMgZSBwb2RlcsOhIHBlcnNvbmFsaXphciBzdWEgZXhpYmnDp8Ojby5cbiAqXG4gKiBFeGVtcGxvIGRlIHVzbzpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLW11bHRpc2VsZWN0XG4gKiAgIG5hbWU9XCJtdWx0aXNlbGVjdFwiXG4gKiAgIFsobmdNb2RlbCldPVwibXVsdGlzZWxlY3RcIlxuICogICBbcC1vcHRpb25zXT1cIm9wdGlvbnNcIlxuICogICBbcC1oaWRlLXNlbGVjdC1hbGxdPVwidHJ1ZVwiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBwLW11bHRpc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZSBsZXQtb3B0aW9uPlxuICogICAgICAgIDwhLS0gdGVtcGxhdGUgY3VzdG9taXphZG8gLS0+XG4gKiAgICAgICA8ZGl2IGNsYXNzPVwicG8tZm9udC10ZXh0LWxhcmdlLWJvbGRcIiBbaW5uZXJIdG1sXT1cIm9wdGlvbi5sYWJlbFwiPjwvZGl2PlxuICogICAgICAgPCEtLSB0ZW1wbGF0ZSBjdXN0b21pemFkbyAtLT5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogPC9wby1tdWx0aXNlbGVjdD5cbiAqIC4uLlxuICogYGBgXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC1tdWx0aXNlbGVjdC1vcHRpb24tdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb011bHRpc2VsZWN0T3B0aW9uVGVtcGxhdGVEaXJlY3RpdmUge1xuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG4iXX0=