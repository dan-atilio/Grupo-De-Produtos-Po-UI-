import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../../po-listbox/po-listbox.component";
const _c0 = ["container"];
const _c1 = ["divElement"];
const _c2 = ["listbox"];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export class PoMultiselectDropdownComponent {
    cd;
    /** Propriedade que indica se deve exibir o loading. */
    isServerSearching = false;
    /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
    hideSearch = false;
    /** Propriedade que que recebe as literais definidas no componente `po-multiselect`. */
    literals;
    /** Placeholder do campo de pesquisa. */
    placeholderSearch;
    /** Propriedade que recebe a lista de opções selecionadas. */
    selectedOptions = [];
    /** Propriedade que recebe a lista com todas as opções. */
    options = [];
    /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
    visibleOptions = [];
    /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
    hideSelectAll = false;
    fieldValue;
    fieldLabel;
    multiselectTemplate;
    /** Evento disparado a cada tecla digitada na pesquisa. */
    changeSearch = new EventEmitter();
    /** Evento disparado a cada alteração na lista das opções selecionadas. */
    change = new EventEmitter();
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     */
    closeDropdown = new EventEmitter();
    container;
    divElement;
    listbox;
    scrollTop = 0;
    show = false;
    constructor(cd) {
        this.cd = cd;
    }
    get hasOptions() {
        return !!this.options?.length;
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
        this.cd.markForCheck();
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem[this.fieldValue] === option[this.fieldValue]);
    }
    clickItem(check, options) {
        if (options) {
            this.updateSelectedValues(check, options);
        }
        else {
            const { selected, option } = check;
            this.updateSelectedValues(selected, option);
        }
    }
    onClickSelectAll() {
        const selectedValues = this.selectedOptions.map(({ [this.fieldValue]: value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            this.selectedOptions = [];
        }
        else {
            this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
        }
        this.change.emit(this.selectedOptions);
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedOptions.push(option);
        }
        else {
            this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption[this.fieldValue] !== option[this.fieldValue]);
        }
        this.change.emit(this.selectedOptions);
    }
    everyVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.every(visibleOption => selectedValues.includes(visibleOption[this.fieldValue]));
    }
    someVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.some(visibleOption => selectedValues.includes(visibleOption[this.fieldValue]));
    }
    getStateSelectAll() {
        const selectedValues = this.selectedOptions.map(({ [this.fieldValue]: value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            return true;
        }
        else if (this.someVisibleOptionsSelected(selectedValues)) {
            return null;
        }
        else {
            return false;
        }
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.listbox?.searchElement && !this.hideSearch) {
                this.listbox.searchElement.setFocus();
                this.listbox.searchElement.clean();
            }
        });
        this.cd.markForCheck();
    }
    uniqueSelectedOptions(selectedValues) {
        const newSelectedOptions = [...this.selectedOptions];
        for (const visibleOption of this.visibleOptions) {
            if (!selectedValues.includes(visibleOption[this.fieldValue])) {
                newSelectedOptions.push(visibleOption);
            }
        }
        return newSelectedOptions;
    }
    static ɵfac = function PoMultiselectDropdownComponent_Factory(t) { return new (t || PoMultiselectDropdownComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectDropdownComponent, selectors: [["po-multiselect-dropdown"]], viewQuery: function PoMultiselectDropdownComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ElementRef);
            i0.ɵɵviewQuery(_c1, 7, ElementRef);
            i0.ɵɵviewQuery(_c2, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.divElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listbox = _t.first);
        } }, inputs: { isServerSearching: [i0.ɵɵInputFlags.None, "p-searching", "isServerSearching"], hideSearch: [i0.ɵɵInputFlags.None, "p-hide-search", "hideSearch"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], placeholderSearch: [i0.ɵɵInputFlags.None, "p-placeholder-search", "placeholderSearch"], selectedOptions: [i0.ɵɵInputFlags.None, "p-selected-options", "selectedOptions"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], visibleOptions: [i0.ɵɵInputFlags.None, "p-visible-options", "visibleOptions"], hideSelectAll: [i0.ɵɵInputFlags.None, "p-hide-select-all", "hideSelectAll"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], multiselectTemplate: [i0.ɵɵInputFlags.None, "p-multiselect-template", "multiselectTemplate"] }, outputs: { changeSearch: "p-change-search", change: "p-change", closeDropdown: "p-close-dropdown" }, decls: 7, vars: 15, consts: [[1, "po-multiselect-container", 3, "hidden"], ["container", ""], [3, "scrollTop"], ["divElement", ""], ["p-type", "check", 3, "p-items", "p-selected-options", "p-checkboxAllValue", "p-field-value", "p-field-value-search", "p-field-label", "p-literal-search", "p-literals", "p-is-searching", "p-hide-search", "p-hide-select-all", "p-template", "p-placeholder-search", "p-change", "p-change-all", "p-change-search", "p-close"], ["listbox", ""]], template: function PoMultiselectDropdownComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "div", 2, 3);
            i0.ɵɵelementContainerStart(4);
            i0.ɵɵelementStart(5, "po-listbox", 4, 5);
            i0.ɵɵlistener("p-change", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_5_listener($event) { return ctx.clickItem($event); })("p-change-all", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_all_5_listener() { return ctx.onClickSelectAll(); })("p-change-search", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_search_5_listener($event) { return ctx.callChangeSearch($event); })("p-close", function PoMultiselectDropdownComponent_Template_po_listbox_p_close_5_listener() { return ctx.closeDropdown.emit(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementContainerEnd();
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("hidden", !ctx.show);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("scrollTop", ctx.scrollTop);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-items", ctx.visibleOptions)("p-selected-options", ctx.selectedOptions)("p-checkboxAllValue", ctx.getStateSelectAll())("p-field-value", ctx.fieldValue)("p-field-value-search", ctx.fieldValue)("p-field-label", ctx.fieldLabel)("p-literal-search", ctx.literals)("p-literals", ctx.literals)("p-is-searching", ctx.isServerSearching)("p-hide-search", ctx.hideSearch)("p-hide-select-all", ctx.hideSelectAll)("p-template", ctx.multiselectTemplate)("p-placeholder-search", ctx.placeholderSearch);
        } }, dependencies: [i1.PoListBoxComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectDropdownComponent, [{
        type: Component,
        args: [{ selector: 'po-multiselect-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <div [scrollTop]=\"scrollTop\" #divElement>\n    <ng-container>\n      <po-listbox\n        #listbox\n        p-type=\"check\"\n        [p-items]=\"visibleOptions\"\n        [p-selected-options]=\"selectedOptions\"\n        [p-checkboxAllValue]=\"getStateSelectAll()\"\n        [p-field-value]=\"fieldValue\"\n        [p-field-value-search]=\"fieldValue\"\n        [p-field-label]=\"fieldLabel\"\n        [p-literal-search]=\"literals\"\n        [p-literals]=\"literals\"\n        [p-is-searching]=\"isServerSearching\"\n        [p-hide-search]=\"hideSearch\"\n        [p-hide-select-all]=\"hideSelectAll\"\n        [p-template]=\"multiselectTemplate\"\n        [p-placeholder-search]=\"placeholderSearch\"\n        (p-change)=\"clickItem($event)\"\n        (p-change-all)=\"onClickSelectAll()\"\n        (p-change-search)=\"callChangeSearch($event)\"\n        (p-close)=\"closeDropdown.emit()\"\n      >\n      </po-listbox>\n    </ng-container>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { isServerSearching: [{
            type: Input,
            args: ['p-searching']
        }], hideSearch: [{
            type: Input,
            args: ['p-hide-search']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], placeholderSearch: [{
            type: Input,
            args: ['p-placeholder-search']
        }], selectedOptions: [{
            type: Input,
            args: ['p-selected-options']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], visibleOptions: [{
            type: Input,
            args: ['p-visible-options']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], multiselectTemplate: [{
            type: Input,
            args: ['p-multiselect-template']
        }], changeSearch: [{
            type: Output,
            args: ['p-change-search']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], closeDropdown: [{
            type: Output,
            args: ['p-close-dropdown']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ElementRef, static: true }]
        }], divElement: [{
            type: ViewChild,
            args: ['divElement', { read: ElementRef, static: true }]
        }], listbox: [{
            type: ViewChild,
            args: ['listbox']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMultiselectDropdownComponent, { className: "PoMultiselectDropdownComponent", filePath: "lib/components/po-field/po-multiselect/po-multiselect-dropdown/po-multiselect-dropdown.component.ts", lineNumber: 29 }); })();
//# sourceMappingURL=data:application/json;base64,