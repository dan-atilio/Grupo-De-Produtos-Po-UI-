import { Directive, EventEmitter, Inject, Injector, Input, Output } from '@angular/core';
import { NgControl } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { PoTableColumnSpacing } from '../../po-table/enums/po-table-spacing.enum';
import * as i0 from "@angular/core";
import * as i1 from "./services/po-lookup-filter.service";
import * as i2 from "./services/po-lookup-modal.service";
/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do
 * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 */
export class PoLookupBaseComponent {
    defaultService;
    injector;
    poLookupModalService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * Label do campo.
     *
     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha
     * sido definido um `modalTitle` na propriedade `p-literals`.
     */
    label;
    /**
     * @description
     *
     * Objeto com as literais usadas no `po-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more',
     *    modalTitle: 'Select a user',
     *    modalAdvancedSearch: 'Advanced search',
     *    modalAdvancedSearchTitle: 'Advanced search',
     *    modalAdvancedSearchPrimaryActionLabel: 'Filter',
     *    modalAdvancedSearchSecondaryActionLabel: 'Return',
     *    modalDisclaimerGroupTitle: 'Presenting results filtered by:'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-lookup
     *   [p-literals]="customLiterals">
     * </po-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    literals;
    /** Texto de apoio do campo. */
    help;
    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /** Nome e Id do componente. */
    name;
    /**
     * @description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     */
    fieldValue;
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    set fieldLabel(value) {
        this._fieldLabel = value;
        this.keysDescription = [this.fieldLabel];
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /** Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface `PoLookupFilter`. */
    filterParams;
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `p-field-label` na descrição do campo.
     *
     * Pode-se informar uma lista de propriedades que deseja exibir como descrição do campo, Por exemplo:
     * ```
     * <po-lookup
     *  ...
     *  [p-field-format]="['id','nickname']"
     *  ...
     * >
     *
     * Objeto retornado:
     *   {
     *      id:123,
     *      name: 'Kakaroto',
     *      nickname: 'Goku',
     *   }
     * Apresentação no campo: 123 - Goku
     * ```
     *
     * > Será utilizado ` - ` como separador.
     */
    fieldFormat;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     */
    columns;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     *
     * @optional
     *
     * @description
     *
     * Lista de objetos dos campos que serão criados na busca avançada.
     *
     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.
     *
     * Exemplo de URL com busca avançada:
     *
     * ```
     * url + ?page=1&pageSize=20&name=Tony%20Stark&nickname=Homem%20de%20Ferro
     * ```
     *
     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando vírgula.
     * Exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&name=Tony%20Stark,Peter%20Parker,Gohan
     * ```
     *
     */
    advancedFilters;
    /**
     * @optional
     *
     * @description
     *
     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
     *
     * @default `false`
     */
    hideColumnsManager = false;
    /**
     * @optional
     *
     * @description
     *
     * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.
     *
     * @default `false`
     */
    infiniteScroll = false;
    /** Exibe um ícone que permite limpar o campo. */
    clean = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de múltiplos itens.
     *
     * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`
     *
     * @default `false`
     */
    multiple = false;
    /**
     * @optional
     *
     * @description
     *
     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
     *
     * @default `false`
     */
    autoHeight = false;
    /**
     * @optional
     *
     * @description
     *
     * Responsável por aplicar espaçamento nas colunas da tabela contida no lookup.
     *
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     *
     * @default `medium`
     */
    spacing = PoTableColumnSpacing.Medium;
    /**
     * @optional
     *
     * @description
     *
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     *
     * Esta propriedade aplica-se ao texto contido nas células da tabela.
     *
     * @default `false`
     */
    textWrap = false;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     */
    onError = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     */
    selected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     *  Evento que será disparado ao alterar o model.
     *  Por parâmetro será passado o novo valor.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
     *
     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    changeVisibleColumns = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
     *
     * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    columnRestoreManager = new EventEmitter();
    service;
    selectedOptions = [];
    getSubscription;
    keysDescription;
    oldValue = '';
    valueToModel;
    oldValueToModel = null;
    // eslint-disable-next-line
    onTouched = null;
    resizeListener;
    _disabled = false;
    _fieldLabel;
    _filterService;
    _noAutocomplete;
    _placeholder = '';
    _required = false;
    _autoHeight = false;
    autoHeightInitialValue;
    onChangePropagate = null;
    validatorChange;
    control;
    injectOptions = {
        self: true
    };
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `PoLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=name
     * ```
     *
     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:
     * ```
     * model = 1234;
     *
     * GET url/1234
     * ```
     *
     * Caso estiver com múltipla seleção habilitada:
     * ```
     * model = [1234, 5678]
     *
     * GET url?${fieldValue}=1234,5678
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
     *
     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se
     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)
     * e concatenado na URL da seguinte forma:
     *
     * ```
     * url/valor%20que%20se%20deseja%20filtrar
     * ```
     *
     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.
     *
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório seré exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    constructor(defaultService, injector, poLookupModalService) {
        this.defaultService = defaultService;
        this.injector = injector;
        this.poLookupModalService = poLookupModalService;
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.initializeColumn();
    }
    ngAfterViewInit() {
        this.setControl();
    }
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    ngOnChanges(changes) {
        if (changes.columns?.currentValue) {
            this.columns = changes.columns.currentValue;
            this.poLookupModalService?.setChangeColumns(this.columns);
        }
        if (changes.multiple && isTypeof(this.filterService, 'string')) {
            this.service.setConfig(this.filterService, this.fieldValue, this.multiple);
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    selectValue(valueSelected) {
        this.valueToModel = valueSelected;
        this.multiple
            ? this.callOnChange(this.valueToModel)
            : this.valueToModel
                ? this.callOnChange(this.valueToModel[this.fieldValue])
                : this.callOnChange(undefined);
        this.selected.emit(valueSelected);
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        if (this.oldValueToModel !== this.valueToModel) {
            this.change.emit(value);
        }
        // Armazenar o valor antigo do model
        this.oldValueToModel = this.valueToModel;
    }
    searchById(value) {
        let checkedValue = value;
        if (typeof checkedValue === 'string') {
            checkedValue = checkedValue.trim();
        }
        if (checkedValue !== '') {
            const oldDisable = this.disabled;
            this.disabled = true;
            if (this.control) {
                // :TODO: Retirar no futuro pois esse setTimeout foi feito
                // pois quando o campo é acionado pelos métodos setValue ou patchValue
                // a mudança não é detectada
                setTimeout(() => this.control.markAsPending());
            }
            this.getSubscription = this.service
                .getObjectByValue(value, this.filterParams)
                .pipe(finalize(() => {
                this.disabled = oldDisable;
                if (this.control) {
                    this.control.updateValueAndValidity();
                }
            }))
                .subscribe(element => {
                if (element?.length || (!Array.isArray(element) && element)) {
                    if (Array.isArray(element) && element.length > 1) {
                        this.setDisclaimers(element);
                        this.updateVisibleItems();
                    }
                    this.selectModel(this.multiple ? element : [element]);
                }
                else {
                    this.cleanModel();
                }
            }, error => {
                this.cleanModel();
                this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        if (value?.length || (!Array.isArray(value) && value)) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    // Retorna o Subscriber da propriedade getSubscription que ocorre
    // no evento de blur que executa o método searchEvent().
    getSubscriptionFunction() {
        return this.getSubscription;
    }
    cleanViewValue() {
        this.setDisclaimers([]);
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    getFormattedLabel(value) {
        return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    selectModel(options) {
        if (options.length) {
            this.selectedOptions = [...options];
            const newModel = this.multiple ? options.map(option => option[this.fieldValue]) : options[0];
            this.selectValue(newModel);
            if (options.length === 1) {
                this.oldValue = options[0][this.fieldLabel];
                this.setViewValue(this.getFormattedLabel(options[0]), options[0]);
            }
        }
        else {
            this.selectValue(undefined);
            this.cleanViewValue();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setConfig(service, this.fieldValue, this.multiple);
        }
    }
    setControl() {
        const ngControl = this.injector.get(NgControl, null, this.injectOptions);
        if (ngControl) {
            this.control = ngControl.control;
        }
    }
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(element => element.fieldLabel).map(element => element.property);
        }
    }
    static ɵfac = function PoLookupBaseComponent_Factory(t) { return new (t || PoLookupBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLookupFilterService), i0.ɵɵdirectiveInject(Injector), i0.ɵɵdirectiveInject(i2.PoLookupModalService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], name: "name", fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], filterParams: [i0.ɵɵInputFlags.None, "p-filter-params", "filterParams"], fieldFormat: [i0.ɵɵInputFlags.None, "p-field-format", "fieldFormat"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], advancedFilters: [i0.ɵɵInputFlags.None, "p-advanced-filters", "advancedFilters"], hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], clean: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-clean", "clean", convertToBoolean], multiple: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-multiple", "multiple", convertToBoolean], autoHeight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-height", "autoHeight", convertToBoolean], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"] }, outputs: { onError: "p-error", selected: "p-selected", change: "p-change", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLookupFilterService }, { type: i0.Injector, decorators: [{
                type: Inject,
                args: [Injector]
            }] }, { type: i2.PoLookupModalService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], name: [{
            type: Input,
            args: ['name']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], fieldFormat: [{
            type: Input,
            args: ['p-field-format']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], advancedFilters: [{
            type: Input,
            args: ['p-advanced-filters']
        }], hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], clean: [{
            type: Input,
            args: [{ alias: 'p-clean', transform: convertToBoolean }]
        }], multiple: [{
            type: Input,
            args: [{ alias: 'p-multiple', transform: convertToBoolean }]
        }], autoHeight: [{
            type: Input,
            args: [{ alias: 'p-auto-height', transform: convertToBoolean }]
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], onError: [{
            type: Output,
            args: ['p-error']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,