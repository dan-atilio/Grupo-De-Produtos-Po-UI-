import { Directive } from '@angular/core';
import { PoInputGeneric } from '../po-input-generic/po-input-generic';
import * as i0 from "@angular/core";
export class PoNumberBaseComponent extends PoInputGeneric {
    type = 'number';
    invalidInputValueOnBlur = false;
    /* istanbul ignore next */
    constructor(elementRef, cd) {
        super(elementRef, cd);
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            this.invalidInputValueOnBlur = false;
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    onBlur(event) {
        const target = event.target;
        this.invalidInputValueOnBlur = target.value === '' && !target.validity.valid;
        if (this.invalidInputValueOnBlur) {
            this.callOnChange('Valor Inválido');
        }
        this.eventOnBlur(event);
    }
    onKeyDown(event) {
        if (!this.isKeyAllowed(event)) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
    isKeyAllowed(event) {
        return this.isShortcut(event) || this.isControlKeys(event) || !this.isInvalidKey(event.key);
    }
    isInvalidKey(key) {
        const validatesKey = new RegExp(/[a-zA-Z:;=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        return validatesKey.test(key);
    }
    isShortcut(event) {
        const key = event.keyCode;
        const ctrl = event.ctrlKey || event.metaKey;
        const keyA = key === 65;
        const keyC = key === 67;
        const keyX = key === 88;
        const keyV = key === 86;
        return (ctrl && keyC) || (ctrl && keyV) || (ctrl && keyA) || (ctrl && keyX);
    }
    isControlKeys(event) {
        const controlKeys = [
            'Backspace',
            'ArrowLeft',
            'ArrowRight',
            'ArrowUp',
            'ArrowDown',
            'Left',
            'Right',
            'Up',
            'Down',
            'Tab',
            'Delete',
            'Home',
            'End',
            'Enter'
        ];
        return controlKeys.indexOf(event.key) !== -1;
    }
    static ɵfac = function PoNumberBaseComponent_Factory(t) { return new (t || PoNumberBaseComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoNumberBaseComponent, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNumberBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], null); })();
//# sourceMappingURL=data:application/json;base64,