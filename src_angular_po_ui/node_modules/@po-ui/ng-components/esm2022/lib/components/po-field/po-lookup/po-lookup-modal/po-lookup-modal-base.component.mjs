import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { PoModalComponent } from '../../../../components/po-modal/po-modal.component';
import { poLocaleDefault } from '../../../../services/po-language/po-language.constant';
import { capitalizeFirstLetter, convertToBoolean, isTypeof } from '../../../../utils/util';
import { PoTableColumnSortType, PoTableColumnSpacing } from '../../../po-table';
import { poTableLiteralsDefault } from '../../../po-table/po-table-base.component';
import { PoTableComponent } from './../../../po-table/po-table.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/po-language/po-language.service";
export const poLookupLiteralsDefault = {
    en: {
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
        modalTableNoData: poTableLiteralsDefault.en.noData,
        modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData,
        modalAdvancedSearch: 'Advanced search',
        modalAdvancedSearchTitle: 'Advanced search',
        modalAdvancedSearchPrimaryActionLabel: 'Filter',
        modalAdvancedSearchSecondaryActionLabel: 'Return',
        modalDisclaimerGroupTitle: 'Presenting results filtered by:'
    },
    es: {
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
        modalTableNoData: poTableLiteralsDefault.es.noData,
        modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData,
        modalAdvancedSearch: 'Búsqueda Avanzada',
        modalAdvancedSearchTitle: 'Búsqueda Avanzada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Vuelve',
        modalDisclaimerGroupTitle: 'Presentar resultados filtrados por:'
    },
    pt: {
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
        modalTableNoData: poTableLiteralsDefault.pt.noData,
        modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData,
        modalAdvancedSearch: 'Busca avançada',
        modalAdvancedSearchTitle: 'Busca Avançada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Voltar',
        modalDisclaimerGroupTitle: 'Apresentando resultados filtrados por:'
    },
    ru: {
        modalPrimaryActionLabel: 'Выбрать',
        modalSecondaryActionLabel: 'Отменить',
        modalPlaceholder: 'Поиск',
        modalTitle: 'Выберите запись',
        modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
        modalTableNoData: poTableLiteralsDefault.ru.noData,
        modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData,
        modalAdvancedSearch: 'Расширенный поиск',
        modalAdvancedSearchTitle: 'Расширенный поиск',
        modalAdvancedSearchPrimaryActionLabel: 'Фильтр',
        modalAdvancedSearchSecondaryActionLabel: 'Назад',
        modalDisclaimerGroupTitle: 'Представленные результаты отфильтрованы по:'
    }
};
/**
 * @docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 */
export class PoLookupModalBaseComponent {
    changeDetector;
    poModal;
    poTable;
    /**
     * Objeto com os campos que serão criados no busca avançada.
     *
     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.
     *
     * Exemplo de URL com busca avançada: http://localhost:3000/v1/heroes?filter=&page=1&pageSize=10`&name=Tony%20Stark&nickname=Homem%20de%20Ferro&email=irnman@marvel.com`
     *
     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando virgula.
     * Exemplo: http://localhost:3000/v1/heroes?filter=&page=1&pageSize=10`&name=Tony%20Stark,Peter%20Parker,Gohan`
     *
     */
    advancedFilters;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     */
    columns;
    /** Lista de itens da tabela. */
    items;
    /** Classe de serviço com a implementação do cliente. */
    filterService;
    /** Classe de serviço com a implementação do cliente. */
    filterParams;
    /** Se verdadeiro, esconde o gerenciador de tarefas, responsável pela definição de quais colunas serão exibidas. */
    hideColumnsManager = false;
    /** Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta. */
    infiniteScroll = false;
    /** Se verdadeiro, ativa a funcionalidade de multipla seleção. */
    multiple = false;
    /** Evento utilizado ao selecionar um registro da tabela. */
    model = new EventEmitter();
    /** Classe de serviço com items selecionados */
    selectedItems;
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    fieldLabel;
    /**
     * @description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     */
    fieldValue;
    /**
     * Responsável por aplicar espaçamento nas colunas da tabela contida no lookup.
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     */
    spacing = PoTableColumnSpacing.Medium;
    /**
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     */
    textWrap = false;
    /**
     * @optional
     *
     * @description
     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
     *
     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    changeVisibleColumns = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
     *
     * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    columnRestoreManager = new EventEmitter();
    hasNext = true;
    isLoading = false;
    page = 1;
    pageSize = 10;
    searchValue = '';
    tableLiterals;
    // Propriedade da modal de busca avançada:
    advancedFilterModalTitle = '';
    dynamicFormValue = {};
    disclaimer;
    disclaimerGroup;
    isAdvancedFilter = false;
    primaryActionAdvancedFilter;
    secondaryActionAdvancedFilter;
    selecteds = [];
    sort;
    filterSubscription;
    searchSubscription;
    showMoreSubscription;
    disclaimerLabel;
    _literals;
    _title;
    language = poLocaleDefault;
    // eslint-disable-next-line @typescript-eslint/member-ordering
    primaryAction = {
        action: () => {
            let selectedsItems = [];
            if (!this.multiple) {
                this.items.forEach(element => {
                    if (element['$selected']) {
                        selectedsItems.push(element);
                    }
                });
            }
            else {
                selectedsItems = this.selecteds;
            }
            this.model.emit(selectedsItems);
            this.poModal.close();
        },
        label: this.literals.modalPrimaryActionLabel
    };
    // eslint-disable-next-line @typescript-eslint/member-ordering
    secondaryAction = {
        action: () => {
            this.model.emit(null);
            this.poModal.close();
        },
        label: this.literals.modalSecondaryActionLabel
    };
    /** Objeto com as literais usadas no `po-lookup-modal`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poLookupLiteralsDefault[poLocaleDefault],
                ...poLookupLiteralsDefault[this.language],
                ...value
            };
            if (value.modalTitle) {
                this.title = this.literals.modalTitle;
            }
        }
        else {
            this._literals = poLookupLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.modalPrimaryActionLabel;
        this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
        this.setTableLiterals();
    }
    get literals() {
        return this._literals || poLookupLiteralsDefault[this.language];
    }
    /** Título da modal. */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
    }
    get title() {
        return this._title;
    }
    constructor(languageService, changeDetector) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.setAdvancedFilterModalProperties();
        this.initializeData();
        this.setTableLiterals();
    }
    createDisclaimer() {
        this.disclaimerGroup.disclaimers = [];
        this.searchValue = '';
        for (const [key, value] of Object.entries(this.dynamicFormValue)) {
            this.addDisclaimer(value, key);
        }
        if (!Object.values(this.dynamicFormValue).some(v => v !== null && typeof v !== 'undefined')) {
            this.initializeData();
        }
    }
    addDisclaimer(value, property) {
        this.disclaimerLabel = '';
        const fieldFilter = this.advancedFilters.find(filter => filter.property === property);
        this.disclaimer = { property: property };
        this.disclaimer.value = value;
        const labelProperty = fieldFilter.label || capitalizeFirstLetter(fieldFilter.property);
        if (fieldFilter.type === 'currency' && value) {
            this.formatValueToCurrency(fieldFilter, value);
        }
        if (fieldFilter.type === 'boolean' && (value === true || value === false)) {
            this.formatValueToBoolean(fieldFilter, value);
        }
        if (fieldFilter.options && value) {
            this.applyDisclaimerLabelValue(fieldFilter, value);
        }
        if (!this.disclaimerLabel) {
            this.disclaimerLabel = this.disclaimer.value;
        }
        this.disclaimer.label = `${labelProperty}: ${this.disclaimerLabel}`;
        this.disclaimerGroup.disclaimers = [...this.disclaimerGroup.disclaimers, this.disclaimer];
    }
    onChangeDisclaimerGroup() {
        if (!this.searchValue) {
            this.isLoading = true;
            this.searchValue = '';
            this.searchFilteredItems();
        }
    }
    search() {
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.disclaimerGroup.disclaimers = [];
            this.searchFilteredItems();
        }
        else {
            this.initializeData();
        }
    }
    searchFilteredItems() {
        this.searchSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.setLookupResponseProperties();
            return throwError(error);
        }))
            .subscribe((data) => this.setLookupResponseProperties(data), () => { });
    }
    showMoreEvent() {
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.hasNext = false;
            this.isLoading = false;
            return throwError(error);
        }))
            .subscribe((data) => {
            this.items = [...this.items, ...data.items];
            this.hasNext = data.hasNext;
            this.isLoading = false;
            this.changeDetector.detectChanges();
            this.setSelectedItems();
        }, () => { });
    }
    //Método responsável por selecionar as linhas quando abre o modal.
    setSelectedItems() {
        this.selecteds.forEach(selectedItem => {
            if (this.multiple) {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem.value);
            }
            else {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem[this.fieldValue]);
            }
        });
    }
    //Método responsável por criar os disclaimers quando abre o modal.
    setDisclaimersItems() {
        if (this.selectedItems && !Array.isArray(this.selectedItems)) {
            this.multiple ? (this.selecteds = [{ value: this.selectedItems }]) : (this.selecteds = [this.selectedItems]);
            return;
        }
        if (this.selectedItems && this.selectedItems.length) {
            this.selecteds = [...this.selectedItems];
        }
    }
    applyDisclaimerLabelValue(field, filterValue) {
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        const labels = values.map(optionValue => {
            const findOption = field.options.find(option => option.value === optionValue);
            return findOption.label;
        });
        if (labels.join()) {
            this.disclaimerLabel = labels.join(', ');
        }
    }
    formatValueToCurrency(field, filterValue) {
        const currencyLabel = new Intl.NumberFormat(field.locale ? field.locale : this.language, {
            minimumFractionDigits: 2
        }).format(filterValue);
        this.disclaimerLabel = currencyLabel;
    }
    formatValueToBoolean(field, filterValue) {
        let labelBoolean;
        if (filterValue) {
            labelBoolean = field.booleanTrue ? field.booleanTrue : filterValue;
        }
        else {
            labelBoolean = field.booleanFalse ? field.booleanFalse : filterValue;
        }
        this.disclaimerLabel = `${labelBoolean}`;
    }
    setAdvancedFilterModalProperties() {
        this.advancedFilterModalTitle = this.literals.modalAdvancedSearchTitle;
        this.disclaimerGroup = {
            title: this.literals.modalDisclaimerGroupTitle,
            disclaimers: []
        };
        this.primaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
                this.page = 1;
                this.createDisclaimer();
            },
            label: this.literals.modalAdvancedSearchPrimaryActionLabel
        };
        this.secondaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
            },
            label: this.literals.modalAdvancedSearchSecondaryActionLabel
        };
    }
    getAdvancedFilters(advancedParams) {
        if (advancedParams && advancedParams.length > 0) {
            const filters = {};
            let validatedAdvacendFilters;
            advancedParams.forEach((filter) => {
                filters[filter.property] = filter.value instanceof Array ? filter.value.join() : filter.value;
                validatedAdvacendFilters = { ...validatedAdvacendFilters, ...filters };
            });
            return validatedAdvacendFilters;
        }
        return undefined;
    }
    getFilteredItems(filter) {
        const filteredParams = this.getFilteredParams(filter);
        return this.filterService.getFilteredItems(filteredParams);
    }
    getFilteredParams(filter) {
        const { page, pageSize, filterParams, sort } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sort);
        const advancedFilters = this.getAdvancedFilters(this.disclaimerGroup.disclaimers);
        const params = { filter, page, pageSize, order, filterParams, advancedFilters };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
    initializeData() {
        this.isLoading = true;
        this.filterSubscription = this.getFilteredItems('').subscribe(data => {
            this.setLookupResponseProperties(data);
        });
    }
    setLookupResponseProperties(data) {
        this.items = data?.items ?? [];
        this.hasNext = data?.hasNext ?? false;
        this.isLoading = false;
        this.changeDetector.detectChanges();
        this.setDisclaimersItems();
        this.setSelectedItems();
    }
    setTableLiterals() {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData
        };
    }
    static ɵfac = function PoLookupModalBaseComponent_Factory(t) { return new (t || PoLookupModalBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupModalBaseComponent, viewQuery: function PoLookupModalBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
            i0.ɵɵviewQuery(PoTableComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTable = _t.first);
        } }, inputs: { advancedFilters: [i0.ɵɵInputFlags.None, "p-advanced-filters", "advancedFilters"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], filterParams: [i0.ɵɵInputFlags.None, "p-filter-params", "filterParams"], hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], multiple: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-multiple", "multiple", convertToBoolean], selectedItems: [i0.ɵɵInputFlags.None, "p-selected-items", "selectedItems"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"] }, outputs: { model: "p-change-model", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }], { poModal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }], poTable: [{
            type: ViewChild,
            args: [PoTableComponent, { static: true }]
        }], advancedFilters: [{
            type: Input,
            args: ['p-advanced-filters']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], multiple: [{
            type: Input,
            args: [{ alias: 'p-multiple', transform: convertToBoolean }]
        }], model: [{
            type: Output,
            args: ['p-change-model']
        }], selectedItems: [{
            type: Input,
            args: ['p-selected-items']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,