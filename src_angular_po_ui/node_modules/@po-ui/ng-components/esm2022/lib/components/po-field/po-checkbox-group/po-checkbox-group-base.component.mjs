import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { requiredFailed } from '../validators';
import { convertToBoolean, convertToInt, uuid } from './../../../utils/util';
import * as i0 from "@angular/core";
const poCheckboxGroupColumnsDefaultLength = 6;
const poCheckboxGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
export class PoCheckboxGroupBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Nome dos checkboxes */
    name;
    /** Texto de apoio do campo */
    help;
    /** Label do campo */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-checkbox-group ... [ngModel]="checkboxgroupModel" (ngModelChange)="checkboxgroupModel = $event"> </po-checkbox-group>
     * ```
     *
     */
    ngModelChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo
     */
    change = new EventEmitter();
    checkboxGroupOptionsView;
    checkedOptions = {};
    checkedOptionsList = [];
    mdColumns = poCheckboxGroupColumnsDefaultLength;
    propagateChange;
    validatorChange;
    _columns = poCheckboxGroupColumnsDefaultLength;
    _disabled = false;
    _indeterminate = false;
    _options;
    _required = false;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
     * - É possível exibir as opções entre `1` e `4` colunas.
     * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
     * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
     * o *grid system* será composto por `2` colunas.
     * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
     *
     * @default `2`
     *
     */
    set columns(value) {
        const columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todos os itens do checkbox.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.checkIndeterminate());
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
     * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
     *
     * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
     * `ngModel`, diferente do array que contém apenas os valores selecionados.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
     */
    set options(value) {
        this._options = Array.isArray(value) ? value : [];
        this.removeDuplicatedOptions();
        this.setCheckboxGroupOptionsView(this.options);
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.checkIndeterminate());
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    changeValue() {
        const value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    }
    checkIndeterminate() {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    }
    checkOption(value) {
        if (!this._disabled && !value.disabled && !value.fixed) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) { }
    writeValue(optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
            this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    checkOptionModel(optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    }
    generateCheckOptions(optionsModel) {
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach((option) => {
                this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach((option) => {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                this.checkedOptions = optionsModel;
            });
        }
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    }
    isInvalidIndeterminate() {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return Object.values(this.checkedOptions).every(value => value === false);
        }
        return false;
    }
    removeDuplicatedOptions() {
        this.options.forEach((option, index) => {
            const duplicatedIndex = this.options.findIndex((optionFind) => optionFind.value === option.value) === index;
            if (!duplicatedIndex) {
                this.options.splice(this.options.indexOf(option), 1);
            }
        });
    }
    setCheckboxGroupOptionsView(optionsList) {
        this.checkboxGroupOptionsView = optionsList.map(option => ({ ...option, id: uuid() }));
    }
    static ɵfac = function PoCheckboxGroupBaseComponent_Factory(t) { return new (t || PoCheckboxGroupBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxGroupBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], name: "name", help: [i0.ɵɵInputFlags.None, "p-help", "help"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], indeterminate: [i0.ɵɵInputFlags.None, "p-indeterminate", "indeterminate"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, outputs: { ngModelChange: "ngModelChange", change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], name: [{
            type: Input,
            args: ['name']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], indeterminate: [{
            type: Input,
            args: ['p-indeterminate']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,