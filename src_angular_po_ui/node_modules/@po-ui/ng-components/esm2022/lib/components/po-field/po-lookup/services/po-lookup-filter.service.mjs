import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { isTypeof } from '../../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
export class PoLookupFilterService {
    httpClient;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    url;
    fieldValue;
    multiple = false;
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams, advancedFilters, ...restFilteredItemsParams } = filteredItemsParams;
        const validatedFilterParams = this.validateParams(filterParams);
        const validatedAdvancedFilters = this.validateParams(advancedFilters);
        const params = { ...restFilteredItemsParams, ...validatedFilterParams, ...validatedAdvancedFilters };
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        let newURL;
        let encodedValue;
        if (this.multiple) {
            encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
            newURL = `${this.url}?${this.fieldValue}=${encodedValue}`;
        }
        else {
            encodedValue = encodeURIComponent(value);
            newURL = `${this.url}/${encodedValue}`;
        }
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map((response) => ('items' in response ? response.items : response)));
    }
    setConfig(url, fieldValue, multiple) {
        this.url = url;
        this.fieldValue = fieldValue;
        this.multiple = multiple;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
    static ɵfac = function PoLookupFilterService_Factory(t) { return new (t || PoLookupFilterService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupFilterService, factory: PoLookupFilterService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupFilterService, [{
        type: Injectable
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7O0FBS2xEOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFTWjtJQVJYLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUM7UUFDOUMsaUJBQWlCLEVBQUUsTUFBTTtLQUMxQixDQUFDLENBQUM7SUFFSyxHQUFHLENBQVM7SUFDWixVQUFVLENBQUM7SUFDWCxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBRXpCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDO0lBRTlDLGdCQUFnQixDQUFDLG1CQUFnRDtRQUMvRCxNQUFNLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxHQUFHLHVCQUF1QixFQUFFLEdBQUcsbUJBQW1CLENBQUM7UUFFMUYsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV0RSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsdUJBQXVCLEVBQUUsR0FBRyxxQkFBcUIsRUFBRSxHQUFHLHdCQUF3QixFQUFFLENBQUM7UUFFckcsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBVSxFQUFFLFlBQWtCO1FBQzdDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoRSxJQUFJLE1BQU0sQ0FBQztRQUNYLElBQUksWUFBWSxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixZQUFZLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEYsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFlBQVksRUFBRSxDQUFDO1NBQzNEO2FBQU07WUFDTCxZQUFZLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztTQUN4QztRQUVELE9BQU8sSUFBSSxDQUFDLFVBQVU7YUFDbkIsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDO2FBQ3JFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVyxFQUFFLFVBQWtCLEVBQUUsUUFBaUI7UUFDMUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRU8sY0FBYyxDQUFDLE1BQVc7UUFDaEMsT0FBTyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkYsQ0FBQzsrRUFqRFUscUJBQXFCO2dFQUFyQixxQkFBcUIsV0FBckIscUJBQXFCOztpRkFBckIscUJBQXFCO2NBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyZWQtaXRlbXMtcGFyYW1zLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgcG8tbG9va3VwLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9Mb29rdXBGaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Mb29rdXBGaWx0ZXIge1xuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgJ1gtUE8tTm8tTWVzc2FnZSc6ICd0cnVlJ1xuICB9KTtcblxuICBwcml2YXRlIHVybDogc3RyaW5nO1xuICBwcml2YXRlIGZpZWxkVmFsdWU7XG4gIHByaXZhdGUgbXVsdGlwbGUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0RmlsdGVyZWRJdGVtcyhmaWx0ZXJlZEl0ZW1zUGFyYW1zOiBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHsgZmlsdGVyUGFyYW1zLCBhZHZhbmNlZEZpbHRlcnMsIC4uLnJlc3RGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gPSBmaWx0ZXJlZEl0ZW1zUGFyYW1zO1xuXG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xuICAgIGNvbnN0IHZhbGlkYXRlZEFkdmFuY2VkRmlsdGVycyA9IHRoaXMudmFsaWRhdGVQYXJhbXMoYWR2YW5jZWRGaWx0ZXJzKTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IHsgLi4ucmVzdEZpbHRlcmVkSXRlbXNQYXJhbXMsIC4uLnZhbGlkYXRlZEZpbHRlclBhcmFtcywgLi4udmFsaWRhdGVkQWR2YW5jZWRGaWx0ZXJzIH07XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh0aGlzLnVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IGFueSwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxhbnk+IHwgeyBba2V5OiBzdHJpbmddOiBhbnkgfT4ge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZpbHRlclBhcmFtcyA9IHRoaXMudmFsaWRhdGVQYXJhbXMoZmlsdGVyUGFyYW1zKTtcblxuICAgIGxldCBuZXdVUkw7XG4gICAgbGV0IGVuY29kZWRWYWx1ZTtcblxuICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XG4gICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSk7XG4gICAgICBuZXdVUkwgPSBgJHt0aGlzLnVybH0/JHt0aGlzLmZpZWxkVmFsdWV9PSR7ZW5jb2RlZFZhbHVlfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICBuZXdVUkwgPSBgJHt0aGlzLnVybH0vJHtlbmNvZGVkVmFsdWV9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XG4gICAgICAuZ2V0KG5ld1VSTCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtczogdmFsaWRhdGVkRmlsdGVyUGFyYW1zIH0pXG4gICAgICAucGlwZShtYXAoKHJlc3BvbnNlOiBhbnkpID0+ICgnaXRlbXMnIGluIHJlc3BvbnNlID8gcmVzcG9uc2UuaXRlbXMgOiByZXNwb25zZSkpKTtcbiAgfVxuXG4gIHNldENvbmZpZyh1cmw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nLCBtdWx0aXBsZTogYm9vbGVhbikge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gICAgdGhpcy5tdWx0aXBsZSA9IG11bHRpcGxlO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiBpc1R5cGVvZihwYXJhbXMsICdvYmplY3QnKSAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=