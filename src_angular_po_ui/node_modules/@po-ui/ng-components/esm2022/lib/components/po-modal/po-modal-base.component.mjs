import { Input, EventEmitter, Directive, Output } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
import { poModalLiterals } from './po-modal.literals';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
/**
 * @description
 *
 * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
 * `po-table` e os demais componentes do PO.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado e / ou definir o botão com o tipo *danger*. Também é possível utilizar
 * o componente [`PoModalFooter`](/documentation/po-modal-footer).
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                                  | Descrição                                             | Valor Padrão                                     |
 * |----------------------------------------------|-------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                           |                                                       |                                                  |
 * | `--border-radius` &nbsp;                     | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                        |
 * | `--border-width` &nbsp;                      | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-sm)`                         |
 * | `--border-color` &nbsp;                      | Cor da borda                                          | `var(--color-neutral-light-20)`                  |
 * | `--background` &nbsp;                        | Cor de background                                     | `var(--color-neutral-light-00)`                  |
 * | `--shadow` &nbsp;                            | Contém o valor da sombra do elemento                  | `var(--shadow-md)`                               |
 * | `--color-overlay` &nbsp;                     | Cor da camada visual temporária                       | `var(--color-neutral-dark-80)`                   |
 * | `--opacity-overlay` &nbsp;                   | Opacidade da camada visual temporária &nbsp;          | `0.7`                                            |
 * | `--color-divider` &nbsp;                     | Cor das divisões do modal                             | `var(--color-neutral-light-20)`                  |
 *
 */
export class PoModalBaseComponent {
    /** Título da modal. */
    title;
    /** Evento disparado ao fechar o modal. */
    closeModal = new EventEmitter();
    /**
     * Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da primeira ação.
     * Caso esta propriedade não seja definida ou esteja incompleta, automaticamente será adicionado um botão de ação com
     * a função de fechar a modal.
     */
    primaryAction;
    /** Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da segunda ação. */
    secondaryAction;
    language;
    literals;
    // Controla se a modal fica oculto ou visível, por padrão é oculto
    isHidden = true;
    // Event emmiter para quando a modal é fechada pelo 'X'.
    onXClosed = new EventEmitter();
    _hideClose = false;
    _size = 'md';
    /**
     * Define o tamanho da modal.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra grande)
     *  - `auto` (automático)
     *
     * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
     * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Define o fechamento da modal ao clicar fora da mesma.
     * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    clickOut = false;
    set setClickOut(value) {
        this.clickOut = value === '' ? false : convertToBoolean(value);
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o ícone de fechar do cabeçalho da modal.
     *
     * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
     *
     * @default `false`
     */
    set hideClose(value) {
        this._hideClose = convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @optional
     *
     * @description
     * Ícone exibido ao lado esquerdo do label do titúlo da modal.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-modal p-icon="po-icon-user" p-title="PO Modal"></po-modal>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-modal p-icon="fa fa-podcast" p-title="PO Modal"></po-modal>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-modal [p-icon]="template" p-title="PO Modal"></po-modal>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     */
    icon;
    constructor(poLanguageService) {
        this.language = poLanguageService.getShortLanguage();
        this.literals = {
            ...poModalLiterals[this.language]
        };
    }
    /** Função para fechar a modal. */
    close(xClosed = false) {
        this.closeModal.emit();
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    }
    /** Função para abrir a modal. */
    open() {
        this.validPrimaryAction();
        this.isHidden = false;
    }
    validPrimaryAction() {
        if (!this.primaryAction) {
            this.primaryAction = {
                action: () => this.close(),
                label: this.literals.close
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = () => this.close();
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = this.literals.close;
        }
    }
    static ɵfac = function PoModalBaseComponent_Factory(t) { return new (t || PoModalBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoModalBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], primaryAction: [i0.ɵɵInputFlags.None, "p-primary-action", "primaryAction"], secondaryAction: [i0.ɵɵInputFlags.None, "p-secondary-action", "secondaryAction"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], setClickOut: [i0.ɵɵInputFlags.None, "p-click-out", "setClickOut"], hideClose: [i0.ɵɵInputFlags.None, "p-hide-close", "hideClose"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"] }, outputs: { closeModal: "p-close" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { title: [{
            type: Input,
            args: ['p-title']
        }], closeModal: [{
            type: Output,
            args: ['p-close']
        }], primaryAction: [{
            type: Input,
            args: ['p-primary-action']
        }], secondaryAction: [{
            type: Input,
            args: ['p-secondary-action']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], setClickOut: [{
            type: Input,
            args: ['p-click-out']
        }], hideClose: [{
            type: Input,
            args: ['p-hide-close']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,