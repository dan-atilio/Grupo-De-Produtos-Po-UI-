import { Input, Directive } from '@angular/core';
import { PoDividerSize } from './po-divider-size.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--color`                              | Cor principla do divider&nbsp;                        | `var(--color-neutral-mid-40)`                   |
 * | `--stroke-linecap`                     | Extremidade da linha&nbsp;                            | `round`                                         |
 *
 */
export class PoDividerBaseComponent {
    coordinateX1;
    coordinateX2;
    _borderWidth = PoDividerSize.small;
    /** Valor do rótulo a ser exibido. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define a espessura da linha.
     *
     * Valores válidos:
     * - small
     * - medium
     * - large
     *
     * @default `small`
     */
    set borderWidth(value) {
        this._borderWidth = PoDividerSize[value] ? PoDividerSize[value] : PoDividerSize.small;
        this.getCoordinates();
    }
    get borderWidth() {
        return this._borderWidth;
    }
    ngOnInit() {
        this.getCoordinates();
    }
    getCoordinates() {
        if (this.borderWidth === PoDividerSize.small) {
            this.coordinateX1 = '0.1%';
            this.coordinateX2 = '99.9%';
        }
        else if (this.borderWidth === PoDividerSize.medium) {
            this.coordinateX1 = '0.2%';
            this.coordinateX2 = '99.8%';
        }
        else {
            this.coordinateX1 = '0.3%';
            this.coordinateX2 = '99.7%';
        }
    }
    static ɵfac = function PoDividerBaseComponent_Factory(t) { return new (t || PoDividerBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDividerBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], borderWidth: [i0.ɵɵInputFlags.None, "p-border-width", "borderWidth"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], borderWidth: [{
            type: Input,
            args: ['p-border-width']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGl2aWRlci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1kaXZpZGVyL3BvLWRpdmlkZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUV2RDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUFZLENBQVM7SUFDckIsWUFBWSxDQUFTO0lBQ2IsWUFBWSxHQUFXLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFFbkQscUNBQXFDO0lBQ25CLEtBQUssQ0FBVTtJQUVqQzs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsSUFBNkIsV0FBVyxDQUFDLEtBQWE7UUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN0RixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQzdCO2FBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztnRkE5Q1Usc0JBQXNCOzZEQUF0QixzQkFBc0I7O2lGQUF0QixzQkFBc0I7Y0FEbEMsU0FBUztnQkFPVSxLQUFLO2tCQUF0QixLQUFLO21CQUFDLFNBQVM7WUFnQmEsV0FBVztrQkFBdkMsS0FBSzttQkFBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvRGl2aWRlclNpemUgfSBmcm9tICcuL3BvLWRpdmlkZXItc2l6ZS5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgYXByZXNlbnRhIHVtYSBsaW5oYSBkZW1hcmNhZG9yYSBkZSBibG9jb3MgZSBwb2RlIGNvbnRlciB1bSAqbGFiZWwqLiBTZXUgdXNvIMOpIGluZGljYWRvIHBhcmEgZGVmaW5pw6fDo29cbiAqIGUgb3JnYW5pemHDp8OjbyBkZSBpbmZvcm1hw6fDtWVzIGVtIHVtYSB0ZWxhIGUgc3VhIGNhcmFjdGVyw61zdGljYSDDqSBzZW1lbGhhbnRlIMOgIHRhZyBgPGhyPmAuXG4gKlxuICogIyMjIyBUb2tlbnMgY3VzdG9taXrDoXZlaXNcbiAqXG4gKiDDiSBwb3Nzw612ZWwgYWx0ZXJhciBvIGVzdGlsbyBkbyBjb21wb25lbnRlIHVzYW5kbyBvcyBzZWd1aW50ZXMgdG9rZW5zIChDU1MpOlxuICpcbiAqID4gUGFyYSBtYWlvcmVzIGluZm9ybWHDp8O1ZXMsIGFjZXNzZSBvIGd1aWEgW1BlcnNvbmFsaXphbmRvIG8gVGVtYSBQYWRyw6NvIGNvbSBUb2tlbnMgQ1NTXShodHRwczovL3BvLXVpLmlvL2d1aWRlcy90aGVtZS1jdXN0b21pemF0aW9uKS5cbiAqXG4gKiB8IFByb3ByaWVkYWRlICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3Jpw6fDo28gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFZhbG9yIFBhZHLDo28gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICoqRGVmYXVsdCBWYWx1ZXMqKiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAtLWNvbG9yYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQ29yIHByaW5jaXBsYSBkbyBkaXZpZGVyJm5ic3A7ICAgICAgICAgICAgICAgICAgICAgICAgfCBgdmFyKC0tY29sb3ItbmV1dHJhbC1taWQtNDApYCAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAtLXN0cm9rZS1saW5lY2FwYCAgICAgICAgICAgICAgICAgICAgIHwgRXh0cmVtaWRhZGUgZGEgbGluaGEmbmJzcDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgcm91bmRgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0RpdmlkZXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgY29vcmRpbmF0ZVgxOiBzdHJpbmc7XG4gIGNvb3JkaW5hdGVYMjogc3RyaW5nO1xuICBwcml2YXRlIF9ib3JkZXJXaWR0aDogc3RyaW5nID0gUG9EaXZpZGVyU2l6ZS5zbWFsbDtcblxuICAvKiogVmFsb3IgZG8gcsOzdHVsbyBhIHNlciBleGliaWRvLiAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbD86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBlc3Blc3N1cmEgZGEgbGluaGEuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqIC0gc21hbGxcbiAgICogLSBtZWRpdW1cbiAgICogLSBsYXJnZVxuICAgKlxuICAgKiBAZGVmYXVsdCBgc21hbGxgXG4gICAqL1xuICBASW5wdXQoJ3AtYm9yZGVyLXdpZHRoJykgc2V0IGJvcmRlcldpZHRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9ib3JkZXJXaWR0aCA9IFBvRGl2aWRlclNpemVbdmFsdWVdID8gUG9EaXZpZGVyU2l6ZVt2YWx1ZV0gOiBQb0RpdmlkZXJTaXplLnNtYWxsO1xuICAgIHRoaXMuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgfVxuXG4gIGdldCBib3JkZXJXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9yZGVyV2lkdGg7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmdldENvb3JkaW5hdGVzKCk7XG4gIH1cblxuICBnZXRDb29yZGluYXRlcygpIHtcbiAgICBpZiAodGhpcy5ib3JkZXJXaWR0aCA9PT0gUG9EaXZpZGVyU2l6ZS5zbWFsbCkge1xuICAgICAgdGhpcy5jb29yZGluYXRlWDEgPSAnMC4xJSc7XG4gICAgICB0aGlzLmNvb3JkaW5hdGVYMiA9ICc5OS45JSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmJvcmRlcldpZHRoID09PSBQb0RpdmlkZXJTaXplLm1lZGl1bSkge1xuICAgICAgdGhpcy5jb29yZGluYXRlWDEgPSAnMC4yJSc7XG4gICAgICB0aGlzLmNvb3JkaW5hdGVYMiA9ICc5OS44JSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29vcmRpbmF0ZVgxID0gJzAuMyUnO1xuICAgICAgdGhpcy5jb29yZGluYXRlWDIgPSAnOTkuNyUnO1xuICAgIH1cbiAgfVxufVxuIl19