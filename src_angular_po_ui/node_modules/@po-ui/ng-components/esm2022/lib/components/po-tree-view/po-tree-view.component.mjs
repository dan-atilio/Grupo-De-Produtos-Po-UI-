import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTreeViewBaseComponent } from './po-tree-view-base.component';
import { PoTreeViewService } from './services/po-tree-view.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/po-tree-view.service";
import * as i2 from "@angular/common";
import * as i3 from "../po-container/po-container.component";
import * as i4 from "./po-tree-view-item/po-tree-view-item.component";
function PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tree-view-item", 4);
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-item", item_r2)("p-selectable", ctx_r1.selectable)("p-single-select", ctx_r1.singleSelect)("p-selected-value", ctx_r1.selectedValue);
} }
function PoTreeViewComponent_po_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-container", 1)(1, "ul", 2);
    i0.ɵɵtemplate(2, PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template, 1, 4, "po-tree-view-item", 3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.items)("ngForTrackBy", ctx_r0.trackByFunction);
} }
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="PO Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="PO Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
export class PoTreeViewComponent extends PoTreeViewBaseComponent {
    treeViewService;
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    ngOnChanges(changes) {
        if (changes?.['inputedItems']) {
            this.items = this.inputedItems;
        }
    }
    trackByFunction(index) {
        return index;
    }
    static ɵfac = function PoTreeViewComponent_Factory(t) { return new (t || PoTreeViewComponent)(i0.ɵɵdirectiveInject(i1.PoTreeViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewComponent, selectors: [["po-tree-view"]], features: [i0.ɵɵProvidersFeature([PoTreeViewService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["p-no-padding", "", 4, "ngIf"], ["p-no-padding", ""], [1, "po-tree-view"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value"]], template: function PoTreeViewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoTreeViewComponent_po_container_0_Template, 3, 2, "po-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.hasItems);
        } }, dependencies: [i2.NgForOf, i2.NgIf, i3.PoContainerComponent, i4.PoTreeViewItemComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewComponent, [{
        type: Component,
        args: [{ selector: 'po-tree-view', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PoTreeViewService], template: "<po-container *ngIf=\"hasItems\" p-no-padding>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item\n      *ngFor=\"let item of items; trackBy: trackByFunction\"\n      [p-item]=\"item\"\n      [p-selectable]=\"selectable\"\n      [p-single-select]=\"singleSelect\"\n      [p-selected-value]=\"selectedValue\"\n    >\n    </po-tree-view-item>\n  </ul>\n</po-container>\n" }]
    }], () => [{ type: i1.PoTreeViewService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTreeViewComponent, { className: "PoTreeViewComponent", filePath: "lib/components/po-tree-view/po-tree-view.component.ts", lineNumber: 38 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQW9DLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7O0lDRmhFLHVDQU9vQjs7OztJQUxsQixnQ0FBZSxtQ0FBQSx3Q0FBQSwwQ0FBQTs7O0lBSnJCLHVDQUE0QyxZQUFBO0lBRXhDLCtHQU9vQjtJQUN0QixpQkFBSyxFQUFBOzs7SUFQZ0IsZUFBVTtJQUFWLHNDQUFVLHdDQUFBOztBREdqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBT0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLHVCQUF1QjtJQUsxQztJQUpwQixJQUFJLFFBQVE7UUFDVixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsWUFBb0IsZUFBa0M7UUFDcEQsS0FBSyxFQUFFLENBQUM7UUFEVSxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFFdEQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQTRCLEVBQUUsRUFBRTtZQUN6RSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUE0QixFQUFFLEVBQUU7WUFDekUsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBdUI7UUFDakMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQWE7UUFDM0IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzZFQTNCVSxtQkFBbUI7NkRBQW5CLG1CQUFtQixrRUFGbkIsQ0FBQyxpQkFBaUIsQ0FBQztZQ25DaEMsc0ZBV2U7O1lBWEEsbUNBQWM7OztpRkRxQ2hCLG1CQUFtQjtjQU4vQixTQUFTOzJCQUNFLGNBQWMsbUJBRVAsdUJBQXVCLENBQUMsTUFBTSxhQUNwQyxDQUFDLGlCQUFpQixDQUFDOztrRkFFbkIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXRyZWUtdmlldy1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1RyZWVWaWV3SXRlbSB9IGZyb20gJy4vcG8tdHJlZS12aWV3LWl0ZW0vcG8tdHJlZS12aWV3LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVHJlZVZpZXdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wby10cmVlLXZpZXcuc2VydmljZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LWJhc2ljXCIgdGl0bGU9XCJQTyBUcmVlIFZpZXcgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy9zYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy9zYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRyZWUtdmlldy1sYWJzXCIgdGl0bGU9XCJQTyBUcmVlIFZpZXcgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWxhYnMvc2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzL3NhbXBsZS1wby10cmVlLXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZVwiIHRpdGxlPVwiUE8gVHJlZSBWaWV3IC0gRm9sZGVyIFN0cnVjdHVyZVwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUvc2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlL3NhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctc3VwZXJtYXJrZXRcIiB0aXRsZT1cIlBPIFRyZWUgVmlldyAtIFN1cGVybWFya2V0XCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQvc2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQvc2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10cmVlLXZpZXcnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdHJlZS12aWV3LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1BvVHJlZVZpZXdTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQb1RyZWVWaWV3Q29tcG9uZW50IGV4dGVuZHMgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIGdldCBoYXNJdGVtcygpIHtcbiAgICByZXR1cm4gISEodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyZWVWaWV3U2VydmljZTogUG9UcmVlVmlld1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2Uub25FeHBhbmQoKS5zdWJzY3JpYmUoKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pID0+IHtcbiAgICAgIHRoaXMuZW1pdEV4cGFuZGVkKHRyZWVWaWV3SXRlbSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5vblNlbGVjdCgpLnN1YnNjcmliZSgodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkgPT4ge1xuICAgICAgdGhpcy5lbWl0U2VsZWN0ZWQodHJlZVZpZXdJdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM/OiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXM/LlsnaW5wdXRlZEl0ZW1zJ10pIHtcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmlucHV0ZWRJdGVtcztcbiAgICB9XG4gIH1cblxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIiwiPHBvLWNvbnRhaW5lciAqbmdJZj1cImhhc0l0ZW1zXCIgcC1uby1wYWRkaW5nPlxuICA8dWwgY2xhc3M9XCJwby10cmVlLXZpZXdcIj5cbiAgICA8cG8tdHJlZS12aWV3LWl0ZW1cbiAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zOyB0cmFja0J5OiB0cmFja0J5RnVuY3Rpb25cIlxuICAgICAgW3AtaXRlbV09XCJpdGVtXCJcbiAgICAgIFtwLXNlbGVjdGFibGVdPVwic2VsZWN0YWJsZVwiXG4gICAgICBbcC1zaW5nbGUtc2VsZWN0XT1cInNpbmdsZVNlbGVjdFwiXG4gICAgICBbcC1zZWxlY3RlZC12YWx1ZV09XCJzZWxlY3RlZFZhbHVlXCJcbiAgICA+XG4gICAgPC9wby10cmVlLXZpZXctaXRlbT5cbiAgPC91bD5cbjwvcG8tY29udGFpbmVyPlxuIl19