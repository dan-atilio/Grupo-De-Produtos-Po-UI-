import { Component, ContentChild, HostListener, ViewChild, ViewChildren } from '@angular/core';
import { animate, keyframes, style } from '@angular/animations';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PoSlideBaseComponent } from './po-slide-base.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
import * as i2 from "@angular/common";
import * as i3 from "./po-slide-circles/po-slide-circles.component";
import * as i4 from "./po-slide-control/po-slide-control.component";
import * as i5 from "./po-slide-item/po-slide-item.component";
const _c0 = ["slide"];
function PoSlideComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "po-slide-item", 8);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", item_r5.action)("p-data", item_r5)("p-image", item_r5.image)("p-image-height", ctx_r1.imageHeight)("p-template", ctx_r1.slideContentTemplate)("p-alt", item_r5.alt)("p-link", item_r5.link);
} }
function PoSlideComponent_po_slide_control_5_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-control", 9);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_5_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.previousControl()); });
    i0.ɵɵelementEnd();
} }
function PoSlideComponent_po_slide_control_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-control", 10);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_6_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.nextControl()); });
    i0.ɵɵelementEnd();
} }
function PoSlideComponent_po_slide_circles_7_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-circles", 11);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_circles_7_Template_po_slide_circles_p_click_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.goToItem($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-current-slide-index", ctx_r4.currentSlideIndex)("p-items", ctx_r4.slideItems);
} }
const poSlideDefaultHeight = 336;
const poSlideIntervalMin = 1000;
const poSlideMinHeight = 192;
const poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-external-controls" title="PO Slide - External Controls">
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
 * </example>
 */
export class PoSlideComponent extends PoSlideBaseComponent {
    builder;
    slideContentTemplate;
    slide;
    itemsElements;
    currentSlideIndex = 0;
    imageHeight;
    slideItems = [];
    slideItemWidth;
    isLoaded = false;
    player;
    setInterval;
    resize$ = new Subject();
    resizeSubscription;
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    constructor(builder) {
        super();
        this.builder = builder;
    }
    onResize() {
        this.resize$.next({});
    }
    ngOnInit() {
        this.resizeSubscription = this.resize$.pipe(debounceTime(150)).subscribe(() => {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        });
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    }
    ngOnDestroy() {
        this.resizeSubscription?.unsubscribe();
    }
    /**
     * Método que retorna o index do slide atual
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *  myFunction() {
     *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
     * }
     *
     * ```
     */
    getCurrentSlideIndex() {
        return this.currentSlideIndex;
    }
    goToItem(index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    nextControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * Método para chamar o próximo slide.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.next();
     * }
     * ```
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * Método para chamar o slide anterior.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.previous();
     * }
     * ```
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    previousControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    setSlideHeight(height) {
        this.setHeight(height);
    }
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(() => {
                    this.next();
                }, this.interval)
                : undefined;
    }
    animate(offset) {
        if (this.hasElements) {
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))]);
    }
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    createArrayFromSlides(slides) {
        const isStringArray = slides.every(item => typeof item === 'string');
        if (isStringArray) {
            slides.forEach(element => this.slideItems.push({ image: `${element}` }));
        }
        else {
            this.slideItems = [...slides];
        }
    }
    setDefaultHeight(height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = `${poSlideDefaultHeight}px`;
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    setHeight(height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
    static ɵfac = function PoSlideComponent_Factory(t) { return new (t || PoSlideComponent)(i0.ɵɵdirectiveInject(i1.AnimationBuilder)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideComponent, selectors: [["po-slide"]], contentQueries: function PoSlideComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoSlideContentTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slideContentTemplate = _t.first);
        } }, viewQuery: function PoSlideComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
            i0.ɵɵviewQuery(PoSlideItemComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slide = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsElements = _t);
        } }, hostBindings: function PoSlideComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("resize", function PoSlideComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        } }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 8, vars: 4, consts: [[1, "po-slide-wrapper"], [1, "po-slide-outer"], [1, "po-slide-inner"], ["slide", ""], [4, "ngFor", "ngForOf"], ["p-control", "previous", 3, "p-click", 4, "ngIf"], ["p-control", "next", 3, "p-click", 4, "ngIf"], [3, "p-current-slide-index", "p-items", "p-click", 4, "ngIf"], [3, "p-action", "p-data", "p-image", "p-image-height", "p-template", "p-alt", "p-link"], ["p-control", "previous", 3, "p-click"], ["p-control", "next", 3, "p-click"], [3, "p-current-slide-index", "p-items", "p-click"]], template: function PoSlideComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵtemplate(4, PoSlideComponent_ng_container_4_Template, 2, 7, "ng-container", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoSlideComponent_po_slide_control_5_Template, 1, 0, "po-slide-control", 5)(6, PoSlideComponent_po_slide_control_6_Template, 1, 0, "po-slide-control", 6);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoSlideComponent_po_slide_circles_7_Template, 1, 2, "po-slide-circles", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngForOf", ctx.slideItems);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasSlides && ctx.slides.length > 1);
        } }, dependencies: [i2.NgForOf, i2.NgIf, i3.PoSlideCirclesComponent, i4.PoSlideControlComponent, i5.PoSlideItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideComponent, [{
        type: Component,
        args: [{ selector: 'po-slide', template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\n      p-control=\"previous\"\n      (p-click)=\"previousControl()\"\n    >\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n" }]
    }], () => [{ type: i1.AnimationBuilder }], { slideContentTemplate: [{
            type: ContentChild,
            args: [PoSlideContentTemplateDirective, { static: true }]
        }], slide: [{
            type: ViewChild,
            args: ['slide', { static: true }]
        }], itemsElements: [{
            type: ViewChildren,
            args: [PoSlideItemComponent]
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSlideComponent, { className: "PoSlideComponent", filePath: "lib/components/po-slide/po-slide.component.ts", lineNumber: 64 }); })();
//# sourceMappingURL=data:application/json;base64,