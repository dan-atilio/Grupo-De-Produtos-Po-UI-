import { Input, Directive, HostBinding } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoColorPaletteEnum } from '../../enums/po-color-palette.enum';
import * as i0 from "@angular/core";
const poBadgeColors = Object.values(PoColorPaletteEnum);
const PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * @description
 *
 * Utilizado para exibir a quantidade de notificações.
 */
export class PoBadgeBaseComponent {
    badgeValue;
    customColor;
    _color = PO_BADGE_COLOR_DEFAULT;
    _value;
    _status;
    _ariaLabel;
    /**
     * @description
     *
     * Define um `aria-label` para o `po-badge`
     */
    set ariaLabel(value) {
        if (value === undefined) {
            this._ariaLabel = '';
        }
        this._ariaLabel = value;
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Determina a cor do `po-badge`. As maneiras de customizar as cores são:
     * - Hexadeximal, por exemplo `#c64840`;
     * - RGB, como `rgb(0, 0, 165)`;
     * - O nome da cor, por exemplo `blue`;
     * - Usando uma das cores do tema do PO:
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * @default `color-07`
     */
    set color(value) {
        if (value !== undefined && value.includes('color')) {
            this._color = poBadgeColors.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
        }
        else {
            CSS.supports('background-color', value) ? (this.customColor = value) : (this.customColor = undefined);
        }
    }
    get color() {
        return this._color;
    }
    /**
     * @optional
     *
     * @description
     * Ícone exibido no `po-badge`.
     *
     * Para exibir icone do status atual declare a propriedade `p-icon`. conforme exemplo abaixo:
     * ```
     * <po-badge [p-icon]="true"></po-badge>
     * ```
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-badge p-icon="po-icon-user"></po-badge>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-badge p-icon="fa fa-podcast"></po-badge>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-badge [p-icon]="template"></po-badge>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     */
    icon;
    /**
     * @description
     *
     * Define o estado do `po-badge`
     *
     * Valores válidos:
     * - `positive`: Define a cor do `po-badge` com a cor de feedback positivo.;
     * - `negative`: Define a cor do `po-badge` com a cor de feedback negative.;
     * - `warning`: Define a cor do `po-badge` com a cor de feedback warning.;
     * - `disabled`: Define a cor do `po-badge` com a cor de feedback disabled;
     *
     */
    set status(value) {
        this._status = ['positive', 'negative', 'warning', 'disabled'].includes(value) ? value : undefined;
    }
    get status() {
        return this._status;
    }
    /**
     * @description
     *
     * Define o tamanho do `po-badge`
     *
     * Valores válidos:
     * - `small`: o `po-badge` fica do tamanho padrão, com 8px de altura.;
     * - `medium`: o `po-badge` fica do tamanho padrão, com 16px de altura.;
     * - `large`: o `po-badge` fica do tamanho padrão, com 24px de altura.;
     *
     * @default `medium`
     */
    size = 'medium';
    /**
     * @description
     *
     * Exibe uma borda para o `po-badge`
     *
     * > Pode personalizar cor da bordar com a propriedade `p-color-border`
     */
    showBorder = false;
    /**
     * @description
     *
     * Número exibido no componente, caso o mesmo seja maior que 9 o valor exibido será 9+.
     */
    set value(value) {
        this._value = value <= 0 ? 0 : convertToInt(value);
    }
    get value() {
        return this._value;
    }
    static ɵfac = function PoBadgeBaseComponent_Factory(t) { return new (t || PoBadgeBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBadgeBaseComponent, hostVars: 1, hostBindings: function PoBadgeBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-status", ctx.status);
        } }, inputs: { ariaLabel: [i0.ɵɵInputFlags.None, "p-aria-label", "ariaLabel"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], status: [i0.ɵɵInputFlags.None, "p-status", "status"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], showBorder: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-border", "showBorder", convertToBoolean], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeBaseComponent, [{
        type: Directive
    }], null, { ariaLabel: [{
            type: Input,
            args: ['p-aria-label']
        }], color: [{
            type: Input,
            args: ['p-color']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], status: [{
            type: HostBinding,
            args: ['attr.p-status']
        }, {
            type: Input,
            args: ['p-status']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], showBorder: [{
            type: Input,
            args: [{ alias: 'p-show-border', transform: convertToBoolean }]
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,