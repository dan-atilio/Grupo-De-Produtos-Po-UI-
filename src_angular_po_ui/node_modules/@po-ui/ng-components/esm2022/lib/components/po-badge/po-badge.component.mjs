import { Component, inject } from '@angular/core';
import { PoBadgeBaseComponent } from './po-badge-base.component';
import { PoBadgeLiteralsDefault } from './interfaces/po-badge-literals-default';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-icon/po-icon.component";
function PoBadgeComponent_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 3);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-icon", ctx_r0.badgeIcon);
} }
function PoBadgeComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 4);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.badgeValue);
} }
const _c0 = a0 => ({ "background-color": a0 });
const _c1 = () => ({});
const PO_BADGE_MAX_NOTIFICATIONS = 9;
/**
 * @docsExtends PoBadgeBaseComponent
 *
 * @example
 *
 * <example name="po-badge-basic" title="PO Badge Basic">
 *  <file name="sample-po-badge-basic/sample-po-badge-basic.component.html"> </file>
 *  <file name="sample-po-badge-basic/sample-po-badge-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-badge-labs" title="PO Badge Labs">
 *  <file name="sample-po-badge-labs/sample-po-badge-labs.component.html"> </file>
 *  <file name="sample-po-badge-labs/sample-po-badge-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-badge-message" title="PO Badge Message">
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.html"> </file>
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.css"> </file>
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.ts"> </file>
 * </example>
 */
export class PoBadgeComponent extends PoBadgeBaseComponent {
    isNotification = false;
    notificationLabel = '';
    literals;
    badgeIcon = '';
    isValidValue = false;
    poLanguageService = inject(PoLanguageService);
    ngOnInit() {
        this.literals = PoBadgeLiteralsDefault[this.poLanguageService.getShortLanguage()];
        this.initialize();
    }
    ngOnChanges(changes) {
        if (changes['status'] || changes['icon']) {
            this.setStatus();
        }
        if (changes['value']) {
            this.setBadgeValue();
            this.setBadgeNotification(changes['value'].currentValue);
            this.setLiterals();
        }
    }
    initialize() {
        this.setStatus();
        this.setLiterals();
        this.setBadgeValue();
        this.setBadgeNotification(this.value);
    }
    getChangeStyle() {
        if ((this.color === 'color-07' && !this.customColor) || this.status) {
            return 'po-badge-default';
        }
        else if (this.color) {
            return `po-${this.color}`;
        }
    }
    setLiterals() {
        if (this.value) {
            this.notificationLabel =
                this.value > 1
                    ? `${this.ariaLabel ?? ''} ${this.value} ${this.literals?.notifications}`
                    : `${this.ariaLabel ?? ''} ${this.value} ${this.literals?.notification}`;
        }
        else {
            this.notificationLabel = `${this.ariaLabel ?? ''} ${this.literals?.notification}`;
        }
    }
    setStatus() {
        this.isNotification = false;
        this.badgeValue = null;
        this.switchIconStatus();
    }
    switchIconStatus() {
        if (typeof this.icon === 'boolean' && this.icon) {
            this.badgeIcon = '';
            if (['positive', 'negative', 'warning', 'disabled'].includes(this.status)) {
                switch (this.status) {
                    case 'positive':
                        this.badgeIcon = 'ICON_OK';
                        break;
                    case 'negative':
                        this.badgeIcon = 'ICON_MINUS';
                        break;
                    case 'warning':
                        this.badgeIcon = 'ICON_WARNING';
                        break;
                }
            }
        }
        else {
            this.badgeIcon = this.icon;
        }
    }
    setBadgeNotification(value) {
        if (value > 1 && !this.status) {
            this.isNotification = true;
            return true;
        }
        else {
            this.isNotification = false;
            this.badgeValue = null;
            return false;
        }
    }
    setBadgeValue() {
        if (this.value) {
            this.checkBadgeValue(this.value);
        }
    }
    checkBadgeValue(value) {
        this.isValidValue = Number.isInteger(value) && value >= 1;
        this.badgeValue = this.isValidValue ? this.formatBadgeValue(value) : '';
    }
    formatBadgeValue(value) {
        return value > PO_BADGE_MAX_NOTIFICATIONS ? '9+' : value.toString();
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoBadgeComponent_BaseFactory; return function PoBadgeComponent_Factory(t) { return (ɵPoBadgeComponent_BaseFactory || (ɵPoBadgeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoBadgeComponent)))(t || PoBadgeComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBadgeComponent, selectors: [["po-badge"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 3, vars: 16, consts: [[3, "ariaLabel", "ngStyle"], [3, "p-icon", 4, "ngIf"], ["class", "po-badge-value", "aria-hidden", "true", 4, "ngIf"], [3, "p-icon"], ["aria-hidden", "true", 1, "po-badge-value"]], template: function PoBadgeComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoBadgeComponent_po_icon_1_Template, 1, 1, "po-icon", 1)(2, PoBadgeComponent_span_2_Template, 2, 1, "span", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate2("", ctx.getChangeStyle(), " po-badge po-badge-", ctx.size ? ctx.size : "medium", "");
            i0.ɵɵclassProp("po-badge-notification", ctx.isNotification && !ctx.status)("po-badge-border", ctx.showBorder);
            i0.ɵɵproperty("ariaLabel", ctx.notificationLabel)("ngStyle", ctx.customColor && !ctx.status ? i0.ɵɵpureFunction1(13, _c0, ctx.customColor) : i0.ɵɵpureFunction0(15, _c1));
            i0.ɵɵattribute("data-status", ctx.status);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.isNotification && ctx.size !== "small" && ctx.badgeIcon && ctx.status !== "disabled");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.value > 1);
        } }, dependencies: [i1.NgIf, i1.NgStyle, i2.PoIconComponent], styles: ["[_nghost-%COMP%]{display:inline-block;vertical-align:middle}"] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeComponent, [{
        type: Component,
        args: [{ selector: 'po-badge', template: "<div\n  class=\"{{ getChangeStyle() }} po-badge po-badge-{{ size ? size : 'medium' }}\"\n  [class.po-badge-notification]=\"isNotification && !status\"\n  [class.po-badge-border]=\"showBorder\"\n  [attr.data-status]=\"status\"\n  [ariaLabel]=\"notificationLabel\"\n  [ngStyle]=\"customColor && !status ? { 'background-color': customColor } : {}\"\n>\n  <po-icon\n    *ngIf=\"!isNotification && size !== 'small' && badgeIcon && status !== 'disabled'\"\n    [p-icon]=\"badgeIcon\"\n  ></po-icon>\n  <span *ngIf=\"value > 1\" class=\"po-badge-value\" aria-hidden=\"true\">{{ badgeValue }}</span>\n</div>\n", styles: [":host{display:inline-block;vertical-align:middle}\n"] }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoBadgeComponent, { className: "PoBadgeComponent", filePath: "lib/components/po-badge/po-badge.component.ts", lineNumber: 36 }); })();
//# sourceMappingURL=data:application/json;base64,