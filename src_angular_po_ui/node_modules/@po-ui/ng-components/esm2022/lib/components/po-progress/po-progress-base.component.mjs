import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
import { PoProgressSize } from './enums/po-progress-size.enum';
import * as i0 from "@angular/core";
const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                  |
 * | **Error**                              |                                                       |                                                 |
 * | `--text-color-error`                   | Cor do texto no estado error                          | `var(--color-feedback-negative-dark)`           |
 * | `--color-icon-error`                   | Cor do ícone no estado error                          | `var(--color-feedback-negative-dark)`           |
 * | **po-progress-bar**                    |                                                       |                                                 |
 * | `--background-color-tray`              | Cor do background                                     | `var(--color-brand-01-lightest)`                |
 * | `--background-color-indicator`         | Cor do background do indicador                        | `var(--color-action-default)`                   |
 *
 */
export class PoProgressBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     */
    info;
    /**
     * @optional
     *
     * @description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     */
    infoIcon;
    /**
     * @optional
     *
     * @description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * @default `PoProgressStatus.Default`
     */
    status = PoProgressStatus.Default;
    /**
     * @optional
     *
     * @description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     */
    text;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     */
    cancel = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     */
    retry = new EventEmitter();
    _indeterminate;
    _value = 0;
    _size = 'large';
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição do tamanho da altura da barra de progresso.
     *
     * Valores válidos:
     *  - `medium`: tamanho médio
     *  - `large`: tamanho grande
     *
     * @default `large`
     */
    set size(value) {
        this._size = PoProgressSize[value] ? PoProgressSize[value] : PoProgressSize.large;
    }
    get size() {
        return this._size;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a exibição da porcentagem atual da barra de progresso.
     *
     * @default `false`
     */
    showPercentage = false;
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
    static ɵfac = function PoProgressBaseComponent_Factory(t) { return new (t || PoProgressBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoProgressBaseComponent, inputs: { info: [i0.ɵɵInputFlags.None, "p-info", "info"], infoIcon: [i0.ɵɵInputFlags.None, "p-info-icon", "infoIcon"], status: [i0.ɵɵInputFlags.None, "p-status", "status"], text: [i0.ɵɵInputFlags.None, "p-text", "text"], indeterminate: [i0.ɵɵInputFlags.None, "p-indeterminate", "indeterminate"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], showPercentage: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-percentage", "showPercentage", convertToBoolean] }, outputs: { cancel: "p-cancel", retry: "p-retry" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressBaseComponent, [{
        type: Directive
    }], null, { info: [{
            type: Input,
            args: ['p-info']
        }], infoIcon: [{
            type: Input,
            args: ['p-info-icon']
        }], status: [{
            type: Input,
            args: ['p-status']
        }], text: [{
            type: Input,
            args: ['p-text']
        }], cancel: [{
            type: Output,
            args: ['p-cancel']
        }], retry: [{
            type: Output,
            args: ['p-retry']
        }], indeterminate: [{
            type: Input,
            args: ['p-indeterminate']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], showPercentage: [{
            type: Input,
            args: [{ alias: 'p-show-percentage', transform: convertToBoolean }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,