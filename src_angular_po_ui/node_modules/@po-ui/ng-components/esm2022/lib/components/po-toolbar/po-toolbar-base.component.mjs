import { Input, Directive } from '@angular/core';
import { convertToInt } from '../../utils/util';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
export class PoToolbarBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações que serão exibidas ao clicar no ícone declarado em `p-actions-icon`.
     */
    actions;
    /**
     * @optional
     *
     * @description
     *
     * Define um [ícone](/guides/icons) para a propriedade `p-actions`.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-toolbar p-actions-icon="po-icon-user" [p-actions]="actions"></po-toolbar>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-toolbar p-actions-icon="far fa-comment-alt" [p-actions]="actions"></po-toolbar>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-toolbar [p-actions-icon]="template" [p-actions]="actions"></po-toolbar>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     *
     * > Caso não haja ações definidas em `p-actions`, o ícone não será exibido.
     *
     * @default `po-icon-more`
     */
    actionsIcon;
    /** Define o objeto que será o cabeçalho da lista de ações com as informações do perfil. */
    profile;
    /** Define uma lista de ações que serão exibidas ao clicar no ícone do perfil. */
    profileActions;
    /** Se falso, oculta o ícone de notificações. */
    showNotification = true;
    /** Título do *toolbar* e aplicação. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações da notificação.
     */
    notificationActions;
    _notificationNumber;
    /**
     * @optional
     *
     * @description
     *
     * Número de notificações.
     */
    set notificationNumber(value) {
        this._notificationNumber = convertToInt(value, 0);
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
    get isShowProfile() {
        return !!(this.profile || this.profileActions);
    }
    static ɵfac = function PoToolbarBaseComponent_Factory(t) { return new (t || PoToolbarBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoToolbarBaseComponent, inputs: { actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], actionsIcon: [i0.ɵɵInputFlags.None, "p-actions-icon", "actionsIcon"], profile: [i0.ɵɵInputFlags.None, "p-profile", "profile"], profileActions: [i0.ɵɵInputFlags.None, "p-profile-actions", "profileActions"], showNotification: [i0.ɵɵInputFlags.None, "p-show-notification", "showNotification"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], notificationActions: [i0.ɵɵInputFlags.None, "p-notification-actions", "notificationActions"], notificationNumber: [i0.ɵɵInputFlags.None, "p-notification-number", "notificationNumber"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarBaseComponent, [{
        type: Directive
    }], null, { actions: [{
            type: Input,
            args: ['p-actions']
        }], actionsIcon: [{
            type: Input,
            args: ['p-actions-icon']
        }], profile: [{
            type: Input,
            args: ['p-profile']
        }], profileActions: [{
            type: Input,
            args: ['p-profile-actions']
        }], showNotification: [{
            type: Input,
            args: ['p-show-notification']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], notificationActions: [{
            type: Input,
            args: ['p-notification-actions']
        }], notificationNumber: [{
            type: Input,
            args: ['p-notification-number']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10b29sYmFyL3BvLXRvb2xiYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUtoRDs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQzs7Ozs7O09BTUc7SUFDaUIsT0FBTyxDQUEwQjtJQUVyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTRCRztJQUNzQixXQUFXLENBQThCO0lBRWxFLDJGQUEyRjtJQUN2RSxPQUFPLENBQW9CO0lBRS9DLGlGQUFpRjtJQUNyRCxjQUFjLENBQTBCO0lBRXBFLGdEQUFnRDtJQUNsQixnQkFBZ0IsR0FBYSxJQUFJLENBQUM7SUFFaEUsdUNBQXVDO0lBQ3JCLEtBQUssQ0FBUztJQUVoQzs7Ozs7O09BTUc7SUFDOEIsbUJBQW1CLENBQTBCO0lBRXRFLG1CQUFtQixDQUFVO0lBRXJDOzs7Ozs7T0FNRztJQUNILElBQW9DLGtCQUFrQixDQUFDLEtBQWE7UUFDbEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Z0ZBakZVLHNCQUFzQjs2REFBdEIsc0JBQXNCOztpRkFBdEIsc0JBQXNCO2NBRGxDLFNBQVM7Z0JBU1ksT0FBTztrQkFBMUIsS0FBSzttQkFBQyxXQUFXO1lBK0JPLFdBQVc7a0JBQW5DLEtBQUs7bUJBQUMsZ0JBQWdCO1lBR0gsT0FBTztrQkFBMUIsS0FBSzttQkFBQyxXQUFXO1lBR1UsY0FBYztrQkFBekMsS0FBSzttQkFBQyxtQkFBbUI7WUFHSSxnQkFBZ0I7a0JBQTdDLEtBQUs7bUJBQUMscUJBQXFCO1lBR1YsS0FBSztrQkFBdEIsS0FBSzttQkFBQyxTQUFTO1lBU2lCLG1CQUFtQjtrQkFBbkQsS0FBSzttQkFBQyx3QkFBd0I7WUFXSyxrQkFBa0I7a0JBQXJELEtBQUs7bUJBQUMsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvVG9vbGJhckFjdGlvbiB9IGZyb20gJy4vcG8tdG9vbGJhci1hY3Rpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVG9vbGJhclByb2ZpbGUgfSBmcm9tICcuL3BvLXRvb2xiYXItcHJvZmlsZS9wby10b29sYmFyLXByb2ZpbGUuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXRvb2xiYXJgIMOpIHVtIGNhYmXDp2FsaG8gcGFyYSBvIHTDrXR1bG8gZGEgYXBsaWNhw6fDo28gZSBpbmZvcm1hw6fDtWVzIGRlIHVzdcOhcmlvIGUgbm90aWZpY2HDp8O1ZXMgcXVhbmRvIGhvdXZlciBuZWNlc3NpZGFkZS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9Ub29sYmFyQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSB1bWEgbGlzdGEgZGUgYcOnw7VlcyBxdWUgc2Vyw6NvIGV4aWJpZGFzIGFvIGNsaWNhciBubyDDrWNvbmUgZGVjbGFyYWRvIGVtIGBwLWFjdGlvbnMtaWNvbmAuXG4gICAqL1xuICBASW5wdXQoJ3AtYWN0aW9ucycpIGFjdGlvbnM/OiBBcnJheTxQb1Rvb2xiYXJBY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSB1bSBbw61jb25lXSgvZ3VpZGVzL2ljb25zKSBwYXJhIGEgcHJvcHJpZWRhZGUgYHAtYWN0aW9uc2AuXG4gICAqXG4gICAqIMOJIHBvc3PDrXZlbCB1c2FyIHF1YWxxdWVyIHVtIGRvcyDDrWNvbmVzIGRhIFtCaWJsaW90ZWNhIGRlIMOtY29uZXNdKC9ndWlkZXMvaWNvbnMpLiBjb25mb3JtZSBleGVtcGxvIGFiYWl4bzpcbiAgICogYGBgXG4gICAqIDxwby10b29sYmFyIHAtYWN0aW9ucy1pY29uPVwicG8taWNvbi11c2VyXCIgW3AtYWN0aW9uc109XCJhY3Rpb25zXCI+PC9wby10b29sYmFyPlxuICAgKiBgYGBcbiAgICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgdXRpbGl6YXIgb3V0cmFzIGZvbnRlcyBkZSDDrWNvbmVzLCBwb3IgZXhlbXBsbyBhIGJpYmxpb3RlY2EgKkZvbnQgQXdlc29tZSosIGRhIHNlZ3VpbnRlIGZvcm1hOlxuICAgKiBgYGBcbiAgICogPHBvLXRvb2xiYXIgcC1hY3Rpb25zLWljb249XCJmYXIgZmEtY29tbWVudC1hbHRcIiBbcC1hY3Rpb25zXT1cImFjdGlvbnNcIj48L3BvLXRvb2xiYXI+XG4gICAqIGBgYFxuICAgKiBPdXRyYSBvcMOnw6NvIHNlcmlhIGEgY3VzdG9taXphw6fDo28gZG8gw61jb25lIGF0cmF2w6lzIGRvIGBUZW1wbGF0ZVJlZmAsIGNvbmZvcm1lIGV4ZW1wbG8gYWJhaXhvOlxuICAgKiBgYGBcbiAgICogPHBvLXRvb2xiYXIgW3AtYWN0aW9ucy1pY29uXT1cInRlbXBsYXRlXCIgW3AtYWN0aW9uc109XCJhY3Rpb25zXCI+PC9wby10b29sYmFyPlxuICAgKlxuICAgKiA8bmctdGVtcGxhdGUgI3RlbXBsYXRlPlxuICAgKiAgPGlvbi1pY29uIHN0eWxlPVwiZm9udC1zaXplOiBpbmhlcml0XCIgbmFtZT1cImhlYXJ0XCI+PC9pb24taWNvbj5cbiAgICogPC9uZy10ZW1wbGF0ZT5cbiAgICogYGBgXG4gICAqID4gUGFyYSBvIMOtY29uZSBlbnF1YWRyYXIgY29ycmV0YW1lbnRlLCBkZXZlLXNlIHV0aWxpemFyIGBmb250LXNpemU6IGluaGVyaXRgIGNhc28gbyDDrWNvbmUgdXRpbGl6YWRvIG7Do28gYXBsaXF1ZS1vLlxuICAgKlxuICAgKiA+IENhc28gbsOjbyBoYWphIGHDp8O1ZXMgZGVmaW5pZGFzIGVtIGBwLWFjdGlvbnNgLCBvIMOtY29uZSBuw6NvIHNlcsOhIGV4aWJpZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBwby1pY29uLW1vcmVgXG4gICAqL1xuICBASW5wdXQoJ3AtYWN0aW9ucy1pY29uJykgYWN0aW9uc0ljb24/OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICAvKiogRGVmaW5lIG8gb2JqZXRvIHF1ZSBzZXLDoSBvIGNhYmXDp2FsaG8gZGEgbGlzdGEgZGUgYcOnw7VlcyBjb20gYXMgaW5mb3JtYcOnw7VlcyBkbyBwZXJmaWwuICovXG4gIEBJbnB1dCgncC1wcm9maWxlJykgcHJvZmlsZT86IFBvVG9vbGJhclByb2ZpbGU7XG5cbiAgLyoqIERlZmluZSB1bWEgbGlzdGEgZGUgYcOnw7VlcyBxdWUgc2Vyw6NvIGV4aWJpZGFzIGFvIGNsaWNhciBubyDDrWNvbmUgZG8gcGVyZmlsLiAqL1xuICBASW5wdXQoJ3AtcHJvZmlsZS1hY3Rpb25zJykgcHJvZmlsZUFjdGlvbnM/OiBBcnJheTxQb1Rvb2xiYXJBY3Rpb24+O1xuXG4gIC8qKiBTZSBmYWxzbywgb2N1bHRhIG8gw61jb25lIGRlIG5vdGlmaWNhw6fDtWVzLiAqL1xuICBASW5wdXQoJ3Atc2hvdy1ub3RpZmljYXRpb24nKSBzaG93Tm90aWZpY2F0aW9uPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgLyoqIFTDrXR1bG8gZG8gKnRvb2xiYXIqIGUgYXBsaWNhw6fDo28uICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgYcOnw7VlcyBkYSBub3RpZmljYcOnw6NvLlxuICAgKi9cbiAgQElucHV0KCdwLW5vdGlmaWNhdGlvbi1hY3Rpb25zJykgbm90aWZpY2F0aW9uQWN0aW9ucz86IEFycmF5PFBvVG9vbGJhckFjdGlvbj47XG5cbiAgcHJpdmF0ZSBfbm90aWZpY2F0aW9uTnVtYmVyPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE7Dum1lcm8gZGUgbm90aWZpY2HDp8O1ZXMuXG4gICAqL1xuICBASW5wdXQoJ3Atbm90aWZpY2F0aW9uLW51bWJlcicpIHNldCBub3RpZmljYXRpb25OdW1iZXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX25vdGlmaWNhdGlvbk51bWJlciA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgMCk7XG4gIH1cblxuICBnZXQgbm90aWZpY2F0aW9uTnVtYmVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX25vdGlmaWNhdGlvbk51bWJlcjtcbiAgfVxuXG4gIGdldCBpc1Nob3dQcm9maWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLnByb2ZpbGUgfHwgdGhpcy5wcm9maWxlQWN0aW9ucyk7XG4gIH1cbn1cbiJdfQ==