import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import { PoItemListType } from './enums/po-item-list-type.enum';
import { convertToBoolean } from '../../utils/util';
import { PoItemListFilterMode } from './enums/po-item-list-filter-mode.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
export const poListBoxLiteralsDefault = {
    en: {
        noItems: 'No items found'
    },
    es: {
        noItems: 'No se encontraron artículos'
    },
    pt: {
        noItems: 'Nenhum item encontrado'
    },
    ru: {
        noItems: 'ничего не найдено'
    }
};
/**
 * @description
 * O componente `po-listbox` é uma caixa suspensa que aparece sobre a interface após ser acionado por um gatilho visível em tela, como o dropdown. Ele apoia trazendo agrupamentos de opções. O componente listbox é composto pelo componente [**PO Item List**](/documentation/po-item-list).
 */
export class PoListBoxBaseComponent {
    _items = [];
    _type;
    _literals;
    language = poLocaleDefault;
    visible = false;
    set type(value) {
        this._type = PoItemListType[value] ?? 'action';
    }
    get type() {
        return this._type;
    }
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
    }
    get items() {
        return this._items;
    }
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poListBoxLiteralsDefault[poLocaleDefault],
                ...poListBoxLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poListBoxLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListBoxLiteralsDefault[this.language];
    }
    get isItemListGroup() {
        return this.items.length && this.items[0].hasOwnProperty('options');
    }
    isTabs = false;
    // parâmetro que pode ser passado para o popup ao clicar em um item
    param;
    selectItem = new EventEmitter();
    closeEvent = new EventEmitter();
    // MULTISELECT PROPERTIES
    //output para evento do checkbox
    change = new EventEmitter();
    //output para evento do checkbox
    selectCombo = new EventEmitter();
    //output para evento do checkbox de selecionar todos
    changeAll = new EventEmitter();
    UpdateInfiniteScroll = new EventEmitter();
    //valor do checkbox de selecionar todos
    checkboxAllValue;
    // Propriedade que recebe a lista de opções selecionadas.
    selectedOptions = [];
    // Propriedade que recebe um item selecionado.
    selectedOption;
    fieldValue = 'value';
    fieldLabel = 'label';
    // Evento disparado a cada tecla digitada na pesquisa.
    changeSearch = new EventEmitter();
    // Propriedade que recebe as literais definidas no componente `po-multiselect`.
    literalSearch;
    // Propriedade que recebe o valor de comparação de pesquisa
    fieldValueSearch = 'value';
    // Propriedade que indica se o campo de pesquisa deverá ser escondido.
    hideSearch = false;
    // Propriedade que indica se o campo "Selecionar todos" deverá ser escondido.
    hideSelectAll = false;
    //Propriedades relacionados ao template customizado do multiselect
    multiselectTemplate;
    template;
    placeholderSearch;
    searchValue;
    isServerSearching = false;
    infiniteLoading = false;
    infiniteScroll = false;
    cache = false;
    infiniteScrollDistance = 100;
    filterMode = PoItemListFilterMode.contains;
    isFiltering = false;
    shouldMarkLetters = true;
    compareCache = false;
    comboService;
    // Evento disparado quando uma tab é ativada
    activatedTab = new EventEmitter();
    // Evento disparado no click de uma aba do tabs
    clickTab = new EventEmitter();
    changeStateTabs = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoListBoxBaseComponent_Factory(t) { return new (t || PoListBoxBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListBoxBaseComponent, inputs: { visible: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-visible", "visible", convertToBoolean], type: [i0.ɵɵInputFlags.None, "p-type", "type"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], isTabs: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-tabs", "isTabs", convertToBoolean], param: [i0.ɵɵInputFlags.None, "p-param", "param"], checkboxAllValue: [i0.ɵɵInputFlags.None, "p-checkboxAllValue", "checkboxAllValue"], selectedOptions: [i0.ɵɵInputFlags.None, "p-selected-options", "selectedOptions"], selectedOption: [i0.ɵɵInputFlags.None, "p-selected-option", "selectedOption"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], literalSearch: [i0.ɵɵInputFlags.None, "p-literal-search", "literalSearch"], fieldValueSearch: [i0.ɵɵInputFlags.None, "p-field-value-search", "fieldValueSearch"], hideSearch: [i0.ɵɵInputFlags.None, "p-hide-search", "hideSearch"], hideSelectAll: [i0.ɵɵInputFlags.None, "p-hide-select-all", "hideSelectAll"], multiselectTemplate: [i0.ɵɵInputFlags.None, "p-multiselect-template", "multiselectTemplate"], template: [i0.ɵɵInputFlags.None, "p-template", "template"], placeholderSearch: [i0.ɵɵInputFlags.None, "p-placeholder-search", "placeholderSearch"], searchValue: [i0.ɵɵInputFlags.None, "p-search-value", "searchValue"], isServerSearching: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-searching", "isServerSearching", convertToBoolean], infiniteLoading: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-loading", "infiniteLoading", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], cache: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-cache", "cache", convertToBoolean], infiniteScrollDistance: [i0.ɵɵInputFlags.None, "p-infinite-scroll-distance", "infiniteScrollDistance"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], isFiltering: [i0.ɵɵInputFlags.None, "p-filtering", "isFiltering"], shouldMarkLetters: [i0.ɵɵInputFlags.None, "p-should-mark-letter", "shouldMarkLetters"], compareCache: [i0.ɵɵInputFlags.None, "p-compare-cache", "compareCache"], comboService: [i0.ɵɵInputFlags.None, "p-combo-service", "comboService"] }, outputs: { selectItem: "p-select-item", closeEvent: "p-close", change: "p-change", selectCombo: "p-selectcombo-item", changeAll: "p-change-all", UpdateInfiniteScroll: "p-update-infinite-scroll", changeSearch: "p-change-search", activatedTab: "p-activated-tabs", clickTab: "p-click-tabs", changeStateTabs: "p-change-state-tabs" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListBoxBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { visible: [{
            type: Input,
            args: [{ alias: 'p-visible', transform: convertToBoolean }]
        }], type: [{
            type: Input,
            args: ['p-type']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], isTabs: [{
            type: Input,
            args: [{ alias: 'p-is-tabs', transform: convertToBoolean }]
        }], param: [{
            type: Input,
            args: ['p-param']
        }], selectItem: [{
            type: Output,
            args: ['p-select-item']
        }], closeEvent: [{
            type: Output,
            args: ['p-close']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], selectCombo: [{
            type: Output,
            args: ['p-selectcombo-item']
        }], changeAll: [{
            type: Output,
            args: ['p-change-all']
        }], UpdateInfiniteScroll: [{
            type: Output,
            args: ['p-update-infinite-scroll']
        }], checkboxAllValue: [{
            type: Input,
            args: ['p-checkboxAllValue']
        }], selectedOptions: [{
            type: Input,
            args: ['p-selected-options']
        }], selectedOption: [{
            type: Input,
            args: ['p-selected-option']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], changeSearch: [{
            type: Output,
            args: ['p-change-search']
        }], literalSearch: [{
            type: Input,
            args: ['p-literal-search']
        }], fieldValueSearch: [{
            type: Input,
            args: ['p-field-value-search']
        }], hideSearch: [{
            type: Input,
            args: ['p-hide-search']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], multiselectTemplate: [{
            type: Input,
            args: ['p-multiselect-template']
        }], template: [{
            type: Input,
            args: ['p-template']
        }], placeholderSearch: [{
            type: Input,
            args: ['p-placeholder-search']
        }], searchValue: [{
            type: Input,
            args: ['p-search-value']
        }], isServerSearching: [{
            type: Input,
            args: [{ alias: 'p-is-searching', transform: convertToBoolean }]
        }], infiniteLoading: [{
            type: Input,
            args: [{ alias: 'p-infinite-loading', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], cache: [{
            type: Input,
            args: [{ alias: 'p-cache', transform: convertToBoolean }]
        }], infiniteScrollDistance: [{
            type: Input,
            args: ['p-infinite-scroll-distance']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], isFiltering: [{
            type: Input,
            args: ['p-filtering']
        }], shouldMarkLetters: [{
            type: Input,
            args: ['p-should-mark-letter']
        }], compareCache: [{
            type: Input,
            args: ['p-compare-cache']
        }], comboService: [{
            type: Input,
            args: ['p-combo-service']
        }], activatedTab: [{
            type: Output,
            args: ['p-activated-tabs']
        }], clickTab: [{
            type: Output,
            args: ['p-click-tabs']
        }], changeStateTabs: [{
            type: Output,
            args: ['p-change-state-tabs']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,