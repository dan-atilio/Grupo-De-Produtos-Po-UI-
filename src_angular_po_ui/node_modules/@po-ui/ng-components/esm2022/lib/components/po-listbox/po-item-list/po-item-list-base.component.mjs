import { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { PoItemListType } from '../enums/po-item-list-type.enum';
import { PoItemListFilterMode } from '../enums/po-item-list-filter-mode.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-item-list` é a menor parte da lista de ação que compõem o componente [**PO Listbox**](/documentation/po-listbox).
 */
export class PoItemListBaseComponent {
    _label;
    _value;
    _type;
    _visible = true;
    _disabled = false;
    _activeTabs = false;
    set type(value) {
        this._type = PoItemListType[value] ?? 'action';
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como visível.
     *
     * @default `true`
     */
    set visible(value) {
        if (value === true || value === null || value === undefined) {
            this._visible = true;
        }
        else {
            this._visible = false;
        }
    }
    get visible() {
        return this._visible;
    }
    item;
    /** Texto de exibição do item. */
    label;
    /** Valor do item. */
    value;
    danger = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        if (value === false || value === null || value === undefined) {
            this._disabled = false;
        }
        else {
            this._disabled = true;
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se a ação está selecionada.
     *
     * @default `false`
     */
    selected = false;
    /**
     * @optional
     *
     * @description
     *
     * Atribui uma linha separadora acima do item.
     *
     * @default `false`
     */
    separator = false;
    /**
     * @optional
     *
     * @description
     *
     * Define um ícone que será exibido ao lado esquerdo do rótulo.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Ação a ser realizada ao clicar no item do tipo `option`.
     */
    clickItem = new EventEmitter();
    // MULTISELECT PROPERTIES
    //emissao de evento do checkbox
    checkboxItem = new EventEmitter();
    comboItem = new EventEmitter();
    //valor do checkbox de selecionar todos
    checkboxValue;
    fieldValue = 'value';
    fieldLabel = 'label';
    template;
    templateContext;
    searchValue = '';
    filterMode = PoItemListFilterMode.contains;
    isFiltering = false;
    shouldMarkLetters = true;
    compareCache = false;
    comboService;
    // TABS PROPERTIES
    isTabs = false;
    tabHide = false;
    tabsItem = new EventEmitter();
    activatedTab = new EventEmitter();
    // Ativa o botão
    set activeTabs(value) {
        this._activeTabs = value;
        this.emitActiveTabs(this.item);
    }
    get activeTabs() {
        return this._activeTabs;
    }
    emitActiveTabs(tab) {
        if (tab?.active) {
            this.activatedTab.emit(tab);
        }
    }
    static ɵfac = function PoItemListBaseComponent_Factory(t) { return new (t || PoItemListBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoItemListBaseComponent, hostVars: 1, hostBindings: function PoItemListBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-type", ctx.type);
        } }, inputs: { type: [i0.ɵɵInputFlags.None, "p-type", "type"], visible: [i0.ɵɵInputFlags.None, "p-visible", "visible"], item: [i0.ɵɵInputFlags.None, "p-item", "item"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], danger: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-danger", "danger", convertToBoolean], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], selected: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-selected", "selected", convertToBoolean], separator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-separator", "separator", convertToBoolean], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], checkboxValue: [i0.ɵɵInputFlags.None, "p-checkbox-value", "checkboxValue"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], template: [i0.ɵɵInputFlags.None, "p-template", "template"], templateContext: [i0.ɵɵInputFlags.None, "p-template-context", "templateContext"], searchValue: [i0.ɵɵInputFlags.None, "p-search-value", "searchValue"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], isFiltering: [i0.ɵɵInputFlags.None, "p-filtering", "isFiltering"], shouldMarkLetters: [i0.ɵɵInputFlags.None, "p-should-mark-letter", "shouldMarkLetters"], compareCache: [i0.ɵɵInputFlags.None, "p-compare-cache", "compareCache"], comboService: [i0.ɵɵInputFlags.None, "p-combo-service", "comboService"], isTabs: [i0.ɵɵInputFlags.None, "p-is-tabs", "isTabs"], tabHide: [i0.ɵɵInputFlags.None, "p-tab-hide", "tabHide"], activeTabs: [i0.ɵɵInputFlags.None, "p-active-tabs", "activeTabs"] }, outputs: { clickItem: "p-click-item", checkboxItem: "p-selectcheckbox-item", comboItem: "p-selectcombo-item", tabsItem: "p-emit-item-tabs", activatedTab: "p-activated-tabs" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoItemListBaseComponent, [{
        type: Directive
    }], null, { type: [{
            type: HostBinding,
            args: ['attr.p-type']
        }, {
            type: Input,
            args: ['p-type']
        }], visible: [{
            type: Input,
            args: ['p-visible']
        }], item: [{
            type: Input,
            args: ['p-item']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], danger: [{
            type: Input,
            args: [{ alias: 'p-danger', transform: convertToBoolean }]
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], selected: [{
            type: Input,
            args: [{ alias: 'p-selected', transform: convertToBoolean }]
        }], separator: [{
            type: Input,
            args: [{ alias: 'p-separator', transform: convertToBoolean }]
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], clickItem: [{
            type: Output,
            args: ['p-click-item']
        }], checkboxItem: [{
            type: Output,
            args: ['p-selectcheckbox-item']
        }], comboItem: [{
            type: Output,
            args: ['p-selectcombo-item']
        }], checkboxValue: [{
            type: Input,
            args: ['p-checkbox-value']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], template: [{
            type: Input,
            args: ['p-template']
        }], templateContext: [{
            type: Input,
            args: ['p-template-context']
        }], searchValue: [{
            type: Input,
            args: ['p-search-value']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], isFiltering: [{
            type: Input,
            args: ['p-filtering']
        }], shouldMarkLetters: [{
            type: Input,
            args: ['p-should-mark-letter']
        }], compareCache: [{
            type: Input,
            args: ['p-compare-cache']
        }], comboService: [{
            type: Input,
            args: ['p-combo-service']
        }], isTabs: [{
            type: Input,
            args: ['p-is-tabs']
        }], tabHide: [{
            type: Input,
            args: ['p-tab-hide']
        }], tabsItem: [{
            type: Output,
            args: ['p-emit-item-tabs']
        }], activatedTab: [{
            type: Output,
            args: ['p-activated-tabs']
        }], activeTabs: [{
            type: Input,
            args: ['p-active-tabs']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,