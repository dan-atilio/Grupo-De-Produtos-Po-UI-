import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { poLocales } from '../../services/po-language/po-language.constant';
import { PoCalendarMode } from './po-calendar-mode.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-date";
import * as i2 from "../../services/po-language/po-language.service";
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
export class PoCalendarBaseComponent {
    poDate;
    languageService;
    /** Evento disparado ao selecionar um dia do calendário. */
    change = new EventEmitter();
    activateDate;
    value;
    onTouched = null;
    propagateChange = null;
    today = new Date();
    shortLanguage;
    _locale;
    _maxDate;
    _minDate;
    _mode;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        this.shortLanguage = languageService.getShortLanguage();
        this._locale = this.languageService.getShortLanguage();
    }
    setActivateDate(date) {
        let newData;
        if (typeof date !== 'string') {
            const temporaryDate = new Date(date);
            const year = temporaryDate.getFullYear();
            const month = ('0' + (temporaryDate.getMonth() + 1)).slice(-2);
            const day = ('0' + temporaryDate.getDate()).slice(-2);
            const formattedDate = `${year}-${month}-${day}`;
            newData = formattedDate + 'T00:00:00';
        }
        else {
            newData = date + 'T00:00:00';
        }
        const activateDate = date ? date : this.verifyActivateDate();
        let checkedStart;
        let checkedEnd;
        if (this.isRange) {
            if (new Date(newData).getDate() > 28) {
                checkedStart = new Date(activateDate);
                checkedEnd = new Date(checkedStart.getFullYear(), checkedStart.getMonth() + 1, 0, 23, 59, 59, 999);
                checkedEnd.setMilliseconds(checkedEnd.getMilliseconds() + 1);
            }
            else {
                checkedStart =
                    typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
                checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            }
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
    static ɵfac = function PoCalendarBaseComponent_Factory(t) { return new (t || PoCalendarBaseComponent)(i0.ɵɵdirectiveInject(i1.PoDateService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCalendarBaseComponent, inputs: { locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], mode: [i0.ɵɵInputFlags.None, "p-mode", "mode"] }, outputs: { change: "p-change" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoDateService }, { type: i2.PoLanguageService }], { change: [{
            type: Output,
            args: ['p-change']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], mode: [{
            type: Input,
            args: ['p-mode']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvcG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFFNUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBRXpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JHO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQW1IekI7SUFDQztJQW5IViwyREFBMkQ7SUFDdkMsTUFBTSxHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO0lBRXpFLFlBQVksQ0FBQztJQUNiLEtBQUssQ0FBQztJQUVJLFNBQVMsR0FBUSxJQUFJLENBQUM7SUFDdEIsZUFBZSxHQUFRLElBQUksQ0FBQztJQUM1QixLQUFLLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUUzQixhQUFhLENBQVM7SUFDdEIsT0FBTyxDQUFTO0lBQ2hCLFFBQVEsQ0FBTztJQUNmLFFBQVEsQ0FBTztJQUNmLEtBQUssQ0FBaUI7SUFFOUI7Ozs7Ozs7O09BUUc7SUFDSCxJQUF1QixNQUFNLENBQUMsTUFBYztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMxRSxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7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TTtrQkFBekIsTUFBTTttQkFBQyxVQUFVO1lBd0JLLE1BQU07a0JBQTVCLEtBQUs7bUJBQUMsVUFBVTtZQStCUSxPQUFPO2tCQUEvQixLQUFLO21CQUFDLFlBQVk7WUErQk0sT0FBTztrQkFBL0IsS0FBSzttQkFBQyxZQUFZO1lBWUUsSUFBSTtrQkFBeEIsS0FBSzttQkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9EYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWRhdGUnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IHBvTG9jYWxlcyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLmNvbnN0YW50JztcblxuaW1wb3J0IHsgUG9DYWxlbmRhck1vZGUgfSBmcm9tICcuL3BvLWNhbGVuZGFyLW1vZGUuZW51bSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tY2FsZW5kYXJgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSBzZWxlw6fDo28gZGUgZGF0YXMuIEVsZSBwZXJtaXRlIHVtYSBmw6FjaWwgbmF2ZWdhw6fDo28gY2xpY2FuZG8gbmFzIHNldGFzXG4gKiBkZSBkaXJlY2lvbmFtZW50byBlIG5vcyAqbGFiZWxzKiBkbyBhbm8gb3UgbcOqcy5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICpcbiAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gKiBgYGBcbiAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAqIGBgYFxuICpcbiAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICogYGBgXG4gKlxuICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAqIGBgYFxuICpcbiAqID4gSW5kZXBlbmRlbnRlbWVudGUgZG8gZm9ybWF0byB1dGlsaXphZG8sIG8gY29tcG9uZW50ZSB0cmF0YSBvIHZhbG9yIGRvICptb2RlbCogaW50ZXJuYW1lbnRlIGNvbSBvXG4gKiBmb3JtYXRvICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqLlxuICpcbiAqIEltcG9ydGFudGU6XG4gKlxuICogLSBDYXNvIHNlamEgZGVmaW5pZGEgdW1hIGRhdGEgZm9yYSBkbyByYW5nZSBkYSBkYXRhIG3DrW5pbWEgZSBkYXRhIG3DoXhpbWEgdmlhICpuZ01vZGVsKiBvIGNvbXBvbmVudGUgbW9zdHJhcsOhXG4gKiBhIGRhdGEgZGVzYWJpbGl0YWRhIHBvcsOpbSBvICptb2RlbCogbsOjbyBzZXLDoSBhbHRlcmFkby5cbiAqIC0gQ2FzbyBzZWphIGRlZmluaWRhIHVtYSBkYXRhIGludsOhbGlkYSBhIG1lc21hIG7Do28gc2Vyw6EgYXRyaWJ1w61kYSBhbyBjYWxlbmTDoXJpbyBwb3LDqW0gbyAqbW9kZWwqIG1hbnRlcsOhIGEgZGF0YSBpbnbDoWxpZGEuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJCYXNlQ29tcG9uZW50IHtcbiAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gc2VsZWNpb25hciB1bSBkaWEgZG8gY2FsZW5kw6FyaW8uICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlJykgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCB7IHN0YXJ0OyBlbmQgfT4oKTtcblxuICBhY3RpdmF0ZURhdGU7XG4gIHZhbHVlO1xuXG4gIHByb3RlY3RlZCBvblRvdWNoZWQ6IGFueSA9IG51bGw7XG4gIHByb3RlY3RlZCBwcm9wYWdhdGVDaGFuZ2U6IGFueSA9IG51bGw7XG4gIHByb3RlY3RlZCB0b2RheTogRGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgcHJpdmF0ZSBzaG9ydExhbmd1YWdlOiBzdHJpbmc7XG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xuICBwcml2YXRlIF9tYXhEYXRlOiBEYXRlO1xuICBwcml2YXRlIF9taW5EYXRlOiBEYXRlO1xuICBwcml2YXRlIF9tb2RlOiBQb0NhbGVuZGFyTW9kZTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJZGlvbWEgZG8gY2FsZW5kw6FyaW8uXG4gICAqXG4gICAqID4gTyBsb2NhbGUgcGFkcsOjbyBzZXJhIHJlY3VwZXJhZG8gY29tIGJhc2Ugbm8gW2BQb0kxOG5TZXJ2aWNlYF0oL2RvY3VtZW50YXRpb24vcG8taTE4bikgb3UgKmJyb3dzZXIqLlxuICAgKi9cbiAgQElucHV0KCdwLWxvY2FsZScpIHNldCBsb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9sb2NhbGUgPSBwb0xvY2FsZXMuaW5jbHVkZXMobG9jYWxlKSA/IGxvY2FsZSA6IHRoaXMuc2hvcnRMYW5ndWFnZTtcbiAgfVxuICBnZXQgbG9jYWxlKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBkYXRhIG3DoXhpbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYS5cbiAgICpcbiAgICogUG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICAgKlxuICAgKiAtICoqRGF0YSBlIGhvcmEgY29tYmluYWRvcyAoRTg2MDFEWncpOiB5eXl5LW1tLWRkVGhoOm1tOnNzK3wtaGg6bW0qKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKDIwMTcsIDEwLCAyOCk7XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLW1heC1kYXRlJykgc2V0IG1heERhdGUobWF4RGF0ZTogYW55KSB7XG4gICAgdGhpcy5fbWF4RGF0ZSA9IHRoaXMucG9EYXRlLmdldERhdGVGb3JEYXRlUmFuZ2UobWF4RGF0ZSwgZmFsc2UpO1xuICB9XG4gIGdldCBtYXhEYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXhEYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgZGF0YSBtw61uaW1hIHBvc3PDrXZlbCBkZSBzZXIgc2VsZWNpb25hZGEuXG4gICAqXG4gICAqIFBvZGUgcmVjZWJlciBvcyBzZWd1aW50ZXMgZm9ybWF0b3MgZGUgZGF0YTpcbiAgICpcbiAgICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4JztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipKYXZhU2NyaXB0IERhdGUgT2JqZWN0OioqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1taW4tZGF0ZScpIHNldCBtaW5EYXRlKG1pbkRhdGU6IGFueSkge1xuICAgIHRoaXMuX21pbkRhdGUgPSB0aGlzLnBvRGF0ZS5nZXREYXRlRm9yRGF0ZVJhbmdlKG1pbkRhdGUsIHRydWUpO1xuICB9XG4gIGdldCBtaW5EYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9taW5EYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ByaWVkYWRlIHF1ZSBwZXJtaXRlIGluZm9ybWFyIG8gbW9kbyBkZSBleGliacOnw6NvIGRvIGNhbGVuZGFyLlxuICAgKlxuICAgKiBJbXBsZW1lbnRhIG8gZW51bSBgUG9DYWxlbmRhck1vZGVgLlxuICAgKi9cbiAgQElucHV0KCdwLW1vZGUnKSBzZXQgbW9kZSh2YWx1ZTogUG9DYWxlbmRhck1vZGUpIHtcbiAgICB0aGlzLl9tb2RlID0gdmFsdWU7XG5cbiAgICB0aGlzLnNldEFjdGl2YXRlRGF0ZSgpO1xuICB9XG5cbiAgZ2V0IG1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGU7XG4gIH1cblxuICBnZXQgaXNSYW5nZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlID09PSBQb0NhbGVuZGFyTW9kZS5SYW5nZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwb0RhdGU6IFBvRGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuc2hvcnRMYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gICAgdGhpcy5fbG9jYWxlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldEFjdGl2YXRlRGF0ZShkYXRlPzogRGF0ZSB8IHN0cmluZykge1xuICAgIGxldCBuZXdEYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBvcmFyeURhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIGNvbnN0IHllYXIgPSB0ZW1wb3JhcnlEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICBjb25zdCBtb250aCA9ICgnMCcgKyAodGVtcG9yYXJ5RGF0ZS5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKTtcbiAgICAgIGNvbnN0IGRheSA9ICgnMCcgKyB0ZW1wb3JhcnlEYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XG4gICAgICBuZXdEYXRhID0gZm9ybWF0dGVkRGF0ZSArICdUMDA6MDA6MDAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdEYXRhID0gZGF0ZSArICdUMDA6MDA6MDAnO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmF0ZURhdGUgPSBkYXRlID8gZGF0ZSA6IHRoaXMudmVyaWZ5QWN0aXZhdGVEYXRlKCk7XG5cbiAgICBsZXQgY2hlY2tlZFN0YXJ0O1xuICAgIGxldCBjaGVja2VkRW5kO1xuXG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgaWYgKG5ldyBEYXRlKG5ld0RhdGEpLmdldERhdGUoKSA+IDI4KSB7XG4gICAgICAgIGNoZWNrZWRTdGFydCA9IG5ldyBEYXRlKGFjdGl2YXRlRGF0ZSk7XG4gICAgICAgIGNoZWNrZWRFbmQgPSBuZXcgRGF0ZShjaGVja2VkU3RhcnQuZ2V0RnVsbFllYXIoKSwgY2hlY2tlZFN0YXJ0LmdldE1vbnRoKCkgKyAxLCAwLCAyMywgNTksIDU5LCA5OTkpO1xuICAgICAgICBjaGVja2VkRW5kLnNldE1pbGxpc2Vjb25kcyhjaGVja2VkRW5kLmdldE1pbGxpc2Vjb25kcygpICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVja2VkU3RhcnQgPVxuICAgICAgICAgIHR5cGVvZiBhY3RpdmF0ZURhdGUgPT09ICdzdHJpbmcnID8gdGhpcy5wb0RhdGUuY29udmVydElzb1RvRGF0ZShhY3RpdmF0ZURhdGUpIDogbmV3IERhdGUoYWN0aXZhdGVEYXRlKTtcbiAgICAgICAgY2hlY2tlZEVuZCA9IG5ldyBEYXRlKG5ldyBEYXRlKGNoZWNrZWRTdGFydCkuc2V0TW9udGgoY2hlY2tlZFN0YXJ0LmdldE1vbnRoKCkgKyAxKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aXZhdGVEYXRlID0geyBzdGFydDogY2hlY2tlZFN0YXJ0LCBlbmQ6IGNoZWNrZWRFbmQgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3RpdmF0ZURhdGUgPSBuZXcgRGF0ZShhY3RpdmF0ZURhdGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5QWN0aXZhdGVEYXRlKCk6IERhdGUge1xuICAgIGxldCB0b2RheSA9IHRoaXMudG9kYXk7XG4gICAgaWYgKHRoaXMubWluRGF0ZSAmJiB0aGlzLm1pbkRhdGUgPiB0aGlzLnRvZGF5KSB7XG4gICAgICB0b2RheSA9IHRoaXMubWluRGF0ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF4RGF0ZSAmJiB0aGlzLm1heERhdGUgPCB0aGlzLnRvZGF5KSB7XG4gICAgICB0b2RheSA9IHRoaXMubWF4RGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRvZGF5O1xuICB9XG59XG4iXX0=