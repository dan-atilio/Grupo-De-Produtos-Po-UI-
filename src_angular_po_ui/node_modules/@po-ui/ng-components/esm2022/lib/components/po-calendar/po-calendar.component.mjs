import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoCalendarBaseComponent } from './po-calendar-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-date/po-date.service";
import * as i2 from "../../services/po-language/po-language.service";
import * as i3 from "@angular/common";
import * as i4 from "./po-calendar-wrapper/po-calendar-wrapper.component";
function PoCalendarComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoCalendarComponent_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0 = () => ({ partType: "end" });
function PoCalendarComponent_ng_template_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction0(2, _c0));
} }
const _c1 = () => ({ partType: "start" });
function PoCalendarComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 5)(2, PoCalendarComponent_ng_template_1_ng_container_2_Template, 2, 3, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction0(3, _c1));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r1.isResponsive);
} }
function PoCalendarComponent_ng_template_3_ng_template_1_Template(rf, ctx) { }
function PoCalendarComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_3_ng_template_1_Template, 0, 0, "ng-template", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoCalendarComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-calendar-wrapper", 9);
    i0.ɵɵlistener("p-header-change", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_header_change_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onHeaderChange($event, partType_r11)); })("p-select-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_select_date_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onSelectDate($event, partType_r11)); })("p-hover-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_hover_date_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onHoverDate($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const partType_r11 = ctx.partType;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-value", ctx_r5.getValue(partType_r11))("p-activate-date", ctx_r5.getActivateDate(partType_r11))("p-locale", ctx_r5.locale)("p-min-date", ctx_r5.minDate)("p-max-date", ctx_r5.maxDate)("p-part-type", partType_r11)("p-range", ctx_r5.isRange)("p-responsive", ctx_r5.isResponsive)("p-selected-value", ctx_r5.value)("p-hover-value", ctx_r5.hoverValue);
} }
/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    }
];
const poCalendarRangeWidth = 600;
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
export class PoCalendarComponent extends PoCalendarBaseComponent {
    changeDetector;
    hoverValue;
    constructor(changeDetector, poDate, languageService) {
        super(poDate, languageService);
        this.changeDetector = changeDetector;
    }
    get isResponsive() {
        return window.innerWidth < poCalendarRangeWidth;
    }
    ngOnInit() {
        this.setActivateDate();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.setActivateDate();
        }
    }
    getActivateDate(partType) {
        if (this.isRange && this.activateDate) {
            return this.activateDate[partType];
        }
        else {
            return this.activateDate;
        }
    }
    getValue(partType) {
        if (this.isRange && this.value) {
            return this.value[partType];
        }
        else {
            return this.value;
        }
    }
    onSelectDate(selectedDate, partType) {
        let newValue;
        if (this.isRange) {
            newValue = this.getValueFromSelectedDate(selectedDate);
            if (partType === 'end' && (!this.value?.start || (this.value.start && this.value.end))) {
                this.setActivateDate(selectedDate);
            }
        }
        else {
            newValue = selectedDate;
            this.setActivateDate(selectedDate);
        }
        this.value = newValue;
        const newModel = this.convertDateToISO(this.value);
        this.updateModel(newModel);
        this.change.emit(newModel);
    }
    onHoverDate(date) {
        this.hoverValue = date;
    }
    onHeaderChange({ month, year }, partType) {
        if (this.isRange) {
            let newStart;
            let newEnd;
            const { start, end } = this.activateDate;
            if (partType === 'end') {
                const newYear = month === 0 ? year - 1 : year;
                const daysInMonth = new Date(newYear, month, 0).getDate();
                if (year !== newYear) {
                    newStart = new Date(year, month - 1, Math.min(start.getDate(), daysInMonth));
                    newEnd = new Date(year, month, Math.min(end.getDate(), daysInMonth));
                }
                else {
                    newStart = new Date(newYear, month - 1, Math.min(start.getDate(), daysInMonth));
                    newEnd = new Date(newYear, month, Math.min(end.getDate(), daysInMonth));
                }
            }
            else {
                const newYear = month === 11 ? year + 1 : year;
                const daysInMonth = new Date(newYear, month + 1, 0).getDate();
                if (year !== newYear) {
                    newEnd = new Date(year, month + 1, Math.min(end.getDate(), daysInMonth));
                    newStart = new Date(year, month, Math.min(start.getDate(), daysInMonth));
                }
                else {
                    newEnd = new Date(newYear, month + 1, Math.min(end.getDate(), daysInMonth));
                    newStart = new Date(newYear, month, Math.min(start.getDate(), daysInMonth));
                }
            }
            this.activateDate = { start: newStart, end: newEnd };
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    validate(c) {
        return null;
    }
    writeValue(value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.value = null;
        }
        const activateDate = this.getValidateStartDate(value);
        this.setActivateDate(activateDate);
        this.changeDetector.markForCheck();
    }
    getValidateStartDate(value) {
        if (this.isRange) {
            return value?.start || null;
        }
        else if (value instanceof Date || typeof value === 'string') {
            return value;
        }
        return null;
    }
    getValueFromSelectedDate(selectedDate) {
        if (!this.value?.start || this.value.start > selectedDate || (this.value.end && this.value.start)) {
            return { start: new Date(selectedDate), end: null };
        }
        return { start: new Date(this.value.start), end: new Date(selectedDate) };
    }
    convertDateToISO(date) {
        if (this.isRange) {
            const start = date?.start instanceof Date ? this.poDate.convertDateToISO(date.start) : null;
            const end = date?.end instanceof Date ? this.poDate.convertDateToISO(date.end) : null;
            return { start, end };
        }
        else {
            return this.poDate.convertDateToISO(date);
        }
    }
    convertDateFromIso(stringDate) {
        if (stringDate && typeof stringDate === 'string') {
            const { year, month, day } = this.poDate.getDateFromIso(stringDate);
            const date = new Date(year, month - 1, day);
            this.poDate.setYearFrom0To100(date, year);
            return date;
        }
        return null;
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    writeDate(value) {
        if (this.isRange) {
            const start = value?.start;
            const end = value?.end;
            const newStart = start instanceof Date ? new Date(start) : this.convertDateFromIso(start);
            const newEnd = end instanceof Date ? new Date(end) : this.convertDateFromIso(end);
            this.value = { start: newStart, end: newEnd };
        }
        else {
            this.value = value instanceof Date ? new Date(value) : this.convertDateFromIso(value);
        }
    }
    static ɵfac = function PoCalendarComponent_Factory(t) { return new (t || PoCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PoDateService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarComponent, selectors: [["po-calendar"]], features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["rangeTemplate", ""], ["calendarTemplate", ""], ["calendarWrapper", ""], [1, "po-calendar-range"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [1, "po-calendar"], [3, "ngTemplateOutlet"], [3, "p-value", "p-activate-date", "p-locale", "p-min-date", "p-max-date", "p-part-type", "p-range", "p-responsive", "p-selected-value", "p-hover-value", "p-header-change", "p-select-date", "p-hover-date"]], template: function PoCalendarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoCalendarComponent_ng_container_0_Template, 1, 0, "ng-container", 0)(1, PoCalendarComponent_ng_template_1_Template, 3, 4, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(3, PoCalendarComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(5, PoCalendarComponent_ng_template_5_Template, 1, 10, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            const _r4 = i0.ɵɵreference(4);
            i0.ɵɵproperty("ngIf", ctx.isRange)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, dependencies: [i3.NgIf, i3.NgTemplateOutlet, i4.PoCalendarWrapperComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarComponent, [{
        type: Component,
        args: [{ selector: 'po-calendar', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers, template: "<ng-container *ngIf=\"isRange; then rangeTemplate; else calendarTemplate\"></ng-container>\n\n<ng-template #rangeTemplate>\n  <div class=\"po-calendar-range\">\n    <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'start' }\"></ng-container>\n    <ng-container *ngIf=\"!isResponsive\">\n      <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'end' }\"></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n<ng-template #calendarTemplate>\n  <div class=\"po-calendar\">\n    <ng-template [ngTemplateOutlet]=\"calendarWrapper\"></ng-template>\n  </div>\n</ng-template>\n\n<ng-template #calendarWrapper let-partType=\"partType\">\n  <po-calendar-wrapper\n    [p-value]=\"getValue(partType)\"\n    [p-activate-date]=\"getActivateDate(partType)\"\n    [p-locale]=\"locale\"\n    [p-min-date]=\"minDate\"\n    [p-max-date]=\"maxDate\"\n    [p-part-type]=\"partType\"\n    [p-range]=\"isRange\"\n    [p-responsive]=\"isResponsive\"\n    [p-selected-value]=\"value\"\n    [p-hover-value]=\"hoverValue\"\n    (p-header-change)=\"onHeaderChange($event, partType)\"\n    (p-select-date)=\"onSelectDate($event, partType)\"\n    (p-hover-date)=\"onHoverDate($event)\"\n  >\n  </po-calendar-wrapper>\n</ng-template>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i1.PoDateService }, { type: i2.PoLanguageService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCalendarComponent, { className: "PoCalendarComponent", filePath: "lib/components/po-calendar/po-calendar.component.ts", lineNumber: 61 }); })();
//# sourceMappingURL=data:application/json;base64,