import { Component, ContentChildren } from '@angular/core';
import { Observable, of, throwError } from 'rxjs';
import { take, tap, catchError } from 'rxjs/operators';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./po-stepper-step/po-stepper-step.component";
function PoStepperComponent_po_stepper_step_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-stepper-step", 3);
    i0.ɵɵlistener("p-activated", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_activated_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const step_r2 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onStepActive(step_r2)); })("p-click", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeStep(index_r3, step_r2)); })("p-enter", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_enter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.changeStep(index_r3, step_r2)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r2 = ctx.$implicit;
    const index_r3 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    let tmp_6_0;
    i0.ɵɵproperty("p-circle-content", index_r3 + 1)("p-label", step_r2.label)("p-orientation", ctx_r0.orientation)("p-status", step_r2.status)("p-step-icons", ctx_r0.stepIcons)("p-step-size", ctx_r0.stepSize)("p-next-status", (tmp_6_0 = ctx_r0.poSteps.get(index_r3 + 1)) == null ? null : tmp_6_0.status);
} }
function PoStepperComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} }
const _c0 = ["*"];
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-active" title="PO Stepper - Active">
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.html"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.ts"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.service.ts"> </file>
 * </example>
 */
export class PoStepperComponent extends PoStepperBaseComponent {
    changeDetector;
    poSteps;
    currentActiveStep;
    get currentStepIndex() {
        return this.step - 1;
    }
    get stepList() {
        return (this.usePoSteps && this.poSteps) || this.steps;
    }
    get usePoSteps() {
        return !!this.poSteps.length;
    }
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    ngAfterContentInit() {
        this.activeFirstStep();
        this.poSteps.changes.subscribe(() => {
            this.controlStepsStatus(0, this.poSteps.first);
        });
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index) {
        if (!this.usePoSteps) {
            return;
        }
        const stepsArray = this.getPoSteps();
        const step = stepsArray[index];
        this.changeStep(index, step);
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first() {
        if (!this.usePoSteps) {
            return;
        }
        const firstStep = this.poSteps.first;
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const nextIndex = stepIndex + 1;
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const previousIndex = stepIndex - 1;
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    changeStep(stepIndex, step) {
        this.allowNextStep(stepIndex)
            .pipe(take(1))
            .subscribe(nextStepAllowed => {
            if (nextStepAllowed) {
                const isDifferentStep = !this.currentActiveStep || step.id !== this.currentActiveStep.id;
                if (this.usePoSteps && isDifferentStep) {
                    this.controlStepsStatus(stepIndex, step);
                    this.onChangeStep.emit(step);
                }
                else if (!this.usePoSteps && stepIndex !== this.currentStepIndex) {
                    // if para tratamento do modelo antigo do po-stepper
                    this.onChangeStep.emit(stepIndex + 1);
                }
            }
        });
    }
    onStepActive(step) {
        this.currentActiveStep = step;
        const { stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        this.poSteps.forEach((stepChild, i) => {
            if (i < stepIndex) {
                stepChild.status = PoStepperStatus.Done;
            }
        });
    }
    trackByFn(step) {
        return step.id;
    }
    activeFirstStep() {
        const hasStepActive = this.poSteps.some(poStep => poStep.status === PoStepperStatus.Active);
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    }
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return of(true);
        }
        const isAllowNextStep$ = this.usePoSteps
            ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
            : this.steps.slice(this.step, nextStepIndex).every(step => step.status === PoStepperStatus.Done);
        return typeof isAllowNextStep$ === 'boolean' ? of(isAllowNextStep$) : isAllowNextStep$;
    }
    canActiveNextStep(currentActiveStep = {}) {
        if (!currentActiveStep.canActiveNextStep) {
            return of(true);
        }
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        const canActiveNextStep$ = canActiveNextStep instanceof Observable ? canActiveNextStep : of(canActiveNextStep);
        return canActiveNextStep$.pipe(tap(isCanActiveNextStep => {
            currentActiveStep.status = this.getStepperStatusByCanActive(isCanActiveNextStep);
        }), catchError(err => {
            currentActiveStep.status = PoStepperStatus.Error;
            return throwError(err);
        }));
    }
    controlStepsStatus(stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    }
    getStepsAndIndex(step = {}) {
        const steps = this.getPoSteps();
        const stepIndex = steps.findIndex(poStep => poStep.id === step.id);
        return { steps, stepIndex };
    }
    getPoSteps() {
        return this.poSteps.toArray();
    }
    isBeforeStep(stepIndex) {
        const currentActiveStepIndex = () => this.getPoSteps().findIndex(step => step.id === this.currentActiveStep.id);
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    setFinalSteppersAsDisabled(stepIndex) {
        this.getPoSteps()
            .filter((step, index) => step && index >= stepIndex + 2)
            .forEach(step => (step.status = PoStepperStatus.Disabled));
    }
    setStepAsActive(step) {
        step.status = PoStepperStatus.Active;
    }
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    }
    static ɵfac = function PoStepperComponent_Factory(t) { return new (t || PoStepperComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperComponent, selectors: [["po-stepper"]], contentQueries: function PoStepperComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoStepComponent, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poSteps = _t);
        } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 4, vars: 6, consts: [[1, "po-stepper-container"], ["class", "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-stepper-content", 4, "ngIf"], [1, "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter"], [1, "po-stepper-content"]], template: function PoStepperComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div")(1, "div", 0);
            i0.ɵɵtemplate(2, PoStepperComponent_po_stepper_step_2_Template, 1, 7, "po-stepper-step", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoStepperComponent_div_3_Template, 2, 0, "div", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-stepper po-stepper-", ctx.orientation, "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.stepList)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.usePoSteps);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i2.PoStepperStepComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperComponent, [{
        type: Component,
        args: [{ selector: 'po-stepper', template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n  <div class=\"po-stepper-container\">\n    <po-stepper-step\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index + 1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      [p-next-status]=\"poSteps.get(index + 1)?.status\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\"\n    >\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { poSteps: [{
            type: ContentChildren,
            args: [PoStepComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepperComponent, { className: "PoStepperComponent", filePath: "lib/components/po-stepper/po-stepper.component.ts", lineNumber: 41 }); })();
//# sourceMappingURL=data:application/json;base64,