import { Component, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export class PoStepComponent {
    elementRef;
    /**
     * @optional
     *
     * @description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,
     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir
     * ao próximo *step*.
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     */
    canActiveNextStep;
    /** Título que será exibido descrevendo o passo (*step*). */
    label;
    // ID do step
    id = uuid();
    _status = PoStepperStatus.Disabled;
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
    static ɵfac = function PoStepComponent_Factory(t) { return new (t || PoStepComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepComponent, selectors: [["po-step"]], inputs: { canActiveNextStep: [i0.ɵɵInputFlags.None, "p-can-active-next-step", "canActiveNextStep"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], status: [i0.ɵɵInputFlags.None, "p-status", "status"] }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function PoStepComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepComponent, [{
        type: Component,
        args: [{ selector: 'po-step', template: "<ng-content></ng-content>\n" }]
    }], () => [{ type: i0.ElementRef }], { canActiveNextStep: [{
            type: Input,
            args: ['p-can-active-next-step']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], status: [{
            type: Input,
            args: ['p-status']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepComponent, { className: "PoStepComponent", filePath: "lib/components/po-stepper/po-step/po-step.component.ts", lineNumber: 49 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc3RlcHBlci9wby1zdGVwL3BvLXN0ZXAuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFjLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFFbEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DRztBQUtILE1BQU0sT0FBTyxlQUFlO0lBK0NOO0lBOUNwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXNCRztJQUM4QixpQkFBaUIsQ0FFUDtJQUUzQyw0REFBNEQ7SUFDMUMsS0FBSyxDQUFTO0lBRWhDLGFBQWE7SUFDYixFQUFFLEdBQVksSUFBSSxFQUFFLENBQUM7SUFFYixPQUFPLEdBQXFCLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFFN0QsbUNBQW1DO0lBQ25DLElBQXVCLE1BQU0sQ0FBQyxNQUF1QjtRQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUcsQ0FBQztJQUU5QyxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVTLHlCQUF5QjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsRyxDQUFDO3lFQXhEVSxlQUFlOzZEQUFmLGVBQWU7O1lDaEQ1QixrQkFBeUI7OztpRkRnRFosZUFBZTtjQUozQixTQUFTOzJCQUNFLFNBQVM7MkNBMkJjLGlCQUFpQjtrQkFBakQsS0FBSzttQkFBQyx3QkFBd0I7WUFLYixLQUFLO2tCQUF0QixLQUFLO21CQUFDLFNBQVM7WUFRTyxNQUFNO2tCQUE1QixLQUFLO21CQUFDLFVBQVU7O2tGQXJDTixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvU3RlcHBlclN0YXR1cyB9IGZyb20gJy4uL2VudW1zL3BvLXN0ZXBwZXItc3RhdHVzLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tc3RlcGAgw6kgdXRpbGl6YWRvIHBhcmEgZW52b2x2ZXIgZSByZW5kZXJpemFyIG8gY29udGXDumRvIGRlIHVtIHBhc3NvICgqc3RlcCopIGRvIGBwby1zdGVwcGVyYCwgcG9yIGV4ZW1wbG86XG4gKlxuICogYGBgXG4gKiA8cG8tc3RlcHBlcj5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiRW5kZXJlw6dvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBlbmRlcmXDp28gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICAgIDxwby1zdGVwIHAtbGFiZWw9XCJQYWdhbWVudG9cIj5cbiAqXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIHBhZ2FtZW50byAtLT5cbiAqXG4gKiAgICA8L3BvLXN0ZXA+XG4gKlxuICogIDwvcG8tc3RlcHBlcj5cbiAqIGBgYFxuICpcbiAqIEEgcmVuZGVyaXphw6fDo28gZG8gY29udGXDumRvIGVudm9sdmlkbyBuYSB0ZWxhIGUgbyBjb250cm9sZSBkb3Mgc3RhdHVzIHPDo28gZmVpdG9zIGF1dG9tYXRpY2FtZW50ZS4gTm8gcXVhbCwgbyBwcmltZWlyb1xuICogYHBvLXN0ZXBgIGVuY29udHJhZG8gc2Vyw6EgY29sb2NhZG8gY29tbyBhdGl2bywgbyBwcsOzeGltbyBmaWNhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvcyBkZW1haXMgZmljYW1cbiAqIGRlc2FiaWxpdGFkb3MgKCpkaXNhYmxlZCopLlxuICpcbiAqIEFvIGNsaWNhciBubyBgcG8tc3RlcGAgcXVlIGVzdMOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCosIG8gcXVlIGVzdMOhIGF0aXZvIGZpY2Fyw6EgY29tIG9cbiAqIHN0YXR1cyBkZSBjb25jbHXDrWRvICgqZG9uZSopIGUgbyBwcsOzeGltbyBxdWUgZXN0YXZhIGRlc2FiaWxpdGFkbyBmaWNhcsOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvIHJlc3RhbnRlIHBlcm1hbmVjZXLDoVxuICogY29tIG8gc3RhdHVzIGRlc2FiaWxpdGFkby5cbiAqXG4gKiA+IEFvIHV0aWxpemFyIG8gYHBvLXN0ZXBgLCBvIGNvbXBvbmVudGUgYHBvLXN0ZXBwZXJgIGZ1bmNpb25hcsOhIGRlIGZvcm1hIHNlcXVlbmNpYWwsIG91IHNlamEsIG7Do28gc2Vyw6EgcG9zc8OtdmVsXG4gKiBwdWxhciBwYXJhIG91dHJvIGBwby1zdGVwYCBxdWUgZXN0ZWphIGNvbSBvIHN0YXR1cyBpZ3VhbCBhIGRlc2FiaWxpdGFkbyAoKmRpc2FibGVkKikuXG4gKlxuICogQWNlc3NlIGEgW2RvY3VtZW50YcOnw6NvIGRvIGBwby1zdGVwcGVyYF0oL2RvY3VtZW50YXRpb24vcG8tc3RlcHBlcikgcGFyYSB0ZXIgbWFpcyBpbmZvcm1hw6fDtWVzIHNvYnJlIG8gc2V1IGZ1bmNpb25hbWVudG9cbiAqIGUgZXhlbXBsb3MgZGUgdXNvLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1zdGVwJyxcbiAgdGVtcGxhdGVVcmw6ICdwby1zdGVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1N0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gY2hhbWFkYSBxdWFuZG8gbyBwcsOzeGltbyAqc3RlcCogZm9yIGNsaWNhZG8gb3UgcXVhbmRvIG8gbcOpdG9kbyBgUG9TdGVwcGVyQ29tcG9uZW50Lm5leHQoKWAgZm9yIGNoYW1hZG8uXG4gICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cbiAgICogVGFtYsOpbSBhY2VpdGEgZnVuw6fDtWVzIHF1ZSByZXRvcm5lbSBgT2JzZXJ2YWJsZTxib29sZWFuPmAuIEFvIHJldG9ybmFyIHVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YCxcbiAgICogZ2FyYW50YSBxdWUgZXNzZSBgT2JzZXJ2YWJsZWAgc2Vyw6EgY29tcGxldGFkbywgY2FzbyBob3V2ZXIgYWxndW0gZXJybyBkdXJhbnRlIG8gcHJvY2Vzc28gbsOjbyBzZXLDoSBwb3Nzw612ZWwgcHJvc3NlZ3VpclxuICAgKiBhbyBwcsOzeGltbyAqc3RlcCouXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZGEsIGEgbWVzbWEgcmVjZWJlcsOhIHBvciBwYXLDom1ldHJvIG8gYFBvU3RlcENvbXBvbmVudGAgYXR1YWwuXG4gICAqXG4gICAqIE8gY29udGV4dG8gZGEgZnVuw6fDo28gcXVlIHNlcsOhIGNoYW1hZGEsIHNlcsOhIG8gbWVzbW8gcXVlIG8gZG8gYFBvU3RlcENvbXBvbmVudGAsIGVudMOjbyBwYXJhIHBvZGVyIGFsdGVyYXJcbiAgICogcGFyYSBvIGNvbnRleHRvIGRvIGNvbXBvbmVudGUgcXVlIG8gZXN0w6EgdXRpbGl6YW5kbywgcG9kZSBzZXIgdXRpbGl6YWRvIGEgcHJvcHJpZWRhZGUgYGJpbmRgIGRvIEphdmFzY3JpcHQuXG4gICAqIFBvciBleGVtcGxvLCBwYXJhIGEgZnVuw6fDo28gYHZhbGlkYXRlYDpcbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1zdGVwIHAtbGFiZWw9XCJTdGVwIDFcIiBbcC1jYW4tYWN0aXZlLW5leHQtc3RlcF09XCJ2YWxpZGF0ZS5iaW5kKHRoaXMpXCI+XG4gICAqIC4uLlxuICAgKiA8L3BvLXN0ZXA+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLWNhbi1hY3RpdmUtbmV4dC1zdGVwJykgY2FuQWN0aXZlTmV4dFN0ZXA6XG4gICAgfCAoKGN1cnJlbnRTdGVwKSA9PiBib29sZWFuKVxuICAgIHwgKChjdXJyZW50U3RlcCkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPik7XG5cbiAgLyoqIFTDrXR1bG8gcXVlIHNlcsOhIGV4aWJpZG8gZGVzY3JldmVuZG8gbyBwYXNzbyAoKnN0ZXAqKS4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvLyBJRCBkbyBzdGVwXG4gIGlkPzogc3RyaW5nID0gdXVpZCgpO1xuXG4gIHByaXZhdGUgX3N0YXR1cz86IFBvU3RlcHBlclN0YXR1cyA9IFBvU3RlcHBlclN0YXR1cy5EaXNhYmxlZDtcblxuICAvLyBFc3RhZG8gZGUgZXhpYmnDp8OjbyBkbyBgcG8tc3RlcGAuXG4gIEBJbnB1dCgncC1zdGF0dXMnKSBzZXQgc3RhdHVzKHN0YXR1czogUG9TdGVwcGVyU3RhdHVzKSB7XG4gICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9XG4gICAgICB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkFjdGl2ZSB8fCB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkVycm9yID8gJycgOiAnbm9uZSc7XG4gIH1cbn1cbiIsIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiJdfQ==