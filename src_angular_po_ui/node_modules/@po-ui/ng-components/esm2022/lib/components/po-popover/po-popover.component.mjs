import { Component, ElementRef, ViewChild } from '@angular/core';
import { PoControlPositionService } from './../../services/po-control-position/po-control-position.service';
import { PoPopoverBaseComponent } from './po-popover-base.component';
import * as i0 from "@angular/core";
import * as i1 from "./../../services/po-control-position/po-control-position.service";
import * as i2 from "@angular/common";
const _c0 = ["popoverElement"];
function PoPopoverComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate1("po-popover-arrow po-arrow-", ctx_r1.arrowDirection, "");
} }
function PoPopoverComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r2.title);
} }
const _c1 = ["*"];
/**
 *
 * @docsExtends PoPopoverBaseComponent
 *
 * @example
 *
 * <example name="po-popover-basic" title="PO Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="PO Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
export class PoPopoverComponent extends PoPopoverBaseComponent {
    renderer;
    poControlPosition;
    popoverElement;
    arrowDirection = 'left';
    timeoutResize;
    targetElement;
    eventListenerFunction;
    constructor(renderer, poControlPosition) {
        super();
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
    }
    ngAfterViewInit() {
        this.targetElement = this.target instanceof ElementRef ? this.target.nativeElement : this.target;
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    close() {
        this.isHidden = true;
        this.closePopover.emit();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.setPopoverPosition();
        }, 200);
    }
    open() {
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(() => {
            this.setElementsControlPosition();
            this.setPopoverPosition();
            this.setOpacity(1);
        });
    }
    setOpacity(value) {
        this.popoverElement.nativeElement.style.opacity = value;
    }
    setPopoverPosition() {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    setRendererListenInit() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            if (!this.isHidden) {
                this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.targetElement, 'mouseenter', (event) => {
                this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.targetElement, 'mouseleave', (event) => {
                this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
                this.togglePopup(event);
            });
        }
    }
    togglePopup(event) {
        if (!this.isHidden &&
            !this.popoverElement.nativeElement.contains(event.target) &&
            !this.targetElement.contains(event.target)) {
            this.close();
        }
        else if (this.targetElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    initEventListenerFunction() {
        this.eventListenerFunction = () => {
            this.setPopoverPosition();
        };
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    setElementsControlPosition() {
        const popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    }
    static ɵfac = function PoPopoverComponent_Factory(t) { return new (t || PoPopoverComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoControlPositionService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPopoverComponent, selectors: [["po-popover"]], viewQuery: function PoPopoverComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popoverElement = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 3, consts: [[1, "po-popover", 3, "hidden"], ["popoverElement", ""], [3, "class", 4, "ngIf"], [1, "po-popover-content"], ["class", "po-popover-title", 4, "ngIf"], [1, "po-popover-title"]], template: function PoPopoverComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoPopoverComponent_div_2_Template, 1, 3, "div", 2);
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoPopoverComponent_span_4_Template, 2, 1, "span", 4);
            i0.ɵɵprojection(5);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("hidden", ctx.isHidden);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hideArrow);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.title);
        } }, dependencies: [i2.NgIf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverComponent, [{
        type: Component,
        args: [{ selector: 'po-popover', providers: [PoControlPositionService], template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: i1.PoControlPositionService }], { popoverElement: [{
            type: ViewChild,
            args: ['popoverElement', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPopoverComponent, { className: "PoPopoverComponent", filePath: "lib/components/po-popover/po-popover.component.ts", lineNumber: 41 }); })();
//# sourceMappingURL=data:application/json;base64,