import { Input, Directive } from '@angular/core';
import { convertToInt } from '../../utils/util';
import { poGaugeMinHeight } from './po-gauge-default-values.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-color/po-color.service";
/**
 * @description
 *
 * O componente `po-gauge` provê a representação de um valor através de um arco. É muito comum, por exemplo, para demonstrar o desempenho ou progresso de algo.
 * O `po-gauge` possui dois tipos de tratamentos:
 * - É possível demonstrar um dado percentual simples em conjunto com uma descrição resumida em seu interior;
 * - Para um demonstrativo mais elaborado, consegue-se definir alcances em cores, um breve texto descritivo e um ponteiro indicando o valor desejado.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
export class PoGaugeBaseComponent {
    colorService;
    _description;
    _height = poGaugeMinHeight;
    _ranges = [];
    _title;
    _value;
    /**
     * @optional
     *
     * @description
     *
     * Define o texto que será exibido no gauge.
     * Há dois posicionamentos para ele:
     * - Se houver definição para `p-ranges`, o descritivo será exibido no topo do container, ficando acima do gauge;
     * - Na ausência de `p-ranges`, será incorporado dentro do arco do gauge, e abaixo de `p-value`.
     *
     * Para ambos os casos, se o conteúdo ultrapassar a área designada, serão geradas automaticamente reticências.
     * No entanto, será possível visualizar a mensagem através de um tooltip no passar do mouse sobre o texto.
     *
     * > Para uma melhor experiência do usuário, é recomendado um descritivo breve e com poucas palavras.
     * Desta forma evita-se o *overflow* do texto.
     */
    set description(value) {
        this._description = value;
        this.svgContainerSize();
    }
    get description() {
        return this._description;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gauge.
     *
     * O valor mínimo aceito é 300px.
     *
     * @default `300px`
     */
    set height(value) {
        this._height = this.setGaugeHeight(value);
        this.svgContainerSize();
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição para o alcance de cores. Ao adicionar pelo menos um item na lista,
     * incorpora-se o ponteiro que assinala o valor passado em `p-value`.
     * Se o valor de `p-value` for inferior ao mínimo valor definido em `PoGaugeRanges.from`, o domínio mínimo do gauge será `p-value`.
     * A mesma regra prevalece para valores máximos.
     */
    set ranges(value) {
        this._ranges = Array.isArray(value) ? this.verifyColors(value) : [];
        this.svgContainerSize();
    }
    get ranges() {
        return this._ranges;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o título do gauge.
     */
    set title(value) {
        this._title = value;
        this.svgContainerSize();
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor referente ao valor da série. Seu comportamento segue a seguintes regras:
     *
     * - Sem `p-ranges`: Os valores passados para `p-value` e `p-description` serão centralizados no interior do arco.
     * A base do valor será percentual tendo como base os alcances entre zero e 100%. Se passado um valor superior a 100,
     * A colorização do gauge será completa e o valor passado será exibido no interior do arco.
     * - Com `p-ranges`: A descrição será exibida acima do gauge e haverá um ponteiro marcando o valor passado em `p-value`.
     * Considerando que o alcance em `ranges` é aberto, então a escala de `p-value` será em relação ao menor/maior alcance
     * absoluto definido em `p-ranges`.
     * Se passado um `p-value` inferior em relação ao mínimo valor definido em `p-ranges`, o domínio mínimo do gauge partirá de `p-value`.
     * A mesma regra prevalece para valores máximos.
     *
     */
    set value(gaugeValue) {
        if (typeof gaugeValue === 'number' || (typeof gaugeValue === 'string' && gaugeValue.trim())) {
            const value = !isNaN(gaugeValue) ? Number(gaugeValue) : undefined;
            this._value = value;
        }
        else {
            this._value = undefined;
        }
    }
    get value() {
        return this._value;
    }
    constructor(colorService) {
        this.colorService = colorService;
    }
    verifyColors(ranges) {
        return this.colorService.getColors(ranges);
    }
    setGaugeHeight(height) {
        const gaugeHeight = convertToInt(height);
        return gaugeHeight && gaugeHeight > poGaugeMinHeight ? gaugeHeight : poGaugeMinHeight;
    }
    static ɵfac = function PoGaugeBaseComponent_Factory(t) { return new (t || PoGaugeBaseComponent)(i0.ɵɵdirectiveInject(i1.PoColorService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoGaugeBaseComponent, inputs: { description: [i0.ɵɵInputFlags.None, "p-description", "description"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], ranges: [i0.ɵɵInputFlags.None, "p-ranges", "ranges"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoColorService }], { description: [{
            type: Input,
            args: ['p-description']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], ranges: [{
            type: Input,
            args: ['p-ranges']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,