import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = { ...fields[index], ...validatedField };
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return (validateFields || {
            field: {}
        });
    }
    static ɵfac = function PoDynamicFormValidationService_Factory(t) { return new (t || PoDynamicFormValidationService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormValidationService, factory: PoDynamicFormValidationService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormValidationService, [{
        type: Injectable
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tdmFsaWRhdGlvbi9wby1keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDOzs7QUFJaEcsTUFBTSxPQUFPLDhCQUErQixTQUFRLHNCQUFzQjtJQUN4RSxZQUFZLElBQWdCO1FBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBeUIsRUFBRSxLQUFVO1FBQ25ELE1BQU0sWUFBWSxHQUE4QixFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDcEQsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQ25FLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUNaLFFBQTJCLEVBQzNCLEtBQXlCLEVBQ3pCLEtBQVU7UUFFVixNQUFNLFlBQVksR0FBOEIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUVwRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxrQkFBNkMsRUFBRSxFQUFFLFNBQW9DLEVBQUU7UUFDdEcsT0FBTyxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUNoQyxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsRUFBRTtZQUNoQyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0YsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUUvQixJQUFJLFdBQVcsRUFBRTtnQkFDZixhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLGNBQWMsRUFBRSxDQUFDO2FBQ2hFO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUNELENBQUMsR0FBRyxNQUFNLENBQUMsQ0FDWixDQUFDO0lBQ0osQ0FBQztJQUVPLHNCQUFzQixDQUFDLGNBQW1CO1FBQ2hELE9BQU8sQ0FDTCxjQUFjLElBQUk7WUFDaEIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUNGLENBQUM7SUFDSixDQUFDO3dGQTdDVSw4QkFBOEI7Z0VBQTlCLDhCQUE4QixXQUE5Qiw4QkFBOEI7O2lGQUE5Qiw4QkFBOEI7Y0FEMUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tZmllbGQtY2hhbmdlZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbic7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbiB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSBleHRlbmRzIFBvRHluYW1pY0Zvcm1PcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoaHR0cCk7XG4gIH1cblxuICBzZW5kRmllbGRDaGFuZ2UoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShmaWVsZC52YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKFxuICAgICAgbWFwKHZhbGlkYXRlRmllbGRzID0+IHRoaXMuc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpXG4gICAgKTtcbiAgfVxuXG4gIHNlbmRGb3JtQ2hhbmdlKFxuICAgIHZhbGlkYXRlOiBGdW5jdGlvbiB8IHN0cmluZyxcbiAgICBmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLFxuICAgIHZhbHVlOiBhbnlcbiAgKTogT2JzZXJ2YWJsZTxQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbj4ge1xuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh2YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKG1hcCh2YWxpZGF0ZUZpZWxkcyA9PiB0aGlzLnNldEZvcm1EZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpKTtcbiAgfVxuXG4gIHVwZGF0ZUZpZWxkc0Zvcm0odmFsaWRhdGVkRmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10sIGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdKSB7XG4gICAgcmV0dXJuIFsuLi52YWxpZGF0ZWRGaWVsZHNdLnJlZHVjZShcbiAgICAgICh1cGRhdGVkRmllbGRzLCB2YWxpZGF0ZWRGaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHVwZGF0ZWRGaWVsZHMuZmluZEluZGV4KGZpZWxkID0+IGZpZWxkLnByb3BlcnR5ID09PSB2YWxpZGF0ZWRGaWVsZC5wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gaW5kZXggPj0gMDtcblxuICAgICAgICBpZiAoaGFzUHJvcGVydHkpIHtcbiAgICAgICAgICB1cGRhdGVkRmllbGRzW2luZGV4XSA9IHsgLi4uZmllbGRzW2luZGV4XSwgLi4udmFsaWRhdGVkRmllbGQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xuICAgICAgfSxcbiAgICAgIFsuLi5maWVsZHNdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkczogYW55KTogYW55IHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsaWRhdGVGaWVsZHMgfHwge1xuICAgICAgICBmaWVsZDoge31cbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=