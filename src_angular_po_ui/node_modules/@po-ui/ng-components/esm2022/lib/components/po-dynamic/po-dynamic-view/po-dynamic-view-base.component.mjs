import { Directive, Input } from '@angular/core';
import { convertToBoolean, isTypeof, sortFields } from '../../../utils/util';
import { catchError, map, of } from 'rxjs';
import { getGridColumnsClasses, isVisibleField } from '../po-dynamic.util';
import { PoDynamicSharedBase } from '../shared/po-dynamic-shared-base';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../pipes/po-time/po-time.pipe";
import * as i3 from "./services/po-dynamic-view.service";
import * as i4 from "../../po-field/po-combo/po-combo-filter.service";
import * as i5 from "../../po-field/po-multiselect/po-multiselect-filter.service";
/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
export class PoDynamicViewBaseComponent extends PoDynamicSharedBase {
    currencyPipe;
    datePipe;
    decimalPipe;
    timePipe;
    titleCasePipe;
    dynamicViewService;
    comboFilterService;
    multiselectFilterService;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita executar uma função quando o componente é inicializado.
     *
     * A propriedade aceita os seguintes tipos:
     * - **String**: Endpoint usado pelo componente para requisição via `POST`.
     * - **Function**: Método que será executado na inicialização do componente.
     *
     * Para os dois tipos de utilização da propriedade espera-se o seguinte retorno:
     *
     * ```
     * {
     *   value: {
     *     cnpj: '**************', // altera valor do campo
     *     updated: (new Date()).toString() // atribui valor ao campo novo
     *   },
     *   fields: [
     *     { property: 'cnpj', tag: true, inverse: true }, // atribui novas propriedades ao field
     *     { property: 'updated', tag: true } // inclui campo novo
     *   ]
     * }
     * ```
     * > **value**: any = atribui novo valor do model.
     *
     * > **fields**: `Array<PoDynamicViewField>` = Lista de campos que deseja alterar as propriedades,
     * caso enviar um campo a mais será criado um novo campo.
     *
     * - Para esconder/remover campos precisa informar no field a propriedade `visible = false`.
     *
     */
    load;
    service;
    _fields = [];
    _showAllValue = false;
    _value = {};
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * @default `[]`
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    get fields() {
        return this._fields;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * @default `false`
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService, comboFilterService, multiselectFilterService) {
        super();
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this.dynamicViewService = dynamicViewService;
        this.comboFilterService = comboFilterService;
        this.multiselectFilterService = multiselectFilterService;
    }
    getFieldOrderRetroactive(position, index = 1) {
        if (position === index) {
            return position;
        }
        return this.fields.findIndex(field => field.order === index) > -1
            ? this.getFieldOrderRetroactive(position, index + 1)
            : index;
    }
    getFieldOrder(field, index) {
        const position = this.getFieldOrderRetroactive(index + 1);
        return this.fields.findIndex(e => e.order === position) > -1 ? this.getFieldOrder(field, position) : position;
    }
    getConfiguredFields(useSearchService = true) {
        const newFields = [];
        this.fields.forEach((field, index) => {
            field.order = field.order || this.getFieldOrder(field, index);
            if (!isVisibleField(field)) {
                return;
            }
            if (!field.searchService && !field.optionsService) {
                newFields.push(this.createField(field));
                return;
            }
            const hasValue = this.value[field.property]?.length ||
                (!Array.isArray(this.value[field.property]) && this.value[field.property] && useSearchService) ||
                field.container;
            if (hasValue) {
                const _field = this.returnValues({ ...field }, '');
                newFields.push(_field);
                if (field.searchService) {
                    if (typeof field.searchService === 'object') {
                        this.service = field.searchService;
                    }
                    else if (typeof field.searchService === 'string') {
                        this.service = this.dynamicViewService;
                        this.service.setConfig(field.searchService);
                    }
                }
                else if (field.optionsService) {
                    if (field.optionsMulti) {
                        if (typeof field.optionsService === 'object') {
                            this.service = field.optionsService;
                        }
                        else {
                            this.service = this.multiselectFilterService;
                            this.service.configProperties(field.optionsService, field.fieldLabel, field.fieldValue);
                        }
                    }
                    else {
                        if (typeof field.optionsService === 'object') {
                            this.service = field.optionsService;
                        }
                        else {
                            this.service = this.comboFilterService;
                            this.service.configProperties(field.optionsService, field.fieldLabel, field.fieldValue);
                        }
                    }
                }
                this.createFieldWithService(field, newFields, _field);
            }
        });
        const _sortedField = sortFields(newFields);
        this.ensureFieldHasContainer(_sortedField);
        return _sortedField;
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    getMergedFields() {
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach(valueField => {
            const fieldIndex = mergedFields.findIndex(field => field.property === valueField.property);
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        });
        return mergedFields;
    }
    // retorna o objeto value como fields.
    getValueFields() {
        return Object.keys(this.value).map(property => this.createField({ property }));
    }
    createField(field) {
        const property = field.property;
        let value;
        if (field.isArrayOrObject && this.value[property]) {
            value = this.transformArrayValue(this.value[property], field);
        }
        else if (field.fieldLabel) {
            value = this.transformFieldLabel(property, field);
        }
        if (!value) {
            value = this.transformValue(field.type, this.value[property], field.format);
        }
        return this.returnValues(field, value);
    }
    createFieldWithService(field, newFields, oldField) {
        const property = field.property;
        this.searchById(this.value[property], field).subscribe(response => {
            const value = response;
            const allValues = this.returnValues(field, value);
            const oldFieldIndex = newFields.indexOf(newFields.find(field => field === oldField));
            newFields.splice(oldFieldIndex, 1, allValues);
            sortFields(newFields);
        });
    }
    returnValues(field, value) {
        const property = field.property;
        const classesGridColumns = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return {
            property,
            value,
            label: this.titleCasePipe.transform(property),
            cssClass: classesGridColumns,
            ...field
        };
    }
    searchById(value, field) {
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            if (field.optionsMulti) {
                return this.service
                    .getObjectsByValues(value, field.params)
                    .pipe(map(res => this.transformArrayValue(res, field)))
                    .pipe(catchError(() => of(null)));
            }
            else {
                return this.service
                    .getObjectByValue(value, field.params)
                    .pipe(map(res => this.transformArrayValue(res, field)))
                    .pipe(catchError(() => of(null)));
            }
        }
        else {
            return of(null);
        }
    }
    transformArrayValue(valueProperty, field) {
        const valueArray = Array.isArray(valueProperty) ? valueProperty : [valueProperty];
        let labels;
        if (Array.isArray(field.format)) {
            labels = valueArray.map(objectData => this.formatField(objectData, field.format));
        }
        else {
            const arrayWithLabel = valueArray.map(item => ({
                value: item[field.fieldValue] || item.value,
                label: item[field.fieldLabel] || item.label
            }));
            labels = arrayWithLabel.map(optionValue => {
                if (optionValue.label) {
                    const labelTranformed = this.transformValue(field.type, optionValue.label, field.format);
                    if (field.concatLabelValue && optionValue.value) {
                        return `${labelTranformed} - ${optionValue.value}`;
                    }
                    else {
                        return labelTranformed;
                    }
                }
            });
        }
        if (labels[0] !== undefined && labels.join()) {
            return labels.join(', ');
        }
        else {
            valueProperty = '';
            return undefined;
        }
    }
    transformFieldLabel(property, field) {
        if (field.concatLabelValue && field.fieldLabel && field.fieldValue && !field.isArrayOrObject) {
            const transformedValue = this.transformValue(field.type, this.value[field.fieldLabel], field.format);
            return `${transformedValue} - ${this.value[field.fieldValue]}`;
        }
        if (field.fieldLabel && !field.concatLabelValue && !field.isArrayOrObject) {
            this.value[property] = this.value[field.fieldLabel];
        }
        return undefined;
    }
    transformValue(type, value, format) {
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
    formatField(objectSelected, properties) {
        let formattedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formattedField) {
                        formattedField = objectSelected[property];
                    }
                    else {
                        formattedField += ' - ' + objectSelected[property];
                    }
                }
            }
        }
        return formattedField;
    }
    static ɵfac = function PoDynamicViewBaseComponent_Factory(t) { return new (t || PoDynamicViewBaseComponent)(i0.ɵɵdirectiveInject(i1.CurrencyPipe), i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(i2.PoTimePipe), i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(i3.PoDynamicViewService), i0.ɵɵdirectiveInject(i4.PoComboFilterService), i0.ɵɵdirectiveInject(i5.PoMultiselectFilterService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicViewBaseComponent, inputs: { load: [i0.ɵɵInputFlags.None, "p-load", "load"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"], showAllValue: [i0.ɵɵInputFlags.None, "p-show-all-value", "showAllValue"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.CurrencyPipe }, { type: i1.DatePipe }, { type: i1.DecimalPipe }, { type: i2.PoTimePipe }, { type: i1.TitleCasePipe }, { type: i3.PoDynamicViewService }, { type: i4.PoComboFilterService }, { type: i5.PoMultiselectFilterService }], { load: [{
            type: Input,
            args: ['p-load']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], showAllValue: [{
            type: Input,
            args: ['p-show-all-value']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,