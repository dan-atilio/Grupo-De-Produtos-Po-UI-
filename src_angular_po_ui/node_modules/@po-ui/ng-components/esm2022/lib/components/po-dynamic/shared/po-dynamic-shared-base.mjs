import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoDynamicViewComponent, PoDynamicFormComponent
 * @description
 * Componente para listar dados compartilhados entre o dynamic-view e o dynamic-form
 */
export class PoDynamicSharedBase {
    visibleFields = [];
    containerFields = [];
    hasContainers = false;
    ensureFieldHasContainer(fields) {
        if (fields && fields.some(field => field?.container)) {
            const firstFieldIndex = fields.findIndex(field => field.order === 1);
            if (firstFieldIndex !== -1 && !fields[firstFieldIndex].container) {
                fields[firstFieldIndex].container = '';
            }
        }
    }
    setContainerFields() {
        this.hasContainers = this.visibleFields && this.visibleFields.some(field => field.container);
        if (this.hasContainers) {
            this.containerFields = this.groupFieldsIntoContainers(this.visibleFields);
        }
    }
    groupFieldsIntoContainers(fields) {
        const groups = [[]];
        return fields.reduce((acc, field) => {
            if (field.container && acc[acc.length - 1].length > 0)
                acc.push([]);
            acc[acc.length - 1].push(field);
            return acc;
        }, groups);
    }
    static ɵfac = function PoDynamicSharedBase_Factory(t) { return new (t || PoDynamicSharedBase)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicSharedBase });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicSharedBase, [{
        type: Directive
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1zaGFyZWQtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3NoYXJlZC9wby1keW5hbWljLXNoYXJlZC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTFDOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLGFBQWEsR0FBZSxFQUFFLENBQUM7SUFDL0IsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUNyQixhQUFhLEdBQVksS0FBSyxDQUFDO0lBRS9CLHVCQUF1QixDQUFDLE1BQTZEO1FBQ25GLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDcEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFckUsSUFBSSxlQUFlLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxFQUFFO2dCQUNoRSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQzthQUN4QztTQUNGO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFN0YsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzRTtJQUNILENBQUM7SUFFTyx5QkFBeUIsQ0FBQyxNQUFpQztRQUNqRSxNQUFNLE1BQU0sR0FBcUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs2RUE5QlUsbUJBQW1COzZEQUFuQixtQkFBbUI7O2lGQUFuQixtQkFBbUI7Y0FEL0IsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljVmlld0ZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy12aWV3L3BvLWR5bmFtaWMtdmlldy1maWVsZC5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9EeW5hbWljVmlld0NvbXBvbmVudCwgUG9EeW5hbWljRm9ybUNvbXBvbmVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wb25lbnRlIHBhcmEgbGlzdGFyIGRhZG9zIGNvbXBhcnRpbGhhZG9zIGVudHJlIG8gZHluYW1pYy12aWV3IGUgbyBkeW5hbWljLWZvcm1cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9EeW5hbWljU2hhcmVkQmFzZSB7XG4gIHZpc2libGVGaWVsZHM6IEFycmF5PGFueT4gPSBbXTtcbiAgY29udGFpbmVyRmllbGRzID0gW107XG4gIGhhc0NvbnRhaW5lcnM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBlbnN1cmVGaWVsZEhhc0NvbnRhaW5lcihmaWVsZHM6IEFycmF5PFBvRHluYW1pY1ZpZXdGaWVsZD4gfCBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+KSB7XG4gICAgaWYgKGZpZWxkcyAmJiBmaWVsZHMuc29tZShmaWVsZCA9PiBmaWVsZD8uY29udGFpbmVyKSkge1xuICAgICAgY29uc3QgZmlyc3RGaWVsZEluZGV4ID0gZmllbGRzLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5vcmRlciA9PT0gMSk7XG5cbiAgICAgIGlmIChmaXJzdEZpZWxkSW5kZXggIT09IC0xICYmICFmaWVsZHNbZmlyc3RGaWVsZEluZGV4XS5jb250YWluZXIpIHtcbiAgICAgICAgZmllbGRzW2ZpcnN0RmllbGRJbmRleF0uY29udGFpbmVyID0gJyc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0Q29udGFpbmVyRmllbGRzKCkge1xuICAgIHRoaXMuaGFzQ29udGFpbmVycyA9IHRoaXMudmlzaWJsZUZpZWxkcyAmJiB0aGlzLnZpc2libGVGaWVsZHMuc29tZShmaWVsZCA9PiBmaWVsZC5jb250YWluZXIpO1xuXG4gICAgaWYgKHRoaXMuaGFzQ29udGFpbmVycykge1xuICAgICAgdGhpcy5jb250YWluZXJGaWVsZHMgPSB0aGlzLmdyb3VwRmllbGRzSW50b0NvbnRhaW5lcnModGhpcy52aXNpYmxlRmllbGRzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdyb3VwRmllbGRzSW50b0NvbnRhaW5lcnMoZmllbGRzOiBBcnJheTxQb0R5bmFtaWNWaWV3RmllbGQ+KTogQXJyYXk8QXJyYXk8UG9EeW5hbWljVmlld0ZpZWxkPj4ge1xuICAgIGNvbnN0IGdyb3VwczogQXJyYXk8QXJyYXk8UG9EeW5hbWljVmlld0ZpZWxkPj4gPSBbW11dO1xuICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChhY2MsIGZpZWxkKSA9PiB7XG4gICAgICBpZiAoZmllbGQuY29udGFpbmVyICYmIGFjY1thY2MubGVuZ3RoIC0gMV0ubGVuZ3RoID4gMCkgYWNjLnB1c2goW10pO1xuICAgICAgYWNjW2FjYy5sZW5ndGggLSAxXS5wdXNoKGZpZWxkKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgZ3JvdXBzKTtcbiAgfVxufVxuIl19