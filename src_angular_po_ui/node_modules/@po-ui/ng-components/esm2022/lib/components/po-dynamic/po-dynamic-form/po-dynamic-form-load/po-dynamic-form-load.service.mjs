import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoDynamicFormLoadService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    createAndUpdateFieldsForm(loadedFields = [], fields = []) {
        return [...loadedFields].reduce((updatedFields, field) => {
            const index = updatedFields.findIndex(updatedField => updatedField.property === field.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = { ...fields[index], ...field };
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, [...fields]);
    }
    executeLoad(load, value) {
        return this.execute(load, value).pipe(map(loadedFormdData => this.setFormDefaultIfEmpty(loadedFormdData)));
    }
    static ɵfac = function PoDynamicFormLoadService_Factory(t) { return new (t || PoDynamicFormLoadService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormLoadService, factory: PoDynamicFormLoadService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormLoadService, [{
        type: Injectable
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tbG9hZC9wby1keW5hbWljLWZvcm0tbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDOzs7QUFHaEcsTUFBTSxPQUFPLHdCQUF5QixTQUFRLHNCQUFzQjtJQUNsRSxZQUFZLElBQWdCO1FBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxlQUEwQyxFQUFFLEVBQUUsU0FBb0MsRUFBRTtRQUM1RyxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQzdCLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRyxNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUM7YUFDdkQ7aUJBQU07Z0JBQ0wsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQjtZQUVELE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsRUFDRCxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQ1osQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBdUIsRUFBRSxLQUFVO1FBQzdDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQztrRkF6QlUsd0JBQXdCO2dFQUF4Qix3QkFBd0IsV0FBeEIsd0JBQXdCOztpRkFBeEIsd0JBQXdCO2NBRHBDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtTG9hZFNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGh0dHApO1xuICB9XG5cbiAgY3JlYXRlQW5kVXBkYXRlRmllbGRzRm9ybShsb2FkZWRGaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSwgZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10pIHtcbiAgICByZXR1cm4gWy4uLmxvYWRlZEZpZWxkc10ucmVkdWNlKFxuICAgICAgKHVwZGF0ZWRGaWVsZHMsIGZpZWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdXBkYXRlZEZpZWxkcy5maW5kSW5kZXgodXBkYXRlZEZpZWxkID0+IHVwZGF0ZWRGaWVsZC5wcm9wZXJ0eSA9PT0gZmllbGQucHJvcGVydHkpO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eSA9IGluZGV4ID49IDA7XG5cbiAgICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XG4gICAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLmZpZWxkIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlZEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xuICAgICAgfSxcbiAgICAgIFsuLi5maWVsZHNdXG4gICAgKTtcbiAgfVxuXG4gIGV4ZWN1dGVMb2FkKGxvYWQ6IEZ1bmN0aW9uIHwgc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShsb2FkLCB2YWx1ZSkucGlwZShtYXAobG9hZGVkRm9ybWREYXRhID0+IHRoaXMuc2V0Rm9ybURlZmF1bHRJZkVtcHR5KGxvYWRlZEZvcm1kRGF0YSkpKTtcbiAgfVxufVxuIl19