import { Input, EventEmitter, Output, Directive } from '@angular/core';
import { isTypeof, sortFields } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
import { PoDynamicSharedBase } from '../../shared/po-dynamic-shared-base';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class PoDynamicFormFieldsBaseComponent extends PoDynamicSharedBase {
    titleCasePipe;
    autoFocus;
    disabledForm;
    validate;
    formValidate = new EventEmitter();
    fieldsChange = new EventEmitter();
    // Evento disparado se existir optionsService em visibleField. Necessário resgatar referência do objeto selecionado para quando se tratar de recebimento de opções via serviço.
    objectValue = new EventEmitter();
    validateOnInput;
    _fields;
    _validateFields;
    _value = {};
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    set validateFields(value) {
        this._validateFields = Array.isArray(value) ? [...value] : [];
    }
    get validateFields() {
        return this._validateFields;
    }
    constructor(titleCasePipe) {
        super();
        this.titleCasePipe = titleCasePipe;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visíveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        const _visibleFields = sortFields(visibleFields);
        this.ensureFieldHasContainer(_visibleFields);
        return _visibleFields;
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const componentClass = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return {
            label: this.titleCasePipe.transform(field.property),
            maskFormatModel: this.compareTo(type, PoDynamicFieldType.Time),
            ...field,
            componentClass,
            control,
            focus,
            options
        };
    }
    existsProperty(fields, property) {
        return fields.some(field => field.property === property);
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const { forceBooleanComponentType } = field;
        const forceOptionComponent = this.verifyForceOptionComponent(field);
        if (forceBooleanComponentType) {
            return forceBooleanComponentType;
        }
        if (forceOptionComponent) {
            const { forceOptionsComponentType } = field;
            return forceOptionsComponentType;
        }
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type) || type === PoDynamicFieldType.Decimal) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return field.range ? 'datepickerrange' : 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        else if (this.isUpload(field)) {
            return 'upload';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && (isTypeof(optionsService, 'string') || this.isComboFilter(optionsService));
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    }
    isLookupFilter(object) {
        return object && object.getObjectByValue !== undefined;
    }
    isComboFilter(object) {
        return object && object.getFilteredData !== undefined;
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && (isTypeof(searchService, 'string') || this.isLookupFilter(searchService));
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return optionsMulti && (!!optionsService || (!!options && options.length > 3));
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    isUpload(field) {
        const { url, type } = field;
        return url && type === 'upload';
    }
    verifyForceOptionComponent(field) {
        const { optionsMulti, optionsService, forceOptionsComponentType } = field;
        if (forceOptionsComponentType && !optionsMulti && !optionsService) {
            return true;
        }
        return false;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
    static ɵfac = function PoDynamicFormFieldsBaseComponent_Factory(t) { return new (t || PoDynamicFormFieldsBaseComponent)(i0.ɵɵdirectiveInject(i1.TitleCasePipe)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormFieldsBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.None, "p-auto-focus", "autoFocus"], disabledForm: [i0.ɵɵInputFlags.None, "p-disabled-form", "disabledForm"], validate: [i0.ɵɵInputFlags.None, "p-validate", "validate"], validateOnInput: [i0.ɵɵInputFlags.None, "p-validate-on-input", "validateOnInput"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], validateFields: [i0.ɵɵInputFlags.None, "p-validate-fields", "validateFields"] }, outputs: { formValidate: "p-form-validate", fieldsChange: "p-fieldsChange", objectValue: "p-object-value" }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormFieldsBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.TitleCasePipe }], { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], disabledForm: [{
            type: Input,
            args: ['p-disabled-form']
        }], validate: [{
            type: Input,
            args: ['p-validate']
        }], formValidate: [{
            type: Output,
            args: ['p-form-validate']
        }], fieldsChange: [{
            type: Output,
            args: ['p-fieldsChange']
        }], objectValue: [{
            type: Output,
            args: ['p-object-value']
        }], validateOnInput: [{
            type: Input,
            args: ['p-validate-on-input']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], validateFields: [{
            type: Input,
            args: ['p-validate-fields']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,