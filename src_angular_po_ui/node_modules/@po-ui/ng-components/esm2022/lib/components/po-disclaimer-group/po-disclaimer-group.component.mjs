import { ChangeDetectionStrategy, Component, ElementRef, inject } from '@angular/core';
import { Subscription, fromEvent } from 'rxjs';
import { PoDisclaimerGroupBaseComponent } from './po-disclaimer-group-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
import * as i2 from "@angular/common";
import * as i3 from "../po-tag/po-tag.component";
import * as i4 from "./po-disclaimer-remove/po-disclaimer-remove.component";
function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer-remove", 5);
    i0.ɵɵlistener("keydown", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_keydown_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.onKeyPress($event)); })("p-remove-all-action", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_p_remove_all_action_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.removeAllItems()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-label", ctx_r1.literals.removeAll);
} }
function PoDisclaimerGroupComponent_div_0_po_tag_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-tag", 6);
    i0.ɵɵlistener("p-close", function PoDisclaimerGroupComponent_div_0_po_tag_4_Template_po_tag_p_close_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r8); const disclaimer_r6 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.onCloseAction(disclaimer_r6, $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const disclaimer_r6 = ctx.$implicit;
    i0.ɵɵproperty("p-value", disclaimer_r6.label || disclaimer_r6.value)("p-removable", !disclaimer_r6.hideClose);
} }
function PoDisclaimerGroupComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template, 1, 1, "po-disclaimer-remove", 3)(4, PoDisclaimerGroupComponent_div_0_po_tag_4_Template, 1, 2, "po-tag", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.title);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.isRemoveAll());
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r0.disclaimers);
} }
/**
 * @docsExtends PoDisclaimerGroupBaseComponent
 *
 * @example
 *
 * <example name="po-disclaimer-group-basic" title="PO Disclaimer Group Basic">
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-labs" title="PO Disclaimer Group Labs">
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-sw-planets" title="PO Disclaimer Group - Star Wars Planets">
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
export class PoDisclaimerGroupComponent extends PoDisclaimerGroupBaseComponent {
    changeDetector;
    subscription = new Subscription();
    el = inject(ElementRef);
    constructor(differs, languageService, changeDetector) {
        super(differs, languageService, changeDetector);
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        this.handleKeyboardNavigationTag();
    }
    ngOnChanges(changes) {
        if (changes.disclaimers) {
            setTimeout(() => {
                this.handleKeyboardNavigationTag();
            });
        }
    }
    onCloseAction(disclaimer, event) {
        const index = this.disclaimers.findIndex(option => option.value === disclaimer.value);
        this.removeDisclaimer(disclaimer);
        this.emitChangeDisclaimers();
        this.remove.emit({
            removedDisclaimer: { ...disclaimer },
            currentDisclaimers: [...this.disclaimers]
        });
        setTimeout(() => {
            this.focusOnNextTag(index, event);
        }, 300);
    }
    focusOnNextTag(indexClosed, clickOrEnter) {
        if (clickOrEnter === 'enter') {
            const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
            indexClosed = indexClosed || indexClosed === 0 ? indexClosed : tagRemoveElements.length;
            this.focusOnRemoveTag(tagRemoveElements, indexClosed);
        }
        else {
            indexClosed = 0;
        }
        this.handleKeyboardNavigationTag(indexClosed);
    }
    handleKeyboardNavigationTag(initialIndex = 0) {
        this.subscription.unsubscribe();
        this.subscription = new Subscription();
        const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
        this.initializeTagRemoveElements(tagRemoveElements, initialIndex);
    }
    handleArrowLeft(tagRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index - 1].focus();
            this.setTabIndex(tagRemoveElements[index - 1], 0);
        }
    }
    handleArrowRight(tagRemoveElements, index) {
        if (index < tagRemoveElements.length - 1) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index + 1].focus();
            this.setTabIndex(tagRemoveElements[index + 1], 0);
        }
    }
    setTabIndex(element, tabIndex) {
        element.setAttribute('tabindex', tabIndex);
    }
    initializeTagRemoveElements(tagRemoveElements, initialIndex) {
        tagRemoveElements.forEach((tagRemoveElement, index) => {
            if (index === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex], 0);
            }
            else if (tagRemoveElements.length === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex - 1], 0);
            }
            else {
                this.setTabIndex(tagRemoveElement, -1);
            }
            this.subscription.add(fromEvent(tagRemoveElement, 'keydown').subscribe((event) => {
                this.handleKeyDown(event, tagRemoveElements, index);
            }));
            if (index !== 0) {
                this.subscription.add(fromEvent(tagRemoveElements, 'blur').subscribe(() => {
                    this.setTabIndex(tagRemoveElements[index], -1);
                    this.setTabIndex(tagRemoveElements[0], 0);
                }));
            }
        });
    }
    handleKeyDown(event, tagRemoveElements, index) {
        const KEY_SPACE = 'Space';
        const KEY_ARROW_LEFT = 'ArrowLeft';
        const KEY_ARROW_RIGHT = 'ArrowRight';
        if (event.code === KEY_SPACE) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (event.key === KEY_ARROW_LEFT) {
            this.handleArrowLeft(tagRemoveElements, index);
        }
        else if (event.key === KEY_ARROW_RIGHT) {
            this.handleArrowRight(tagRemoveElements, index);
        }
    }
    focusOnRemoveTag(tag, indexClosed) {
        if (tag.length === indexClosed) {
            tag[indexClosed - 1]?.focus();
        }
        else {
            tag[indexClosed]?.focus();
        }
    }
    static ɵfac = function PoDisclaimerGroupComponent_Factory(t) { return new (t || PoDisclaimerGroupComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerGroupComponent, selectors: [["po-disclaimer-group"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "po-disclaimer-group", 4, "ngIf"], [1, "po-disclaimer-group"], [1, "po-disclaimer-group-title"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action", 4, "ngIf"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-value", "p-removable", "p-close", 4, "ngFor", "ngForOf"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-value", "p-removable", "p-close"]], template: function PoDisclaimerGroupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoDisclaimerGroupComponent_div_0_Template, 5, 3, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.disclaimers.length > 0);
        } }, dependencies: [i2.NgForOf, i2.NgIf, i3.PoTagComponent, i4.PoDisclaimerRemoveComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-disclaimer-group', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\">\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\n\n  <po-disclaimer-remove\n    *ngIf=\"isRemoveAll()\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (p-remove-all-action)=\"removeAllItems()\"\n  >\n  </po-disclaimer-remove>\n\n  <po-tag\n    *ngFor=\"let disclaimer of disclaimers\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-value]=\"disclaimer.label || disclaimer.value\"\n    [p-removable]=\"!disclaimer.hideClose\"\n    (p-close)=\"onCloseAction(disclaimer, $event)\"\n  >\n  </po-tag>\n</div>\n" }]
    }], () => [{ type: i0.IterableDiffers }, { type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDisclaimerGroupComponent, { className: "PoDisclaimerGroupComponent", filePath: "lib/components/po-disclaimer-group/po-disclaimer-group.component.ts", lineNumber: 46 }); })();
//# sourceMappingURL=data:application/json;base64,