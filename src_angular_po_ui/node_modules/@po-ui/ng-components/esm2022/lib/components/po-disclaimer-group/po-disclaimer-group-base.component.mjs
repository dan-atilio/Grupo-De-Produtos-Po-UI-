import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import { convertToBoolean, isKeyCodeEnter, uuid } from '../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
export const poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' },
    ru: { removeAll: 'Удалить все' }
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
export class PoDisclaimerGroupBaseComponent {
    changeDetector;
    /** Título do grupo de *disclaimers*. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
     *
     * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
     */
    remove = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
     * utilizando o botão "remover todos".
     *
     * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
     */
    removeAll = new EventEmitter();
    literals;
    _disclaimers = [];
    _hideRemoveAll = false;
    differ;
    previousDisclaimers = [];
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value) {
        this.previousDisclaimers = [...this.disclaimers];
        this._disclaimers = this.checkDisclaimers(value);
    }
    get disclaimers() {
        return this._disclaimers;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value) {
        this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
    }
    get hideRemoveAll() {
        return this._hideRemoveAll;
    }
    constructor(differs, languageService, changeDetector) {
        this.changeDetector = changeDetector;
        const language = languageService.getShortLanguage();
        this.differ = differs.find([]).create(null);
        this.literals = {
            ...poDisclaimerGroupLiteralsDefault[poLocaleDefault],
            ...poDisclaimerGroupLiteralsDefault[language]
        };
    }
    ngDoCheck() {
        this.checkChanges();
    }
    isRemoveAll() {
        return !this.hideRemoveAll && this.disclaimers.filter(c => !c.hideClose).length > 1;
    }
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    }
    removeAllItems() {
        const removeItems = [];
        this.disclaimers.forEach(disclaimer => {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(disclaimer => this.removeDisclaimer(disclaimer));
        this.emitChangeDisclaimers();
        this.removeAll.emit([...removeItems]);
    }
    removeDisclaimer(disclaimer) {
        const itemIndex = this.disclaimers.findIndex(d => d['$id'] === disclaimer['$id']);
        this.disclaimers.splice(itemIndex, 1);
    }
    emitChangeDisclaimers() {
        setTimeout(() => {
            this.change.emit(this.disclaimers);
        });
        this.previousDisclaimers = [...this._disclaimers];
        this.changeDetector?.detectChanges();
    }
    checkChanges() {
        if (this.differ) {
            const changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
        else {
            this.changeDetector?.detectChanges();
        }
    }
    checkDisclaimers(disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (let i = 0; i < disclaimers.length; i++) {
                const disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    }
    disclaimersAreChanged(disclaimers) {
        const currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value ||
            disclaimer.property !== this.previousDisclaimers[index].property);
    }
    static ɵfac = function PoDisclaimerGroupBaseComponent_Factory(t) { return new (t || PoDisclaimerGroupBaseComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerGroupBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], disclaimers: [i0.ɵɵInputFlags.None, "p-disclaimers", "disclaimers"], hideRemoveAll: [i0.ɵɵInputFlags.None, "p-hide-remove-all", "hideRemoveAll"] }, outputs: { change: "p-change", remove: "p-remove", removeAll: "p-remove-all" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.IterableDiffers }, { type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }], { title: [{
            type: Input,
            args: ['p-title']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], remove: [{
            type: Output,
            args: ['p-remove']
        }], removeAll: [{
            type: Output,
            args: ['p-remove-all']
        }], disclaimers: [{
            type: Input,
            args: ['p-disclaimers']
        }], hideRemoveAll: [{
            type: Input,
            args: ['p-hide-remove-all']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1ncm91cC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1kaXNjbGFpbWVyLWdyb3VwL3BvLWRpc2NsYWltZXItZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixTQUFTLEVBQVcsWUFBWSxFQUFFLEtBQUssRUFBbUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUVsRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFJMUUsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUc7SUFDOUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRTtJQUMvQixFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7SUFDbkMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtJQUNsQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFO0NBQ2pDLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCxNQUFNLE9BQU8sOEJBQThCO0lBaUc3QjtJQWhHWix3Q0FBd0M7SUFDdEIsS0FBSyxDQUFVO0lBRWpDOzs7Ozs7T0FNRztJQUNpQixNQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFeEU7Ozs7Ozs7O09BUUc7SUFDaUIsTUFBTSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRXhFOzs7Ozs7Ozs7T0FTRztJQUNxQixTQUFTLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFL0UsUUFBUSxDQUFDO0lBRUQsWUFBWSxHQUF3QixFQUFFLENBQUM7SUFD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QztvQkFDekIsQ0FBQyxFQUFFLENBQUM7aUJBQ0w7YUFDRjtZQUVELE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU8scUJBQXFCLENBQUMsV0FBZ0M7UUFDNUQsTUFBTSxhQUFhLEdBQXdCLFdBQVcsQ0FBQztRQUV2RCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUM1RCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUN2QixDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNwQixVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLO1lBQzFELFVBQVUsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FDbkUsQ0FBQztJQUNKLENBQUM7d0ZBbE1VLDhCQUE4Qjs2REFBOUIsOEJBQThCOztpRkFBOUIsOEJBQThCO2NBRDFDLFNBQVM7Z0hBR1UsS0FBSztrQkFBdEIsS0FBSzttQkFBQyxTQUFTO1lBU0ksTUFBTTtrQkFBekIsTUFBTTttQkFBQyxVQUFVO1lBV0UsTUFBTTtrQkFBekIsTUFBTTttQkFBQyxVQUFVO1lBWU0sU0FBUztrQkFBaEMsTUFBTTttQkFBQyxjQUFjO1lBK0JNLFdBQVc7a0JBQXRDLEtBQUs7bUJBQUMsZUFBZTtZQXFCbEIsYUFBYTtrQkFEaEIsS0FBSzttQkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBEb0NoZWNrLCBFdmVudEVtaXR0ZXIsIElucHV0LCBJdGVyYWJsZURpZmZlcnMsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5jb25zdGFudCc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiwgaXNLZXlDb2RlRW50ZXIsIHV1aWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9EaXNjbGFpbWVyIH0gZnJvbSAnLi4vcG8tZGlzY2xhaW1lci9wby1kaXNjbGFpbWVyLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBwb0Rpc2NsYWltZXJHcm91cExpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IHsgcmVtb3ZlQWxsOiAnUmVtb3ZlIGFsbCcgfSxcbiAgZXM6IHsgcmVtb3ZlQWxsOiAnRWxpbWluYXIgdG9kb3MnIH0sXG4gIHB0OiB7IHJlbW92ZUFsbDogJ1JlbW92ZXIgdG9kb3MnIH0sXG4gIHJ1OiB7IHJlbW92ZUFsbDogJ9Cj0LTQsNC70LjRgtGMINCy0YHQtScgfVxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLWRpc2NsYWltZXItZ3JvdXBgIMOpIHJlY29tZW5kYWRvIHBhcmEgbWFuaXB1bGFyIHBhbGF2cmFzLWNoYXZlIGRlIGZpbHRyb3MgYXBsaWNhZG9zIGVtIHVtYSBwZXNxdWlzYS5cbiAqXG4gKiDDgCBwYXJ0aXIgZGUgZG9pcyAqZGlzY2xhaW1lcnMqIGNvbSBvIGJvdMOjbyAqKmZlY2hhcioqIGhhYmlsaXRhZG8sIG8gY29tcG9uZW50ZSByZW5kZXJpemEgZGUgZm9ybWEgYXV0b23DoXRpY2EgdW0gbm92byBlIGRlc3RhY2Fkb1xuICogKmRpc2NsYWltZXIqIHF1ZSBwb3NzaWJpbGl0YSAqKnJlbW92ZXIgdG9kb3MqKiwgbWFzIHF1ZSB0YW1iw6ltIHBvZGUgc2VyIGRlc2FiaWxpdGFkby5cbiAqXG4gKiBUYW1iw6ltIMOpIHBvc3PDrXZlbCBuYXZlZ2FyIGVudHJlIG9zICpkaXNjbGFpbWVycyogYXRyYXbDqXMgZG8gdGVjbGFkbyB1dGlsaXphbmRvIGEgdGVjbGEgKnRhYiogZSwgcGFyYSByZW1vw6fDo28gZG8gKmRpc2NsYWltZXIqIHNlbGVjaW9uYWRvLFxuICogYmFzdGEgcHJlc3Npb25hciBhIHRlY2xhICplbnRlciouIEVzdGEgZnVuY2lvbmFsaWRhZGUgbsOjbyBzZSBhcGxpY2EgY2FzbyBhIHByb3ByaWVkYWRlIGBoaWRlQ2xvc2VgIGVzdGl2ZXIgaGFiaWxpdGFkYS5cbiAqXG4gKiA+IFZlamEgYSBpbnRlZ3Jhw6fDo28gZGVzdGFzIGZ1bmNpb25hbGlkYWRlIG5vIGNvbXBvbmVudGUgW3BvLXBhZ2UtbGlzdF0oL2RvY3VtZW50YXRpb24vcG8tcGFnZS1saXN0KS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9EaXNjbGFpbWVyR3JvdXBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XG4gIC8qKiBUw610dWxvIGRvIGdydXBvIGRlICpkaXNjbGFpbWVycyouICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBmb3IgbW9kaWZpY2FkYS5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlJykgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIHVtICpkaXNjbGFpbWVyKiBmb3IgcmVtb3ZpZG8gZGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBwZWxvIHVzdcOhcmlvLlxuICAgKlxuICAgKiBSZWNlYmUgY29tbyBwYXLDom1ldHJvIHVtIG9iamV0byBjb25mb3JtZSBhIGludGVyZmFjZSBgUG9EaXNjbGFpbWVyR3JvdXBSZW1vdmVBY3Rpb25gLlxuICAgKi9cbiAgQE91dHB1dCgncC1yZW1vdmUnKSByZW1vdmU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gdG9kb3Mgb3MgKmRpc2NsYWltZXJzKiBmb3JlbSByZW1vdmlkb3MgZGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBwZWxvIHVzdcOhcmlvLFxuICAgKiB1dGlsaXphbmRvIG8gYm90w6NvIFwicmVtb3ZlciB0b2Rvc1wiLlxuICAgKlxuICAgKiBSZWNlYmUgY29tbyBwYXLDom1ldHJvIHVtYSBsaXN0YSBjb250ZW5kbyB0b2RvcyBvcyBgZGlzY2xhaW1lcnNgIHJlbW92aWRvcy5cbiAgICovXG4gIEBPdXRwdXQoJ3AtcmVtb3ZlLWFsbCcpIHJlbW92ZUFsbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBsaXRlcmFscztcblxuICBwcml2YXRlIF9kaXNjbGFpbWVyczogQXJyYXk8UG9EaXNjbGFpbWVyPiA9IFtdO1xuICBwcml2YXRlIF9oaWRlUmVtb3ZlQWxsOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBkaWZmZXI7XG4gIHByaXZhdGUgcHJldmlvdXNEaXNjbGFpbWVyczogQXJyYXk8UG9EaXNjbGFpbWVyPiA9IFtdO1xuXG4gIC8qKiBMaXN0YSBkZSAqZGlzY2xhaW1lcnMqLiAqL1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgKmRpc2NsYWltZXJzKi5cbiAgICpcbiAgICogUGFyYSBxdWUgYSBsaXN0YSBkZSAqZGlzY2xhaW1lcnMqIHNlamEgYXR1YWxpemFkYSBkaW5hbWljYW1lbnRlIGRldmUtc2UgcGFzc2FyIHVtYSBub3ZhIHJlZmVyw6puY2lhIGRvIGFycmF5IGRlIGBQb0Rpc2NsYWltZXJgLlxuICAgKlxuICAgKiBFeGVtcGxvIGFkaWNpb25hbmRvIHVtICpkaXNjbGFpbWVyKiBubyBhcnJheTpcbiAgICpcbiAgICogYGBgXG4gICAqIHRoaXMuZGlzY2xhaW1lcnMgPSBbLi4udGhpcy5kaXNjbGFpbWVycywgZGlzY2xhaW1lcl07XG4gICAqIGBgYFxuICAgKlxuICAgKiBvdVxuICAgKlxuICAgKiBgYGBcbiAgICogdGhpcy5kaXNjbGFpbWVycyA9IHRoaXMuZGlzY2xhaW1lcnMuY29uY2F0KGRpc2NsYWltZXIpO1xuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1kaXNjbGFpbWVycycpIHNldCBkaXNjbGFpbWVycyh2YWx1ZTogQXJyYXk8UG9EaXNjbGFpbWVyPikge1xuICAgIHRoaXMucHJldmlvdXNEaXNjbGFpbWVycyA9IFsuLi50aGlzLmRpc2NsYWltZXJzXTtcbiAgICB0aGlzLl9kaXNjbGFpbWVycyA9IHRoaXMuY2hlY2tEaXNjbGFpbWVycyh2YWx1ZSk7XG4gIH1cblxuICBnZXQgZGlzY2xhaW1lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2NsYWltZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2N1bHRhIG8gYm90w6NvIHBhcmEgcmVtb3ZlciB0b2RvcyBvcyAqZGlzY2xhaW1lcnMqIGRvIGdydXBvLlxuICAgKlxuICAgKiA+IFBvciBwYWRyw6NvLCBvIG1lc21vIMOpIGV4aWJpZG8gw6AgcGFydGlyIGRlIGRvaXMgb3UgbWFpcyAqZGlzY2xhaW1lcnMqIGNvbSBhIG9ww6fDo28gYGhpZGVDbG9zZWAgaGFiaWxpdGFkYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWhpZGUtcmVtb3ZlLWFsbCcpXG4gIHNldCBoaWRlUmVtb3ZlQWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZVJlbW92ZUFsbCA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhpZGVSZW1vdmVBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVSZW1vdmVBbGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsXG4gICAgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcblxuICAgIHRoaXMuZGlmZmVyID0gZGlmZmVycy5maW5kKFtdKS5jcmVhdGUobnVsbCk7XG5cbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4ucG9EaXNjbGFpbWVyR3JvdXBMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgIC4uLnBvRGlzY2xhaW1lckdyb3VwTGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXVxuICAgIH07XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgdGhpcy5jaGVja0NoYW5nZXMoKTtcbiAgfVxuXG4gIGlzUmVtb3ZlQWxsKCkge1xuICAgIHJldHVybiAhdGhpcy5oaWRlUmVtb3ZlQWxsICYmIHRoaXMuZGlzY2xhaW1lcnMuZmlsdGVyKGMgPT4gIWMuaGlkZUNsb3NlKS5sZW5ndGggPiAxO1xuICB9XG5cbiAgb25LZXlQcmVzcyhldmVudDogYW55KSB7XG4gICAgaWYgKGlzS2V5Q29kZUVudGVyKGV2ZW50KSkge1xuICAgICAgdGhpcy5yZW1vdmVBbGxJdGVtcygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUFsbEl0ZW1zKCkge1xuICAgIGNvbnN0IHJlbW92ZUl0ZW1zID0gW107XG5cbiAgICB0aGlzLmRpc2NsYWltZXJzLmZvckVhY2goZGlzY2xhaW1lciA9PiB7XG4gICAgICBpZiAoIWRpc2NsYWltZXIuaGlkZUNsb3NlKSB7XG4gICAgICAgIHJlbW92ZUl0ZW1zLnB1c2goZGlzY2xhaW1lcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZW1vdmVJdGVtcy5mb3JFYWNoKGRpc2NsYWltZXIgPT4gdGhpcy5yZW1vdmVEaXNjbGFpbWVyKGRpc2NsYWltZXIpKTtcblxuICAgIHRoaXMuZW1pdENoYW5nZURpc2NsYWltZXJzKCk7XG4gICAgdGhpcy5yZW1vdmVBbGwuZW1pdChbLi4ucmVtb3ZlSXRlbXNdKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZW1vdmVEaXNjbGFpbWVyKGRpc2NsYWltZXI6IGFueSkge1xuICAgIGNvbnN0IGl0ZW1JbmRleCA9IHRoaXMuZGlzY2xhaW1lcnMuZmluZEluZGV4KGQgPT4gZFsnJGlkJ10gPT09IGRpc2NsYWltZXJbJyRpZCddKTtcbiAgICB0aGlzLmRpc2NsYWltZXJzLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGVtaXRDaGFuZ2VEaXNjbGFpbWVycygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5kaXNjbGFpbWVycyk7XG4gICAgfSk7XG4gICAgdGhpcy5wcmV2aW91c0Rpc2NsYWltZXJzID0gWy4uLnRoaXMuX2Rpc2NsYWltZXJzXTtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yPy5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5kaWZmZXIpIHtcbiAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLmRpZmZlci5kaWZmKHRoaXMuZGlzY2xhaW1lcnMpO1xuXG4gICAgICBpZiAoY2hhbmdlcyAmJiB0aGlzLmRpc2NsYWltZXJzQXJlQ2hhbmdlZCh0aGlzLmRpc2NsYWltZXJzKSkge1xuICAgICAgICB0aGlzLmVtaXRDaGFuZ2VEaXNjbGFpbWVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yPy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0Rpc2NsYWltZXJzKGRpc2NsYWltZXJzOiBBcnJheTxQb0Rpc2NsYWltZXI+KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY2xhaW1lcnMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpc2NsYWltZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRpc2NsYWltZXIgPSBkaXNjbGFpbWVyc1tpXTtcblxuICAgICAgICBpZiAoZGlzY2xhaW1lci52YWx1ZSB8fCBkaXNjbGFpbWVyLnZhbHVlID09PSAwIHx8IGRpc2NsYWltZXIudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZGlzY2xhaW1lclsnJGlkJ10gPSB1dWlkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzY2xhaW1lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlzY2xhaW1lcnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNjbGFpbWVyc0FyZUNoYW5nZWQoZGlzY2xhaW1lcnM6IEFycmF5PFBvRGlzY2xhaW1lcj4pOiBib29sZWFuIHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWVzOiBBcnJheTxQb0Rpc2NsYWltZXI+ID0gZGlzY2xhaW1lcnM7XG5cbiAgICBpZiAoY3VycmVudFZhbHVlcy5sZW5ndGggIT09IHRoaXMucHJldmlvdXNEaXNjbGFpbWVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50VmFsdWVzLnNvbWUoXG4gICAgICAoZGlzY2xhaW1lciwgaW5kZXgpID0+XG4gICAgICAgIGRpc2NsYWltZXIudmFsdWUgIT09IHRoaXMucHJldmlvdXNEaXNjbGFpbWVyc1tpbmRleF0udmFsdWUgfHxcbiAgICAgICAgZGlzY2xhaW1lci5wcm9wZXJ0eSAhPT0gdGhpcy5wcmV2aW91c0Rpc2NsYWltZXJzW2luZGV4XS5wcm9wZXJ0eVxuICAgICk7XG4gIH1cbn1cbiJdfQ==