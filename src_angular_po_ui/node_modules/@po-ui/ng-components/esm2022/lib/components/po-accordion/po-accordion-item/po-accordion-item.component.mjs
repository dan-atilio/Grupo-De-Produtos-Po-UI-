import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { filter } from 'rxjs';
import { convertToBoolean } from '../../../utils/util';
import { PoTagType } from '../../po-tag';
import * as i0 from "@angular/core";
import * as i1 from "../services/po-accordion.service";
function PoAccordionItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c0 = ["*"];
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
export class PoAccordionItemComponent {
    accordionService;
    _type;
    /** Título do item. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Label da Tag.
     *
     */
    labelTag;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita item.
     *
     * @default `false`
     */
    disabledItem = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo da *tag* caso ela esteja sendo exibida.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     *
     * @default `info`
     */
    set typeTag(value) {
        this._type = Object.values(PoTagType).includes(value) ? value : undefined;
    }
    get typeTag() {
        return this._type;
    }
    /** Evento disparado ao expandir o item, seja manualmente ou programaticamente. */
    expandEvent = new EventEmitter();
    /** Evento disparado ao retrair o item, seja manualmente ou programaticamente. */
    collapseEvent = new EventEmitter();
    templateRef;
    expanded;
    expandSubscription;
    collapseSubscription;
    constructor(accordionService) {
        this.accordionService = accordionService;
        this.expandSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .pipe(filter(poAccordionItem => poAccordionItem === this && poAccordionItem.expanded))
            .subscribe(() => {
            this.expandEvent.emit();
        });
        this.collapseSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .pipe(filter(poAccordionItem => poAccordionItem === this && !poAccordionItem.expanded))
            .subscribe(() => {
            this.collapseEvent.emit();
        });
    }
    ngOnDestroy() {
        this.expandSubscription.unsubscribe();
        this.collapseSubscription.unsubscribe();
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        if (!this.disabledItem) {
            this.expanded = false;
            this.accordionService.sendToParentAccordionItemClicked(this);
        }
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        if (!this.disabledItem) {
            this.expanded = true;
            this.accordionService.sendToParentAccordionItemClicked(this);
        }
    }
    static ɵfac = function PoAccordionItemComponent_Factory(t) { return new (t || PoAccordionItemComponent)(i0.ɵɵdirectiveInject(i1.PoAccordionService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemComponent, selectors: [["po-accordion-item"]], viewQuery: function PoAccordionItemComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(TemplateRef, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], labelTag: [i0.ɵɵInputFlags.None, "p-label-tag", "labelTag"], disabledItem: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabledItem", convertToBoolean], typeTag: [i0.ɵɵInputFlags.None, "p-type-tag", "typeTag"] }, outputs: { expandEvent: "p-expand", collapseEvent: "p-collapse" }, features: [i0.ɵɵInputTransformsFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function PoAccordionItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoAccordionItemComponent_ng_template_0_Template, 1, 0, "ng-template");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-item', template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n" }]
    }], () => [{ type: i1.PoAccordionService }], { label: [{
            type: Input,
            args: ['p-label']
        }], labelTag: [{
            type: Input,
            args: ['p-label-tag']
        }], disabledItem: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], typeTag: [{
            type: Input,
            args: ['p-type-tag']
        }], expandEvent: [{
            type: Output,
            args: ['p-expand']
        }], collapseEvent: [{
            type: Output,
            args: ['p-collapse']
        }], templateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionItemComponent, { className: "PoAccordionItemComponent", filePath: "lib/components/po-accordion/po-accordion-item/po-accordion-item.component.ts", lineNumber: 43 }); })();
//# sourceMappingURL=data:application/json;base64,