import { Component } from '@angular/core';
import { PoPageContentBaseComponent } from './po-page-content-base.component';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
export class PoPageContentComponent extends PoPageContentBaseComponent {
    renderer;
    contentOpacity = 0;
    height = '90%';
    overflowY = 'none';
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
    static ɵfac = function PoPageContentComponent_Factory(t) { return new (t || PoPageContentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageContentComponent, selectors: [["po-page-content"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 6, consts: [[1, "po-page-content"]], template: function PoPageContentComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height)("opacity", ctx.contentOpacity)("overflow-y", ctx.overflowY);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageContentComponent, [{
        type: Component,
        args: [{ selector: 'po-page-content', template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n" }]
    }], () => [{ type: i0.Renderer2 }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageContentComponent, { className: "PoPageContentComponent", filePath: "lib/components/po-page/po-page-content/po-page-content.component.ts", lineNumber: 14 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2UtY29udGVudC9wby1wYWdlLWNvbnRlbnQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXBhZ2UvcG8tcGFnZS1jb250ZW50L3BvLXBhZ2UtY29udGVudC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBd0IsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQUU5RTs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLDBCQUEwQjtJQUtqRDtJQUpuQixjQUFjLEdBQVcsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sR0FBVyxLQUFLLENBQUM7SUFDdkIsU0FBUyxHQUFXLE1BQU0sQ0FBQztJQUUzQixZQUFtQixRQUFtQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQURTLGFBQVEsR0FBUixRQUFRLENBQVc7UUFFcEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQscUJBQXFCO1FBQ25CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxNQUFNLGlCQUFpQixHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFcEYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsWUFBeUI7UUFDeEMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDOUMsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9GLE1BQU0sU0FBUyxHQUFHLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQztRQUVoRCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVPLG1CQUFtQjtRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ2xFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Z0ZBM0NVLHNCQUFzQjs2REFBdEIsc0JBQXNCOztZQ2JuQyw4QkFBcUg7WUFDbkgsa0JBQXlCO1lBQzNCLGlCQUFNOztZQUZ1QixvQ0FBdUIsK0JBQUEsNkJBQUE7OztpRkRhdkMsc0JBQXNCO2NBSmxDLFNBQVM7MkJBQ0UsaUJBQWlCOztrRkFHaEIsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb1BhZ2VDb250ZW50QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tcGFnZS1jb250ZW50LWJhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZG9jc0V4dGVuZHMgUG9QYWdlQ29udGVudEJhc2VDb21wb25lbnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcGFnZS1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXBhZ2UtY29udGVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9QYWdlQ29udGVudENvbXBvbmVudCBleHRlbmRzIFBvUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgY29udGVudE9wYWNpdHk6IG51bWJlciA9IDA7XG4gIGhlaWdodDogc3RyaW5nID0gJzkwJSc7XG4gIG92ZXJmbG93WTogc3RyaW5nID0gJ25vbmUnO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXRpYWxpemVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IHBhZ2VIZWFkZXJFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5wby1wYWdlLWhlYWRlcicpO1xuXG4gICAgICB0aGlzLnNldEhlaWdodENvbnRlbnQocGFnZUhlYWRlckVsZW1lbnQpO1xuICAgICAgdGhpcy5jb250ZW50T3BhY2l0eSA9IDE7XG4gICAgfSk7XG4gIH1cblxuICBzZXRIZWlnaHRDb250ZW50KHBvUGFnZUhlYWRlcjogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG4gICAgY29uc3QgcGFnZUhlYWRlckhlaWdodCA9IHBvUGFnZUhlYWRlciA/IHBvUGFnZUhlYWRlci5vZmZzZXRUb3AgKyBwb1BhZ2VIZWFkZXIub2Zmc2V0SGVpZ2h0IDogMDtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBib2R5SGVpZ2h0IC0gcGFnZUhlYWRlckhlaWdodDtcblxuICAgIHRoaXMuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lcigpO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwicG8tcGFnZS1jb250ZW50XCIgW3N0eWxlLmhlaWdodF09XCJoZWlnaHRcIiBbc3R5bGUub3BhY2l0eV09XCJjb250ZW50T3BhY2l0eVwiIFtzdHlsZS5vdmVyZmxvdy15XT1cIm92ZXJmbG93WVwiPlxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbiJdfQ==