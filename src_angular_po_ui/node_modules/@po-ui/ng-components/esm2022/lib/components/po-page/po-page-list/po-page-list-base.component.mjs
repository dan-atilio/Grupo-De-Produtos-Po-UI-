import { Input, Directive, ViewChild } from '@angular/core';
import { poLocaleDefault } from './../../../services/po-language/po-language.constant';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/po-language/po-language.service";
export const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export class PoPageListBaseComponent {
    poPageContent;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoBreadcrumb`.
     */
    breadcrumb;
    /**
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoPageFilter`.
     */
    filter;
    /**
     * @optional
     *
     * @description
     *
     * Valor padrão na busca rápida ao inicializar o componente
     *
     */
    quickSearchValue;
    visibleActions = [];
    language;
    resizeListener;
    _actions = [];
    _disclaimerGroup;
    _literals;
    _title;
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageListLiteralsDefault[poLocaleDefault],
                ...poPageListLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageListBaseComponent_Factory(t) { return new (t || PoPageListBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageListBaseComponent, viewQuery: function PoPageListBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], filter: [i0.ɵɵInputFlags.None, "p-filter", "filter"], quickSearchValue: [i0.ɵɵInputFlags.None, "p-quick-search-value", "quickSearchValue"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], disclaimerGroup: [i0.ɵɵInputFlags.None, "p-disclaimer-group", "disclaimerGroup"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageListBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], filter: [{
            type: Input,
            args: ['p-filter']
        }], quickSearchValue: [{
            type: Input,
            args: ['p-quick-search-value']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], disclaimerGroup: [{
            type: Input,
            args: ['p-disclaimer-group']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,