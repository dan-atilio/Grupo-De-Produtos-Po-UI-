import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
export const poPageDetailLiteralsDefault = {
    en: {
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    },
    es: {
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    },
    pt: {
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    },
    ru: {
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }
};
/**
 * @description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de
 * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
 */
export class PoPageDetailBaseComponent {
    poPageContent;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb;
    /**
     * Evento que será disparado ao clicar no botão de "Voltar".
     *
     * ```
     * <po-page-detail (p-back)="myBackFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
     */
    back = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Editar".
     *
     * ```
     * <po-page-detail (p-edit)="myEditFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
     */
    edit = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Remover".
     *
     * ```
     * <po-page-detail (p-remove)="myRemoveFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
     */
    remove = new EventEmitter();
    _literals;
    _title;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-detail
     *   [p-literals]="customLiterals">
     * </po-page-detail>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageDetailLiteralsDefault[poLocaleDefault],
                ...poPageDetailLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageDetailLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDetailLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageDetailBaseComponent_Factory(t) { return new (t || PoPageDetailBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDetailBaseComponent, viewQuery: function PoPageDetailBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] }, outputs: { back: "p-back", edit: "p-edit", remove: "p-remove" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDetailBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], back: [{
            type: Output,
            args: ['p-back']
        }], edit: [{
            type: Output,
            args: ['p-edit']
        }], remove: [{
            type: Output,
            args: ['p-remove']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,