import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
export const poPageEditLiteralsDefault = {
    en: {
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    },
    es: {
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    },
    ru: {
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }
};
/**
 * @description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
export class PoPageEditBaseComponent {
    poPageContent;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb;
    /** Desabilita botões de submissão (save e saveNew) */
    disableSubmit;
    /**
     * Evento que será disparado ao clicar no botão de "Cancelar".
     *
     * ```
     * <po-page-edit (p-cancel)="myCancelFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
     */
    cancel = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Salvar".
     *
     * ```
     * <po-page-edit (p-save)="mySaveFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
     */
    save = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Salvar e Novo".
     *
     * ```
     * <po-page-edit (p-save-new)="mySaveNewFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
     */
    saveNew = new EventEmitter();
    _literals;
    _title;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-edit
     *   [p-literals]="customLiterals">
     * </po-page-edit>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageEditLiteralsDefault[poLocaleDefault],
                ...poPageEditLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageEditLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageEditLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageEditBaseComponent_Factory(t) { return new (t || PoPageEditBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageEditBaseComponent, viewQuery: function PoPageEditBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], disableSubmit: [i0.ɵɵInputFlags.None, "p-disable-submit", "disableSubmit"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] }, outputs: { cancel: "p-cancel", save: "p-save", saveNew: "p-save-new" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageEditBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], disableSubmit: [{
            type: Input,
            args: ['p-disable-submit']
        }], cancel: [{
            type: Output,
            args: ['p-cancel']
        }], save: [{
            type: Output,
            args: ['p-save']
        }], saveNew: [{
            type: Output,
            args: ['p-save-new']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,