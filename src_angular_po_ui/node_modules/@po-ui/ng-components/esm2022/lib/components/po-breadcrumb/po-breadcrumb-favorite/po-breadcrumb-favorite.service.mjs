import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
export class PoBreadcrumbFavoriteService {
    http;
    _url;
    _bodyParams;
    get url() {
        return this._url;
    }
    get bodyParams() {
        return this._bodyParams;
    }
    constructor(http) {
        this.http = http;
    }
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
    static ɵfac = function PoBreadcrumbFavoriteService_Factory(t) { return new (t || PoBreadcrumbFavoriteService)(i0.ɵɵinject(i1.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoBreadcrumbFavoriteService, factory: PoBreadcrumbFavoriteService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteService, [{
        type: Injectable
    }], () => [{ type: i1.HttpClient }], null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS9wby1icmVhZGNydW1iLWZhdm9yaXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSTNDOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFFSCxNQUFNLE9BQU8sMkJBQTJCO0lBWWxCO0lBWFosSUFBSSxDQUFTO0lBQ2IsV0FBVyxDQUFTO0lBRTVCLElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUcsQ0FBQztJQUV4QyxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQU07UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDcEcsQ0FBQztxRkE5QlUsMkJBQTJCO2dFQUEzQiwyQkFBMkIsV0FBM0IsMkJBQTJCOztpRkFBM0IsMkJBQTJCO2NBRHZDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gdXRpbGl6YWRvIHBhcmEgZmF2b3JpdGFyL2Rlc2Zhdm9yaXRhciB1bWEgdXJsIG5vIGNvbXBvbmVudGUgcG8tYnJlYWRjcnVtYi5cbiAqIEEgQVBJIGRldmUgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8geyBpc0Zhdm9yaXRlOiBib29sZWFubywgdXJsOiBzdHJpbmcgfS4gRW0gYW1ib3Mgb3MgbcOpdG9kb3MsIEdFVCBlIFBPU1QgZXN0ZVxuICogb2JqZXRvIGRldmUgc2VyIHJldG9ybmFkby5cbiAqIEFvIGFsdGVyYXIgbyBzdGF0dXMgZGUgZmF2b3JpdG8sIGEgQVBJIGRldmUgcmV0b3JuYXIgbyBvYmpldG8gYWNpbWEsIGNvbSBvIG5vdm8gc3RhdHVzIGF0dWFsaXphZG8uXG4gKiBObyBtw6l0b2RvIFBPU1QsIGV4aXN0ZSBhIHBvc3NpYmlsaWRhZGUgZGUgc2VyIGVudmlhZG8gcGFyw6JtZXRyb3MganVudG8gY29tIGEgcmVxdWlzacOnw6NvLiBOZXN0ZSBjYXNvLCBvIG9iamV0byBlbnZpYWRvXG4gKiBwYXJhIGEgQVBJIHRlcsOhIG8gZm9ybWF0bzogeyBpc0Zhdm9yaXRlOiBib29sZWFubywgdXJsOiBzdHJpbmcsIHBhcmFtczoge30gfSwgb25kZSBwYXJhbXMgw6kgbyBvYmpldG8gcXVlIHBvZGUgc2VyIGVudmlhZG9cbiAqIGp1bnRvIGNvbSBhIHJlcXVpc2nDp8Ojby5cbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJGYXZvcml0ZVNlcnZpY2Uge1xuICBwcml2YXRlIF91cmw6IHN0cmluZztcbiAgcHJpdmF0ZSBfYm9keVBhcmFtczogb2JqZWN0O1xuXG4gIGdldCB1cmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xuICB9XG5cbiAgZ2V0IGJvZHlQYXJhbXMoKTogb2JqZWN0IHtcbiAgICByZXR1cm4gdGhpcy5fYm9keVBhcmFtcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge31cblxuICBjb25maWdTZXJ2aWNlKHVybCwgcGFyYW1zLCBpdGVtKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuX2JvZHlQYXJhbXMgPSB7XG4gICAgICBpc0Zhdm9yaXRlOiBmYWxzZSxcbiAgICAgIHVybDogaXRlbS5saW5rLFxuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9O1xuICB9XG5cbiAgc2VuZFN0YXR1c0Zhdm9yaXRlKHN0YXR1cyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgdGhpcy5ib2R5UGFyYW1zWydpc0Zhdm9yaXRlJ10gPSBzdGF0dXM7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMudXJsLCB0aGlzLmJvZHlQYXJhbXMpO1xuICB9XG5cbiAgZ2V0RmF2b3JpdGUoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnVybCwgeyByZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zOiB7IHVybDogdGhpcy5ib2R5UGFyYW1zWyd1cmwnXSB9IH0pO1xuICB9XG59XG4iXX0=