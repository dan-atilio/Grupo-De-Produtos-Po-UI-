import { Component, ElementRef, ViewChild } from '@angular/core';
import { animate, keyframes, style } from '@angular/animations';
import { delay } from 'rxjs/operators';
import { uuid } from '../../utils/util';
import { PoMenuComponent } from '../po-menu/po-menu.component';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
import * as i2 from "@angular/animations";
import * as i3 from "../po-menu/services/po-menu-global.service";
import * as i4 from "@angular/common";
import * as i5 from "../po-menu/po-menu.component";
import * as i6 from "./po-navbar-actions/po-navbar-actions.component";
import * as i7 from "./po-navbar-item-navigation/po-navbar-item-navigation.component";
import * as i8 from "./po-navbar-items/po-navbar-items.component";
import * as i9 from "./po-navbar-logo/po-navbar-logo.component";
function PoNavbarComponent_po_navbar_item_navigation_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-navbar-item-navigation", 6);
    i0.ɵɵlistener("p-click", function PoNavbarComponent_po_navbar_item_navigation_3_Template_po_navbar_item_navigation_p_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.navigateItems($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disable-left", ctx_r0.navbarItemNavigationDisableLeft)("p-disable-right", ctx_r0.navbarItemNavigationDisableRight);
} }
function PoNavbarComponent_po_menu_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-menu", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-menus", ctx_r1.items);
} }
const _c0 = a0 => ({ "po-navbar-shadow": a0 });
const _c1 = (a0, a1) => ({ "po-navbar-logo-menu": a0, "po-navbar-no-logo": a1 });
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
export class PoNavbarComponent extends PoNavbarBaseComponent {
    renderer;
    builder;
    changeDetector;
    menuGlobalService;
    navbarItemsElement;
    navbarItems;
    disableRight;
    showItemsNavigation = false;
    windowResizeListener;
    _menuComponent;
    isNavbarUpdateMenu = false;
    id = uuid();
    mediaQuery;
    offset = 0;
    player;
    menuItems;
    previousMenuComponentId;
    previousMenusItems = [];
    applicationMenuSubscription;
    menusSubscription;
    removedMenuSubscription;
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    set menuComponent(menu) {
        this._menuComponent = menu;
        this.previousMenuComponentId = menu?.id || this.previousMenuComponentId;
    }
    get isCollapsedMedia() {
        return window.innerWidth < poNavbarMenuMedia;
    }
    constructor(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
        super(poLanguageService);
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.menuGlobalService = menuGlobalService;
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    ngOnInit() {
        // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
        // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
        // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
        // o navbar links apos a adição dos itens de menu da aplicação.
        this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(newMenus => {
            const previousMenusiIsNavbarLinks = this.previousMenusItems?.length === 1 && this.previousMenusItems[0].id === this.id;
            if (this.applicationMenu && this.isCollapsedMedia && this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                this.isNavbarUpdateMenu = false;
                this.applicationMenu.menus = [
                    { label: this.literals.navbarLinks, subItems: this.items, id: this.id },
                    ...newMenus
                ];
            }
            this.isNavbarUpdateMenu = false;
            this.previousMenusItems = newMenus;
        });
        this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(removedMenuId => {
            // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
            // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
            // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
            this.applicationMenu =
                this.applicationMenu && this.previousMenuComponentId === removedMenuId ? this.applicationMenu : undefined;
            this.changeDetector.detectChanges();
            if (!this.applicationMenu && this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        });
        this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
            .pipe(delay(100))
            .subscribe(newMenu => {
            this.applicationMenu = this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
            this.changeDetector.detectChanges();
            if (this.applicationMenu) {
                this.initNavbarMenu();
            }
        });
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
    }
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
        this.removedMenuSubscription?.unsubscribe();
        this.applicationMenuSubscription?.unsubscribe();
        this.menusSubscription?.unsubscribe();
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    validateMenuLogo() {
        if (this.applicationMenu.logo && this.logo) {
            this.applicationMenu.logo = undefined;
            this.changeDetector.detectChanges();
        }
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))]);
    }
    changeNavbarMenuItems(isCollapsedMedia, navbarItems, label) {
        if (isCollapsedMedia) {
            this.applicationMenu.menus = [{ label, subItems: navbarItems, id: this.id }, ...this.applicationMenu.menus];
        }
        else {
            this.applicationMenu.menus = this.applicationMenu.menus.filter(m => m.id !== this.id);
        }
        this.isNavbarUpdateMenu = true;
        this.changeDetector.detectChanges();
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        if (this.isCollapsedMedia) {
            this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    onMediaQueryChange = changed => {
        this.changeNavbarMenuItems(changed.matches, this.items, this.literals.navbarLinks);
    };
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
    static ɵfac = function PoNavbarComponent_Factory(t) { return new (t || PoNavbarComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AnimationBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.PoMenuGlobalService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarComponent, selectors: [["po-navbar"]], viewQuery: function PoNavbarComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7, ElementRef);
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7);
            i0.ɵɵviewQuery(PoMenuComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItems = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuComponent = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[1, "po-navbar", 3, "ngClass"], [1, "po-navbar-logo", 3, "ngClass", "p-logo"], [1, "po-navbar-items", 3, "p-items"], ["class", "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click", 4, "ngIf"], [1, "po-navbar-actions", 3, "p-icon-actions"], [3, "p-menus", 4, "ngIf"], [1, "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click"], [3, "p-menus"]], template: function PoNavbarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "header", 0);
            i0.ɵɵelement(1, "po-navbar-logo", 1)(2, "po-navbar-items", 2);
            i0.ɵɵtemplate(3, PoNavbarComponent_po_navbar_item_navigation_3_Template, 1, 2, "po-navbar-item-navigation", 3);
            i0.ɵɵelement(4, "po-navbar-actions", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoNavbarComponent_po_menu_5_Template, 1, 1, "po-menu", 5);
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0, ctx.shadow));
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c1, !!ctx.applicationMenu, !ctx.logo))("p-logo", ctx.logo);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-items", ctx.items);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showItemsNavigation);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.applicationMenu);
        } }, dependencies: [i4.NgClass, i4.NgIf, i5.PoMenuComponent, i6.PoNavbarActionsComponent, i7.PoNavbarItemNavigationComponent, i8.PoNavbarItemsComponent, i9.PoNavbarLogoComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar', template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\n    [p-logo]=\"logo\"\n  >\n  </po-navbar-logo>\n\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\n\n  <po-navbar-item-navigation\n    *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\"\n  >\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\n</header>\n\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\n" }]
    }], () => [{ type: i1.PoLanguageService }, { type: i0.Renderer2 }, { type: i2.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: i3.PoMenuGlobalService }], { navbarItemsElement: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { read: ElementRef, static: true }]
        }], navbarItems: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { static: true }]
        }], menuComponent: [{
            type: ViewChild,
            args: [PoMenuComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarComponent, { className: "PoNavbarComponent", filePath: "lib/components/po-navbar/po-navbar.component.ts", lineNumber: 38 }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1uYXZiYXIvcG8tbmF2YmFyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1uYXZiYXIvcG8tbmF2YmFyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHTCxTQUFTLEVBQ1QsVUFBVSxFQUlWLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUF1RCxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckgsT0FBTyxFQUFFLEtBQUssRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUd6RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFJeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRW5FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDOzs7Ozs7Ozs7Ozs7O0lDYm5GLG9EQU1DO0lBREMsaU5BQVcsZUFBQSw0QkFBcUIsQ0FBQSxJQUFDO0lBRW5DLGlCQUE0Qjs7O0lBSjFCLHVFQUFrRCw0REFBQTs7O0lBU3RELDZCQUErRDs7O0lBQTdCLHNDQUFpQjs7OztBREduRCxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUNuQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUM5QixNQUFNLGtCQUFrQixHQUFHLGVBQWUsaUJBQWlCLEtBQUssQ0FBQztBQUNqRSxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUM7QUFFcEM7O0dBRUc7QUFLSCxNQUFNLE9B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RGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYW5pbWF0ZSwgQW5pbWF0aW9uQnVpbGRlciwgQW5pbWF0aW9uRmFjdG9yeSwgQW5pbWF0aW9uUGxheWVyLCBrZXlmcmFtZXMsIHN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IGRlbGF5LCBmaWx0ZXIsIGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQb01lbnVHbG9iYWxTZXJ2aWNlIH0gZnJvbSAnLi4vcG8tbWVudS9zZXJ2aWNlcy9wby1tZW51LWdsb2JhbC5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTWVudUl0ZW0gfSBmcm9tICcuLi9wby1tZW51L3BvLW1lbnUtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9NZW51Q29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbWVudS9wby1tZW51LmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IFBvTmF2YmFyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tbmF2YmFyLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTmF2YmFySXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1uYXZiYXItaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9OYXZiYXJJdGVtc0NvbXBvbmVudCB9IGZyb20gJy4vcG8tbmF2YmFyLWl0ZW1zL3BvLW5hdmJhci1pdGVtcy5jb21wb25lbnQnO1xuXG5jb25zdCBwb05hdmJhck5hdmlnYXRpb25XaWR0aCA9IDg4O1xuY29uc3QgcG9OYXZiYXJNZW51TWVkaWEgPSA3Njg7XG5jb25zdCBwb05hdmJhck1hdGNoTWVkaWEgPSBgKG1heC13aWR0aDogJHtwb05hdmJhck1lbnVNZWRpYX1weClgO1xuY29uc3QgcG9OYXZiYXJUaW1pbmcgPSAnMjUwbXMgZWFzZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvTmF2YmFyQmFzZUNvbXBvbmVudFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1uYXZiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tbmF2YmFyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb05hdmJhckNvbXBvbmVudCBleHRlbmRzIFBvTmF2YmFyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgQFZpZXdDaGlsZChQb05hdmJhckl0ZW1zQ29tcG9uZW50LCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBuYXZiYXJJdGVtc0VsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZChQb05hdmJhckl0ZW1zQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBuYXZiYXJJdGVtczogUG9OYXZiYXJJdGVtc0NvbXBvbmVudDtcblxuICBkaXNhYmxlUmlnaHQ6IGJvb2xlYW47XG4gIHNob3dJdGVtc05hdmlnYXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgd2luZG93UmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBfbWVudUNvbXBvbmVudDtcblxuICBwcml2YXRlIGlzTmF2YmFyVXBkYXRlTWVudTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIGlkID0gdXVpZCgpO1xuICBwcml2YXRlIG1lZGlhUXVlcnk6IGFueTtcbiAgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcGxheWVyOiBBbmltYXRpb25QbGF5ZXI7XG4gIHByaXZhdGUgbWVudUl0ZW1zOiBBcnJheTxQb01lbnVJdGVtPjtcbiAgcHJpdmF0ZSBwcmV2aW91c01lbnVDb21wb25lbnRJZDtcbiAgcHJpdmF0ZSBwcmV2aW91c01lbnVzSXRlbXMgPSBbXTtcblxuICBwcml2YXRlIGFwcGxpY2F0aW9uTWVudVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIG1lbnVzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgcmVtb3ZlZE1lbnVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBnZXQgbmF2YmFySXRlbU5hdmlnYXRpb25EaXNhYmxlTGVmdCgpIHtcbiAgICByZXR1cm4gdGhpcy5vZmZzZXQgPT09IDA7XG4gIH1cblxuICBnZXQgbmF2YmFySXRlbU5hdmlnYXRpb25EaXNhYmxlUmlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZVJpZ2h0ICYmIHRoaXMub2Zmc2V0ICE9PSAwO1xuICB9XG5cbiAgQFZpZXdDaGlsZChQb01lbnVDb21wb25lbnQpIHNldCBtZW51Q29tcG9uZW50KG1lbnU6IFBvTWVudUNvbXBvbmVudCkge1xuICAgIHRoaXMuX21lbnVDb21wb25lbnQgPSBtZW51O1xuXG4gICAgdGhpcy5wcmV2aW91c01lbnVDb21wb25lbnRJZCA9IG1lbnU/LmlkIHx8IHRoaXMucHJldmlvdXNNZW51Q29tcG9uZW50SWQ7XG4gIH1cblxuICBwcml2YXRlIGdldCBpc0NvbGxhcHNlZE1lZGlhKCkge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8IHBvTmF2YmFyTWVudU1lZGlhO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcG9MYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBtZW51R2xvYmFsU2VydmljZTogUG9NZW51R2xvYmFsU2VydmljZVxuICApIHtcbiAgICBzdXBlcihwb0xhbmd1YWdlU2VydmljZSk7XG4gICAgdGhpcy53aW5kb3dSZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuZGlzcGxheUl0ZW1zTmF2aWdhdGlvbi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIG5lY2Vzc8OhcmlvIHBhcmEgcXVhbmRvIG8gbWVudSBkYSBhcGxpY2HDp8OjbyBjYXJyZWdhciBvcyBpdGVucyBsYXp5IGUgbmF2YmFyIGVzdGl2ZXIgY29sYXBzYWRvLFxuICAgIC8vIHF1YW5kbyBpc3NvIGFjb250ZWNlLCBvIG5hdmJhciBpbmNsdWkgMSBpdGVtIGRlIG1lbnUgXCJOYXZiYXIgbGlua3NcIiwgcG9ydGFudG8gw6kgcmVtb3ZpZG8gcXVhbmRvXG4gICAgLy8gb3Mgbm92b3MgaXRlbnMgZGUgbWVudSDDqSBjYXJyZWdhZG8sIGEgcGFydGlyIGRpc3NvIGVzdGUgdHJhdGFtZW50byDDqSBuZWNlc3NhcmlvIHBhcmEgaW5jbHVpclxuICAgIC8vIG8gbmF2YmFyIGxpbmtzIGFwb3MgYSBhZGnDp8OjbyBkb3MgaXRlbnMgZGUgbWVudSBkYSBhcGxpY2HDp8Ojby5cbiAgICB0aGlzLm1lbnVzU3Vic2NyaXB0aW9uID0gdGhpcy5tZW51R2xvYmFsU2VydmljZS5yZWNlaXZlTWVudXMkLnN1YnNjcmliZShuZXdNZW51cyA9PiB7XG4gICAgICBjb25zdCBwcmV2aW91c01lbnVzaUlzTmF2YmFyTGlua3MgPVxuICAgICAgICB0aGlzLnByZXZpb3VzTWVudXNJdGVtcz8ubGVuZ3RoID09PSAxICYmIHRoaXMucHJldmlvdXNNZW51c0l0ZW1zWzBdLmlkID09PSB0aGlzLmlkO1xuXG4gICAgICBpZiAodGhpcy5hcHBsaWNhdGlvbk1lbnUgJiYgdGhpcy5pc0NvbGxhcHNlZE1lZGlhICYmIHRoaXMuaXNOYXZiYXJVcGRhdGVNZW51ICYmIHByZXZpb3VzTWVudXNpSXNOYXZiYXJMaW5rcykge1xuICAgICAgICB0aGlzLmlzTmF2YmFyVXBkYXRlTWVudSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25NZW51Lm1lbnVzID0gW1xuICAgICAgICAgIHsgbGFiZWw6IHRoaXMubGl0ZXJhbHMubmF2YmFyTGlua3MsIHN1Ykl0ZW1zOiB0aGlzLml0ZW1zLCBpZDogdGhpcy5pZCB9LFxuICAgICAgICAgIC4uLm5ld01lbnVzXG4gICAgICAgIF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNOYXZiYXJVcGRhdGVNZW51ID0gZmFsc2U7XG4gICAgICB0aGlzLnByZXZpb3VzTWVudXNJdGVtcyA9IG5ld01lbnVzO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZW1vdmVkTWVudVN1YnNjcmlwdGlvbiA9IHRoaXMubWVudUdsb2JhbFNlcnZpY2UucmVjZWl2ZVJlbW92ZWRBcHBsaWNhdGlvbk1lbnUkLnN1YnNjcmliZShyZW1vdmVkTWVudUlkID0+IHtcbiAgICAgIC8vIHZlcmlmaWNhIHNlIG8gbWVudSByZW1vdmlkbyBmb2kgbyBwcmVzZW50ZSBubyBuYXZiYXIsIGNhc28gc2ltLCBlbGUgbWFudGVtIG8gYXBwbGljdGlvbk1lbnUuXG4gICAgICAvLyDDqSBwcmVjaXNvIHBhcmEgdHJhdGFyIGEgc2VxdWVuY2lhIGRvIG5nRGVzdHJveSwgcXVhbmRvIG8gbWVudSBkbyBuYXZiYXIgZXJhIHJlbW92aWRvIGRvIERPTVxuICAgICAgLy8gZGlzcGFyYXZhIGVzc2UgZXZlbnRvLCBzZW5kbyBuZWNlc3NhcmlvIHRyYXRhciwgcGFyYSBuw6NvIHRvcm5hciBpbmRlZmluaWRvIG8gYXBwbGljYXRpb25NZW51XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uTWVudSA9XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25NZW51ICYmIHRoaXMucHJldmlvdXNNZW51Q29tcG9uZW50SWQgPT09IHJlbW92ZWRNZW51SWQgPyB0aGlzLmFwcGxpY2F0aW9uTWVudSA6IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgIGlmICghdGhpcy5hcHBsaWNhdGlvbk1lbnUgJiYgdGhpcy5tZWRpYVF1ZXJ5KSB7XG4gICAgICAgIHRoaXMubWVkaWFRdWVyeS5yZW1vdmVMaXN0ZW5lcih0aGlzLm9uTWVkaWFRdWVyeUNoYW5nZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFwcGxpY2F0aW9uTWVudVN1YnNjcmlwdGlvbiA9IHRoaXMubWVudUdsb2JhbFNlcnZpY2UucmVjZWl2ZUFwcGxpY2F0aW9uTWVudSRcbiAgICAgIC5waXBlKGRlbGF5KDEwMCkpXG4gICAgICAuc3Vic2NyaWJlKG5ld01lbnUgPT4ge1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uTWVudSA9IHRoaXMucHJldmlvdXNNZW51Q29tcG9uZW50SWQgPT09IG5ld01lbnUuaWQgPyB1bmRlZmluZWQgOiBuZXdNZW51O1xuXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgICAgIGlmICh0aGlzLmFwcGxpY2F0aW9uTWVudSkge1xuICAgICAgICAgIHRoaXMuaW5pdE5hdmJhck1lbnUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kaXNwbGF5SXRlbXNOYXZpZ2F0aW9uKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5tZWRpYVF1ZXJ5KSB7XG4gICAgICB0aGlzLm1lZGlhUXVlcnkucmVtb3ZlTGlzdGVuZXIodGhpcy5vbk1lZGlhUXVlcnlDaGFuZ2UpO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlZE1lbnVTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5hcHBsaWNhdGlvbk1lbnVTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5tZW51c1N1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5hdmlnYXRlSXRlbXMob3JpZW50YXRpb246IHN0cmluZykge1xuICAgIG9yaWVudGF0aW9uID09PSAnbGVmdCcgPyB0aGlzLm5hdmlnYXRlTGVmdCgpIDogdGhpcy5uYXZpZ2F0ZVJpZ2h0KCk7XG5cbiAgICB0aGlzLmFuaW1hdGUodGhpcy5vZmZzZXQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlTWVudUxvZ28oKSB7XG4gICAgaWYgKHRoaXMuYXBwbGljYXRpb25NZW51LmxvZ28gJiYgdGhpcy5sb2dvKSB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uTWVudS5sb2dvID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhbGxOYXZiYXJJdGVtc1dpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLm5hdmJhckl0ZW1zLmFsbE5hdmJhckl0ZW1zLnJlZHVjZShcbiAgICAgIChwcmV2aW91czogYW55LCBjdXJyZW50OiBhbnkpID0+IHByZXZpb3VzICsgY3VycmVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgMFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFuaW1hdGUob2Zmc2V0OiBudW1iZXIpIHtcbiAgICBjb25zdCBhbmltYXRpb246IEFuaW1hdGlvbkZhY3RvcnkgPSB0aGlzLmJ1aWxkVHJhbnNpdGlvbkFuaW1hdGlvbihvZmZzZXQpO1xuXG4gICAgdGhpcy5wbGF5ZXIgPSBhbmltYXRpb24uY3JlYXRlKHRoaXMubmF2YmFySXRlbXMubmF2YmFySXRlbXNDb250YWluZXIubmF0aXZlRWxlbWVudCk7XG4gICAgdGhpcy5wbGF5ZXIucGxheSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFRyYW5zaXRpb25BbmltYXRpb24ob2Zmc2V0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZGVyLmJ1aWxkKFthbmltYXRlKHBvTmF2YmFyVGltaW5nLCBrZXlmcmFtZXMoW3N0eWxlKHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkey1vZmZzZXR9cHgpYCB9KV0pKV0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGFuZ2VOYXZiYXJNZW51SXRlbXMoaXNDb2xsYXBzZWRNZWRpYTogYW55LCBuYXZiYXJJdGVtczogQXJyYXk8UG9OYXZiYXJJdGVtPiwgbGFiZWw6IHN0cmluZykge1xuICAgIGlmIChpc0NvbGxhcHNlZE1lZGlhKSB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uTWVudS5tZW51cyA9IFt7IGxhYmVsLCBzdWJJdGVtczogbmF2YmFySXRlbXMsIGlkOiB0aGlzLmlkIH0sIC4uLnRoaXMuYXBwbGljYXRpb25NZW51Lm1lbnVzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbk1lbnUubWVudXMgPSB0aGlzLmFwcGxpY2F0aW9uTWVudS5tZW51cy5maWx0ZXIobSA9PiBtLmlkICE9PSB0aGlzLmlkKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzTmF2YmFyVXBkYXRlTWVudSA9IHRydWU7XG5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlTGVmdE5hdmlnYXRpb24oKSB7XG4gICAgbGV0IGNhbGN1bGF0ZWRPZmZzZXQ6IG51bWJlcjtcblxuICAgIHRoaXMubmF2YmFySXRlbXMuYWxsTmF2YmFySXRlbXMuc29tZShuYXZiYXJJdGVtID0+IHtcbiAgICAgIGNvbnN0IG5hdmJhckl0ZW1PZmZzZXQgPSBuYXZiYXJJdGVtLm5hdGl2ZUVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgIGNvbnN0IG5hdmJhckl0ZW1XaWR0aCA9IG5hdmJhckl0ZW0ubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcblxuICAgICAgaWYgKG5hdmJhckl0ZW1PZmZzZXQgPj0gdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgY2FsY3VsYXRlZE9mZnNldCA9IG5hdmJhckl0ZW1PZmZzZXQgLSAodGhpcy5uYXZiYXJJdGVtc1dpZHRoKCkgLSBuYXZiYXJJdGVtV2lkdGgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FsY3VsYXRlZE9mZnNldDtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUmlnaHROYXZpZ2F0aW9uKGl0ZW1CcmVha1BvaW50OiBudW1iZXIpIHtcbiAgICBsZXQgY2FsY3VsYXRlZE9mZnNldDogbnVtYmVyO1xuXG4gICAgdGhpcy5uYXZiYXJJdGVtcy5hbGxOYXZiYXJJdGVtcy5zb21lKG5hdmJhckl0ZW0gPT4ge1xuICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IG5hdmJhckl0ZW0ubmF0aXZlRWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgY29uc3QgZmluYWxQb3NpdGlvbiA9IG5hdmJhckl0ZW0ubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCArIG9mZnNldExlZnQ7XG5cbiAgICAgIGlmIChpdGVtQnJlYWtQb2ludCA8IGZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY2FsY3VsYXRlZE9mZnNldCA9IG9mZnNldExlZnQ7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYWxjdWxhdGVkT2Zmc2V0O1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwbGF5SXRlbXNOYXZpZ2F0aW9uKCkge1xuICAgIHRoaXMuc2hvd0l0ZW1zTmF2aWdhdGlvbiA9IHRoaXMubmF2YmFySXRlbXNXaWR0aCgpIDwgdGhpcy5hbGxOYXZiYXJJdGVtc1dpZHRoKCkgKyBwb05hdmJhck5hdmlnYXRpb25XaWR0aDtcblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgaWYgKHRoaXMub2Zmc2V0ICE9PSAwKSB7XG4gICAgICB0aGlzLnNldE9mZnNldFRvWmVybygpO1xuICAgICAgdGhpcy5hbmltYXRlKHRoaXMub2Zmc2V0KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXROYXZiYXJNZW51KCkge1xuICAgIHRoaXMubWVkaWFRdWVyeSA9IHdpbmRvdy5tYXRjaE1lZGlhKHBvTmF2YmFyTWF0Y2hNZWRpYSk7XG5cbiAgICBpZiAodGhpcy5pc0NvbGxhcHNlZE1lZGlhKSB7XG4gICAgICB0aGlzLmNoYW5nZU5hdmJhck1lbnVJdGVtcyh0cnVlLCB0aGlzLml0ZW1zLCB0aGlzLmxpdGVyYWxzLm5hdmJhckxpbmtzKTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbGlkYXRlTWVudUxvZ28oKTtcblxuICAgIHRoaXMubWVkaWFRdWVyeS5hZGRMaXN0ZW5lcih0aGlzLm9uTWVkaWFRdWVyeUNoYW5nZSk7XG4gIH1cblxuICBwcml2YXRlIG5hdmJhckl0ZW1zV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMubmF2YmFySXRlbXNFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIH1cblxuICBwcml2YXRlIG5hdmlnYXRlTGVmdCgpIHtcbiAgICB0aGlzLmRpc2FibGVSaWdodCA9IGZhbHNlO1xuXG4gICAgdGhpcy5vZmZzZXQgPSB0aGlzLmNhbGN1bGF0ZUxlZnROYXZpZ2F0aW9uKCk7XG5cbiAgICBpZiAodGhpcy5vZmZzZXQgPCAwKSB7XG4gICAgICB0aGlzLnNldE9mZnNldFRvWmVybygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbmF2aWdhdGVSaWdodCgpIHtcbiAgICBjb25zdCBtYXhBbGxvd2VkT2Zmc2V0ID0gdGhpcy5hbGxOYXZiYXJJdGVtc1dpZHRoKCkgLSB0aGlzLm5hdmJhckl0ZW1zV2lkdGgoKTtcbiAgICBjb25zdCBpdGVtQnJlYWtQb2ludCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5uYXZiYXJJdGVtc1dpZHRoKCk7XG5cbiAgICB0aGlzLm9mZnNldCA9IHRoaXMuY2FsY3VsYXRlUmlnaHROYXZpZ2F0aW9uKGl0ZW1CcmVha1BvaW50KTtcblxuICAgIHRoaXMudmFsaWRhdGVNYXhPZmZzZXQobWF4QWxsb3dlZE9mZnNldCk7XG4gIH1cblxuICBwcml2YXRlIG9uTWVkaWFRdWVyeUNoYW5nZSA9IGNoYW5nZWQgPT4ge1xuICAgIHRoaXMuY2hhbmdlTmF2YmFyTWVudUl0ZW1zKGNoYW5nZWQubWF0Y2hlcywgdGhpcy5pdGVtcywgdGhpcy5saXRlcmFscy5uYXZiYXJMaW5rcyk7XG4gIH07XG5cbiAgcHJpdmF0ZSBzZXRPZmZzZXRUb1plcm8oKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZU1heE9mZnNldChtYXhBbGxvd2VkT2Zmc2V0OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5vZmZzZXQgPj0gbWF4QWxsb3dlZE9mZnNldCkge1xuICAgICAgdGhpcy5vZmZzZXQgPSBtYXhBbGxvd2VkT2Zmc2V0O1xuICAgICAgdGhpcy5kaXNhYmxlUmlnaHQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuIiwiPGhlYWRlciBjbGFzcz1cInBvLW5hdmJhclwiIFtuZ0NsYXNzXT1cInsgJ3BvLW5hdmJhci1zaGFkb3cnOiBzaGFkb3cgfVwiPlxuICA8cG8tbmF2YmFyLWxvZ29cbiAgICBjbGFzcz1cInBvLW5hdmJhci1sb2dvXCJcbiAgICBbbmdDbGFzc109XCJ7ICdwby1uYXZiYXItbG9nby1tZW51JzogISFhcHBsaWNhdGlvbk1lbnUsICdwby1uYXZiYXItbm8tbG9nbyc6ICFsb2dvIH1cIlxuICAgIFtwLWxvZ29dPVwibG9nb1wiXG4gID5cbiAgPC9wby1uYXZiYXItbG9nbz5cblxuICA8cG8tbmF2YmFyLWl0ZW1zIGNsYXNzPVwicG8tbmF2YmFyLWl0ZW1zXCIgW3AtaXRlbXNdPVwiaXRlbXNcIj4gPC9wby1uYXZiYXItaXRlbXM+XG5cbiAgPHBvLW5hdmJhci1pdGVtLW5hdmlnYXRpb25cbiAgICAqbmdJZj1cInNob3dJdGVtc05hdmlnYXRpb25cIlxuICAgIGNsYXNzPVwicG8tbmF2YmFyLWl0ZW0tbmF2aWdhdGlvblwiXG4gICAgW3AtZGlzYWJsZS1sZWZ0XT1cIm5hdmJhckl0ZW1OYXZpZ2F0aW9uRGlzYWJsZUxlZnRcIlxuICAgIFtwLWRpc2FibGUtcmlnaHRdPVwibmF2YmFySXRlbU5hdmlnYXRpb25EaXNhYmxlUmlnaHRcIlxuICAgIChwLWNsaWNrKT1cIm5hdmlnYXRlSXRlbXMoJGV2ZW50KVwiXG4gID5cbiAgPC9wby1uYXZiYXItaXRlbS1uYXZpZ2F0aW9uPlxuXG4gIDxwby1uYXZiYXItYWN0aW9ucyBjbGFzcz1cInBvLW5hdmJhci1hY3Rpb25zXCIgW3AtaWNvbi1hY3Rpb25zXT1cImljb25BY3Rpb25zXCI+IDwvcG8tbmF2YmFyLWFjdGlvbnM+XG48L2hlYWRlcj5cblxuPHBvLW1lbnUgKm5nSWY9XCIhYXBwbGljYXRpb25NZW51XCIgW3AtbWVudXNdPVwiaXRlbXNcIj4gPC9wby1tZW51PlxuIl19