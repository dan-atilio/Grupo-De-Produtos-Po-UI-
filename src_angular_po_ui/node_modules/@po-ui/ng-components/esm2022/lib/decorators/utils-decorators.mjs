/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvZGVjb3JhdG9ycy91dGlscy1kZWNvcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsMkJBQTJCLENBQ3pDLG1CQUErQyxFQUMvQyxhQUFxQixFQUNyQixRQUFrQjtJQUVsQixNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLG1CQUFtQixDQUFDO0lBQ2pELE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztJQUMvQixNQUFNLHNCQUFzQixHQUFvQixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksYUFBYSxDQUFDO0lBRXZGLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRTtRQUMzQyxLQUFLLEVBQUU7WUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLG1CQUErQyxFQUMvQyxhQUFxQixFQUNyQixRQUFrQjtJQUVsQixNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLG1CQUFtQixDQUFDO0lBQ3JFLE1BQU0sbUJBQW1CLEdBQUcscUJBQXFCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUVuRixPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQztRQUNwRCxHQUFHLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztLQUMvRCxDQUFDO0FBQ0osQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQWtCLEVBQUUsbUJBQTJCO0lBQ2pGLE9BQU8sVUFBVSxLQUFLO1FBQ3BCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQ2hELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLGtCQUFnRCxFQUFFLGVBQXVCO0lBQ3ZGLE9BQU87UUFDTCxPQUFPLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEgsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxNQUFXLEVBQUUsWUFBb0IsRUFBRSxhQUFxQjtJQUM1RixNQUFNLGVBQWUsR0FBRyxPQUFPLFlBQVksRUFBRSxDQUFDO0lBRTlDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBRTtRQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsZUFBZSwrQ0FBK0MsYUFBYSxhQUFhLENBQUMsQ0FBQztLQUNySDtJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRTtRQUM3QyxZQUFZLEVBQUUsSUFBSTtRQUNsQixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztJQUVILE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSB9IGZyb20gJy4vcHJvcGVydHktZGVjb3JhdG9yLmludGVyZmFjZSc7XG5cbi8qKlxuICogRnVuw6fDo28gdXRpbGl6YWRhIHBlbGEgZsOhYnJpY2EgZGUgZGVjb3JhZG9yZXMgcGFyYSB2YWxpZGFyIHVtYSBwcm9wcmllZGFkZSBkZSB1bWEgY2xhc3NlIGR1cmFudGVcbiAqIG8gY2ljbG8gZGUgdmlkYSBkbyBBbmd1bGFyLlxuICpcbiAqIEBwYXJhbSBkZWNvcmF0b3JQcm9wZXJ0aWVzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgUG9Qcm9wZXJ0eURlY29yYXRvckludGVyZmFjZS5cbiAqIEBwYXJhbSBsaWZlY3ljbGVOYW1lIGNsaWNvIGRlIHZpZGEgcXVlIHNlIGRlc2VqYSBleGVjdXRhciBjb20gYSB2YWxpZGHDp8Ojby5cbiAqIEBwYXJhbSBjYWxsYmFjayBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgdmFsaWRhZGFyIGEgcHJvcHJpZWRhZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5T25MaWZlQ3ljbGUoXG4gIGRlY29yYXRvclByb3BlcnRpZXM6IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLFxuICBsaWZlY3ljbGVOYW1lOiBzdHJpbmcsXG4gIGNhbGxiYWNrOiBGdW5jdGlvblxuKSB7XG4gIGNvbnN0IHsgdGFyZ2V0LCBwcm9wZXJ0eSB9ID0gZGVjb3JhdG9yUHJvcGVydGllcztcbiAgY29uc3QgZW1wdHlGdW5jdGlvbiA9ICgpID0+IHt9O1xuICBjb25zdCBsaWZlY3ljbGVGdW5jdGlvbkNsb25lOiBGdW5jdGlvbiB8IG51bGwgPSB0YXJnZXRbbGlmZWN5Y2xlTmFtZV0gfHwgZW1wdHlGdW5jdGlvbjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBsaWZlY3ljbGVOYW1lLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgcHJvcGVydHksIHRhcmdldCk7XG4gICAgICBsaWZlY3ljbGVGdW5jdGlvbkNsb25lLmNhbGwodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBGdW7Dp8OjbyB1dGlsaXphZGEgcGVsYSBmw6FicmljYSBkZSBkZWNvcmFkb3JlcyBwYXJhIGFsdGVyYXIvbWFuaXB1bGFyIG8gdmFsb3IgZGUgdW1hIHByb3ByaWVkYWRlLlxuICpcbiAqID4gRXN0ZSBkZWNvcmF0b3IgaXLDoSBjcmlhciBvcyBtw6l0b2RvcyBnZXQgZSBzZXQgaW50ZXJuYW1lbnRlLiBQb3J0YW50byxcbiAqIMOpIGltcG9ydGFudGUgKipuw6NvKiogY3JpYXIgbm9tZXMgcHJpdmFkb3MgcGFyYSBhcyBwcm9wcmllZGFkZXMgdXRpbGl6YW5kb1xuICogYCQkX19ub21lRGFQcm9wcmllZGFkZWAgYW8gdXRpbGl6YXIgZXN0ZSBkZWNvcmF0b3IsIHBvaXMgZWxhIHNlcsOhIHNvYnJlc2NyaXRhIHBlbGEgcHJvcHJpZWRhZGUgcHJpdmFkYVxuICogY3JpYWRhIHBlbG8gZGVjb3JhdG9yLlxuICpcbiAqIEBwYXJhbSBkZWNvcmF0b3JQcm9wZXJ0aWVzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgUG9Qcm9wZXJ0eURlY29yYXRvckludGVyZmFjZS5cbiAqIEBwYXJhbSBkZWNvcmF0b3JOYW1lIG5vbWUgZG8gZGVjb3JhdG9yXG4gKiBAcGFyYW0gY2FsbGJhY2sgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBwYXJhIGFsdGVyYXIgbyB2YWxvciBkYSBwcm9wcmllZGFkZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlVmFsdWVCeUNhbGxiYWNrKFxuICBkZWNvcmF0b3JQcm9wZXJ0aWVzOiBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSxcbiAgZGVjb3JhdG9yTmFtZTogc3RyaW5nLFxuICBjYWxsYmFjazogRnVuY3Rpb25cbikge1xuICBjb25zdCB7IHRhcmdldCwgcHJvcGVydHksIG9yaWdpbmFsRGVzY3JpcHRvciB9ID0gZGVjb3JhdG9yUHJvcGVydGllcztcbiAgY29uc3QgcHJpdmF0ZVByb3BlcnR5TmFtZSA9IGNyZWF0ZVByaXZhdGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JOYW1lKTtcblxuICByZXR1cm4ge1xuICAgIGdldDogZ2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgcHJpdmF0ZVByb3BlcnR5TmFtZSksXG4gICAgc2V0OiBzZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBjYWxsYmFjaywgcHJpdmF0ZVByb3BlcnR5TmFtZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldHRlcihvcmlnaW5hbERlc2NyaXB0b3IsIGNhbGxiYWNrOiBGdW5jdGlvbiwgcHJpdmF0ZVByb3BlcnR5TmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpOiB2b2lkIHtcbiAgICBpZiAob3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIG9yaWdpbmFsRGVzY3JpcHRvci5zZXQuYmluZCh0aGlzKShjYWxsYmFjayh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHRoaXNbcHJpdmF0ZVByb3BlcnR5TmFtZV0gPSBjYWxsYmFjayh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldHRlcihvcmlnaW5hbERlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPGFueT4sIHByaXZhdGVQcm9wTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsRGVzY3JpcHRvciAmJiBvcmlnaW5hbERlc2NyaXB0b3IuZ2V0ID8gb3JpZ2luYWxEZXNjcmlwdG9yLmdldC5iaW5kKHRoaXMpKCkgOiB0aGlzW3ByaXZhdGVQcm9wTmFtZV07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcml2YXRlUHJvcGVydHkodGFyZ2V0OiBhbnksIHByb3BlcnR5TmFtZTogc3RyaW5nLCBkZWNvcmF0b3JOYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgcHJpdmF0ZVByb3BOYW1lID0gYCQkX18ke3Byb3BlcnR5TmFtZX1gO1xuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcml2YXRlUHJvcE5hbWUpKSB7XG4gICAgY29uc29sZS53YXJuKGBUaGUgcHJvcCBcIiR7cHJpdmF0ZVByb3BOYW1lfVwiIGlzIGFscmVhZHkgZXhpc3QsIGl0IHdpbGwgYmUgb3ZlcnJpZGVkIGJ5ICR7ZGVjb3JhdG9yTmFtZX0gZGVjb3JhdG9yLmApO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xuXG4gIHJldHVybiBwcml2YXRlUHJvcE5hbWU7XG59XG4iXX0=