/**
 * @description
 *
 * <a id="poLanguageDefault"></a>
 *
 *
 * A constante poLanguageDefault possui as linguagens de suporte padrão do Po-UI
 *
 * > Português, Inglês, Espanhol e Russo.
 *
 * @usedBy PoI18nModule
 */
export const poLanguageDefault = [
    { description: 'English', language: 'en' },
    { description: 'Español', language: 'es' },
    { description: 'Português', language: 'pt' },
    { description: 'Pусский', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocales"></a>
 *
 *
 * A constante poLocales possui somente os códigos das linguagem padrão
 *
 * @usedBy PoI18nModule
 */
export const poLocales = poLanguageDefault.map(language => language.language);
/**
 * @description
 *
 * <a id="poLocaleDefault"></a>
 *
 *
 * A constante poLocaleDefault possui o código da linguagem padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
export const poLocaleDefault = 'pt';
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
export const poLocaleDecimalSeparatorList = [
    { separator: '.', language: 'en' },
    { separator: ',', language: 'es' },
    { separator: ',', language: 'pt' },
    { separator: ',', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
export const poLocaleThousandSeparatorList = [
    { separator: ',', language: 'en' },
    { separator: '.', language: 'es' },
    { separator: '.', language: 'pt' },
    { separator: ' ', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocaleDateSeparatorList"></a>
 *
 *
 * A constante poLocaleDateSeparatorList possui o separador de data por locale de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
export const poLocaleDateSeparatorList = [
    { separator: '/', locale: 'en' },
    { separator: '/', locale: 'es' },
    { separator: '/', locale: 'pt' },
    { separator: '.', locale: 'ru' }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2UuY29uc3RhbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLmNvbnN0YW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXNCO0lBQ2xELEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzFDLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzVDLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0NBQzNDLENBQUM7QUFFRjs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTlFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFFcEM7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQTZCO0lBQ3BFLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2xDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2xDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2xDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0NBQ25DLENBQUM7QUFFRjs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBNkI7SUFDckUsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDbEMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDbEMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDbEMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Q0FDbkMsQ0FBQztBQUVGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUEyQjtJQUMvRCxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNoQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNoQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNoQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtDQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9MYW5ndWFnZSwgUG9OdW1iZXJTZXBhcmF0b3IsIFBvRGF0ZVNlcGFyYXRvciB9IGZyb20gJy4vcG8tbGFuZ3VhZ2UuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiA8YSBpZD1cInBvTGFuZ3VhZ2VEZWZhdWx0XCI+PC9hPlxuICpcbiAqXG4gKiBBIGNvbnN0YW50ZSBwb0xhbmd1YWdlRGVmYXVsdCBwb3NzdWkgYXMgbGluZ3VhZ2VucyBkZSBzdXBvcnRlIHBhZHLDo28gZG8gUG8tVUlcbiAqXG4gKiA+IFBvcnR1Z3XDqnMsIEluZ2zDqnMsIEVzcGFuaG9sIGUgUnVzc28uXG4gKlxuICogQHVzZWRCeSBQb0kxOG5Nb2R1bGVcbiAqL1xuZXhwb3J0IGNvbnN0IHBvTGFuZ3VhZ2VEZWZhdWx0OiBBcnJheTxQb0xhbmd1YWdlPiA9IFtcbiAgeyBkZXNjcmlwdGlvbjogJ0VuZ2xpc2gnLCBsYW5ndWFnZTogJ2VuJyB9LFxuICB7IGRlc2NyaXB0aW9uOiAnRXNwYcOxb2wnLCBsYW5ndWFnZTogJ2VzJyB9LFxuICB7IGRlc2NyaXB0aW9uOiAnUG9ydHVndcOqcycsIGxhbmd1YWdlOiAncHQnIH0sXG4gIHsgZGVzY3JpcHRpb246ICdQ0YPRgdGB0LrQuNC5JywgbGFuZ3VhZ2U6ICdydScgfVxuXTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiA8YSBpZD1cInBvTG9jYWxlc1wiPjwvYT5cbiAqXG4gKlxuICogQSBjb25zdGFudGUgcG9Mb2NhbGVzIHBvc3N1aSBzb21lbnRlIG9zIGPDs2RpZ29zIGRhcyBsaW5ndWFnZW0gcGFkcsOjb1xuICpcbiAqIEB1c2VkQnkgUG9JMThuTW9kdWxlXG4gKi9cbmV4cG9ydCBjb25zdCBwb0xvY2FsZXMgPSBwb0xhbmd1YWdlRGVmYXVsdC5tYXAobGFuZ3VhZ2UgPT4gbGFuZ3VhZ2UubGFuZ3VhZ2UpO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIDxhIGlkPVwicG9Mb2NhbGVEZWZhdWx0XCI+PC9hPlxuICpcbiAqXG4gKiBBIGNvbnN0YW50ZSBwb0xvY2FsZURlZmF1bHQgcG9zc3VpIG8gY8OzZGlnbyBkYSBsaW5ndWFnZW0gcGFkcsOjbyBkbyBQby1VSVxuICpcbiAqIEB1c2VkQnkgUG9JMThuTW9kdWxlXG4gKi9cbmV4cG9ydCBjb25zdCBwb0xvY2FsZURlZmF1bHQgPSAncHQnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIDxhIGlkPVwicG9Mb2NhbGVEZWNpbWFsU2VwYXJhdG9yTGlzdFwiPjwvYT5cbiAqXG4gKlxuICogQSBjb25zdGFudGUgcG9Mb2NhbGVEZWNpbWFsU2VwYXJhdG9yTGlzdCBwb3NzdWkgb3Mgc2VwYXJhZG9yZXMgZGUgZGVjaW1hbCBwb3IgbGluZ3VhZ2VucyBkZSBzdXBvcnRlIHBhZHLDo28gZG8gUG8tVUlcbiAqXG4gKiBAdXNlZEJ5IFBvSTE4bk1vZHVsZVxuICovXG5leHBvcnQgY29uc3QgcG9Mb2NhbGVEZWNpbWFsU2VwYXJhdG9yTGlzdDogQXJyYXk8UG9OdW1iZXJTZXBhcmF0b3I+ID0gW1xuICB7IHNlcGFyYXRvcjogJy4nLCBsYW5ndWFnZTogJ2VuJyB9LFxuICB7IHNlcGFyYXRvcjogJywnLCBsYW5ndWFnZTogJ2VzJyB9LFxuICB7IHNlcGFyYXRvcjogJywnLCBsYW5ndWFnZTogJ3B0JyB9LFxuICB7IHNlcGFyYXRvcjogJywnLCBsYW5ndWFnZTogJ3J1JyB9XG5dO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIDxhIGlkPVwicG9Mb2NhbGVEZWNpbWFsU2VwYXJhdG9yTGlzdFwiPjwvYT5cbiAqXG4gKlxuICogQSBjb25zdGFudGUgcG9Mb2NhbGVEZWNpbWFsU2VwYXJhdG9yTGlzdCBwb3NzdWkgb3Mgc2VwYXJhZG9yZXMgZGUgZGVjaW1hbCBwb3IgbGluZ3VhZ2VucyBkZSBzdXBvcnRlIHBhZHLDo28gZG8gUG8tVUlcbiAqXG4gKiBAdXNlZEJ5IFBvSTE4bk1vZHVsZVxuICovXG5leHBvcnQgY29uc3QgcG9Mb2NhbGVUaG91c2FuZFNlcGFyYXRvckxpc3Q6IEFycmF5PFBvTnVtYmVyU2VwYXJhdG9yPiA9IFtcbiAgeyBzZXBhcmF0b3I6ICcsJywgbGFuZ3VhZ2U6ICdlbicgfSxcbiAgeyBzZXBhcmF0b3I6ICcuJywgbGFuZ3VhZ2U6ICdlcycgfSxcbiAgeyBzZXBhcmF0b3I6ICcuJywgbGFuZ3VhZ2U6ICdwdCcgfSxcbiAgeyBzZXBhcmF0b3I6ICcgJywgbGFuZ3VhZ2U6ICdydScgfVxuXTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiA8YSBpZD1cInBvTG9jYWxlRGF0ZVNlcGFyYXRvckxpc3RcIj48L2E+XG4gKlxuICpcbiAqIEEgY29uc3RhbnRlIHBvTG9jYWxlRGF0ZVNlcGFyYXRvckxpc3QgcG9zc3VpIG8gc2VwYXJhZG9yIGRlIGRhdGEgcG9yIGxvY2FsZSBkZSBzdXBvcnRlIHBhZHLDo28gZG8gUG8tVUlcbiAqXG4gKiBAdXNlZEJ5IFBvSTE4bk1vZHVsZVxuICovXG5leHBvcnQgY29uc3QgcG9Mb2NhbGVEYXRlU2VwYXJhdG9yTGlzdDogQXJyYXk8UG9EYXRlU2VwYXJhdG9yPiA9IFtcbiAgeyBzZXBhcmF0b3I6ICcvJywgbG9jYWxlOiAnZW4nIH0sXG4gIHsgc2VwYXJhdG9yOiAnLycsIGxvY2FsZTogJ2VzJyB9LFxuICB7IHNlcGFyYXRvcjogJy8nLCBsb2NhbGU6ICdwdCcgfSxcbiAgeyBzZXBhcmF0b3I6ICcuJywgbG9jYWxlOiAncnUnIH1cbl07XG4iXX0=