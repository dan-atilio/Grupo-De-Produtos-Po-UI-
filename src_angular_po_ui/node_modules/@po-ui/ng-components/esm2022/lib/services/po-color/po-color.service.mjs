import { Injectable } from '@angular/core';
import { PoColorPaletteEnum } from '../../enums/po-color-palette.enum';
import { PoDefaultColors } from './po-colors.constant';
import * as i0 from "@angular/core";
const poColorPalette = Object.values(PoColorPaletteEnum);
export class PoColorService {
    defaultColors = [];
    colorBlack = '#000000';
    /**
     * Avalia a propriedade `color` na lista de items passada. Caso sim, trata se é decimal ou string `po-color`. Caso não haja, retorna a cor default.
     *
     * @param data
     */
    getColors(data) {
        this.verifyIfHasColorProperty(data);
        return data.map((dataItem, index) => {
            if (dataItem.color) {
                dataItem.color = this.verifyIfIsPoColorPalette(dataItem.color);
                return dataItem;
            }
            const color = this.defaultColors[index] === undefined ? this.colorBlack : this.defaultColors[index];
            return { ...dataItem, color };
        });
    }
    verifyIfHasColorProperty(data) {
        const hasColorProperty = data.every(dataItem => dataItem.hasOwnProperty('color') && dataItem.color?.length > 0);
        if (!hasColorProperty) {
            this.defaultColors = this.getDefaultColors(data.length);
        }
    }
    verifyIfIsPoColorPalette(color) {
        if (poColorPalette.includes(color)) {
            return `po-${color}`;
        }
        return color;
    }
    getDefaultColors(length) {
        if (length === 1) {
            return PoDefaultColors[0];
        }
        const colorsLength = PoDefaultColors.length;
        if (length > colorsLength) {
            const quantityDuplicates = length / colorsLength;
            let colors = PoDefaultColors[colorsLength - 1];
            for (let i = 0; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoDefaultColors[colorsLength]);
            }
            return colors;
        }
        return PoDefaultColors[length - 1];
    }
    static ɵfac = function PoColorService_Factory(t) { return new (t || PoColorService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorService, factory: PoColorService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29sb3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvc2VydmljZXMvcG8tY29sb3IvcG8tY29sb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFFdkQsTUFBTSxjQUFjLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBU2hFLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLGFBQWEsR0FBa0IsRUFBRSxDQUFDO0lBQ2pCLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFFeEM7Ozs7T0FJRztJQUNILFNBQVMsQ0FBd0IsSUFBYztRQUM3QyxJQUFJLENBQUMsd0JBQXdCLENBQUksSUFBSSxDQUFDLENBQUM7UUFFdkMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xDLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFDbEIsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUUvRCxPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BHLE9BQU8sRUFBRSxHQUFHLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyx3QkFBd0IsQ0FBd0IsSUFBYztRQUNwRSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDO0lBRU8sd0JBQXdCLENBQUMsS0FBYTtRQUM1QyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxNQUFNLEtBQUssRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsTUFBYztRQUNyQyxJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEIsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO1FBRTVDLElBQUksTUFBTSxHQUFHLFlBQVksRUFBRTtZQUN6QixNQUFNLGtCQUFrQixHQUFHLE1BQU0sR0FBRyxZQUFZLENBQUM7WUFDakQsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzVDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1lBRUQsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELE9BQU8sZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO3dFQXpEVSxjQUFjO2dFQUFkLGNBQWMsV0FBZCxjQUFjLG1CQUZiLE1BQU07O2lGQUVQLGNBQWM7Y0FIMUIsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0NvbG9yUGFsZXR0ZUVudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9wby1jb2xvci1wYWxldHRlLmVudW0nO1xuaW1wb3J0IHsgUG9EZWZhdWx0Q29sb3JzIH0gZnJvbSAnLi9wby1jb2xvcnMuY29uc3RhbnQnO1xuXG5jb25zdCBwb0NvbG9yUGFsZXR0ZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFBvQ29sb3JQYWxldHRlRW51bSk7XG5cbmludGVyZmFjZSBQb0NvbG9yQXJncyB7XG4gIGNvbG9yPzogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQb0NvbG9yU2VydmljZSB7XG4gIGRlZmF1bHRDb2xvcnM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb2xvckJsYWNrID0gJyMwMDAwMDAnO1xuXG4gIC8qKlxuICAgKiBBdmFsaWEgYSBwcm9wcmllZGFkZSBgY29sb3JgIG5hIGxpc3RhIGRlIGl0ZW1zIHBhc3NhZGEuIENhc28gc2ltLCB0cmF0YSBzZSDDqSBkZWNpbWFsIG91IHN0cmluZyBgcG8tY29sb3JgLiBDYXNvIG7Do28gaGFqYSwgcmV0b3JuYSBhIGNvciBkZWZhdWx0LlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YVxuICAgKi9cbiAgZ2V0Q29sb3JzPFQgZXh0ZW5kcyBQb0NvbG9yQXJncz4oZGF0YTogQXJyYXk8VD4pOiBBcnJheTxUPiB7XG4gICAgdGhpcy52ZXJpZnlJZkhhc0NvbG9yUHJvcGVydHk8VD4oZGF0YSk7XG5cbiAgICByZXR1cm4gZGF0YS5tYXAoKGRhdGFJdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGRhdGFJdGVtLmNvbG9yKSB7XG4gICAgICAgIGRhdGFJdGVtLmNvbG9yID0gdGhpcy52ZXJpZnlJZklzUG9Db2xvclBhbGV0dGUoZGF0YUl0ZW0uY29sb3IpO1xuXG4gICAgICAgIHJldHVybiBkYXRhSXRlbTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmRlZmF1bHRDb2xvcnNbaW5kZXhdID09PSB1bmRlZmluZWQgPyB0aGlzLmNvbG9yQmxhY2sgOiB0aGlzLmRlZmF1bHRDb2xvcnNbaW5kZXhdO1xuICAgICAgcmV0dXJuIHsgLi4uZGF0YUl0ZW0sIGNvbG9yIH07XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeUlmSGFzQ29sb3JQcm9wZXJ0eTxUIGV4dGVuZHMgUG9Db2xvckFyZ3M+KGRhdGE6IEFycmF5PFQ+KTogdm9pZCB7XG4gICAgY29uc3QgaGFzQ29sb3JQcm9wZXJ0eSA9IGRhdGEuZXZlcnkoZGF0YUl0ZW0gPT4gZGF0YUl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbG9yJykgJiYgZGF0YUl0ZW0uY29sb3I/Lmxlbmd0aCA+IDApO1xuICAgIGlmICghaGFzQ29sb3JQcm9wZXJ0eSkge1xuICAgICAgdGhpcy5kZWZhdWx0Q29sb3JzID0gdGhpcy5nZXREZWZhdWx0Q29sb3JzKGRhdGEubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeUlmSXNQb0NvbG9yUGFsZXR0ZShjb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocG9Db2xvclBhbGV0dGUuaW5jbHVkZXMoY29sb3IpKSB7XG4gICAgICByZXR1cm4gYHBvLSR7Y29sb3J9YDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0Q29sb3JzKGxlbmd0aDogbnVtYmVyKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIFBvRGVmYXVsdENvbG9yc1swXTtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvcnNMZW5ndGggPSBQb0RlZmF1bHRDb2xvcnMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCA+IGNvbG9yc0xlbmd0aCkge1xuICAgICAgY29uc3QgcXVhbnRpdHlEdXBsaWNhdGVzID0gbGVuZ3RoIC8gY29sb3JzTGVuZ3RoO1xuICAgICAgbGV0IGNvbG9ycyA9IFBvRGVmYXVsdENvbG9yc1tjb2xvcnNMZW5ndGggLSAxXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcXVhbnRpdHlEdXBsaWNhdGVzOyBpKyspIHtcbiAgICAgICAgY29sb3JzID0gY29sb3JzLmNvbmNhdChQb0RlZmF1bHRDb2xvcnNbY29sb3JzTGVuZ3RoXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFBvRGVmYXVsdENvbG9yc1tsZW5ndGggLSAxXTtcbiAgfVxufVxuIl19