import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterType } from './po-toaster/po-toaster-type.enum';
/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto `PoNotification` que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 9 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * Notificações com ação ou notificações de `erro` permanecerão em tela até o usuário fecha-lá ou clicar na ação.
 *
 * O serviço possui um limite de até 5 notificações por vez, a partir do sexto a primeira notificação será removida dando lugar a nova.
 *
 */
export class PoNotificationBaseService {
    // Array responsável por guardar a instância de po-toaster's superiores.
    stackTop = [];
    // Array responsável por guardar a instância de po-toaster's inferiores.
    stackBottom = [];
    // Duração da notificação ativa.
    defaultDuration = 9000;
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    success(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    }
    /**
     * Emite uma notificação de atenção.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    warning(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    }
    /**
     * Emite uma notificação de erro.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    error(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    }
    /**
     * Emite uma notificação de informação.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    information(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    }
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 9 segundos.
     *
     * @param {number} defaultDuration Duração em milisegundos
     */
    setDefaultDuration(defaultDuration) {
        this.defaultDuration = defaultDuration;
    }
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
     */
    buildToaster(notification, type) {
        let index = 0;
        let orientation;
        if (notification.orientation === undefined ||
            notification.orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        const toaster = {
            componentRef: undefined,
            message: notification.message || notification,
            type: type,
            orientation: orientation,
            action: notification.action,
            actionLabel: notification.actionLabel,
            position: index,
            duration: notification.duration || this.defaultDuration
        };
        if (notification.action) {
            toaster.action = (param) => {
                notification.action();
                this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvc2VydmljZXMvcG8tbm90aWZpY2F0aW9uL3BvLW5vdGlmaWNhdGlvbi1iYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sT0FBZ0IseUJBQXlCO0lBQzdDLHdFQUF3RTtJQUN4RSxRQUFRLEdBQTZCLEVBQUUsQ0FBQztJQUV4Qyx3RUFBd0U7SUFDeEUsV0FBVyxHQUE2QixFQUFFLENBQUM7SUFFM0MsZ0NBQWdDO0lBQ3hCLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFFL0I7Ozs7T0FJRztJQUNJLE9BQU8sQ0FBQyxZQUFxQztRQUNsRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLFlBQXFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsWUFBcUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFdBQVcsQ0FBQyxZQUFxQztRQUN0RCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxrQkFBa0IsQ0FBQyxlQUF1QjtRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ssWUFBWSxDQUFDLFlBQXFDLEVBQUUsSUFBbUI7UUFDN0UsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxXQUFXLENBQUM7UUFFaEIsSUFDbUIsWUFBYSxDQUFDLFdBQVcsS0FBSyxTQUFTO1lBQ3ZDLFlBQWEsQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsTUFBTSxFQUMxRTtZQUNBLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztZQUNoQyxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO1NBQzNDO2FBQU07WUFDTCxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDN0IsV0FBVyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztTQUN4QztRQUVELE1BQU0sT0FBTyxHQUFjO1lBQ3pCLFlBQVksRUFBRSxTQUFTO1lBQ3ZCLE9BQU8sRUFBbUIsWUFBYSxDQUFDLE9BQU8sSUFBWSxZQUFZO1lBQ3ZFLElBQUksRUFBRSxJQUFJO1lBQ1YsV0FBVyxFQUFFLFdBQVc7WUFDeEIsTUFBTSxFQUFtQixZQUFhLENBQUMsTUFBTTtZQUM3QyxXQUFXLEVBQW1CLFlBQWEsQ0FBQyxXQUFXO1lBQ3ZELFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFtQixZQUFhLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlO1NBQzFFLENBQUM7UUFFRixJQUFxQixZQUFhLENBQUMsTUFBTSxFQUFFO1lBQ3pDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDYixZQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFDLENBQUMsQ0FBQztTQUNIO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQW9CRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb05vdGlmaWNhdGlvbiB9IGZyb20gJy4vcG8tbm90aWZpY2F0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXIgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Ub2FzdGVyT3JpZW50YXRpb24gfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci1vcmllbnRhdGlvbi5lbnVtJztcbmltcG9ydCB7IFBvVG9hc3RlclR5cGUgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci10eXBlLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgZW1pdGlyIGFzIG5vdGlmaWNhw6fDtWVzIGVtIHVtYSBww6FnaW5hLiBTw6NvIGRpc3BvbmliaWxpemFkb3Mgb3MgbcOpdG9kb3MgZGU6XG4gKlxuICogLSBzdWNjZXNzLFxuICogLSB3YXJuaW5nLFxuICogLSBlcnJvcixcbiAqIC0gaW5mb3JtYXRpb24uXG4gKlxuICogQ2FkYSB1bSBkZXN0ZXMgbcOpdG9kb3MgcmVjZWJlIGNvbW8gcGFyw6JtZXRybyBvIG9iamV0byBgUG9Ob3RpZmljYXRpb25gIHF1ZSBjb250w6ltIG9zIGRhZG9zIGRhIG1lbnNhZ2VtIGUgb1xuICogb2JqZXRvIFZpZXdDb250YWluZXJSZWYgcXVlIMOpIGEgcmVwcmVzZW50YcOnw6NvIGRvIGNvbnRhaW5lciBkbyBjb21wb25lbnRlIG9uZGUgc2Vyw6EgY3JpYWRhIGEgbm90aWZpY2HDp8Ojby5cbiAqXG4gKiBFc3RhcyBub3RpZmljYcOnw7VlcyBzZXLDo28gZXhpYmlkYXMgZHVyYW50ZSA5IHNlZ3VuZG9zIHBvciBwYWRyw6NvLCBwb2RlbmRvIHNlciBhbHRlcmFkYSBjb25mb3JtZSBuZWNlc3NpZGFkZS5cbiAqIEFww7NzIGVzdGUgdGVtcG8gYSBtZXNtYSDDqSByZW1vdmlkYSBhdXRvbWF0aWNhbWVudGUuXG4gKlxuICogTm90aWZpY2HDp8O1ZXMgY29tIGHDp8OjbyBvdSBub3RpZmljYcOnw7VlcyBkZSBgZXJyb2AgcGVybWFuZWNlcsOjbyBlbSB0ZWxhIGF0w6kgbyB1c3XDoXJpbyBmZWNoYS1sw6Egb3UgY2xpY2FyIG5hIGHDp8Ojby5cbiAqXG4gKiBPIHNlcnZpw6dvIHBvc3N1aSB1bSBsaW1pdGUgZGUgYXTDqSA1IG5vdGlmaWNhw6fDtWVzIHBvciB2ZXosIGEgcGFydGlyIGRvIHNleHRvIGEgcHJpbWVpcmEgbm90aWZpY2HDp8OjbyBzZXLDoSByZW1vdmlkYSBkYW5kbyBsdWdhciBhIG5vdmEuXG4gKlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB7XG4gIC8vIEFycmF5IHJlc3BvbnPDoXZlbCBwb3IgZ3VhcmRhciBhIGluc3TDom5jaWEgZGUgcG8tdG9hc3RlcidzIHN1cGVyaW9yZXMuXG4gIHN0YWNrVG9wOiBBcnJheTxDb21wb25lbnRSZWY8YW55Pj4gPSBbXTtcblxuICAvLyBBcnJheSByZXNwb25zw6F2ZWwgcG9yIGd1YXJkYXIgYSBpbnN0w6JuY2lhIGRlIHBvLXRvYXN0ZXIncyBpbmZlcmlvcmVzLlxuICBzdGFja0JvdHRvbTogQXJyYXk8Q29tcG9uZW50UmVmPGFueT4+ID0gW107XG5cbiAgLy8gRHVyYcOnw6NvIGRhIG5vdGlmaWNhw6fDo28gYXRpdmEuXG4gIHByaXZhdGUgZGVmYXVsdER1cmF0aW9uID0gOTAwMDtcblxuICAvKipcbiAgICogRW1pdGUgdW1hIG5vdGlmaWNhw6fDo28gZGUgc3VjZXNzby5cbiAgICpcbiAgICogQHBhcmFtIHtQb05vdGlmaWNhdGlvbiB8IHN0cmluZ30gbm90aWZpY2F0aW9uIE9iamV0byBjb20gb3MgZGFkb3MgZGEgbm90aWZpY2HDp8OjbyBvdSBzb21lbnRlIGEgc3RyaW5nIGNvbSBhIG1lbnNhZ2VtIGRhIG5vdGlmaWNhw6fDo28uXG4gICAqL1xuICBwdWJsaWMgc3VjY2Vzcyhub3RpZmljYXRpb246IFBvTm90aWZpY2F0aW9uIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVhdGVUb2FzdGVyKHRoaXMuYnVpbGRUb2FzdGVyKG5vdGlmaWNhdGlvbiwgUG9Ub2FzdGVyVHlwZS5TdWNjZXNzKSk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdGUgdW1hIG5vdGlmaWNhw6fDo28gZGUgYXRlbsOnw6NvLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvTm90aWZpY2F0aW9uIHwgc3RyaW5nfSBub3RpZmljYXRpb24gT2JqZXRvIGNvbSBvcyBkYWRvcyBkYSBub3RpZmljYcOnw6NvIG91IHNvbWVudGUgYSBzdHJpbmcgY29tIGEgbWVuc2FnZW0gZGEgbm90aWZpY2HDp8Ojb1xuICAgKi9cbiAgcHVibGljIHdhcm5pbmcobm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiB8IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlVG9hc3Rlcih0aGlzLmJ1aWxkVG9hc3Rlcihub3RpZmljYXRpb24sIFBvVG9hc3RlclR5cGUuV2FybmluZykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRlIHVtYSBub3RpZmljYcOnw6NvIGRlIGVycm8uXG4gICAqXG4gICAqIEBwYXJhbSB7UG9Ob3RpZmljYXRpb24gfCBzdHJpbmd9IG5vdGlmaWNhdGlvbiBPYmpldG8gY29tIG9zIGRhZG9zIGRhIG5vdGlmaWNhw6fDo28gb3Ugc29tZW50ZSBhIHN0cmluZyBjb20gYSBtZW5zYWdlbSBkYSBub3RpZmljYcOnw6NvXG4gICAqL1xuICBwdWJsaWMgZXJyb3Iobm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiB8IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlVG9hc3Rlcih0aGlzLmJ1aWxkVG9hc3Rlcihub3RpZmljYXRpb24sIFBvVG9hc3RlclR5cGUuRXJyb3IpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0ZSB1bWEgbm90aWZpY2HDp8OjbyBkZSBpbmZvcm1hw6fDo28uXG4gICAqXG4gICAqIEBwYXJhbSB7UG9Ob3RpZmljYXRpb24gfCBzdHJpbmd9IG5vdGlmaWNhdGlvbiBPYmpldG8gY29tIG9zIGRhZG9zIGRhIG5vdGlmaWNhw6fDo28gb3Ugc29tZW50ZSBhIHN0cmluZyBjb20gYSBtZW5zYWdlbSBkYSBub3RpZmljYcOnw6NvXG4gICAqL1xuICBwdWJsaWMgaW5mb3JtYXRpb24obm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiB8IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlVG9hc3Rlcih0aGlzLmJ1aWxkVG9hc3Rlcihub3RpZmljYXRpb24sIFBvVG9hc3RlclR5cGUuSW5mb3JtYXRpb24pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgZW0gbWlsaXNzZWd1bmRvcyBhIGR1cmHDp8OjbyBwYWRyw6NvIHBhcmEgYXMgbm90aWZpY2HDp8O1ZXMuXG4gICAqXG4gICAqID4gUGFkcsOjbyA5IHNlZ3VuZG9zLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVmYXVsdER1cmF0aW9uIER1cmHDp8OjbyBlbSBtaWxpc2VndW5kb3NcbiAgICovXG4gIHB1YmxpYyBzZXREZWZhdWx0RHVyYXRpb24oZGVmYXVsdER1cmF0aW9uOiBudW1iZXIpIHtcbiAgICB0aGlzLmRlZmF1bHREdXJhdGlvbiA9IGRlZmF1bHREdXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZG9jc1ByaXZhdGVcbiAgICpcbiAgICogQ3JpYSB1bSBvYmpldG8gZG8gdGlwbyBQb1RvYXN0ZXIgZGUgYWNvcmRvIG8gdGlwby5cbiAgICpcbiAgICogQHBhcmFtIHtQb05vdGlmaWNhdGlvbiB8IHN0cmluZ30gbm90aWZpY2F0aW9uIE9iamV0byBQb05vdGlmaWNhdGlvbiBjb20gb3MgZGFkb3MgZGEgbm90aWZpY2HDp8Ojb1xuICAgKi9cbiAgcHJpdmF0ZSBidWlsZFRvYXN0ZXIobm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiB8IHN0cmluZywgdHlwZTogUG9Ub2FzdGVyVHlwZSk6IFBvVG9hc3RlciB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgb3JpZW50YXRpb247XG5cbiAgICBpZiAoXG4gICAgICAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikub3JpZW50YXRpb24gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgKDxQb05vdGlmaWNhdGlvbj5ub3RpZmljYXRpb24pLm9yaWVudGF0aW9uID09PSBQb1RvYXN0ZXJPcmllbnRhdGlvbi5Cb3R0b21cbiAgICApIHtcbiAgICAgIGluZGV4ID0gdGhpcy5zdGFja0JvdHRvbS5sZW5ndGg7XG4gICAgICBvcmllbnRhdGlvbiA9IFBvVG9hc3Rlck9yaWVudGF0aW9uLkJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSB0aGlzLnN0YWNrVG9wLmxlbmd0aDtcbiAgICAgIG9yaWVudGF0aW9uID0gUG9Ub2FzdGVyT3JpZW50YXRpb24uVG9wO1xuICAgIH1cblxuICAgIGNvbnN0IHRvYXN0ZXI6IFBvVG9hc3RlciA9IHtcbiAgICAgIGNvbXBvbmVudFJlZjogdW5kZWZpbmVkLFxuICAgICAgbWVzc2FnZTogKDxQb05vdGlmaWNhdGlvbj5ub3RpZmljYXRpb24pLm1lc3NhZ2UgfHwgPHN0cmluZz5ub3RpZmljYXRpb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgYWN0aW9uOiAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikuYWN0aW9uLFxuICAgICAgYWN0aW9uTGFiZWw6ICg8UG9Ob3RpZmljYXRpb24+bm90aWZpY2F0aW9uKS5hY3Rpb25MYWJlbCxcbiAgICAgIHBvc2l0aW9uOiBpbmRleCxcbiAgICAgIGR1cmF0aW9uOiAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikuZHVyYXRpb24gfHwgdGhpcy5kZWZhdWx0RHVyYXRpb25cbiAgICB9O1xuXG4gICAgaWYgKCg8UG9Ob3RpZmljYXRpb24+bm90aWZpY2F0aW9uKS5hY3Rpb24pIHtcbiAgICAgIHRvYXN0ZXIuYWN0aW9uID0gKHBhcmFtOiBhbnkpID0+IHtcbiAgICAgICAgKDxQb05vdGlmaWNhdGlvbj5ub3RpZmljYXRpb24pLmFjdGlvbigpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKHBhcmFtLmNvbXBvbmVudFJlZik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0b2FzdGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkb2NzUHJpdmF0ZVxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgY3JpYXIgbyBwby10b2FzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvVG9hc3Rlcn0gdG9hc3RlciBPYmpldG8gY29udGVuZG8gYXMgaW5mb3JtYcOnw7VlcyBkbyB0b2FzdGVyLlxuICAgKi9cbiAgYWJzdHJhY3QgY3JlYXRlVG9hc3Rlcih0b2FzdGVyOiBQb1RvYXN0ZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAZG9jc1ByaXZhdGVcbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGRlc3RydWlyIG8gcG8tdG9hc3Rlci5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnRSZWZ9IHRvYXN0ZXIgTsO6bWVybyBkYSBwb3Npw6fDo28gb3UgaW5zdGFuY2lhIGRvIHRvYXN0ZXIgYSBzZXIgZGVzdHJ1w61kby5cbiAgICogQHBhcmFtIHtQb1RvYXN0ZXJPcmllbnRhdGlvbn0gb3JpZW50YXRpb24gT3JpZW50YcOnw6NvIGRvIFBvVG9hc3RlcjogVG9wIG91IEJvdHRvbVxuICAgKi9cbiAgYWJzdHJhY3QgZGVzdHJveVRvYXN0ZXIodG9hc3RlcjogQ29tcG9uZW50UmVmPGFueT4pOiB2b2lkO1xufVxuIl19