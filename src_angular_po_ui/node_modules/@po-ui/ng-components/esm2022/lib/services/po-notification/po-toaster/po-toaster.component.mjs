import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { poToasterLiterals } from './po-toaster.literals';
import { PoToasterBaseComponent } from './po-toaster-base.component';
import { PoToasterType } from './po-toaster-type.enum';
import { PoToasterOrientation } from './po-toaster-orientation.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../po-language/po-language.service";
import * as i2 from "@angular/common";
import * as i3 from "../../../components/po-button/po-button.component";
import * as i4 from "../../../components/po-icon/po-icon.component";
const _c0 = ["toaster"];
const _c1 = ["buttonClose"];
function PoToasterComponent_po_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 11);
    i0.ɵɵlistener("p-click", function PoToasterComponent_po_button_8_Template_po_button_p_click_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.poToasterAction($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-label", ctx_r1.actionLabel);
} }
const SPACE_BETWEEN_TOASTERS = 8;
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
export class PoToasterComponent extends PoToasterBaseComponent {
    changeDetector;
    renderer;
    /* Componente toaster */
    toaster;
    buttonClose;
    alive = true;
    language;
    literals;
    /* Ícone do Toaster */
    icon;
    /* Margem do Toaster referênte à sua orientação e posição*/
    margin = 0;
    /* Observable para monitorar o Close to Toaster */
    observableOnClose = new Subject();
    /* Posição do Toaster*/
    toasterPosition = 'po-toaster-bottom';
    /* Tipo do Toaster */
    toasterType;
    constructor(poLanguageService, changeDetector, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.language = poLanguageService.getShortLanguage();
        this.literals = {
            ...poToasterLiterals[this.language]
        };
    }
    ngOnDestroy() {
        this.alive = false;
    }
    ngAfterViewInit() {
        setTimeout(() => this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-visible'));
    }
    /* Muda a posição do Toaster na tela*/
    changePosition(position) {
        setTimeout(() => {
            this.margin = SPACE_BETWEEN_TOASTERS;
            for (let i = 0; i < position; i++) {
                this.margin += this.returnHeightToaster(i) + SPACE_BETWEEN_TOASTERS;
            }
            if (this.orientation === PoToasterOrientation.Top) {
                this.toaster.nativeElement.style.top = this.margin + 'px';
            }
            else {
                this.toaster.nativeElement.style.bottom = this.margin + 'px';
            }
        });
    }
    /* Fecha o componente Toaster */
    close() {
        this.observableOnClose.next(true);
    }
    setFadeOut() {
        this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
        this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
    }
    /* Configura o Toaster com os atributos passados para ele */
    configToaster(poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel;
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        if (this.type === PoToasterType.Error) {
            this.toaster.nativeElement.setAttribute('role', 'alert');
        }
        else if (this.action && this.actionLabel) {
            this.toaster.nativeElement.setAttribute('role', 'alertdialog');
        }
        else {
            this.toaster.nativeElement.setAttribute('role', 'status');
        }
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'ICON_WARNING';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'ICON_INFO';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'ICON_OK';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'ICON_WARNING';
                break;
            }
        }
        this.buttonClose.buttonElement.nativeElement.setAttribute('aria-label', this.literals.close);
        this.changeDetector.detectChanges();
    }
    getIcon() {
        return this.icon;
    }
    getToasterPosition() {
        return this.toasterPosition;
    }
    getToasterType() {
        return this.toasterType;
    }
    onButtonClose(event) {
        if (this.action && !this.actionLabel) {
            this.poToasterAction(event);
        }
        else {
            this.close();
        }
    }
    /* Chama a função passada pelo atributo `action` */
    poToasterAction(event) {
        this.action(this);
    }
    returnHeightToaster(position) {
        if (this.orientation === PoToasterOrientation.Top) {
            return document.querySelectorAll('.po-toaster-top')[position].offsetHeight;
        }
        return document.querySelectorAll('.po-toaster-bottom')[position].offsetHeight;
    }
    static ɵfac = function PoToasterComponent_Factory(t) { return new (t || PoToasterComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToasterComponent, selectors: [["po-toaster"]], viewQuery: function PoToasterComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 5);
            i0.ɵɵviewQuery(_c1, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toaster = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonClose = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 7, consts: [["toaster", ""], [1, "po-toaster-icon"], [3, "p-icon"], [1, "po-toaster-actions"], [1, "po-toaster-message"], [1, "po-toaster-action"], ["p-kind", "tertiary", 3, "p-label", "p-click", 4, "ngIf"], [1, "po-toaster-close"], [1, "po-toaster-divider"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 1, "po-toaster-button-close", 3, "p-click"], ["buttonClose", ""], ["p-kind", "tertiary", 3, "p-label", "p-click"]], template: function PoToasterComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", null, 0)(2, "div", 1);
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵtext(6);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(7, "div", 5);
            i0.ɵɵtemplate(8, PoToasterComponent_po_button_8_Template, 1, 1, "po-button", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(9, "div", 7);
            i0.ɵɵelement(10, "div", 8);
            i0.ɵɵelementStart(11, "po-button", 9, 10);
            i0.ɵɵlistener("p-click", function PoToasterComponent_Template_po_button_p_click_11_listener($event) { return ctx.onButtonClose($event); });
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate2("po-toaster ", ctx.getToasterType(), " ", ctx.getToasterPosition(), "");
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-icon", ctx.getIcon());
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.message);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.action && ctx.actionLabel);
        } }, dependencies: [i2.NgIf, i3.PoButtonComponent, i4.PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToasterComponent, [{
        type: Component,
        args: [{ selector: 'po-toaster', template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }}\">\n  <div class=\"po-toaster-icon\">\n    <po-icon [p-icon]=\"getIcon()\"></po-icon>\n  </div>\n\n  <div class=\"po-toaster-actions\">\n    <div class=\"po-toaster-message\">{{ message }}</div>\n    <div class=\"po-toaster-action\">\n      <po-button\n        *ngIf=\"action && actionLabel\"\n        (p-click)=\"poToasterAction($event)\"\n        [p-label]=\"actionLabel\"\n        p-kind=\"tertiary\"\n      ></po-button>\n    </div>\n  </div>\n\n  <div class=\"po-toaster-close\">\n    <div class=\"po-toaster-divider\"></div>\n    <po-button\n      #buttonClose\n      class=\"po-toaster-button-close\"\n      (p-click)=\"onButtonClose($event)\"\n      p-icon=\"ICON_CLOSE\"\n      p-kind=\"tertiary\"\n    ></po-button>\n  </div>\n</div>\n" }]
    }], () => [{ type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { toaster: [{
            type: ViewChild,
            args: ['toaster']
        }], buttonClose: [{
            type: ViewChild,
            args: ['buttonClose']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToasterComponent, { className: "PoToasterComponent", filePath: "lib/services/po-notification/po-toaster/po-toaster.component.ts", lineNumber: 33 }); })();
//# sourceMappingURL=data:application/json;base64,