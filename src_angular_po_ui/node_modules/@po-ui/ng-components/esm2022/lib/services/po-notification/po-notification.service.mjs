import { Injectable } from '@angular/core';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterType } from './po-toaster/po-toaster-type.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import { timer } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./../po-component-injector/po-component-injector.service";
const PoNotificationMaxLength = 5;
const PoNotificationFadeTime = 200;
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
export class PoNotificationService extends PoNotificationBaseService {
    poComponentInjector;
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        const stack = toaster.orientation === PoToasterOrientation.Top ? this.stackTop : this.stackBottom;
        stack.push(componentRef);
        this.verifyLimitToaster(stack);
        this.observableOnClose(componentRef);
        if (!((toaster.action && toaster.actionLabel) || toaster.type === PoToasterType.Error)) {
            timer(toaster.duration)
                .pipe(takeWhile(() => componentRef.instance.alive))
                .subscribe(() => {
                this.destroyToaster(componentRef);
            });
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        toaster.instance.setFadeOut();
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        setTimeout(() => {
            this.poComponentInjector.destroyComponentInApplication(toaster);
            for (let count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        }, PoNotificationFadeTime);
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
    verifyLimitToaster(stack) {
        if (stack.length > PoNotificationMaxLength) {
            this.destroyToaster(stack[0]);
        }
    }
    static ɵfac = function PoNotificationService_Factory(t) { return new (t || PoNotificationService)(i0.ɵɵinject(i1.PoComponentInjectorService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoNotificationService, factory: PoNotificationService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1.PoComponentInjectorService }], null); })();
//# sourceMappingURL=data:application/json;base64,