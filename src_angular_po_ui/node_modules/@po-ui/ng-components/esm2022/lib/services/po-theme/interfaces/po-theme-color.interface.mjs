/* eslint-disable @typescript-eslint/naming-convention */
export {};
//# sourceMappingURL=data:application/json;base64,