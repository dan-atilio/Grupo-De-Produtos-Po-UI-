import { RendererFactory2 } from '@angular/core';
import { PoThemeTypeEnum } from './enum/po-theme-type.enum';
import { PoTheme } from './interfaces/po-theme.interface';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O `PoThemeService` possibilita a personalização das cores do tema padrão do `PO-UI`, permitindo a alteração dos valores das variáveis de estilo usadas no CSS padrão.
 *
 * > Para saber mais sobre como customizar as cores do tema padrão verifique o item [Customizando cores do tema padrão](https://po-ui.io/guides/colors-customization) na aba `Guias`.
 *
 * > Obs.: Não está documentado aqui e não indicamos a customização das cores de 'feedback' por motivos de acessibilidade e usabilidade.
 */
export declare class PoThemeService {
    private window;
    private document;
    private renderer;
    private theme;
    constructor(window: Window, document: Document, rendererFactory: RendererFactory2);
    /**
     * Define o tema a ser aplicado no componente, de acordo com o tipo de tema especificado.
     *
     * Este método define o tema a ser aplicado no componente com base no objeto `theme` fornecido e no tipo de tema especificado.
     * Ele atualiza as propriedades do componente para refletir o tema selecionado, como cores, estilos e comportamentos.
     *
     * @param {PoTheme} theme - Objeto contendo as definições de tema a serem aplicadas no componente.
     * @param {PoThemeTypeEnum} [themeType=PoThemeTypeEnum.light] - (Opcional) Tipo de tema a ser aplicado, podendo ser 'light' (claro) ou 'dark' (escuro). Por padrão, o tema claro é aplicado.
     */
    setTheme(theme: PoTheme, themeType?: PoThemeTypeEnum): void;
    /**
     * @docsPrivate
     *
     * Gera estilos adicionais com base nos tokens de tema fornecidos, excluindo os tokens de cor.
     * @param theme Os tokens de tema contendo os estilos adicionais a serem gerados.
     * @returns Uma string contendo os estilos adicionais formatados.
     */
    private generateAdditionalStyles;
    /**
     * @docsPrivate
     *
     * Aplica os estilos de tema ao documento.
     * @param styleCss Os estilos CSS a serem aplicados.
     */
    private applyThemeStyles;
    private changeThemeType;
    /**
     * Persiste e define o tema do aplicativo com base nos dados armazenados.
     *
     * Este método recupera os dados do tema armazenados e os aplica ao aplicativo.
     *
     * @returns {PoTheme} Recupera o tema armazenado.
     */
    persistThemeActive(): PoTheme;
    /**
     * Altera o tipo do tema armazenado e aplica os novos estilos ao documento.
     *
     * Este método altera o tipo do tema armazenado ativo (light/dark)
     *
     * @param {PoThemeTypeEnum} themeType O tipo de tema a ser aplicado, light ou dark.
     */
    changeCurrentThemeType(type: PoThemeTypeEnum): void;
    /**
     * Método remove o tema armazenado e limpa todos os estilos de tema
     * aplicados ao documento.
     */
    cleanThemeActive(): void;
    /**
     * @docsPrivate
     *
     * Este método define um dados do tema e o armazena.
     * @param theme Os tokens de tema contendo os estilos adicionais a serem gerados.
     */
    private setThemeActive;
    /**
     * Retorna o tema ativo como um observable.
     * @returns {PoTheme} Tema ativo.
     */
    getThemeActive(): PoTheme;
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens de cores fornecidos.
     * @param themeColor Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    private createStyleElement;
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens de cores fornecidos.
     * @param themeColor Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    private generateThemeStyles;
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens per Component fornecidos.
     * @param themePerComponent Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    private generatePerComponentStyles;
    /**
     * Define o tema atual como o tema "PoUI Padrão".
     *
     * @param {PoThemeTypeEnum} type O tipo de Tema a ser aplicado, light / dark.
     */
    setDefaultTheme(type: PoThemeTypeEnum): void;
    /**
     * @docsPrivate
     *
     * Retorna o estilo CSS para o fundo dos ícones do componente po-select, com base nas cores do tema.
     *
     * @param {PoThemeColor} themeColor - Objeto contendo as cores do tema.
     * @returns {string} - Estilo CSS para o fundo dos ícones do po-select.
     */
    private getSelectBgIconsStyle;
    /**
     * @docsPrivate
     *
     * Retorna a imagem SVG utilizada como fundo do po-select.
     *
     * @param {string} color Cor da Imagem - Utilizada no atributo 'fill'.
     * @returns {string} Imagem SVG utilizada no po-select.
     */
    private getSelectBgIcon;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoThemeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PoThemeService>;
}
