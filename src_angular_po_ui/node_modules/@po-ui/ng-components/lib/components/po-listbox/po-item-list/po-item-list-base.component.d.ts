import { EventEmitter, TemplateRef } from '@angular/core';
import { PoItemListType } from '../enums/po-item-list-type.enum';
import { PoItemListAction } from './interfaces/po-item-list-action.interface';
import { PoItemListOptionGroup } from './interfaces/po-item-list-option-group.interface';
import { PoItemListOption } from './interfaces/po-item-list-option.interface';
import { PoItemListFilterMode } from '../enums/po-item-list-filter-mode.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-item-list` é a menor parte da lista de ação que compõem o componente [**PO Listbox**](/documentation/po-listbox).
 */
export declare class PoItemListBaseComponent {
    private _label;
    private _value;
    private _type;
    private _visible;
    private _disabled;
    _activeTabs: boolean;
    set type(value: string);
    get type(): PoItemListType;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como visível.
     *
     * @default `true`
     */
    set visible(value: any);
    get visible(): boolean;
    item: PoItemListAction | PoItemListOption | PoItemListOptionGroup | any;
    /** Texto de exibição do item. */
    label: string;
    /** Valor do item. */
    value: string;
    danger: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como desabilitado.
     *
     * @default `false`
     */
    set disabled(value: any);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define se a ação está selecionada.
     *
     * @default `false`
     */
    selected: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Atribui uma linha separadora acima do item.
     *
     * @default `false`
     */
    separator: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define um ícone que será exibido ao lado esquerdo do rótulo.
     */
    icon: string | TemplateRef<void>;
    /**
     * @optional
     *
     * @description
     *
     * Ação a ser realizada ao clicar no item do tipo `option`.
     */
    clickItem: EventEmitter<any>;
    checkboxItem: EventEmitter<any>;
    comboItem: EventEmitter<any>;
    checkboxValue: any;
    fieldValue: string;
    fieldLabel: string;
    template: TemplateRef<any> | any;
    templateContext: any;
    searchValue: string;
    filterMode: PoItemListFilterMode;
    isFiltering: boolean;
    shouldMarkLetters: boolean;
    compareCache: boolean;
    comboService: any;
    isTabs?: boolean;
    tabHide?: boolean;
    tabsItem: EventEmitter<any>;
    activatedTab: EventEmitter<any>;
    set activeTabs(value: boolean);
    get activeTabs(): boolean;
    protected emitActiveTabs(tab: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoItemListBaseComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PoItemListBaseComponent, never, never, { "type": { "alias": "p-type"; "required": false; }; "visible": { "alias": "p-visible"; "required": false; }; "item": { "alias": "p-item"; "required": false; }; "label": { "alias": "p-label"; "required": false; }; "value": { "alias": "p-value"; "required": false; }; "danger": { "alias": "p-danger"; "required": false; }; "disabled": { "alias": "p-disabled"; "required": false; }; "selected": { "alias": "p-selected"; "required": false; }; "separator": { "alias": "p-separator"; "required": false; }; "icon": { "alias": "p-icon"; "required": false; }; "checkboxValue": { "alias": "p-checkbox-value"; "required": false; }; "fieldValue": { "alias": "p-field-value"; "required": false; }; "fieldLabel": { "alias": "p-field-label"; "required": false; }; "template": { "alias": "p-template"; "required": false; }; "templateContext": { "alias": "p-template-context"; "required": false; }; "searchValue": { "alias": "p-search-value"; "required": false; }; "filterMode": { "alias": "p-filter-mode"; "required": false; }; "isFiltering": { "alias": "p-filtering"; "required": false; }; "shouldMarkLetters": { "alias": "p-should-mark-letter"; "required": false; }; "compareCache": { "alias": "p-compare-cache"; "required": false; }; "comboService": { "alias": "p-combo-service"; "required": false; }; "isTabs": { "alias": "p-is-tabs"; "required": false; }; "tabHide": { "alias": "p-tab-hide"; "required": false; }; "activeTabs": { "alias": "p-active-tabs"; "required": false; }; }, { "clickItem": "p-click-item"; "checkboxItem": "p-selectcheckbox-item"; "comboItem": "p-selectcombo-item"; "tabsItem": "p-emit-item-tabs"; "activatedTab": "p-activated-tabs"; }, never, never, false, never>;
    static ngAcceptInputType_danger: any;
    static ngAcceptInputType_selected: any;
    static ngAcceptInputType_separator: any;
}
