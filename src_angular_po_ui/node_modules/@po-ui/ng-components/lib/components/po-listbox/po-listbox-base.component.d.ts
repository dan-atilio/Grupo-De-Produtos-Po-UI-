import { EventEmitter, TemplateRef } from '@angular/core';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { PoItemListType } from './enums/po-item-list-type.enum';
import { PoItemListAction } from './po-item-list/interfaces/po-item-list-action.interface';
import { PoItemListFilterMode } from './enums/po-item-list-filter-mode.enum';
import { PoListBoxLiterals } from './interfaces/po-listbox-literals.interface';
import { PoItemListOptionGroup } from './po-item-list/interfaces/po-item-list-option-group.interface';
import { PoItemListOption } from './po-item-list/interfaces/po-item-list-option.interface';
import * as i0 from "@angular/core";
export declare const poListBoxLiteralsDefault: {
    en: PoListBoxLiterals;
    es: PoListBoxLiterals;
    pt: PoListBoxLiterals;
    ru: PoListBoxLiterals;
};
/**
 * @description
 * O componente `po-listbox` é uma caixa suspensa que aparece sobre a interface após ser acionado por um gatilho visível em tela, como o dropdown. Ele apoia trazendo agrupamentos de opções. O componente listbox é composto pelo componente [**PO Item List**](/documentation/po-item-list).
 */
export declare class PoListBoxBaseComponent {
    private _items;
    private _type;
    private _literals;
    private language;
    visible: boolean;
    set type(value: string);
    get type(): PoItemListType;
    set items(items: Array<PoItemListAction | PoItemListOption | PoItemListOptionGroup | any>);
    get items(): Array<PoItemListAction | PoItemListOption | PoItemListOptionGroup | any>;
    set literals(value: PoListBoxLiterals);
    get literals(): PoListBoxLiterals;
    get isItemListGroup(): boolean;
    isTabs: boolean;
    param?: any;
    selectItem: EventEmitter<any>;
    closeEvent: EventEmitter<any>;
    change: EventEmitter<any>;
    selectCombo: EventEmitter<any>;
    changeAll: EventEmitter<any>;
    UpdateInfiniteScroll: EventEmitter<any>;
    checkboxAllValue: any;
    selectedOptions: Array<any>;
    selectedOption?: any;
    fieldValue: string;
    fieldLabel: string;
    changeSearch: EventEmitter<any>;
    literalSearch?: any;
    fieldValueSearch: string;
    hideSearch?: boolean;
    hideSelectAll?: boolean;
    multiselectTemplate: TemplateRef<any> | any;
    template: TemplateRef<any> | any;
    placeholderSearch: string;
    searchValue: string;
    isServerSearching: boolean;
    infiniteLoading: boolean;
    infiniteScroll: boolean;
    cache: boolean;
    infiniteScrollDistance: number;
    filterMode: PoItemListFilterMode;
    isFiltering: boolean;
    shouldMarkLetters: boolean;
    compareCache: boolean;
    comboService: any;
    activatedTab: EventEmitter<any>;
    clickTab: EventEmitter<any>;
    changeStateTabs: EventEmitter<any>;
    constructor(languageService: PoLanguageService);
    static ɵfac: i0.ɵɵFactoryDeclaration<PoListBoxBaseComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PoListBoxBaseComponent, never, never, { "visible": { "alias": "p-visible"; "required": false; }; "type": { "alias": "p-type"; "required": false; }; "items": { "alias": "p-items"; "required": false; }; "literals": { "alias": "p-literals"; "required": false; }; "isTabs": { "alias": "p-is-tabs"; "required": false; }; "param": { "alias": "p-param"; "required": false; }; "checkboxAllValue": { "alias": "p-checkboxAllValue"; "required": false; }; "selectedOptions": { "alias": "p-selected-options"; "required": false; }; "selectedOption": { "alias": "p-selected-option"; "required": false; }; "fieldValue": { "alias": "p-field-value"; "required": false; }; "fieldLabel": { "alias": "p-field-label"; "required": false; }; "literalSearch": { "alias": "p-literal-search"; "required": false; }; "fieldValueSearch": { "alias": "p-field-value-search"; "required": false; }; "hideSearch": { "alias": "p-hide-search"; "required": false; }; "hideSelectAll": { "alias": "p-hide-select-all"; "required": false; }; "multiselectTemplate": { "alias": "p-multiselect-template"; "required": false; }; "template": { "alias": "p-template"; "required": false; }; "placeholderSearch": { "alias": "p-placeholder-search"; "required": false; }; "searchValue": { "alias": "p-search-value"; "required": false; }; "isServerSearching": { "alias": "p-is-searching"; "required": false; }; "infiniteLoading": { "alias": "p-infinite-loading"; "required": false; }; "infiniteScroll": { "alias": "p-infinite-scroll"; "required": false; }; "cache": { "alias": "p-cache"; "required": false; }; "infiniteScrollDistance": { "alias": "p-infinite-scroll-distance"; "required": false; }; "filterMode": { "alias": "p-filter-mode"; "required": false; }; "isFiltering": { "alias": "p-filtering"; "required": false; }; "shouldMarkLetters": { "alias": "p-should-mark-letter"; "required": false; }; "compareCache": { "alias": "p-compare-cache"; "required": false; }; "comboService": { "alias": "p-combo-service"; "required": false; }; }, { "selectItem": "p-select-item"; "closeEvent": "p-close"; "change": "p-change"; "selectCombo": "p-selectcombo-item"; "changeAll": "p-change-all"; "UpdateInfiniteScroll": "p-update-infinite-scroll"; "changeSearch": "p-change-search"; "activatedTab": "p-activated-tabs"; "clickTab": "p-click-tabs"; "changeStateTabs": "p-change-state-tabs"; }, never, never, false, never>;
    static ngAcceptInputType_visible: any;
    static ngAcceptInputType_isTabs: any;
    static ngAcceptInputType_isServerSearching: any;
    static ngAcceptInputType_infiniteLoading: any;
    static ngAcceptInputType_infiniteScroll: any;
    static ngAcceptInputType_cache: any;
}
