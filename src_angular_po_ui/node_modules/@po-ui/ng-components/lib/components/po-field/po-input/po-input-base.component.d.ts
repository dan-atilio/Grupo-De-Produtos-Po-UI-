import { ChangeDetectorRef, EventEmitter, TemplateRef } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}".
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: Só é possível realizar alterações ao adicionar a classe `.po-input`
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--text-color-placeholder`             | Cor do texto placeholder                              | `var(--color-neutral-light-30)`                 |
 * | `--color`                              | Cor pincipal do input                                 | `var(--color-neutral-dark-70)`                  |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                 |
 * | `--padding`                            | Preenchimento                                         |  `0 0.5rem`                                     |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                  |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-dark)`                    |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                |
 * | **Focused**                            |                                                       |                                                 |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                   |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-light-30)`                 |
 * | `--background-disabled`                | Cor de background no estado disabled                  | `var(--color-neutral-light-20)`                 |
 * | `--text-color-disabled`                | Cor do texto no estado disabled                       | `var(--color-neutral-dark-70)`                  |
 *
 * <br>
 */
export declare abstract class PoInputBaseComponent implements ControlValueAccessor, Validator {
    private cd?;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-input p-icon="po-icon-user" p-label="PO input"></po-input>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-input p-icon="fa fa-podcast" p-label="PO input"></po-input>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-input [p-icon]="template" p-label="input template ionic"></po-input>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    icon?: string | TemplateRef<void>;
    /**
     * @optional
     *
     * @description
     *
     * Sempre emite as alterações do model mesmo quando o valor atual for igual ao valor anterior.
     *
     * @default `false`
     */
    emitAllChanges: boolean;
    /** Rótulo do campo. */
    label?: string;
    /** Texto de apoio do campo. */
    help?: string;
    /** Nome e identificador do campo. */
    name: string;
    /**
     * @description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     */
    errorPattern?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @description
     *
     * Converte o conteúdo do campo em maiúsulo automaticamente.
     *
     */
    upperCase: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao sair do campo.
     */
    blur: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao entrar do campo.
     */
    enter: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor e deixar o campo.
     */
    change: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do model.
     */
    changeModel: EventEmitter<any>;
    type: string;
    onChangePropagate: any;
    objMask: any;
    modelLastUpdate: any;
    protected onTouched: any;
    protected passedWriteValue: boolean;
    protected validatorChange: any;
    private _maxlength?;
    private _minlength?;
    private _noAutocomplete?;
    private _placeholder?;
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * > No componente `po-password` será definido como `new-password`.
     *
     * @default `false`
     */
    set noAutocomplete(value: boolean);
    get noAutocomplete(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value: string);
    get placeholder(): string;
    /**
     * @description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * @default `false`
     */
    disabled?: boolean;
    set setDisabled(disabled: string);
    /** Indica que o campo será somente leitura. */
    readonly?: boolean;
    set setReadonly(readonly: string);
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    required?: boolean;
    set setRequired(required: string);
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired: boolean;
    /** Se verdadeiro, o campo receberá um botão para ser limpo. */
    clean?: boolean;
    set setClean(clean: string);
    /**
     * @description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(p-mask)` será automaticamente validado por ela, porém
     * é possível definir um p-pattern para substituir a validação da máscara.
     */
    pattern?: string;
    set setPattern(pattern: string);
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(value: number);
    get maxlength(): number;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(value: number);
    get minlength(): number;
    /**
     * @description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade p-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     */
    mask?: string;
    set setMask(mask: string);
    /**
     * @description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * @default `false`
     */
    maskFormatModel?: boolean;
    set setMaskFormatModel(maskFormatModel: string);
    constructor(cd?: ChangeDetectorRef);
    callOnChange(value: any): void;
    callUpdateModelWithTimeout(value: any): void;
    controlChangeModelEmitter(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    updateModel(value: any): void;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    protected validateModel(): void;
    private validatePatternOnWriteValue;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoNomeDoComponenteComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoNomeDoComponenteComponent, { static: true }) nomeDoComponente: PoNomeDoComponenteComponent;
     *
     * focusComponent() {
     *   this.nomeDoComponente.focus();
     * }
     * ```
     */
    abstract focus(): void;
    abstract writeValueModel(value: any): void;
    abstract extraValidation(c: AbstractControl): {
        [key: string]: any;
    };
    abstract getScreenValue(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoInputBaseComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PoInputBaseComponent, never, never, { "autoFocus": { "alias": "p-auto-focus"; "required": false; }; "icon": { "alias": "p-icon"; "required": false; }; "emitAllChanges": { "alias": "p-emit-all-changes"; "required": false; }; "label": { "alias": "p-label"; "required": false; }; "help": { "alias": "p-help"; "required": false; }; "name": { "alias": "name"; "required": false; }; "errorPattern": { "alias": "p-error-pattern"; "required": false; }; "optional": { "alias": "p-optional"; "required": false; }; "upperCase": { "alias": "p-upper-case"; "required": false; }; "noAutocomplete": { "alias": "p-no-autocomplete"; "required": false; }; "placeholder": { "alias": "p-placeholder"; "required": false; }; "setDisabled": { "alias": "p-disabled"; "required": false; }; "setReadonly": { "alias": "p-readonly"; "required": false; }; "setRequired": { "alias": "p-required"; "required": false; }; "showRequired": { "alias": "p-show-required"; "required": false; }; "setClean": { "alias": "p-clean"; "required": false; }; "setPattern": { "alias": "p-pattern"; "required": false; }; "maxlength": { "alias": "p-maxlength"; "required": false; }; "minlength": { "alias": "p-minlength"; "required": false; }; "setMask": { "alias": "p-mask"; "required": false; }; "setMaskFormatModel": { "alias": "p-mask-format-model"; "required": false; }; }, { "blur": "p-blur"; "enter": "p-enter"; "change": "p-change"; "changeModel": "p-change-model"; }, never, never, false, never>;
    static ngAcceptInputType_autoFocus: any;
    static ngAcceptInputType_emitAllChanges: any;
    static ngAcceptInputType_upperCase: any;
}
