import { ElementRef, EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { PoRichTextService } from '../po-rich-text.service';
import * as i0 from "@angular/core";
export declare class PoRichTextBodyComponent implements OnInit, OnDestroy {
    private richTextService;
    bodyElement: ElementRef;
    height?: string;
    label: string;
    modelValue?: string;
    placeholder?: string;
    readonly?: string;
    change: EventEmitter<any>;
    commands: EventEmitter<any>;
    selectedLink: EventEmitter<any>;
    shortcutCommand: EventEmitter<any>;
    value: EventEmitter<any>;
    blur: EventEmitter<any>;
    private isLinkEditing;
    private linkElement;
    private timeoutChange;
    private valueBeforeChange;
    private modelSubscription;
    constructor(richTextService: PoRichTextService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    executeCommand(command: string | {
        command: any;
        value: string | any;
    }): void;
    linkEditing(event: any): void;
    onBlur(): void;
    focus(): void;
    onClick(): void;
    onFocus(): void;
    onKeyDown(event: any): void;
    onKeyUp(event: any): void;
    onPaste(): void;
    update(): void;
    private addClickListenerOnAnchorElements;
    private emitSelectionCommands;
    private getTextSelection;
    private handleCommandLink;
    private insertHtmlLinkElement;
    private isCursorPositionedInALink;
    private isParentNodeAnchor;
    private makeLinkTag;
    private onAnchorClick;
    private removeBrElement;
    private rgbToHex;
    private toggleCursorOnLink;
    private updateModel;
    private updateValueWithModelValue;
    private verifyCursorPositionInFirefoxIEEdge;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoRichTextBodyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoRichTextBodyComponent, "po-rich-text-body", never, { "height": { "alias": "p-height"; "required": false; }; "label": { "alias": "p-label"; "required": false; }; "modelValue": { "alias": "p-model-value"; "required": false; }; "placeholder": { "alias": "p-placeholder"; "required": false; }; "readonly": { "alias": "p-readonly"; "required": false; }; }, { "change": "p-change"; "commands": "p-commands"; "selectedLink": "p-selected-link"; "shortcutCommand": "p-shortcut-command"; "value": "p-value"; "blur": "p-blur"; }, never, never, false, never>;
}
