import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado/mixed e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado/mixed.
 *
 * **Acessibilidade tratada no componente:**
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A cor não deve ser o único meio para diferenciar o componente do seu estado marcado e desmarcado. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                                    | Valor Padrão                                    |
 * |----------------------------------------|--------------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                              |                                                 |
 * | `--border-color`                       | Cor da borda                                                 | `var(--color-neutral-dark-70)`                  |
 * | `--color-unchecked`                    | Cor quando não selecionado                                   | `var(--color-neutral-light-00)`                 |
 * | `--color-checked`                      | Cor quando selecionado                                       | `var(--color-action-default)`                   |
 * | **Hover**                              |                                                              |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                                | `var(--color-action-hover)`                     |
 * | `--shadow-color-hover`                 | Cor da sombra no estado hover                                | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                              |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                            | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                              |                                                 |
 * | `--color-unchecked-disabled` &nbsp;    | Cor pricipal quando não selecionado no estado disabled&nbsp; | `var(--color-action-disabled)`                  |
 * | `--color-checked-disabled` &nbsp;      | Cor pricipal quando selecionado no estado disabled           | `var(--color-neutral-dark-70)`                  |
 *
 */
export declare abstract class PoCheckboxBaseComponent implements ControlValueAccessor {
    /** Define o nome do *checkbox*. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Texto de exibição do *checkbox*. */
    label?: string;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado quando o valor do *checkbox* for alterado.
     */
    change: EventEmitter<any>;
    checkboxValue: boolean | null | string;
    checkBoxRequired: boolean;
    disabladTabindex: boolean;
    id: string;
    propagateChange: any;
    onTouched: any;
    private _disabled?;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    private _size?;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *checkbox*
     *
     * Valores válidos:
     * - `medium`: o `po-checkbox` fica do tamanho padrão, com 24px de altura.;
     * - `large`: o `po-checkbox` fica maior, com 32px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value: string);
    get size(): string;
    changeValue(): void;
    checkOption(value: boolean | null | string): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected abstract changeModelValue(value: boolean | null): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoCheckboxBaseComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PoCheckboxBaseComponent, never, never, { "name": { "alias": "name"; "required": false; }; "autoFocus": { "alias": "p-auto-focus"; "required": false; }; "label": { "alias": "p-label"; "required": false; }; "checkboxValue": { "alias": "p-checkboxValue"; "required": false; }; "checkBoxRequired": { "alias": "p-required"; "required": false; }; "disabladTabindex": { "alias": "p-disabled-tabindex"; "required": false; }; "disabled": { "alias": "p-disabled"; "required": false; }; "size": { "alias": "p-size"; "required": false; }; }, { "change": "p-change"; }, never, never, false, never>;
    static ngAcceptInputType_autoFocus: any;
    static ngAcceptInputType_checkBoxRequired: any;
    static ngAcceptInputType_disabladTabindex: any;
}
