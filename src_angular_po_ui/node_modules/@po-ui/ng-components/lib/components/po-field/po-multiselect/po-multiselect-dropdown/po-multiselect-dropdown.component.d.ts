import { ChangeDetectorRef, ElementRef, EventEmitter, TemplateRef } from '@angular/core';
import { PoMultiselectLiterals } from '../../index';
import { PoMultiselectOption } from '../po-multiselect-option.interface';
import { PoListBoxComponent } from './../../../po-listbox/po-listbox.component';
import * as i0 from "@angular/core";
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export declare class PoMultiselectDropdownComponent {
    private cd;
    /** Propriedade que indica se deve exibir o loading. */
    isServerSearching?: boolean;
    /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
    hideSearch?: boolean;
    /** Propriedade que que recebe as literais definidas no componente `po-multiselect`. */
    literals?: PoMultiselectLiterals;
    /** Placeholder do campo de pesquisa. */
    placeholderSearch: string;
    /** Propriedade que recebe a lista de opções selecionadas. */
    selectedOptions: Array<any>;
    /** Propriedade que recebe a lista com todas as opções. */
    options: Array<PoMultiselectOption | any>;
    /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
    visibleOptions: Array<PoMultiselectOption | any>;
    /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
    hideSelectAll?: boolean;
    fieldValue: string;
    fieldLabel: string;
    multiselectTemplate: TemplateRef<any> | any;
    /** Evento disparado a cada tecla digitada na pesquisa. */
    changeSearch: EventEmitter<any>;
    /** Evento disparado a cada alteração na lista das opções selecionadas. */
    change: EventEmitter<any>;
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     */
    closeDropdown: EventEmitter<any>;
    container: ElementRef;
    divElement: ElementRef;
    listbox: PoListBoxComponent;
    scrollTop: number;
    show: boolean;
    constructor(cd: ChangeDetectorRef);
    get hasOptions(): boolean;
    scrollTo(index: any): void;
    isSelectedItem(option: PoMultiselectOption): boolean;
    clickItem(check: any, options?: any): void;
    onClickSelectAll(): void;
    updateSelectedValues(checked: any, option: any): void;
    everyVisibleOptionsSelected(selectedValues: any): boolean;
    someVisibleOptionsSelected(selectedValues: any): boolean;
    getStateSelectAll(): boolean;
    callChangeSearch(event: any): void;
    controlVisibility(toOpen: any): void;
    private uniqueSelectedOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoMultiselectDropdownComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoMultiselectDropdownComponent, "po-multiselect-dropdown", never, { "isServerSearching": { "alias": "p-searching"; "required": false; }; "hideSearch": { "alias": "p-hide-search"; "required": false; }; "literals": { "alias": "p-literals"; "required": false; }; "placeholderSearch": { "alias": "p-placeholder-search"; "required": false; }; "selectedOptions": { "alias": "p-selected-options"; "required": false; }; "options": { "alias": "p-options"; "required": false; }; "visibleOptions": { "alias": "p-visible-options"; "required": false; }; "hideSelectAll": { "alias": "p-hide-select-all"; "required": false; }; "fieldValue": { "alias": "p-field-value"; "required": false; }; "fieldLabel": { "alias": "p-field-label"; "required": false; }; "multiselectTemplate": { "alias": "p-multiselect-template"; "required": false; }; }, { "changeSearch": "p-change-search"; "change": "p-change"; "closeDropdown": "p-close-dropdown"; }, never, never, false, never>;
}
