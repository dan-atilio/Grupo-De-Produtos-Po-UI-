import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { PoChartPointsCoordinates } from '../../../interfaces/po-chart-points-coordinates.interface';
import * as i0 from "@angular/core";
export declare class PoChartSeriesPointComponent {
    private renderer;
    private elementRef;
    animate: boolean;
    isActive?: boolean;
    chartLine: boolean;
    relativeTo: string;
    pointClick: EventEmitter<any>;
    pointHover: EventEmitter<any>;
    coordinates$: Observable<Array<PoChartPointsCoordinates>>;
    radius: number;
    strokeColor: string;
    private _color;
    private _coordinates;
    private animationState;
    set color(value: string);
    get color(): string;
    set coordinates(value: Array<PoChartPointsCoordinates>);
    get coordinates(): Array<PoChartPointsCoordinates>;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    trackBy(index: any): any;
    onClick(point: PoChartPointsCoordinates): void;
    onMouseEnter(event: any, point: PoChartPointsCoordinates): void;
    onMouseLeave(event: any): void;
    private displayPointsWithDelay;
    private setPointAttribute;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoChartSeriesPointComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoChartSeriesPointComponent, "[po-chart-series-point]", never, { "animate": { "alias": "p-animate"; "required": false; }; "isActive": { "alias": "p-is-active"; "required": false; }; "chartLine": { "alias": "p-chart-line"; "required": false; }; "relativeTo": { "alias": "p-relative-to"; "required": false; }; "color": { "alias": "p-color"; "required": false; }; "coordinates": { "alias": "p-coordinates"; "required": false; }; }, { "pointClick": "p-point-click"; "pointHover": "p-point-hover"; }, never, never, false, never>;
    static ngAcceptInputType_isActive: any;
    static ngAcceptInputType_chartLine: any;
}
