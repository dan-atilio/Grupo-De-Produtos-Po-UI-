import * as i0 from '@angular/core';
import { Directive, Input, Component, ChangeDetectionStrategy, NgModule, Injectable, TemplateRef, EventEmitter, Output, ElementRef, HostListener, ViewChild, ViewChildren, ContentChildren, HostBinding, forwardRef, ViewContainerRef, inject, ContentChild, Pipe, Inject, Injector, InjectionToken, APP_INITIALIZER } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule, DOCUMENT, DecimalPipe, NgOptimizedImage, CurrencyPipe, DatePipe, TitleCasePipe } from '@angular/common';
import * as i2$3 from '@angular/animations';
import { style, animate, transition, trigger, animateChild, query, group, state, keyframes } from '@angular/animations';
import { Subject, filter, debounceTime, fromEvent, timer, from, of, Subscription, ReplaySubject, throwError, map as map$1, catchError as catchError$1, Observable } from 'rxjs';
import * as i2 from '@angular/router';
import { RouterModule, NavigationEnd, NavigationCancel } from '@angular/router';
import * as i5 from '@angular/cdk/listbox';
import { CdkListboxModule } from '@angular/cdk/listbox';
import * as i1$1 from '@angular/platform-browser';
import * as i2$1 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule, NG_VALIDATORS, NgControl, ControlContainer, NgForm } from '@angular/forms';
import * as i1$2 from '@angular/common/http';
import { HttpHeaders, HttpEventType, HttpResponse, HttpRequest, HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';
import { debounceTime as debounceTime$1, mapTo, concatMap, scan, tap, switchMap, delay, take, takeWhile, map, filter as filter$1, distinctUntilChanged, catchError, finalize } from 'rxjs/operators';
import * as i5$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i2$2 from '@angular/cdk/scrolling';
import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';
import * as i3 from '@angular/cdk/drag-drop';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';

/**
 * @usedBy PoDividerComponent
 *
 * @description
 *
 * Enum para definição da espessura da linha.
 */
var PoDividerSize;
(function (PoDividerSize) {
    /** A espessura da linha fica com 1px. */
    PoDividerSize["small"] = "small";
    /** A espessura da linha fica com 2px. */
    PoDividerSize["medium"] = "medium";
    /** A espessura da linha fica com 4px. */
    PoDividerSize["large"] = "large";
})(PoDividerSize || (PoDividerSize = {}));

/**
 * @description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--color`                              | Cor principla do divider&nbsp;                        | `var(--color-neutral-mid-40)`                   |
 * | `--stroke-linecap`                     | Extremidade da linha&nbsp;                            | `round`                                         |
 *
 */
class PoDividerBaseComponent {
    coordinateX1;
    coordinateX2;
    _borderWidth = PoDividerSize.small;
    /** Valor do rótulo a ser exibido. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define a espessura da linha.
     *
     * Valores válidos:
     * - small
     * - medium
     * - large
     *
     * @default `small`
     */
    set borderWidth(value) {
        this._borderWidth = PoDividerSize[value] ? PoDividerSize[value] : PoDividerSize.small;
        this.getCoordinates();
    }
    get borderWidth() {
        return this._borderWidth;
    }
    ngOnInit() {
        this.getCoordinates();
    }
    getCoordinates() {
        if (this.borderWidth === PoDividerSize.small) {
            this.coordinateX1 = '0.1%';
            this.coordinateX2 = '99.9%';
        }
        else if (this.borderWidth === PoDividerSize.medium) {
            this.coordinateX1 = '0.2%';
            this.coordinateX2 = '99.8%';
        }
        else {
            this.coordinateX1 = '0.3%';
            this.coordinateX2 = '99.7%';
        }
    }
    static ɵfac = function PoDividerBaseComponent_Factory(t) { return new (t || PoDividerBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDividerBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], borderWidth: [i0.ɵɵInputFlags.None, "p-border-width", "borderWidth"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], borderWidth: [{
            type: Input,
            args: ['p-border-width']
        }] }); })();

function PoDividerComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.label);
} }
/**
 * @docsExtends PoDividerBaseComponent
 *
 * @example
 *
 * <example name="po-divider-basic" title="PO Divider Basic" >
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.html"> </file>
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-labs" title="PO Divider Labs" >
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.html"> </file>
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-user-detail" title="PO Divider - User Detail" >
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.html"> </file>
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.ts"> </file>
 * </example>
 */
class PoDividerComponent extends PoDividerBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoDividerComponent_BaseFactory; return function PoDividerComponent_Factory(t) { return (ɵPoDividerComponent_BaseFactory || (ɵPoDividerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoDividerComponent)))(t || PoDividerComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDividerComponent, selectors: [["po-divider"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [[1, "po-divider"], ["class", "po-divider-label", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg"], ["y1", "50%", "y2", "50%"], [1, "po-divider-label"]], template: function PoDividerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoDividerComponent_div_1_Template, 2, 1, "div", 1);
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(2, "svg", 2);
            i0.ɵɵelement(3, "line", 3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵattribute("p-size", ctx.borderWidth);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵattribute("x1", ctx.coordinateX1)("x2", ctx.coordinateX2);
        } }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerComponent, [{
        type: Component,
        args: [{ selector: 'po-divider', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-divider\" [attr.p-size]=\"borderWidth\">\n  <div *ngIf=\"label\" class=\"po-divider-label\">{{ label }}</div>\n  <svg xmlns=\"http://www.w3.org/2000/svg\">\n    <line [attr.x1]=\"coordinateX1\" y1=\"50%\" [attr.x2]=\"coordinateX2\" y2=\"50%\" />\n  </svg>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDividerComponent, { className: "PoDividerComponent", filePath: "lib/components/po-divider/po-divider.component.ts", lineNumber: 30 }); })();

/**
 * @description
 *
 * Módulo do componente po-divider.
 */
class PoDividerModule {
    static ɵfac = function PoDividerModule_Factory(t) { return new (t || PoDividerModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDividerModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PoDividerComponent],
                exports: [PoDividerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDividerModule, { declarations: [PoDividerComponent], imports: [CommonModule], exports: [PoDividerComponent] }); })();

class PoIconService {
    get icons() {
        return {
            ICON_A11Y_ELDERLY: 'po-icon po-icon-a11y-elderly',
            ICON_A11Y_PREGNANT: 'po-icon po-icon-a11y-pregnant',
            ICON_A11Y_WHEELCHAIR: 'po-icon po-icon-a11y-wheelchair',
            ICON_AGRO_BUSINESS: 'po-icon po-icon-agro-business',
            ICON_ALIGN_CENTER: 'po-icon po-icon-align-center',
            ICON_ALIGN_JUSTIFY: 'po-icon po-icon-align-justify',
            ICON_ALIGN_LEFT: 'po-icon po-icon-align-left',
            ICON_ALIGN_RIGHT: 'po-icon po-icon-align-right',
            ICON_ANCHOR: 'po-icon po-icon-anchor',
            ICON_ARCHIVE: 'po-icon po-icon-archive',
            ICON_ARROW_DOWN: 'po-icon po-icon-arrow-down',
            ICON_ARROW_LEFT: 'po-icon po-icon-arrow-left',
            ICON_ARROW_RIGHT: 'po-icon po-icon-arrow-right',
            ICON_ARROW_UP: 'po-icon po-icon-arrow-up',
            ICON_ATTACH: 'po-icon po-icon-attach',
            ICON_AUTOMATIC_BARRIER: 'po-icon po-icon-automatic-barrier',
            ICON_BALANCE: 'po-icon po-icon-balance',
            ICON_BALANCE_WEIGHT: 'po-icon po-icon-balance-weight',
            ICON_BAR_CODE: 'po-icon po-icon-bar-code',
            ICON_BASKET: 'po-icon po-icon-basket',
            ICON_BLUETOOTH: 'po-icon po-icon-bluetooth',
            ICON_BOOK: 'po-icon po-icon-book',
            ICON_CALCULATOR: 'po-icon po-icon-calculator',
            ICON_CALENDAR: 'po-icon po-icon-calendar',
            ICON_CALENDAR_OK: 'po-icon po-icon-calendar-ok',
            ICON_CALENDAR_SETTINGS: 'po-icon po-icon-calendar-settings',
            ICON_CAMERA: 'po-icon po-icon-camera',
            ICON_CART: 'po-icon po-icon-cart',
            ICON_CHANGE: 'po-icon po-icon-change',
            ICON_CHART_AREA: 'po-icon po-icon-chart-area',
            ICON_CHART_COLUMNS: 'po-icon po-icon-chart-columns',
            ICON_CHAT: 'po-icon po-icon-chat',
            ICON_CLEAR_CONTENT: 'po-icon po-icon-clear-content',
            ICON_CLIPBOARD: 'po-icon po-icon-clipboard',
            ICON_CLOCK: 'po-icon po-icon-clock',
            ICON_CLOSE: 'po-icon po-icon-close',
            ICON_COMPANY: 'po-icon po-icon-company',
            ICON_CONSTRUCTION: 'po-icon po-icon-construction',
            ICON_COPY: 'po-icon po-icon-copy',
            ICON_COTTON: 'po-icon po-icon-cotton',
            ICON_CREDIT_PAYMENT: 'po-icon po-icon-credit-payment',
            ICON_CUT: 'po-icon po-icon-cut',
            ICON_DATABASE: 'po-icon po-icon-database',
            ICON_DEBIT_PAYMENT: 'po-icon po-icon-debit-payment',
            ICON_DELETE: 'po-icon po-icon-delete',
            ICON_DEVICE_DESKTOP: 'po-icon po-icon-device-desktop',
            ICON_DEVICE_NOTEBOOK: 'po-icon po-icon-device-notebook',
            ICON_DEVICE_SMARTPHONE: 'po-icon po-icon-device-smartphone',
            ICON_DEVICE_TABLET: 'po-icon po-icon-device-tablet',
            ICON_DOC_XLS: 'po-icon po-icon-doc-xls',
            ICON_DOCUMENT: 'po-icon po-icon-document',
            ICON_DOCUMENT_DOUBLE: 'po-icon po-icon-document-double',
            ICON_DOCUMENT_FILLED: 'po-icon po-icon-document-filled',
            ICON_DOWNLOAD: 'po-icon po-icon-download',
            ICON_EDIT: 'po-icon po-icon-edit',
            ICON_EXAM: 'po-icon po-icon-exam',
            ICON_EXCLAMATION: 'po-icon po-icon-exclamation',
            ICON_EXIT: 'po-icon po-icon-exit',
            ICON_EXPORT: 'po-icon po-icon-export',
            ICON_EYE: 'po-icon po-icon-eye',
            ICON_EYE_OFF: 'po-icon po-icon-eye-off',
            ICON_FILTER: 'po-icon po-icon-filter',
            ICON_FINANCE: 'po-icon po-icon-finance',
            ICON_FINANCE_BITCOIN: 'po-icon po-icon-finance-bitcoin',
            ICON_FINANCE_SECURE: 'po-icon po-icon-finance-secure',
            ICON_FIRST_PAGE: 'po-icon po-icon-first-page',
            ICON_FOLDER: 'po-icon po-icon-folder',
            ICON_FOOD: 'po-icon po-icon-food',
            ICON_FOOD_MENU: 'po-icon po-icon-food-menu',
            ICON_GAS: 'po-icon po-icon-gas',
            ICON_GIFT: 'po-icon po-icon-gift',
            ICON_GRID: 'po-icon po-icon-grid',
            ICON_HANDSHAKE: 'po-icon po-icon-handshake',
            ICON_HDD: 'po-icon po-icon-hdd',
            ICON_HELP: 'po-icon po-icon-help',
            ICON_HISTORY: 'po-icon po-icon-history',
            ICON_HOME: 'po-icon po-icon-home',
            ICON_IMAGE_ALIGN_INLINE: 'po-icon po-icon-image-align-inline',
            ICON_IMAGE_ALIGN_LEFT: 'po-icon po-icon-image-align-left',
            ICON_IMAGE_ALIGN_RIGHT: 'po-icon po-icon-image-align-right',
            ICON_INFO: 'po-icon po-icon-info',
            ICON_INJECTOR: 'po-icon po-icon-injector',
            ICON_KEYBOARD: 'po-icon po-icon-keyboard',
            ICON_LAST_PAGE: 'po-icon po-icon-last-page',
            ICON_LAYERS: 'po-icon po-icon-layers',
            ICON_LIGHT: 'po-icon po-icon-light',
            ICON_LIKE: 'po-icon po-icon-like',
            ICON_LINK: 'po-icon po-icon-link',
            ICON_LIST: 'po-icon po-icon-list',
            ICON_LOCK: 'po-icon po-icon-lock',
            ICON_LOCK_OFF: 'po-icon po-icon-lock-off',
            ICON_MAIL: 'po-icon po-icon-mail',
            ICON_MANUFACTURE: 'po-icon po-icon-manufacture',
            ICON_MAP: 'po-icon po-icon-map',
            ICON_MENU: 'po-icon po-icon-menu',
            ICON_MENU_CLOSE: 'po-icon po-icon-menu-close',
            ICON_MENU_OPEN: 'po-icon po-icon-menu-open',
            ICON_MESSAGE: 'po-icon po-icon-message',
            ICON_MICROPHONE: 'po-icon po-icon-microphone',
            ICON_MINUS: 'po-icon po-icon-minus',
            ICON_MINUS_CIRCLE: 'po-icon po-icon-minus-circle',
            ICON_MONEY: 'po-icon po-icon-money',
            ICON_MORE: 'po-icon po-icon-more',
            ICON_MORE_VERT: 'po-icon po-icon-more-vert',
            ICON_NEWS: 'po-icon po-icon-news',
            ICON_NO_SIGNAL: 'po-icon po-icon-no-signal',
            ICON_NOTIFICATION: 'po-icon po-icon-notification',
            ICON_OIL: 'po-icon po-icon-oil',
            ICON_OIL_ANALYSIS: 'po-icon po-icon-oil-analysis',
            ICON_OK: 'po-icon po-icon-ok',
            ICON_PALLET_FULL: 'po-icon po-icon-pallet-full',
            ICON_PALLET_PARTIAL: 'po-icon po-icon-pallet-partial',
            ICON_PARAMETERS: 'po-icon po-icon-parameters',
            ICON_PASTE: 'po-icon po-icon-paste',
            ICON_PAYMENT: 'po-icon po-icon-payment',
            ICON_PDF: 'po-icon po-icon-pdf',
            ICON_PICKER: 'po-icon po-icon-picker',
            ICON_PICTURE: 'po-icon po-icon-picture',
            ICON_PIN: 'po-icon po-icon-pin',
            ICON_PIX_LOGO: 'po-icon po-icon-pix-logo',
            ICON_PLUS: 'po-icon po-icon-plus',
            ICON_PLUS_CIRCLE: 'po-icon po-icon-plus-circle',
            ICON_PRINT: 'po-icon po-icon-print',
            ICON_PUSHCART: 'po-icon po-icon-pushcart',
            ICON_QR_CODE: 'po-icon po-icon-qr-code',
            ICON_REFRESH: 'po-icon po-icon-refresh',
            ICON_SALE: 'po-icon po-icon-sale',
            ICON_SCREEN_FULL: 'po-icon po-icon-screen-full',
            ICON_SCREEN_MINIMIZE: 'po-icon po-icon-screen-minimize',
            ICON_SEARCH: 'po-icon po-icon-search',
            ICON_SECURITY_GUARD: 'po-icon po-icon-security-guard',
            ICON_SERVER: 'po-icon po-icon-server',
            ICON_SETTINGS: 'po-icon po-icon-settings',
            ICON_SHARE: 'po-icon po-icon-share',
            ICON_SIGNAL: 'po-icon po-icon-signal',
            ICON_SMS: 'po-icon po-icon-sms',
            ICON_SOCIAL_GITHUB: 'po-icon po-icon-social-github',
            ICON_SOCIAL_INSTAGRAM: 'po-icon po-icon-social-instagram',
            ICON_SOCIAL_TWITTER: 'po-icon po-icon-social-twitter',
            ICON_SOCIAL_WHATSAPP: 'po-icon po-icon-social-whatsapp',
            ICON_SORT: 'po-icon po-icon-sort',
            ICON_SORT_ASC: 'po-icon po-icon-sort-asc',
            ICON_SORT_ASCENDING: 'po-icon po-icon-sort-ascending',
            ICON_SORT_DESC: 'po-icon po-icon-sort-desc',
            ICON_SORT_DESCENDING: 'po-icon po-icon-sort-descending',
            ICON_STAR: 'po-icon po-icon-star',
            ICON_STAR_FILLED: 'po-icon po-icon-star-filled',
            ICON_STAR_HALF: 'po-icon po-icon-star-half',
            ICON_STEERING_WHEEL: 'po-icon po-icon-steering-wheel',
            ICON_STOCK: 'po-icon po-icon-stock',
            ICON_TABLE: 'po-icon po-icon-table',
            ICON_TARGET: 'po-icon po-icon-target',
            ICON_TELEPHONE: 'po-icon po-icon-telephone',
            ICON_TEXT_BOLD: 'po-icon po-icon-text-bold',
            ICON_TEXT_ITALIC: 'po-icon po-icon-text-italic',
            ICON_TEXT_UNDERLINE: 'po-icon po-icon-text-underline',
            ICON_TOUCH: 'po-icon po-icon-touch',
            ICON_TRAVEL: 'po-icon po-icon-travel',
            ICON_TRUCK: 'po-icon po-icon-truck',
            ICON_UPLOAD: 'po-icon po-icon-upload',
            ICON_UPLOAD_CLOUD: 'po-icon po-icon-upload-cloud',
            ICON_USER: 'po-icon po-icon-user',
            ICON_USER_ADD: 'po-icon po-icon-user-add',
            ICON_USER_DELETE: 'po-icon po-icon-user-delete',
            ICON_USERS: 'po-icon po-icon-users',
            ICON_VIDEO_CALL: 'po-icon po-icon-video-call',
            ICON_WAITER: 'po-icon po-icon-waiter',
            ICON_WALLET: 'po-icon po-icon-wallet',
            ICON_WAREHOUSE: 'po-icon po-icon-warehouse',
            ICON_WARNING: 'po-icon po-icon-warning',
            ICON_WEIGHT: 'po-icon po-icon-weight',
            ICON_WORLD: 'po-icon po-icon-world',
            ICON_XML: 'po-icon po-icon-xml',
            ICON_ZOOM_IN: 'po-icon po-icon-zoom-in',
            ICON_ZOOM_OUT: 'po-icon po-icon-zoom-out'
        };
    }
    static ɵfac = function PoIconService_Factory(t) { return new (t || PoIconService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoIconService, factory: PoIconService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

function PoIconComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoIconComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "i", 2);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.class);
} }
const _c0$1J = ["*"];
/**
 * @docsPrivate
 *
 * @usedBy PoButton
 *
 * @description
 *
 * Permite a exibição de ícones.
 */
class PoIconComponent {
    poIconService;
    class;
    _icon;
    constructor(poIconService) {
        this.poIconService = poIconService;
    }
    /**
     * Define o ícone a ser exibido.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    set icon(value) {
        if (typeof value === 'string') {
            this.processIcon(value);
        }
        else if (value instanceof TemplateRef) {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    addClasses(value, iconToken = false) {
        this.class = iconToken
            ? value
            : value.startsWith('po-icon-')
                ? (this.class = `po-icon ${value}`)
                : (this.class = `po-fonts-icon ${value}`);
    }
    getIcon(iconName) {
        return this.poIconService.icons.hasOwnProperty(iconName)
            ? this.poIconService.icons[iconName].startsWith('po-icon ')
                ? this.poIconService.icons[iconName]
                : 'po-fonts-icon ' + this.poIconService.icons[iconName]
            : '';
    }
    processIcon(icon) {
        const iconToken = this.processIconTokens(icon);
        if (iconToken !== '') {
            this.addClasses(iconToken, true);
        }
        else {
            this.addClasses(icon);
        }
    }
    processIconTokens(value) {
        const iconTokens = this.splitIconNames(value);
        let icon = '';
        if (Array.isArray(iconTokens)) {
            iconTokens.map(iconName => {
                icon += this.getIcon(iconName) !== '' ? ' ' + this.getIcon(iconName) : icon !== '' ? ' ' + iconName : iconName;
            });
        }
        else {
            icon = this.getIcon(iconTokens);
        }
        return icon.trim();
    }
    splitIconNames(iconName) {
        return iconName.includes(' ') ? iconName.split(' ') : iconName;
    }
    static ɵfac = function PoIconComponent_Factory(t) { return new (t || PoIconComponent)(i0.ɵɵdirectiveInject(PoIconService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoIconComponent, selectors: [["po-icon"]], inputs: { icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"] }, features: [i0.ɵɵProvidersFeature([PoIconService])], ngContentSelectors: _c0$1J, decls: 3, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["fontTemplate", ""], ["aria-hidden", "true"]], template: function PoIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoIconComponent_ng_container_0_Template, 1, 0, "ng-container", 0)(1, PoIconComponent_ng_template_1_Template, 2, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx.class)("ngIfThen", _r2)("ngIfElse", ctx.icon);
        } }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconComponent, [{
        type: Component,
        args: [{ selector: 'po-icon', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PoIconService], template: "<ng-container *ngIf=\"class; then fontTemplate; else icon\"></ng-container>\n\n<ng-template #fontTemplate>\n  <i [class]=\"class\" aria-hidden=\"true\">\n    <ng-content></ng-content>\n  </i>\n</ng-template>\n" }]
    }], () => [{ type: PoIconService }], { icon: [{
            type: Input,
            args: ['p-icon']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoIconComponent, { className: "PoIconComponent", filePath: "lib/components/po-icon/po-icon.component.ts", lineNumber: 18 }); })();

/**
 * @description
 *
 * Módulo do componente Po-Icon.
 */
class PoIconModule {
    static ɵfac = function PoIconModule_Factory(t) { return new (t || PoIconModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoIconModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PoIconComponent],
                exports: [PoIconComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoIconModule, { declarations: [PoIconComponent], imports: [CommonModule], exports: [PoIconComponent] }); })();

/**
 * @usedBy PoTagComponent
 *
 * @description
 *
 * Define os tipos de orientações disponíveis para o `po-tag`.
 */
var PoTagOrientation;
(function (PoTagOrientation) {
    /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
    PoTagOrientation["Horizontal"] = "horizontal";
    /** Exibe a tag na vertical, ou seja, abaixo do label. */
    PoTagOrientation["Vertical"] = "vertical";
})(PoTagOrientation || (PoTagOrientation = {}));

/**
 * @usedBy PoTagComponent
 *
 * @description
 *
 * Define os tipos disponíveis para o `po-tag`.
 */
var PoTagType;
(function (PoTagType) {
    /** Erro, perigo, problema ou aviso crítico. */
    PoTagType["Danger"] = "danger";
    /** Informativo ou explicativo. */
    PoTagType["Info"] = "info";
    /** Confirmação, resultados positivos ou êxito. */
    PoTagType["Success"] = "success";
    /** Aviso ou advertência. */
    PoTagType["Warning"] = "warning";
    /** De uso geral, quando os tipos Info, Warning, Success e Danger não atendem a necessidade. */
    PoTagType["Neutral"] = "neutral";
})(PoTagType || (PoTagType = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * Define os ícones disponíveis para o `po-tag`.
 */
var PoTagIcon;
(function (PoTagIcon) {
    /** Ícone fechar. */
    PoTagIcon["Danger"] = "po-icon-close";
    /** Ícone de informação. */
    PoTagIcon["Info"] = "po-icon-info";
    /** Ícone que representa confirmação. */
    PoTagIcon["Success"] = "po-icon-ok";
    /** Ícone com ponto de exclamação. */
    PoTagIcon["Warning"] = "po-icon-warning";
})(PoTagIcon || (PoTagIcon = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * Enum que contém paleta de 12 cores.
 */
var PoColorPaletteEnum;
(function (PoColorPaletteEnum) {
    /** #0c9abe */
    PoColorPaletteEnum["Color01"] = "color-01";
    /** #2c85c8 */
    PoColorPaletteEnum["Color02"] = "color-02";
    /** #2c43c8 */
    PoColorPaletteEnum["Color03"] = "color-03";
    /** #5843c8 */
    PoColorPaletteEnum["Color04"] = "color-04";
    /** #ab43c8 */
    PoColorPaletteEnum["Color05"] = "color-05";
    /** #ab4391 */
    PoColorPaletteEnum["Color06"] = "color-06";
    /** #c64840 */
    PoColorPaletteEnum["Color07"] = "color-07";
    /** #ea9b3e */
    PoColorPaletteEnum["Color08"] = "color-08";
    /** #abc249 */
    PoColorPaletteEnum["Color09"] = "color-09";
    /** #56b96b */
    PoColorPaletteEnum["Color10"] = "color-10";
    /** #00b28e */
    PoColorPaletteEnum["Color11"] = "color-11";
    /** #06a6a5 */
    PoColorPaletteEnum["Color12"] = "color-12";
})(PoColorPaletteEnum || (PoColorPaletteEnum = {}));

/**
 * @description
 *
 * <a id="poLanguageDefault"></a>
 *
 *
 * A constante poLanguageDefault possui as linguagens de suporte padrão do Po-UI
 *
 * > Português, Inglês, Espanhol e Russo.
 *
 * @usedBy PoI18nModule
 */
const poLanguageDefault = [
    { description: 'English', language: 'en' },
    { description: 'Español', language: 'es' },
    { description: 'Português', language: 'pt' },
    { description: 'Pусский', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocales"></a>
 *
 *
 * A constante poLocales possui somente os códigos das linguagem padrão
 *
 * @usedBy PoI18nModule
 */
const poLocales = poLanguageDefault.map(language => language.language);
/**
 * @description
 *
 * <a id="poLocaleDefault"></a>
 *
 *
 * A constante poLocaleDefault possui o código da linguagem padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleDefault = 'pt';
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleDecimalSeparatorList = [
    { separator: '.', language: 'en' },
    { separator: ',', language: 'es' },
    { separator: ',', language: 'pt' },
    { separator: ',', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleThousandSeparatorList = [
    { separator: ',', language: 'en' },
    { separator: '.', language: 'es' },
    { separator: '.', language: 'pt' },
    { separator: ' ', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocaleDateSeparatorList"></a>
 *
 *
 * A constante poLocaleDateSeparatorList possui o separador de data por locale de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleDateSeparatorList = [
    { separator: '/', locale: 'en' },
    { separator: '/', locale: 'es' },
    { separator: '/', locale: 'pt' },
    { separator: '.', locale: 'ru' }
];

/**
 * Converte e formata os bytes em formato mais legível para o usuário.
 *
 * Por exemplo:
 * - 31457280 em 30 MB.
 * - 21474836480 em 20 GB.
 * - 12.5666666 em 12.57 Bytes (duas casas decimais).
 *
 * @param bytes {number} Valor em bytes
 * @param decimals {number} Quantidade de casas decimais que terá após a conversão.
 */
function formatBytes(bytes, decimals = 2) {
    if (!bytes) {
        return undefined;
    }
    const multiplier = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    const result = Math.floor(Math.log(bytes) / Math.log(multiplier));
    decimals = decimals < 0 ? 0 : decimals;
    return `${parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals))} ${sizes[result]}`;
}
/**
 * Retorna o idioma atual do navegador
 */
function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    const language = navigator.language || navigator['userLanguage'];
    const shortLanguage = getShortLanguage(language);
    return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
 * será retornado a linguagem padrão (poLocaleDefault).
 */
function getShortBrowserLanguage() {
    return getShortLanguage(getBrowserLanguage());
}
/**
 * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
 * Por exemplo: "pt" ou "es".
 *
 * @param language {string} linguagem.
 *
 * @returns sigla do idioma padrão {string}.
 *
 * @default pt
 */
function getShortLanguage(language) {
    return (language || poLocaleDefault).toLowerCase().substring(0, 2);
}
function isLanguage(value) {
    const languageRegex = new RegExp('^[a-z]{2}(-[a-z]{2})?$', 'i');
    return languageRegex.test(value);
}
/* istanbul ignore next */
function reloadCurrentPage() {
    window.location.assign(location.href);
}
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return val === 'true' || val === 'on' || val === '';
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
function convertToInt(value, valueDefault) {
    const validNumber = parseInt(value, 10);
    const validDefaultValue = parseInt(valueDefault, 10);
    const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param context Contexto do qual a função será executada.
 */
function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
function convertIsoToDate(value, start, end) {
    if (value) {
        const day = parseInt(value.substring(8, 10), 10);
        const month = parseInt(value.substring(5, 7), 10);
        const year = parseInt(value.substring(0, 4), 10);
        if (start) {
            const date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            const date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            return new Date(year, month - 1, day);
        }
    }
}
function convertDateToISODate(date) {
    if (date) {
        const getMonth = date.getMonth() + 1;
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        const year = formatYear(date.getFullYear());
        return year + '-' + month + '-' + day;
    }
    else {
        return null;
    }
}
function convertDateToISOExtended(date, time) {
    if (date) {
        const getMonth = date.getMonth() + 1;
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        const year = formatYear(date.getFullYear());
        const dateString = date.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return (year +
                '-' +
                month +
                '-' +
                day +
                'T' +
                dateString.substring(16, 24) +
                dateString.substring(28, 31) +
                ':' +
                dateString.substring(31, 33));
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 *
 * @param year Ano
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return `0${year}`;
    }
    if (year > 9 && year < 100) {
        return `00${year}`;
    }
    if (year >= 0 && year < 10) {
        return `000${year}`;
    }
}
// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
function isIEOrEdge() {
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Internet Explorer
function isIE() {
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident/i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Firefox
function isFirefox() {
    const userAgent = window.navigator.userAgent;
    return userAgent.toLowerCase().indexOf('firefox') > -1;
}
// Verifica se o navegador em que está sendo usado é Safari
function isSafari() {
    const userAgent = window.navigator.userAgent;
    return /^(?!.*chrome).*safari.*$/.test(userAgent.toLocaleLowerCase());
}
// Verifica qual o dispositivo que está sendo usado
function isMobile() {
    const userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
function isKeyCodeSpace(event) {
    return event.keyCode === 32 || event.which === 32;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 *
 * @param date Data
 * @param year Ano original
 */
function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
function sortOptionsByProperty(options, property) {
    options.sort((optionA, optionB) => {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    });
}
/**
 * Ordena o campos baseado no valor da propriedade `order`.
 *
 * Só serão aceitos valores com números inteiros maiores do que zero para a ordenação.
 *
 * Campos sem `order` ou com valores negativos, zerados ou inválidos
 * receberão o valor default e seguirão o posicionamento dentro do
 * array.
 *
 * @param fields campo que se deseja ordenar.
 * @param defaultOrdering valor que será utilizado para manter na posição do array.
 */
function sortFields(fields = [], defaultOrdering = -1) {
    const resultClassification = { fieldAComesFirst: -1, fieldAComesAfter: 1, keepPositions: 0 };
    const isOrderValid = (order) => isTypeof(order, 'number') && order > 0;
    const applyDefaultOrdering = (order) => (isOrderValid(order) ? order : defaultOrdering);
    return fields.sort((fieldA, fieldB) => {
        const orderA = applyDefaultOrdering(fieldA.order);
        const orderB = applyDefaultOrdering(fieldB.order);
        if (orderA === orderB) {
            return resultClassification.keepPositions;
        }
        if (orderA === defaultOrdering) {
            return resultClassification.fieldAComesAfter;
        }
        if (orderB === defaultOrdering) {
            return resultClassification.fieldAComesFirst;
        }
        return orderA - orderB;
    });
}
function removeDuplicatedOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex(op => op.value === list[i].value) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeDuplicatedOptionsWithFieldValue(list, newValue) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex(op => op[newValue] === list[i][newValue]) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeUndefinedAndNullOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeUndefinedAndNullOptionsWithFieldValue(list, newValue) {
    for (let i = 0; i < list.length; i++) {
        if (list[i][newValue] === undefined || list[i][newValue] === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
function openExternalLink(url) {
    window.open(url, '_blank');
}
function getFormattedLink(link) {
    let formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param leftSide Primeiro valor a ser comparado.
 * @param rightSide Segundo valor a ser comparado.
 * @param ascending Determina se será em ordem ascendente ou descendente.
 */
function sortValues(leftSide, rightSide, ascending = true) {
    const left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
    const right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
    const leftIsInvalid = left === null || left === undefined || Number.isNaN(left);
    const rightIsInvalid = right === null || right === undefined || Number.isNaN(right);
    if (ascending) {
        if (left < right || leftIsInvalid) {
            return -1;
        }
        else if (left > right || rightIsInvalid) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (left < right || leftIsInvalid) {
            return 1;
        }
        else if (left > right || rightIsInvalid) {
            return -1;
        }
    }
    return 0;
}
function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return date >= dateStart && date <= dateEnd;
    }
    else if (dateStart && !dateEnd) {
        return date >= dateStart;
    }
    else if (!dateStart && dateEnd) {
        return date <= dateEnd;
    }
    else {
        return true;
    }
}
function uuid() {
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + hex4() + hex4();
}
function capitalizeFirstLetter(text) {
    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param items {Array<any>} Array de items original.
 * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @returns Array<any>
 */
function mapArrayByProperties(items = [], properties = []) {
    return items.map(item => mapObjectByProperties(item, properties));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param object {Array<any>} Array de items original.
 * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @returns Array<any>
 */
function mapObjectByProperties(object = {}, properties = []) {
    const getSelectedProperties = (selectedProperties, property) => ({
        ...selectedProperties,
        [property]: object[property]
    });
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param object Objeto de onde será pego os valores.
 */
function valuesFromObject(object = {}) {
    return Object.keys(object).map(property => object[property]);
}
/**
 * Converte um arquivo em base64.
 *
 * @param file arquivo que será convertido.
 */
function convertImageToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        /* istanbul ignore next */
        reader.onerror = error => reject(error);
    });
}
/**
 * Valida se a imagem é do tipo base64 valida
 *
 */
function isValidImageBase64(value) {
    try {
        return !!value.match(/^data:image\/([a-zA-Z]*);base64,([^\"]*)$/);
    }
    catch (err) {
        return false;
    }
}
/**
 * Converte um número em decimal baseado na quantidade de casas decimais.
 *
 * Caso o valor seja inválido, será retornado o valor `undefined`.
 * Valores inválidos são: `false`, `NaN`, `strings` que não numéricas, `undefined` e `null`.
 *
 * @param number valor que será convertido
 * @param decimalsPlace quantidade de casas decimais
 */
function convertNumberToDecimal(number, decimalsPlace) {
    const isValidValue = (number || number === 0) && !isNaN(number);
    const floatValue = isValidValue ? parseFloat(number) : undefined;
    try {
        return parseFloat(floatValue.toFixed(decimalsPlace));
    }
    catch {
        return floatValue;
    }
}
/**
 * Retorna uma copia do objeto sujo, sem as propriedades nulas ou indefinidas.
 * Retorna o objeto sem as propriedades que contém valores nulos ou indefinidos.
 *
 * @param dirtyObject
 */
function clearObject(dirtyObject) {
    const cleanObject = {};
    Object.keys(dirtyObject).forEach(key => {
        if (dirtyObject[key] !== null && dirtyObject[key] !== undefined) {
            cleanObject[key] = dirtyObject[key];
        }
    });
    return cleanObject;
}
function validateObjectType(value) {
    return isTypeof(value, 'object') && !Array.isArray(value) ? value : undefined;
}
/**
 * Retorna os elementos DOM capazes de receber foco.
 *
 * > Atualmente são considerados "focáveis" os elementos DOM `input`, `select`,
 * `textarea`, `button` e `a`.
 *
 * @param parentElement Elemento DOM pai.
 * @returns Lista dos elementos DOM filhos "focáveis".
 */
function getFocusableElements(parentElement) {
    const focusableElements = 'button:not([disabled]), [href], input, select, textarea, [tabindex]:not([tabindex="-1"]';
    return parentElement.querySelectorAll(focusableElements);
}
// Retorna o formato de acordo com o locale.
function replaceFormatSeparator(format, separator) {
    let newFormat = format;
    if (separator !== '/') {
        newFormat = newFormat.replace(/\//g, separator);
    }
    return newFormat;
}
/**
 * Recebe um array de objetos para ordenação utilizando chave como comparativo e
 * se a order é crescente(true) ou descrescente(false)
 *
 * Exemplo:
 *
 * ```
 * items: [{country: 'japao'}, {country: 'brasil'} , {country: 'china'}]
 * key: 'country'
 * isAscendingOrder: true
 * Resultado do retorno:
 *    [{country: 'brasil'}, {country: 'china'} , {country: 'japao'}]
 * ```
 *
 *
 * @param items : lista de itens.
 * @param key : propriedade utilizada na comparação.
 * @param isAscendingOrder : ordenação crescente ou descrescente.
 */
function sortArrayOfObjects(items, key, isAscendingOrder) {
    if (items) {
        return items.sort((a, b) => {
            const valueA = a[key];
            const valueB = b[key];
            if (typeof valueA === 'number' && typeof valueB === 'number') {
                return isAscendingOrder ? valueA - valueB : valueB - valueA;
            }
            else {
                const compareResult = valueA.toString().localeCompare(valueB.toString());
                return isAscendingOrder ? compareResult : -compareResult;
            }
        });
    }
}

const poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
const poLocaleKey = 'PO_USER_LOCALE';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
class PoLanguageService {
    constructor() { }
    set languageDefault(language) {
        if (language && isLanguage(language)) {
            localStorage.setItem(poDefaultLanguage, language);
        }
    }
    get languageDefault() {
        return localStorage.getItem(poDefaultLanguage);
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    getLanguage() {
        const language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    getLanguageDefault() {
        return this.languageDefault;
    }
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    getShortLanguage() {
        const language = this.getLanguage();
        const shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    }
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguage(language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    }
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguageDefault(language) {
        this.languageDefault = language;
    }
    /**
     * @description
     *
     * Método que retorna o separador
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    getNumberSeparators(language) {
        language = language || this.getShortLanguage();
        const decimal = poLocaleDecimalSeparatorList.find(separator => separator.language === language) ?? {};
        const thousand = poLocaleThousandSeparatorList.find(separator => separator.language === language) ?? {};
        const decimalSeparator = decimal.separator ?? ',';
        const thousandSeparator = thousand.separator ?? '.';
        return { decimalSeparator, thousandSeparator };
    }
    /**
     * @description
     *
     * Método que retorna o separador de datas
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    getDateSeparator(language) {
        language = language || this.getShortLanguage();
        const separatorChar = poLocaleDateSeparatorList.find(separator => separator.locale === language) ?? {};
        return separatorChar.separator ?? '/';
    }
    static ɵfac = function PoLanguageService_Factory(t) { return new (t || PoLanguageService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLanguageService, factory: PoLanguageService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLanguageService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [], null); })();

const poTagColors = Object.values(PoColorPaletteEnum);
const poTagOrientationDefault = PoTagOrientation.Vertical;
const PoTagLiteralsDefault = {
    en: {
        remove: 'Clear'
    },
    es: {
        remove: 'Eliminar'
    },
    pt: {
        remove: 'Remover'
    },
    ru: {
        remove: 'удалять'
    }
};
/**
 * @description
 *
 * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
 * na cor, iconografia e tipo.
 *
 * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
 * utilizando a tecla *tab*.
 *
 * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-sm)`                           |
 * | `--line-height`                        | Tamanho da label                                      | `var(---line-height-sm)`                        |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-pill)`                     |
 * | **Neutral**                            |                                                       |                                                 |
 * | `--color-neutral`                      | Cor principal no estado neutral                       | `var(--color-neutral-light-10)`                 |
 * | `--text-color-positive`                | Cor do texto no estado neutral                        | `var(--color-neutral-dark-80)`                  |
 * | **Positive**                           |                                                       |                                                 |
 * | `--color-positive`                     | Cor principal no estado positive                      | `var(--color-feedback-positive-lightest)`       |
 * | `--text-color-positive`                | Cor do texto no estado positive                       | `var(--color-feedback-positive-dark)`           |
 * | **Negative**                           |                                                       |                                                 |
 * | `--color-negative`                     | Cor principal no estado danger                        | `var(--color-feedback-negative-lightest)`       |
 * | `--text-color-negative`                | Cor do texto no estado danger                         | `var(--color-feedback-negative-darker)`         |
 * | **Warning**                            |                                                       |                                                 |
 * | `--color-tag-warning`                  | Cor principal no estado warning                       | `var(--color-feedback-warning-lightest)`        |
 * | `--text-color-warning`                 | Cor do texto no estado warning                        | `var(--color-feedback-warning-darkest)`         |
 * | **Info**                               |                                                       |                                                 |
 * | `--color-info`                         | Cor principal no estado info                          | `var(--color-feedback-info-lightest)`           |
 * | `--text-color-info`                    | Cor do texto no estado info                           | `var(--color-feedback-info-dark)`               |
 * | **Removable**                          |                                                       |                                                 |
 * | `--color`                              | Cor principal quando removable                        | `var(--color-brand-01-lightest)`                |
 * | `--border-color`                       | Cor de borda quando removable &nbsp;                  | `var(--color-brand-01-lighter)`                 |
 * | `--color-icon`                         | Cor do ícone quando removable &nbsp;                  | `var(--color-action-default)`                   |
 * | `--text-color`                         | Cor do texto quando removable &nbsp;                  | `var(--color-neutral-dark-80)`                  |
 * | `--color-hover`                        | Cor do hover no estado removable &nbsp;               | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-light-20)`                 |
 * | `--border-color-disabled`              | Cor da borda no estado disabled &nbsp;                | `var(--color-action-disabled)`                  |
 * | `--color-icon-disabled`                | Cor do icone no estado disabled &nbsp;                | `var(--color-action-disabled)`                  |
 * | `--text-color-disabled`                | Cor do texto no estado disabled &nbsp;                | `var(--color-neutral-mid-60)`                   |
 *
 */
class PoTagBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define uma legenda que será exibida acima ou ao lado da *tag*, de acordo com a `p-orientation`.
     */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Habilita a opção de remover a tag
     *
     * @default `false`
     */
    removable = false;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-tag` e não permite que o usuário interaja com o mesmo.
     * > A propriedade `p-disabled` somente terá efeito caso a propriedade `p-removable` esteja definida como `true`.
     *
     * @default `false`
     */
    disabled = false;
    /** Texto da tag. */
    value;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
     *
     * O evento de click só funciona se a tag não for removível.
     */
    click = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que sera executada quando clicar sobre o ícone de remover no `po-tag`
     */
    remove = new EventEmitter();
    poTagOrientation = PoTagOrientation;
    customColor;
    customTextColor;
    _color;
    _textColor;
    _icon;
    _inverse;
    _orientation = poTagOrientationDefault;
    _type;
    _literals;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Determina a cor da tag. As maneiras de customizar as cores são:
     * - Hexadeximal, por exemplo `#c64840`;
     * - RGB, como `rgb(0, 0, 165)`;
     * - O nome da cor, por exemplo `blue`;
     * - Usando uma das cores do tema do PO:
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * - Para uma melhor acessibilidade no uso do componente é recomendável utilizar cores com um melhor contraste em relação ao background.
     *
     * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
     */
    set color(value) {
        this._color = poTagColors.includes(value) ? value : undefined;
        if (this._color === undefined) {
            CSS.supports('color', value) ? (this.customColor = value) : (this.customColor = undefined);
        }
    }
    get color() {
        return this._color;
    }
    /**
     * @optional
     *
     * @description
     *
     * Determina a cor do texto da tag. As maneiras de customizar as cores são:
     * - Hexadeximal, por exemplo `#c64840`;
     * - RGB, como `rgb(0, 0, 165)`;
     * - O nome da cor, por exemplo `blue`;
     * - Usando uma das cores do tema do PO:
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * - Para uma melhor acessibilidade no uso do componente é recomendável utilizar cores com um melhor contraste em relação ao background.
     *
     * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
     */
    set textColor(value) {
        this._textColor = poTagColors.includes(value) ? value : undefined;
        if (this._textColor === undefined) {
            CSS.supports('color', value) ? (this.customTextColor = value) : (this.customTextColor = undefined);
        }
    }
    get textColor() {
        return this._textColor;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
     *
     * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
     * - <span class="po-icon po-icon-ok"></span> - `success`
     * - <span class="po-icon po-icon-warning"></span> - `warning`
     * - <span class="po-icon po-icon-close"></span> - `danger`
     * - <span class="po-icon po-icon-info"></span> - `info`
     *
     * Também É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-tag p-icon="po-icon-user" p-value="PO Tag"></po-tag>
     * ```
     * como também utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-tag p-icon="fa fa-podcast" p-value="PO Tag"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-tag [p-icon]="template" p-value="Tag template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     *
     * @default `false`
     */
    set icon(value) {
        if (this.type) {
            this._icon = convertToBoolean(value);
        }
        else {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    /**
     * @deprecated 16.x.x
     *
     * @optional
     *
     * @description
     *
     * > Por regras de acessibilidade e usabilidade a tag não terá a inversão de cores no componente.
     *
     * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
     *
     * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
     * e a cor do fundo fica branca.
     *
     * @default `false`
     */
    set inverse(value) {
        this._inverse = convertToBoolean(value);
    }
    get inverse() {
        return this._inverse;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o *layout* de exibição.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo da *tag*.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor azul claro que caracteriza conteúdo informativo.
     *  - `neutral`: cor cinza claro para uso geral.
     *
     * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
     *
     * @default `info`
     */
    set type(value) {
        if (!this.removable) {
            this._type = Object.values(PoTagType).includes(value) ? value : undefined;
        }
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-tag`.
     *
     *
     * Para utilizar, basta passar a literal customizada:
     *
     * ```
     *  const customLiterals: PoTagLiterals = {
     *    remove: 'Remover itens'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-tag
     *   [p-literals]="customLiterals">
     * </po-tag>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...PoTagLiteralsDefault[poLocaleDefault],
                ...PoTagLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = PoTagLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || PoTagLiteralsDefault[this.language];
    }
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoTagBaseComponent_Factory(t) { return new (t || PoTagBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTagBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], removable: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-removable", "removable", convertToBoolean], disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabled", convertToBoolean], value: [i0.ɵɵInputFlags.None, "p-value", "value"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], textColor: [i0.ɵɵInputFlags.None, "p-text-color", "textColor"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], inverse: [i0.ɵɵInputFlags.None, "p-inverse", "inverse"], orientation: [i0.ɵɵInputFlags.None, "p-orientation", "orientation"], type: [i0.ɵɵInputFlags.None, "p-type", "type"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"] }, outputs: { click: "p-click", remove: "p-close" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { label: [{
            type: Input,
            args: ['p-label']
        }], removable: [{
            type: Input,
            args: [{ alias: 'p-removable', transform: convertToBoolean }]
        }], disabled: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], value: [{
            type: Input,
            args: ['p-value']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], remove: [{
            type: Output,
            args: ['p-close']
        }], color: [{
            type: Input,
            args: ['p-color']
        }], textColor: [{
            type: Input,
            args: ['p-text-color']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], inverse: [{
            type: Input,
            args: ['p-inverse']
        }], orientation: [{
            type: Input,
            args: ['p-orientation']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }] }); })();

// Array de posições.
const PO_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse ou realizam o foco sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                                  | Descrição                                                        | Valor Padrão                                     |
 * |----------------------------------------------|------------------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                           |                                                                  |                                                  |
 * | `--border-radius` &nbsp;                     | Contém o valor do raio dos cantos do elemento&nbsp;              | `var(--border-radius-md)`                        |
 * | `--color`                                    | Cor principal da tooltip                                         | `var(--color-neutral-dark-80)`                   |
 * | `--font-family`                              | Família tipográfica usada                                        | `var(--font-family-theme)`                       |
 * | `--text-color`                               | Cor do texto                                                     | `var(--color-neutral-light-00)`                  |
 *
 */
class PoTooltipBaseDirective {
    /**
     * @optional
     *
     * @description
     *
     * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
     * Opção necessária para o caso de uso de tooltip em um elemento SVG.
     *
     * @default `false`
     */
    appendInBody = false;
    _tooltipPosition = 'bottom';
    tooltipContent;
    _displayTooltip = false;
    _tooltip = '';
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip.
     *
     * **Como boa prática, indica-se utilizar um texto com até 140 caracteres.**
     */
    set tooltip(tooltip) {
        this._tooltip = tooltip;
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
    set displayTooltip(value) {
        this._displayTooltip = value;
        this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
    }
    get displayTooltip() {
        return this._displayTooltip;
    }
    static ɵfac = function PoTooltipBaseDirective_Factory(t) { return new (t || PoTooltipBaseDirective)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipBaseDirective, inputs: { appendInBody: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-append-in-body", "appendInBody", convertToBoolean], tooltip: [i0.ɵɵInputFlags.None, "p-tooltip", "tooltip"], tooltipPosition: [i0.ɵɵInputFlags.None, "p-tooltip-position", "tooltipPosition"], displayTooltip: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-display-tooltip", "displayTooltip", convertToBoolean] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipBaseDirective, [{
        type: Directive
    }], null, { appendInBody: [{
            type: Input,
            args: [{ alias: 'p-append-in-body', transform: convertToBoolean }]
        }], tooltip: [{
            type: Input,
            args: ['p-tooltip']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], displayTooltip: [{
            type: Input,
            args: [{ alias: 'p-display-tooltip', transform: convertToBoolean }]
        }] }); })();

/**
 * @docsPrivate
 * @description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 */
const poControlPositionSidesDefault = [
    'bottom',
    'bottom-left',
    'bottom-right',
    'left',
    'left-top',
    'left-bottom',
    'top',
    'top-right',
    'top-left',
    'right',
    'right-bottom',
    'right-top'
];
class PoControlPositionService {
    arrowDirection;
    customPositions;
    differenceDiagonalToWidthArrow = 3;
    element;
    elementOffset;
    isCornerAligned;
    isSetElementWidth = false;
    // offset da seta em relação ao canto do componente
    offsetArrow = 12;
    targetElement;
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param value posição para exibição do elemento
     */
    adjustPosition(value) {
        const position = value || 'bottom';
        this.elementPosition(position);
        this.customPositions && this.customPositions.length
            ? this.adjustCustomPosition(position)
            : this.adjustDefaultPosition(position);
    }
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    getArrowDirection() {
        return this.arrowDirection;
    }
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    setElements(element, elementOffset, targetElement, customPositions, isSetElementWidth = false, isCornerAligned = false) {
        this.element = element instanceof ElementRef ? element.nativeElement : element;
        this.targetElement = targetElement instanceof ElementRef ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    }
    adjustCustomPosition(position) {
        const positionLength = this.customPositions.length;
        let sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    }
    adjustDefaultPosition(position) {
        const mainPositions = this.getMainPositions();
        const mainPositionLength = mainPositions.length;
        let mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            const mainPosition = this.getMainPosition(position);
            this.elementPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                return;
            }
            return;
        }
    }
    elementPosition(position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    }
    getMainPosition(position) {
        return position.indexOf('-') > -1 ? position.substring(0, position.indexOf('-')) : position;
    }
    getMainPositions() {
        const defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length
            ? this.getMainPositionsByCustomPositions(this.customPositions)
            : defaultMainPositions;
    }
    getMainPositionsByCustomPositions(customPositions) {
        const mainPositions = [];
        const customPositionsLength = customPositions.length;
        for (let i = 0; i < customPositionsLength; i++) {
            const position = customPositions[i];
            const mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    }
    getOverflows() {
        const sizesAndPositions = this.getSizesAndPositions();
        return {
            right: sizesAndPositions.element.right > sizesAndPositions.window.innerWidth,
            top: sizesAndPositions.element.top <= 0,
            left: sizesAndPositions.element.left <= 0,
            bottom: sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight
        };
    }
    getSizesAndPositions() {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    }
    nextPosition(position, positions = []) {
        const index = positions.indexOf(position);
        const nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    }
    overflowAllSides(position) {
        const overflows = this.getOverflows();
        switch (position) {
            case 'top':
                return overflows.top || overflows.right || overflows.left;
            case 'top-right':
                return overflows.top || overflows.right || overflows.left;
            case 'top-left':
                return overflows.top || overflows.left || overflows.right;
            case 'right':
                return overflows.right || overflows.top || overflows.bottom;
            case 'right-top':
                return overflows.right || overflows.top;
            case 'right-bottom':
                return overflows.right || overflows.bottom;
            case 'bottom':
                return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right':
                return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-left':
                return overflows.bottom || overflows.left || overflows.right;
            case 'left':
                return overflows.left || overflows.top || overflows.bottom;
            case 'left-top':
                return overflows.left || overflows.top;
            case 'left-bottom':
                return overflows.left || overflows.bottom;
        }
    }
    overflowMain(position) {
        const overflows = this.getOverflows();
        switch (position) {
            case 'top':
                return overflows.top;
            case 'right':
                return overflows.right;
            case 'bottom':
                return overflows.bottom;
            case 'left':
                return overflows.left;
        }
    }
    setAlignedArrowDirection(elementPosition) {
        switch (elementPosition) {
            case 'top-left':
                return 'bottom-left';
            case 'top-right':
                return 'bottom-right';
            case 'bottom-right':
                return 'top-right';
            case 'bottom-left':
                return 'top-left';
        }
    }
    setAlignedBottomPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    }
    setAlignedElementPosition(position) {
        this.setElementWidth();
        const sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    }
    setAlignedTopPositions(displacement, sizesAndPositions) {
        this.element.style.top =
            sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    }
    setArrowDirection(elementPosition) {
        switch (elementPosition) {
            case 'top':
                return 'bottom';
            case 'top-left':
                return 'bottom-right';
            case 'top-right':
                return 'bottom-left';
            case 'right':
                return 'left';
            case 'right-top':
                return 'left-bottom';
            case 'right-bottom':
                return 'left-top';
            case 'bottom':
                return 'top';
            case 'bottom-right':
                return 'top-left';
            case 'bottom-left':
                return 'top-right';
            case 'left':
                return 'right';
            case 'left-bottom':
                return 'right-top';
            case 'left-top':
                return 'right-bottom';
        }
    }
    setBottomPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
    }
    setElementPosition(position) {
        this.setElementWidth();
        const sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions(sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions(sizesAndPositions.element.height - this.offsetArrow, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    }
    setElementWidth() {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = `${this.targetElement.clientWidth}px`;
        }
    }
    setLeftPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
        this.element.style.left =
            sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    }
    setRightPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    }
    setTopPositions(displacement, sizesAndPositions) {
        this.element.style.top =
            sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
    }
    verifySubPositions(position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        let align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, poControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    }
    static ɵfac = function PoControlPositionService_Factory(t) { return new (t || PoControlPositionService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoControlPositionService, factory: PoControlPositionService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoControlPositionService, [{
        type: Injectable
    }], null, null); })();

class PoTooltipControlPositionService extends PoControlPositionService {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoTooltipControlPositionService_BaseFactory; return function PoTooltipControlPositionService_Factory(t) { return (ɵPoTooltipControlPositionService_BaseFactory || (ɵPoTooltipControlPositionService_BaseFactory = i0.ɵɵgetInheritedFactory(PoTooltipControlPositionService)))(t || PoTooltipControlPositionService); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTooltipControlPositionService, factory: PoTooltipControlPositionService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipControlPositionService, [{
        type: Injectable
    }], null, null); })();

const nativeElements = ['input', 'button'];
/**
 * @docsExtends PoTooltipBaseDirective
 *
 * @example
 *
 * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
class PoTooltipDirective extends PoTooltipBaseDirective {
    elementRef;
    renderer;
    poControlPosition;
    arrowDirection;
    divArrow;
    divContent;
    isHidden;
    lastTooltipText;
    textContent;
    tooltipOffset = 8;
    eventListenerFunction;
    constructor(elementRef, renderer, poControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
    }
    ngOnDestroy() {
        this.hideTooltip();
    }
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    onMouseEnter() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onMouseLeave() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onMouseClick() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusOut() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusIn() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onKeyDown(event) {
        if (!this.displayTooltip && (event.code === 'Escape' || event.keyCode === 27)) {
            this.removeTooltipAction();
        }
    }
    addTooltipAction() {
        setTimeout(() => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.poControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.poControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        });
    }
    removeTooltipAction() {
        // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
        // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
        setTimeout(() => {
            if (this.appendInBody && this.tooltipContent) {
                this.renderer.removeChild(document.body, this.tooltipContent);
                this.tooltipContent = undefined;
            }
            else {
                this.hideTooltip();
            }
        });
    }
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `po-arrow-${arrowDirection}`);
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.renderer.setStyle(this.tooltipContent, 'transition', 'visibility .3s, opacity .3s linear');
        this.renderer.setStyle(this.tooltipContent, 'opacity', 0.9);
        this.insertAriaLabelTooltip();
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        const parentTarget = this.appendInBody ? document.body : this.elementRef.nativeElement;
        this.renderer.appendChild(parentTarget, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    initScrollEventListenerFunction() {
        this.eventListenerFunction = () => {
            if (!this.isHidden) {
                setTimeout(() => {
                    this.poControlPosition.adjustPosition(this.tooltipPosition);
                });
            }
        };
    }
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.setStyle(this.tooltipContent, 'opacity', 0);
            this.renderer.setStyle(this.tooltipContent, 'visibility', 'hidden');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.po-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `po-arrow-${arrowDirection}`);
        }
    }
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    showTooltip() {
        this.renderer.setStyle(this.tooltipContent, 'opacity', 0.9);
        this.renderer.setStyle(this.tooltipContent, 'visibility', 'visible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    updateTextContent() {
        const checkRepeatedText = this.tooltip.split('\n');
        if (this.lastTooltipText !== this.tooltip && checkRepeatedText[0] !== this.lastTooltipText) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
    insertAriaLabelTooltip() {
        const nativeTextContent = this.elementRef.nativeElement.textContent;
        let targetElement = '';
        nativeElements.forEach(el => {
            if (this.elementRef.nativeElement.getElementsByTagName(el)[0] !== undefined) {
                targetElement = el;
            }
        });
        if (this.elementRef.nativeElement.getElementsByTagName(targetElement)[0] && this.tooltip) {
            this.renderer.setAttribute(this.elementRef.nativeElement.getElementsByTagName(targetElement)[0], 'aria-label', nativeTextContent + ' ' + this.tooltip);
        }
    }
    static ɵfac = function PoTooltipDirective_Factory(t) { return new (t || PoTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoTooltipControlPositionService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipDirective, selectors: [["", "p-tooltip", ""]], hostBindings: function PoTooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("mouseenter", function PoTooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function PoTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("click", function PoTooltipDirective_click_HostBindingHandler() { return ctx.onMouseClick(); })("focusout", function PoTooltipDirective_focusout_HostBindingHandler() { return ctx.onFocusOut(); })("focusin", function PoTooltipDirective_focusin_HostBindingHandler() { return ctx.onFocusIn(); })("keydown", function PoTooltipDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
        } }, features: [i0.ɵɵProvidersFeature([PoTooltipControlPositionService]), i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[p-tooltip]',
                providers: [PoTooltipControlPositionService]
            }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: PoTooltipControlPositionService }], { onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onMouseClick: [{
            type: HostListener,
            args: ['click']
        }], onFocusOut: [{
            type: HostListener,
            args: ['focusout']
        }], onFocusIn: [{
            type: HostListener,
            args: ['focusin']
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

const _c0$1I = ["tagContainer"];
const _c1$I = ["tagClose"];
const _c2$l = ["poTag"];
function PoTagComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12)(1, "span", 13);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.tagOrientation ? ctx_r0.label + ":" : ctx_r0.label);
} }
const _c3$f = a0 => ({ "color": a0 });
function PoTagComponent_po_icon_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 14);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-icon", !ctx_r3.type ? ctx_r3.icon : ctx_r3.iconFromType)("ngStyle", !ctx_r3.tagColor && ctx_r3.inverse && !ctx_r3.customTextColor ? i0.ɵɵpureFunction1(2, _c3$f, ctx_r3.customColor) : !ctx_r3.type && ctx_r3.customTextColor ? i0.ɵɵpureFunction1(4, _c3$f, ctx_r3.customTextColor) : "");
} }
function PoTagComponent_po_icon_12_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 15, 16);
    i0.ɵɵlistener("click", function PoTagComponent_po_icon_12_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onClose()); })("keydown.enter", function PoTagComponent_po_icon_12_Template_po_icon_keydown_enter_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onClose("enter")); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-clickable", !ctx_r5.disabled);
    i0.ɵɵproperty("p-tooltip", ctx_r5.literals.remove)("tabindex", !ctx_r5.disabled ? 0 : -1);
    i0.ɵɵattribute("aria-label", ctx_r5.setAriaLabel())("role", !ctx_r5.disabled ? "button" : "");
} }
const poTagTypeDefault = 'po-tag-' + PoTagType.Info;
/**
 * @docsExtends PoTagBaseComponent
 *
 * @example
 *
 * <example name="po-tag-basic" title="PO Tag Basic">
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-labs" title="PO Tag Labs">
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
 * </example>
 */
class PoTagComponent extends PoTagBaseComponent {
    el;
    tagContainer;
    tagClose;
    poTag;
    isClickable;
    constructor(el, languageService) {
        super(languageService);
        this.el = el;
    }
    ngOnInit() {
        this.isClickable = this.click.observers.length > 0;
    }
    get iconFromType() {
        switch (this.type) {
            case PoTagType.Danger:
                return PoTagIcon.Danger;
            case PoTagType.Info:
                return PoTagIcon.Info;
            case PoTagType.Success:
                return PoTagIcon.Success;
            case PoTagType.Warning:
                return PoTagIcon.Warning;
        }
    }
    get tagColor() {
        if (this.type && !this.removable) {
            return this.inverse ? `po-tag-${this.type}-inverse` : `po-tag-${this.type}`;
        }
        if (this.color && !this.removable) {
            return this.inverse ? `po-text-${this.color}` : `po-${this.color}`;
        }
        if (!this.customColor && !this.removable) {
            return this.inverse ? `${poTagTypeDefault}-inverse` : poTagTypeDefault;
        }
    }
    get tagOrientation() {
        return this.orientation === this.poTagOrientation.Horizontal;
    }
    onClick(event = 'click') {
        if (!this.removable && !this.disabled) {
            const submittedTagItem = { value: this.value, type: this.type, event: event };
            this.click.emit(submittedTagItem);
            if (this.poTag && this.poTag.nativeElement) {
                this.poTag.nativeElement.focus();
            }
        }
    }
    onClose(event = 'click') {
        if (!this.disabled) {
            this.onRemove();
            this.remove.emit(event);
        }
    }
    onKeyPressed(event) {
        event.preventDefault();
        event.stopPropagation();
        this.onClick('enter');
    }
    styleTag() {
        if (!this.tagColor && !this.inverse && !this.removable) {
            return { 'background-color': this.customColor, 'color': 'white' };
        }
        else if (!this.tagColor && this.inverse && !this.customTextColor) {
            return { 'border': '1px solid ' + this.customColor };
        }
        else if (!this.tagColor && this.inverse && this.customTextColor) {
            return { 'border': '1px solid ' + this.customTextColor, 'background-color': this.customColor };
        }
        else {
            return {};
        }
    }
    getWidthTag() {
        return this.tagContainer.nativeElement.offsetWidth > 155;
    }
    setAriaLabel() {
        return this.label ? this.label + ' ' + this.literals.remove : this.value + ' ' + this.literals.remove;
    }
    onRemove() {
        if (!this.disabled) {
            this.el.nativeElement.remove();
        }
    }
    static ɵfac = function PoTagComponent_Factory(t) { return new (t || PoTagComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTagComponent, selectors: [["po-tag"]], viewQuery: function PoTagComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1I, 7);
            i0.ɵɵviewQuery(_c1$I, 7);
            i0.ɵɵviewQuery(_c2$l, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tagContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tagClose = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTag = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 26, consts: [[1, "po-tag-container"], ["class", "po-tag-title po-text-nowrap", 4, "ngIf"], [1, "po-tag-sub-container"], [1, "po-tag-wrapper", 3, "tabindex", "keydown.enter", "keydown.space", "keyup.space", "click"], ["poTagWrapper", ""], [1, "po-tag", 3, "ngClass", "ngStyle"], ["poTag", ""], ["class", "po-tag-icon", 3, "p-icon", "ngStyle", 4, "ngIf"], ["p-tooltip-position", "top", 1, "po-tag-value", 3, "p-tooltip"], ["tagContainer", ""], [3, "ngStyle"], ["p-icon", "ICON_CLOSE", "p-tooltip-position", "top", "class", "po-tag-remove", 3, "p-tooltip", "po-clickable", "tabindex", "click", "keydown.enter", 4, "ngIf"], [1, "po-tag-title", "po-text-nowrap"], [1, "po-tag-label"], [1, "po-tag-icon", 3, "p-icon", "ngStyle"], ["p-icon", "ICON_CLOSE", "p-tooltip-position", "top", 1, "po-tag-remove", 3, "p-tooltip", "tabindex", "click", "keydown.enter"], ["tagClose", ""]], template: function PoTagComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTagComponent_div_1_Template, 3, 1, "div", 1);
            i0.ɵɵelementStart(2, "div", 2)(3, "div", 3, 4);
            i0.ɵɵlistener("keydown.enter", function PoTagComponent_Template_div_keydown_enter_3_listener($event) { return ctx.onKeyPressed($event); })("keydown.space", function PoTagComponent_Template_div_keydown_space_3_listener($event) { return $event.preventDefault(); })("keyup.space", function PoTagComponent_Template_div_keyup_space_3_listener($event) { return ctx.onKeyPressed($event); })("click", function PoTagComponent_Template_div_click_3_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(5, "div", 5, 6);
            i0.ɵɵtemplate(7, PoTagComponent_po_icon_7_Template, 1, 6, "po-icon", 7);
            i0.ɵɵelementStart(8, "div", 8, 9)(10, "span", 10);
            i0.ɵɵtext(11);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(12, PoTagComponent_po_icon_12_Template, 2, 6, "po-icon", 11);
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-tag-container-horizontal", ctx.tagOrientation);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-clickable", ctx.isClickable && !ctx.disabled && !ctx.removable);
            i0.ɵɵproperty("tabindex", ctx.isClickable && !ctx.removable ? 0 : -1);
            i0.ɵɵattribute("role", ctx.isClickable && !ctx.disabled && !ctx.removable ? "button" : "");
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-clickable", ctx.isClickable && !ctx.disabled && !ctx.removable)("po-tag-inverse", ctx.inverse && !ctx.type && !ctx.customTextColor && !ctx.removable)("po-tag-removable", ctx.removable)("po-tag-disabled", ctx.disabled && ctx.removable);
            i0.ɵɵproperty("ngClass", ctx.tagColor)("ngStyle", ctx.styleTag());
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon && !ctx.removable);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-tooltip", ctx.getWidthTag() ? ctx.value : "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngStyle", !ctx.tagColor && ctx.inverse && !ctx.customTextColor ? i0.ɵɵpureFunction1(22, _c3$f, ctx.customColor) : !ctx.type && ctx.customTextColor && !ctx.removable ? i0.ɵɵpureFunction1(24, _c3$f, ctx.customTextColor) : "");
            i0.ɵɵadvance();
            i0.ɵɵtextInterpolate(ctx.value);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.removable);
        } }, dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle, PoIconComponent, PoTooltipDirective], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagComponent, [{
        type: Component,
        args: [{ selector: 'po-tag', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\n  </div>\n\n  <div class=\"po-tag-sub-container\">\n    <div\n      #poTagWrapper\n      class=\"po-tag-wrapper\"\n      [class.po-clickable]=\"isClickable && !disabled && !removable\"\n      [attr.role]=\"isClickable && !disabled && !removable ? 'button' : ''\"\n      (keydown.enter)=\"onKeyPressed($event)\"\n      (keydown.space)=\"$event.preventDefault()\"\n      (keyup.space)=\"onKeyPressed($event)\"\n      (click)=\"onClick()\"\n      [tabindex]=\"isClickable && !removable ? 0 : -1\"\n    >\n      <div\n        #poTag\n        class=\"po-tag\"\n        [class.po-clickable]=\"isClickable && !disabled && !removable\"\n        [class.po-tag-inverse]=\"inverse && !type && !customTextColor && !removable\"\n        [class.po-tag-removable]=\"removable\"\n        [class.po-tag-disabled]=\"disabled && removable\"\n        [ngClass]=\"tagColor\"\n        [ngStyle]=\"styleTag()\"\n      >\n        <po-icon\n          *ngIf=\"icon && !removable\"\n          class=\"po-tag-icon\"\n          [p-icon]=\"!type ? icon : iconFromType\"\n          [ngStyle]=\"\n            !tagColor && inverse && !customTextColor\n              ? { 'color': customColor }\n              : !type && customTextColor\n                ? { 'color': customTextColor }\n                : ''\n          \"\n        >\n        </po-icon>\n\n        <div #tagContainer class=\"po-tag-value\" [p-tooltip]=\"getWidthTag() ? value : ''\" p-tooltip-position=\"top\">\n          <span\n            [ngStyle]=\"\n              !tagColor && inverse && !customTextColor\n                ? { 'color': customColor }\n                : !type && customTextColor && !removable\n                  ? { 'color': customTextColor }\n                  : ''\n            \"\n            >{{ value }}</span\n          >\n        </div>\n\n        <po-icon\n          #tagClose\n          *ngIf=\"removable\"\n          p-icon=\"ICON_CLOSE\"\n          p-tooltip-position=\"top\"\n          [p-tooltip]=\"literals.remove\"\n          [attr.aria-label]=\"setAriaLabel()\"\n          class=\"po-tag-remove\"\n          [class.po-clickable]=\"!disabled\"\n          [tabindex]=\"!disabled ? 0 : -1\"\n          [attr.role]=\"!disabled ? 'button' : ''\"\n          (click)=\"onClose()\"\n          (keydown.enter)=\"onClose('enter')\"\n        >\n        </po-icon>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: PoLanguageService }], { tagContainer: [{
            type: ViewChild,
            args: ['tagContainer', { static: true }]
        }], tagClose: [{
            type: ViewChild,
            args: ['tagClose', { static: true }]
        }], poTag: [{
            type: ViewChild,
            args: ['poTag', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTagComponent, { className: "PoTagComponent", filePath: "lib/components/po-tag/po-tag.component.ts", lineNumber: 36 }); })();

/**
 * @description
 *
 * Módulo da diretiva Po-Tooltip.
 */
class PoTooltipModule {
    static ɵfac = function PoTooltipModule_Factory(t) { return new (t || PoTooltipModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTooltipModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PoTooltipDirective],
                exports: [PoTooltipDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTooltipModule, { declarations: [PoTooltipDirective], imports: [CommonModule], exports: [PoTooltipDirective] }); })();

/**
 * @description
 *
 * Módulo do componente `po-tag`.
 */
class PoTagModule {
    static ɵfac = function PoTagModule_Factory(t) { return new (t || PoTagModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTagModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule, PoTooltipModule],
                declarations: [PoTagComponent],
                exports: [PoTagComponent],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTagModule, { declarations: [PoTagComponent], imports: [CommonModule, PoIconModule, PoTooltipModule], exports: [PoTagComponent] }); })();

function PoAccordionItemBodyComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    i0.ɵɵprojection(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    i0.ɵɵproperty("@toggleBody", undefined);
} }
const _c0$1H = ["*"];
class PoAccordionItemBodyComponent {
    expanded = false;
    static ɵfac = function PoAccordionItemBodyComponent_Factory(t) { return new (t || PoAccordionItemBodyComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemBodyComponent, selectors: [["po-accordion-item-body"]], inputs: { expanded: [i0.ɵɵInputFlags.None, "p-expanded", "expanded"] }, ngContentSelectors: _c0$1H, decls: 1, vars: 1, consts: [["class", "po-accordion-item-body", 4, "ngIf"], [1, "po-accordion-item-body"], [1, "po-accordion-item-body-content"]], template: function PoAccordionItemBodyComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoAccordionItemBodyComponent_div_0_Template, 3, 1, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.expanded);
        } }, dependencies: [i1.NgIf], encapsulation: 2, data: { animation: [
                trigger('toggleBody', [
                    transition('* => void', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                    transition('void => *', [style({ height: '0' }), animate(200, style({ height: '*' }))])
                ])
            ] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemBodyComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-item-body', animations: [
                    trigger('toggleBody', [
                        transition('* => void', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                        transition('void => *', [style({ height: '0' }), animate(200, style({ height: '*' }))])
                    ])
                ], template: "<div class=\"po-accordion-item-body\" *ngIf=\"expanded\" @toggleBody>\n  <div class=\"po-accordion-item-body-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], null, { expanded: [{
            type: Input,
            args: ['p-expanded']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionItemBodyComponent, { className: "PoAccordionItemBodyComponent", filePath: "lib/components/po-accordion/po-accordion-item-body/po-accordion-item-body.component.ts", lineNumber: 14 }); })();

/**
 * @description
 *
 * Módulo do serviço `po-language`.
 */
class PoLanguageModule {
    static ɵfac = function PoLanguageModule_Factory(t) { return new (t || PoLanguageModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLanguageModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoLanguageService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLanguageModule, [{
        type: NgModule,
        args: [{
                providers: [PoLanguageService]
            }]
    }], null, null); })();

const _c0$1G = ["accordionElement"];
function PoAccordionItemHeaderComponent_po_tag_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tag", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-value", ctx_r1.labelTag)("p-type", ctx_r1.typeTag);
} }
class PoAccordionItemHeaderComponent {
    language = poLocaleDefault;
    accordionElement;
    expanded = false;
    label;
    labelTag;
    typeTag;
    disabledItem;
    toggle = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    onClick() {
        this.expanded = !this.expanded;
        this.toggle.emit(this.expanded);
    }
    static ɵfac = function PoAccordionItemHeaderComponent_Factory(t) { return new (t || PoAccordionItemHeaderComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemHeaderComponent, selectors: [["po-accordion-item-header"]], viewQuery: function PoAccordionItemHeaderComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1G, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.accordionElement = _t.first);
        } }, inputs: { expanded: [i0.ɵɵInputFlags.None, "p-expanded", "expanded"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], labelTag: [i0.ɵɵInputFlags.None, "p-label-tag", "labelTag"], typeTag: [i0.ɵɵInputFlags.None, "p-type-tag", "typeTag"], disabledItem: [i0.ɵɵInputFlags.None, "p-disabled", "disabledItem"] }, outputs: { toggle: "p-toggle" }, decls: 8, vars: 5, consts: [[1, "po-accordion-item-header"], [1, "po-accordion-item-header-button", "po-clickable", 3, "disabled", "click"], ["accordionElement", ""], [1, "po-accordion-item-header-button-content"], [1, "po-text-ellipsis", "po-accordion-item-header-title"], ["class", "po-accordion-item-header-tag", 3, "p-value", "p-type", 4, "ngIf"], ["p-icon", "ICON_ARROW_DOWN", 1, "po-icon", "po-accordion-item-header-icon"], [1, "po-accordion-item-header-tag", 3, "p-value", "p-type"]], template: function PoAccordionItemHeaderComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "button", 1, 2);
            i0.ɵɵlistener("click", function PoAccordionItemHeaderComponent_Template_button_click_1_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(3, "div", 3)(4, "div", 4);
            i0.ɵɵtext(5);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(6, PoAccordionItemHeaderComponent_po_tag_6_Template, 1, 2, "po-tag", 5);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(7, "po-icon", 6);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("disabled", ctx.disabledItem);
            i0.ɵɵattribute("aria-label", ctx.label)("aria-expanded", ctx.expanded || false);
            i0.ɵɵadvance(4);
            i0.ɵɵtextInterpolate(ctx.label);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.labelTag);
        } }, dependencies: [i1.NgIf, PoTagComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemHeaderComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-item-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-accordion-item-header\">\n  <button\n    #accordionElement\n    [disabled]=\"disabledItem\"\n    [attr.aria-label]=\"label\"\n    [attr.aria-expanded]=\"expanded || false\"\n    class=\"po-accordion-item-header-button po-clickable\"\n    (click)=\"onClick()\"\n  >\n    <div class=\"po-accordion-item-header-button-content\">\n      <div class=\"po-text-ellipsis po-accordion-item-header-title\">{{ label }}</div>\n      <po-tag *ngIf=\"labelTag\" class=\"po-accordion-item-header-tag\" [p-value]=\"labelTag\" [p-type]=\"typeTag\"> </po-tag>\n    </div>\n    <po-icon p-icon=\"ICON_ARROW_DOWN\" class=\"po-icon po-accordion-item-header-icon\"></po-icon>\n  </button>\n</div>\n" }]
    }], () => [{ type: PoLanguageService }], { accordionElement: [{
            type: ViewChild,
            args: ['accordionElement', { read: ElementRef, static: true }]
        }], expanded: [{
            type: Input,
            args: ['p-expanded']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], labelTag: [{
            type: Input,
            args: ['p-label-tag']
        }], typeTag: [{
            type: Input,
            args: ['p-type-tag']
        }], disabledItem: [{
            type: Input,
            args: ['p-disabled']
        }], toggle: [{
            type: Output,
            args: ['p-toggle']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionItemHeaderComponent, { className: "PoAccordionItemHeaderComponent", filePath: "lib/components/po-accordion/po-accordion-item-header/po-accordion-item-header.component.ts", lineNumber: 10 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço para poder notificar o componente `po-accordion` quando um `po-accordion-item` for
 * expandido/colapsado.
 */
class PoAccordionService {
    subjectChild = new Subject();
    // Recebe o accordionItem
    receiveFromChildAccordionClicked() {
        return this.subjectChild.asObservable();
    }
    // Envia accordionItem colapsado/expadido do accordion
    sendToParentAccordionItemClicked(accordionItem) {
        this.subjectChild.next(accordionItem);
    }
    static ɵfac = function PoAccordionService_Factory(t) { return new (t || PoAccordionService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoAccordionService, factory: PoAccordionService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionService, [{
        type: Injectable
    }], null, null); })();

function PoAccordionItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c0$1F = ["*"];
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
class PoAccordionItemComponent {
    accordionService;
    _type;
    /** Título do item. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Label da Tag.
     *
     */
    labelTag;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita item.
     *
     * @default `false`
     */
    disabledItem = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo da *tag* caso ela esteja sendo exibida.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     *
     * @default `info`
     */
    set typeTag(value) {
        this._type = Object.values(PoTagType).includes(value) ? value : undefined;
    }
    get typeTag() {
        return this._type;
    }
    /** Evento disparado ao expandir o item, seja manualmente ou programaticamente. */
    expandEvent = new EventEmitter();
    /** Evento disparado ao retrair o item, seja manualmente ou programaticamente. */
    collapseEvent = new EventEmitter();
    templateRef;
    expanded;
    expandSubscription;
    collapseSubscription;
    constructor(accordionService) {
        this.accordionService = accordionService;
        this.expandSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .pipe(filter(poAccordionItem => poAccordionItem === this && poAccordionItem.expanded))
            .subscribe(() => {
            this.expandEvent.emit();
        });
        this.collapseSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .pipe(filter(poAccordionItem => poAccordionItem === this && !poAccordionItem.expanded))
            .subscribe(() => {
            this.collapseEvent.emit();
        });
    }
    ngOnDestroy() {
        this.expandSubscription.unsubscribe();
        this.collapseSubscription.unsubscribe();
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        if (!this.disabledItem) {
            this.expanded = false;
            this.accordionService.sendToParentAccordionItemClicked(this);
        }
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        if (!this.disabledItem) {
            this.expanded = true;
            this.accordionService.sendToParentAccordionItemClicked(this);
        }
    }
    static ɵfac = function PoAccordionItemComponent_Factory(t) { return new (t || PoAccordionItemComponent)(i0.ɵɵdirectiveInject(PoAccordionService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemComponent, selectors: [["po-accordion-item"]], viewQuery: function PoAccordionItemComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(TemplateRef, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], labelTag: [i0.ɵɵInputFlags.None, "p-label-tag", "labelTag"], disabledItem: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabledItem", convertToBoolean], typeTag: [i0.ɵɵInputFlags.None, "p-type-tag", "typeTag"] }, outputs: { expandEvent: "p-expand", collapseEvent: "p-collapse" }, features: [i0.ɵɵInputTransformsFeature], ngContentSelectors: _c0$1F, decls: 1, vars: 0, template: function PoAccordionItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoAccordionItemComponent_ng_template_0_Template, 1, 0, "ng-template");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-item', template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n" }]
    }], () => [{ type: PoAccordionService }], { label: [{
            type: Input,
            args: ['p-label']
        }], labelTag: [{
            type: Input,
            args: ['p-label-tag']
        }], disabledItem: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], typeTag: [{
            type: Input,
            args: ['p-type-tag']
        }], expandEvent: [{
            type: Output,
            args: ['p-expand']
        }], collapseEvent: [{
            type: Output,
            args: ['p-collapse']
        }], templateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionItemComponent, { className: "PoAccordionItemComponent", filePath: "lib/components/po-accordion/po-accordion-item/po-accordion-item.component.ts", lineNumber: 43 }); })();

class PoAccordionManagerComponent {
    expandedAllItems = false;
    literals;
    clickManager = new EventEmitter();
    onClick() {
        this.clickManager.emit();
    }
    static ɵfac = function PoAccordionManagerComponent_Factory(t) { return new (t || PoAccordionManagerComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionManagerComponent, selectors: [["po-accordion-manager"]], inputs: { expandedAllItems: [i0.ɵɵInputFlags.None, "p-expanded-all-items", "expandedAllItems"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"] }, outputs: { clickManager: "p-click" }, decls: 5, vars: 3, consts: [[1, "po-accordion-manager-header"], [1, "po-accordion-manager-button", "po-clickable", 3, "click"], [1, "po-text-ellipsis", "po-accordion-manager-button-content"], ["p-icon", "ICON_LAST_PAGE", 1, "po-icon", "po-accordion-manager-icon", 3, "ngClass"]], template: function PoAccordionManagerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "button", 1);
            i0.ɵɵlistener("click", function PoAccordionManagerComponent_Template_button_click_1_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(4, "po-icon", 3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵattribute("aria-expanded", ctx.expandedAllItems);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.expandedAllItems ? ctx.literals.closeAllItems : ctx.literals.expandAllItems, " ");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", ctx.expandedAllItems ? "icon-down" : "icon-up");
        } }, dependencies: [i1.NgClass, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-manager', template: "<div class=\"po-accordion-manager-header\">\n  <button class=\"po-accordion-manager-button po-clickable\" (click)=\"onClick()\" [attr.aria-expanded]=\"expandedAllItems\">\n    <div class=\"po-text-ellipsis po-accordion-manager-button-content\">\n      {{ expandedAllItems ? literals.closeAllItems : literals.expandAllItems }}\n    </div>\n    <po-icon\n      p-icon=\"ICON_LAST_PAGE\"\n      [ngClass]=\"expandedAllItems ? 'icon-down' : 'icon-up'\"\n      class=\"po-icon po-accordion-manager-icon\"\n    >\n    </po-icon>\n  </button>\n</div>\n" }]
    }], null, { expandedAllItems: [{
            type: Input,
            args: ['p-expanded-all-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], clickManager: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionManagerComponent, { className: "PoAccordionManagerComponent", filePath: "lib/components/po-accordion/po-accordion-manager/po-accordion-manager.component.ts", lineNumber: 8 }); })();

const poAccordionLiteralsDefault = {
    en: {
        closeAllItems: 'Close all items',
        expandAllItems: 'Open all items'
    },
    es: {
        closeAllItems: 'Cerrar todos los elementos',
        expandAllItems: 'Abrir todos los elementos'
    },
    pt: {
        closeAllItems: 'Fechar todos os itens',
        expandAllItems: 'Abrir todos os itens'
    },
    ru: {
        closeAllItems: 'Закрыть все элементы',
        expandAllItems: 'Открыть все элементы'
    }
};
/**
 * @description
 *
 * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
 * ao clicar no título de cada item.
 *
 * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
 * como no exemplo abaixo:
 *
 * ```
 * <po-accordion #accordion [p-show-manager-accordion]="true">
 *   <po-accordion-item p-label="PO Accordion 1">
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionComponent, { static: true }) accordion: PoAccordionComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapseAllItems();
 *    this.accordion.expandAllItems();
 *  }
 * ```
 *
 * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
 *
 * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
 * acesse a [documentação do PoAccordionItem](/documentation/po-accordion-item).
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--color`                              | Cor principal do accordion                            | `var(--color-action-default)`                     |
 * | `--background-color`                   | Cor de background                                     | `var(--color-neutral-light-00)`                   |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-bold)`                         |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                  |
 * | **Focused**                            |                                                       |                                                   |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-focus)`                       |
 * | `--outline-color-focused` &nbsp;       | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-mid-60)`                     |
 * | `--background-disabled` &nbsp;         | Cor de background no estado disabled                  | `var(--color-neutral-light-10)`                   |
 * | **po-accordion-manager**               |                                                       |                                                   |
 * | `--background-color`                   | Cor de background                                     | `var(--color-neutral-mid-60)`                     |
 * | `--color`                              | Cor principal do accordion manager                    | `var(--color-neutral-light-10)`                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--color-neutral-light-10)`                   |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--color-neutral-light-10)`                   |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--color-neutral-light-10)`                   |
 * | **Pressed**                            |                                                       |                                                   |
 * | `--background-pressed` &nbsp;          | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-lighter)`                   |
 * | `--color-pressed`                      | Cor principal no estado de pressionado                | `var(--color-action-pressed)`                     |
 *
 */
class PoAccordionBaseComponent {
    language = poLocaleDefault;
    _literals;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-accordion`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoAccordionLiterals = {
     *    closeAllItems: 'Fechar todos os itens',
     *    expandAllItems: 'Expandir todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoAccordionLiterals = {
     *    expandAllItems: 'Expandir todos os itens'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-accordion
     *   [p-literals]="customLiterals">
     * </po-accordion>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poAccordionLiteralsDefault[poLocaleDefault],
                ...poAccordionLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poAccordionLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poAccordionLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe o Gerenciador de Accordion.
     *
     * @default `false`
     */
    showManagerAccordion = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite expandir mais de um `<po-accordion-item></po-accordion-item>` ao mesmo tempo.
     * Sempre habilitada caso a propriedade `p-show-manager-accordion` esteja como `true`.
     *
     * @default `false`
     */
    allowExpandItems = false;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao expandir o gerenciador de accordion, seja manualmente ou programaticamente.
     *
     */
    expandAllEvent = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao retrair o gerenciador de accordion, seja manualmente ou programaticamente.
     *
     */
    collapseAllEvent = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoAccordionBaseComponent_Factory(t) { return new (t || PoAccordionBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoAccordionBaseComponent, inputs: { literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], showManagerAccordion: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-manager-accordion", "showManagerAccordion", convertToBoolean], allowExpandItems: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-allow-expand-all-items", "allowExpandItems", convertToBoolean] }, outputs: { expandAllEvent: "p-expand-all", collapseAllEvent: "p-collapse-all" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { literals: [{
            type: Input,
            args: ['p-literals']
        }], showManagerAccordion: [{
            type: Input,
            args: [{ alias: 'p-show-manager-accordion', transform: convertToBoolean }]
        }], allowExpandItems: [{
            type: Input,
            args: [{ alias: 'p-allow-expand-all-items', transform: convertToBoolean }]
        }], expandAllEvent: [{
            type: Output,
            args: ['p-expand-all']
        }], collapseAllEvent: [{
            type: Output,
            args: ['p-collapse-all']
        }] }); })();

function PoAccordionComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3)(1, "po-accordion-manager", 4);
    i0.ɵɵlistener("p-click", function PoAccordionComponent_div_1_Template_po_accordion_manager_p_click_1_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.changeVisibleAllItems(ctx_r2.expandedAllItems)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-expanded-all-items", ctx_r0.expandedAllItems)("p-literals", ctx_r0.literals);
} }
function PoAccordionComponent_li_3_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoAccordionComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 5)(1, "po-accordion-item-header", 6);
    i0.ɵɵlistener("p-toggle", function PoAccordionComponent_li_3_Template_po_accordion_item_header_p_toggle_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r7); const poAccordionItem_r4 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.headerToggle($event, poAccordionItem_r4)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "po-accordion-item-body", 7);
    i0.ɵɵtemplate(3, PoAccordionComponent_li_3_ng_container_3_Template, 1, 0, "ng-container", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const poAccordionItem_r4 = ctx.$implicit;
    i0.ɵɵclassProp("po-accordion-item-active", poAccordionItem_r4.expanded);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-disabled", poAccordionItem_r4.disabledItem)("p-expanded", poAccordionItem_r4.expanded)("p-label", poAccordionItem_r4.label)("p-label-tag", poAccordionItem_r4.labelTag)("p-type-tag", poAccordionItem_r4.typeTag);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-expanded", poAccordionItem_r4.expanded);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", poAccordionItem_r4.templateRef);
} }
/**
 * @docsExtends PoAccordionBaseComponent
 *
 * @example
 *
 * <example name="po-accordion-basic" title="PO Accordion Basic" >
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.html"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-labs" title="PO Accordion Labs" >
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.html"> </file>
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-faq" title="PO Accordion - FAQs" >
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.html"> </file>
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.ts"> </file>
 * </example>
 */
class PoAccordionComponent extends PoAccordionBaseComponent {
    accordionService;
    accordionsHeader;
    poAccordionItems;
    expandedAllItems = false;
    accordionServiceSubscription;
    expandedActiveAccordionItem;
    constructor(accordionService, languageService) {
        super(languageService);
        this.accordionService = accordionService;
        this.receiveFromChildAccordionSubscription();
    }
    ngOnDestroy() {
        this.accordionServiceSubscription.unsubscribe();
    }
    changeVisibleAllItems(event) {
        this.expandedAllItems = !event;
        this.poAccordionItems.forEach(item => {
            if (!item.disabledItem) {
                item.expanded = this.expandedAllItems;
                this.toggle(item, false);
            }
        });
        if (this.expandedAllItems) {
            this.expandAllEvent.emit();
        }
        else {
            this.collapseAllEvent.emit();
        }
    }
    /**
     * Método para colapsar todos os itens.
     * Só pode ser utilizado quando a propriedade `p-show-manager-accordion` estiver como `true`.
     */
    collapseAllItems() {
        if (this.showManagerAccordion) {
            this.changeVisibleAllItems(true);
        }
    }
    /**
     * Método para expandir todos os itens.
     * Só pode ser utilizado quando a propriedade `p-show-manager-accordion` estiver como `true`.
     */
    expandAllItems() {
        if (this.showManagerAccordion) {
            this.changeVisibleAllItems(false);
        }
    }
    headerToggle(event, poAccordionItem) {
        poAccordionItem.expanded = event;
        this.accordionService.sendToParentAccordionItemClicked(poAccordionItem);
    }
    checkVisibleAllItems(event) {
        if (this.showManagerAccordion) {
            const accordionList = this.poAccordionItems.toArray();
            const accordionsValids = accordionList.filter(item => !item.disabledItem);
            const allItemsExpanded = accordionsValids.every(item => item.expanded === true);
            if (allItemsExpanded) {
                this.expandedAllItems = event;
            }
            else {
                this.expandedAllItems = false;
            }
        }
    }
    receiveFromChildAccordionSubscription() {
        this.accordionServiceSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .subscribe(poAccordionItem => this.toggle(poAccordionItem));
    }
    toggle(poAccordionItem, checkAllItems = true) {
        const isCurrentAccordionCollapsed = !poAccordionItem.expanded;
        if (checkAllItems) {
            this.checkVisibleAllItems(poAccordionItem.expanded);
        }
        if (isCurrentAccordionCollapsed) {
            this.expandedActiveAccordionItem = null;
            return;
        }
        if (!this.showManagerAccordion && !this.allowExpandItems && this.expandedActiveAccordionItem) {
            this.expandedActiveAccordionItem.collapse();
        }
        this.expandedActiveAccordionItem = poAccordionItem;
    }
    static ɵfac = function PoAccordionComponent_Factory(t) { return new (t || PoAccordionComponent)(i0.ɵɵdirectiveInject(PoAccordionService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionComponent, selectors: [["po-accordion"]], contentQueries: function PoAccordionComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoAccordionItemComponent, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poAccordionItems = _t);
        } }, viewQuery: function PoAccordionComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoAccordionItemHeaderComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.accordionsHeader = _t);
        } }, features: [i0.ɵɵProvidersFeature([PoAccordionService]), i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 2, consts: [[1, "po-accordion"], ["class", "po-accordion-manager", 4, "ngIf"], ["class", "po-accordion-item", 3, "po-accordion-item-active", 4, "ngFor", "ngForOf"], [1, "po-accordion-manager"], [3, "p-expanded-all-items", "p-literals", "p-click"], [1, "po-accordion-item"], [3, "p-disabled", "p-expanded", "p-label", "p-label-tag", "p-type-tag", "p-toggle"], [3, "p-expanded"], [4, "ngTemplateOutlet"]], template: function PoAccordionComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoAccordionComponent_div_1_Template, 2, 2, "div", 1);
            i0.ɵɵelementStart(2, "ul");
            i0.ɵɵtemplate(3, PoAccordionComponent_li_3_Template, 4, 9, "li", 2);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showManagerAccordion && ctx.poAccordionItems.length > 1);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.poAccordionItems);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoAccordionItemBodyComponent, PoAccordionItemHeaderComponent, PoAccordionManagerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion', providers: [PoAccordionService], template: "<div class=\"po-accordion\">\n  <div *ngIf=\"showManagerAccordion && poAccordionItems.length > 1\" class=\"po-accordion-manager\">\n    <po-accordion-manager\n      [p-expanded-all-items]=\"expandedAllItems\"\n      [p-literals]=\"literals\"\n      (p-click)=\"changeVisibleAllItems(expandedAllItems)\"\n    ></po-accordion-manager>\n  </div>\n  <ul>\n    <li\n      *ngFor=\"let poAccordionItem of poAccordionItems\"\n      class=\"po-accordion-item\"\n      [class.po-accordion-item-active]=\"poAccordionItem.expanded\"\n    >\n      <po-accordion-item-header\n        [p-disabled]=\"poAccordionItem.disabledItem\"\n        [p-expanded]=\"poAccordionItem.expanded\"\n        [p-label]=\"poAccordionItem.label\"\n        [p-label-tag]=\"poAccordionItem.labelTag\"\n        [p-type-tag]=\"poAccordionItem.typeTag\"\n        (p-toggle)=\"headerToggle($event, poAccordionItem)\"\n      >\n      </po-accordion-item-header>\n\n      <po-accordion-item-body [p-expanded]=\"poAccordionItem.expanded\">\n        <ng-container *ngTemplateOutlet=\"poAccordionItem.templateRef\"></ng-container>\n      </po-accordion-item-body>\n    </li>\n  </ul>\n</div>\n" }]
    }], () => [{ type: PoAccordionService }, { type: PoLanguageService }], { accordionsHeader: [{
            type: ViewChildren,
            args: [PoAccordionItemHeaderComponent]
        }], poAccordionItems: [{
            type: ContentChildren,
            args: [PoAccordionItemComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAccordionComponent, { className: "PoAccordionComponent", filePath: "lib/components/po-accordion/po-accordion.component.ts", lineNumber: 38 }); })();

/**
 * @description
 *
 * Módulo do componente `po-accordion`.
 *
 * > Para o correto funcionamento do componente `po-accordion`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoAccordionModule {
    static ɵfac = function PoAccordionModule_Factory(t) { return new (t || PoAccordionModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoAccordionModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoTagModule, PoIconModule, PoDividerModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoTagModule, PoIconModule, PoDividerModule],
                declarations: [
                    PoAccordionComponent,
                    PoAccordionItemBodyComponent,
                    PoAccordionItemComponent,
                    PoAccordionItemHeaderComponent,
                    PoAccordionManagerComponent
                ],
                exports: [PoAccordionComponent, PoAccordionItemComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoAccordionModule, { declarations: [PoAccordionComponent,
        PoAccordionItemBodyComponent,
        PoAccordionItemComponent,
        PoAccordionItemHeaderComponent,
        PoAccordionManagerComponent], imports: [CommonModule, PoTagModule, PoIconModule, PoDividerModule], exports: [PoAccordionComponent, PoAccordionItemComponent] }); })();

const PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
const PO_AVATAR_SIZE_DEFAULT = 'md';
/**
 * @description
 *
 * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
class PoAvatarBaseComponent {
    /**
     * Fonte da imagem que pode ser um caminho local (`./assets/images/logo-black-small.png`)
     * ou um servidor externo (`https://po-ui.io/assets/images/logo-black-small.png`).
     */
    src;
    /**
     * @optional
     *
     * @description
     *
     * Indica como o navegador deve carregar a imagem.
     *
     * Valores válidos:
     *  - `eager` (a imagem é carregada imediatamente, independente de estar visível ou não)
     *  - `lazy` (a imagem só é carregada quando estiver próxima de ser renderizada)
     *
     * @default `eager`
     */
    loading = 'eager';
    /** Evento disparado ao clicar na imagem do *avatar*. */
    click = new EventEmitter();
    _size = 'md';
    /**
     * @optional
     *
     * @description
     *
     * Tamanho de exibição do componente.
     *
     * Valores válidos:
     *  - `xs` (24x24)
     *  - `sm` (32x32)
     *  - `md` (64x64)
     *  - `lg` (96x96)
     *  - `xl` (144x144)
     *
     * @default `md`
     */
    set size(value) {
        this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
    }
    get size() {
        return this._size;
    }
    get hasClickEvent() {
        return !!this.click.observers.length;
    }
    static ɵfac = function PoAvatarBaseComponent_Factory(t) { return new (t || PoAvatarBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoAvatarBaseComponent, inputs: { src: [i0.ɵɵInputFlags.None, "p-src", "src"], loading: [i0.ɵɵInputFlags.None, "p-loading", "loading"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, outputs: { click: "p-click" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarBaseComponent, [{
        type: Directive
    }], null, { src: [{
            type: Input,
            args: ['p-src']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

function PoAvatarComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoAvatarComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "img", 4);
    i0.ɵɵlistener("error", function PoAvatarComponent_ng_template_2_Template_img_error_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onError()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("src", ctx_r1.src, i0.ɵɵsanitizeUrl);
    i0.ɵɵattribute("loading", ctx_r1.loading);
} }
function PoAvatarComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 5);
} }
/**
 * @docsExtends PoAvatarBaseComponent
 *
 * @example
 *
 * <example name="po-avatar-basic" title="PO Avatar Basic" >
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-labs" title="PO Avatar Labs" >
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-business-card" title="PO Avatar - Business Card" >
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
 * </example>
 */
class PoAvatarComponent extends PoAvatarBaseComponent {
    ngOnInit() {
        if (!this.src) {
            this.src = undefined;
        }
    }
    onError() {
        this.src = undefined;
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoAvatarComponent_BaseFactory; return function PoAvatarComponent_Factory(t) { return (ɵPoAvatarComponent_BaseFactory || (ɵPoAvatarComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoAvatarComponent)))(t || PoAvatarComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAvatarComponent, selectors: [["po-avatar"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 8, consts: [[3, "click"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["sourceImage", ""], ["defaultIcon", ""], ["alt", "", 1, "po-avatar-image", 3, "src", "error"], ["p-icon", "ICON_USER", 1, "po-avatar-default-icon"]], template: function PoAvatarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoAvatarComponent_Template_div_click_0_listener() { return ctx.click.emit(); });
            i0.ɵɵtemplate(1, PoAvatarComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoAvatarComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(4, PoAvatarComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(3);
            const _r4 = i0.ɵɵreference(5);
            i0.ɵɵclassMapInterpolate1("po-avatar po-avatar-", ctx.size, "");
            i0.ɵɵclassProp("po-clickable", ctx.hasClickEvent);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.src)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarComponent, [{
        type: Component,
        args: [{ selector: 'po-avatar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-avatar po-avatar-{{ size }}\" [class.po-clickable]=\"hasClickEvent\" (click)=\"click.emit()\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" [attr.loading]=\"loading\" (error)=\"onError()\" />\n</ng-template>\n\n<ng-template #defaultIcon>\n  <po-icon p-icon=\"ICON_USER\" class=\"po-avatar-default-icon\"></po-icon>\n</ng-template>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoAvatarComponent, { className: "PoAvatarComponent", filePath: "lib/components/po-avatar/po-avatar.component.ts", lineNumber: 32 }); })();

/**
 * @description
 *
 * Módulo do componente po-avatar.
 */
class PoAvatarModule {
    static ɵfac = function PoAvatarModule_Factory(t) { return new (t || PoAvatarModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoAvatarModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule],
                declarations: [PoAvatarComponent],
                exports: [PoAvatarComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoAvatarModule, { declarations: [PoAvatarComponent], imports: [CommonModule, PoIconModule], exports: [PoAvatarComponent] }); })();

/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada &nbsp;                      | `var(--font-family-theme)`                        |
 * | `--color`                              | Cor principal do icone de lista                       | `var(--color-action-default)`                     |
 * | `--color-icon`                         | Cor do icone ">"                                      | `var(--color-neutral-mid-60)`                     |
 * | `--color-current-page` &nbsp;          | Cor do pagina atual                                   | `var(--color-neutral-mid-60)`                     |
 *
 */
class PoBreadcrumbBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Permite definir uma URL no componente `po-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `PoBreadcrumbItem` da lista de items da propriedade `p-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `po-breadcrumb` faz um GET na URL definida na propriedade `p-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `PoBreadcrumbItem` definido na lista de itens da propriedade `p-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `po-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `p-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `p-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://po-ui.io/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `po-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://po.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `p-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     */
    favoriteService;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     */
    paramsService;
    itemsView = [];
    itemsViewPopup = [];
    clickoutListener;
    resizeListener;
    _items = [];
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
        if (this.itemsView.length >= 4) {
            this.transformToArrayPopup(items);
        }
    }
    get items() {
        return this._items;
    }
    transformToArrayPopup(items) {
        const itemsCopy = items.map(obj => ({ ...obj }));
        itemsCopy.shift();
        itemsCopy.splice(-2, 1);
        itemsCopy.pop();
        this.itemsViewPopup = this.transformArrayToActionPopUp(itemsCopy);
    }
    transformArrayToActionPopUp(items) {
        return items.map(obj => {
            if (obj.hasOwnProperty('link')) {
                obj['url'] = obj.link;
                delete obj.link;
                if (obj.hasOwnProperty('action')) {
                    delete obj.action;
                }
            }
            return obj;
        });
    }
    static ɵfac = function PoBreadcrumbBaseComponent_Factory(t) { return new (t || PoBreadcrumbBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBreadcrumbBaseComponent, inputs: { favoriteService: [i0.ɵɵInputFlags.None, "p-favorite-service", "favoriteService"], paramsService: [i0.ɵɵInputFlags.None, "p-params-service", "paramsService"], items: [i0.ɵɵInputFlags.None, "p-items", "items"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbBaseComponent, [{
        type: Directive
    }], null, { favoriteService: [{
            type: Input,
            args: ['p-favorite-service']
        }], paramsService: [{
            type: Input,
            args: ['p-params-service']
        }], items: [{
            type: Input,
            args: ['p-items']
        }] }); })();

/**
 * @description
 *
 * Os links são utilizados como rota. O destino dessa rota pode ser externo ou interno à aplicação. Eles podem ser usados dentro de texto ou isoladamente.
 *
 * #### Boas Práticas
 *
 * O componente link foi projetado para atender os requisitos das Diretrizes de Acessibilidade para Conteúdo Web (WCAG) 2.1. Também foram estruturadas padrões de usabilidade para auxiliar na utilização do componente e garantir uma boa experiência para os usuários. Por isso, é muito importante que, ao aplicar esse componente, o proprietário do conteúdo leve em consideração alguns critérios e práticas:
 * ##### Uso
 * - Evite usar muitos links em uma única tela, pois isso pode confundir o usuário quanto a identificação e rotas.
 * - Em caso de interações que alteram ou manipulam dados ou acionam alguma ação, priorize o uso de botões ao invés de link.
 * - Use labels (rótulos) que descrevam a finalidade do link. Evite texto como "Clique aqui", por exemplo. (WCAG [2.4.9: Link Purpose - Link Only](https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only))
 * - Não use cores para o link com baixo contraste entre o fundo e o texto, pois isso dificulta o entendimento do conteúdo. É possível conferir se o contraste está adequado e atingindo o valor de 7:1 em um [Contrast Checker](https://webaim.org/resources/contrastchecker/) (WCAG [1.4.6: Contrast](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html))
 *
 * ##### Interação
 * - A interação de foco deve compor o componente, sendo a navegação por mouse ou teclado, e em sequência lógica. Como por exemplo, ao pressionar Enter, executa o link e move o foco para o destino do link. (WCAG [2.4.3: Focus Order](https://www.w3.org/WAI/WCAG21/Understanding/focus-order))
 * - A distância entre o link e outras áreas interativas deve ter no mínimo 44px de altura e largura, para permitir distanciamento seguro e para que nenhum outro elemento seja acionado sem intenção. (WCAG [2.5.8: Pointer Target Spacing](https://w3c.github.io/wcag/understanding/pointer-target-spacing))
 * - Quando se tratar de um link para uma página externa, é recomendável que esta informação seja adicionada na label do componente link, para que a mudança de contexto seja informada ao usuário (WCAG [3.2.5: Change on Request](https://www.w3.org/WAI/WCAG21/Understanding/change-on-request)).
 *
 * #### Acessibilidade tratada no componente
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 * - O link foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. (WCAG [4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value))
 * - A cor não deve ser o único meio para diferenciar o link de textos comuns ou outros elementos, por isso deve-se manter o underline no link, para proporcionar essa diferença. (WCAG [1.4.1: Use of Color](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)/ [3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification))
 * - O foco precisa ter uma área mínima do dobro do perímetro do link, ter contraste de pelo menos 4.5:1 entre o estado focado e não focado do componente; e o foco não pode ficar escondido por outros elementos da tela. (WCAG [2.4.12: Focus Appearance - Enhanced](https://w3c.github.io/wcag/understanding/focus-appearance-enhanced))
 * - O estado de foco do componente deve ser sempre preservado. (WCAG [2.4.7: Focus Visible](https://www.w3.org/WAI/WCAG21/Understanding/focus-visible))
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-action-default)`                   |
 * | **Hover**                              |                                                       |                                                 |
 * | `--text-color-hover`                   | Cor do texto no estado de hover                       | `var(--color-action-hover)`                     |
 * | **Pressed**                            |                                                       |                                                 |
 * | `--text-color-pressed`                 | Cor do texto no estado pressionado                    | `var(--color-action-pressed)`                   |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Visited**                            |                                                       |                                                 |
 * | `--text-color-visited`                 | Cor do texto do estado Visited                        | `var(--color-action-pressed)`                   |
 *
 */
class PoLinkBaseComponent {
    /** Valor do rótulo a ser exibido. */
    label;
    /** Indica se o link deverá ser aberto em uma nova aba. Sempre que utilizar essa propriedade, é importante informar isso ao usuário através da label. */
    openNewTab = false;
    /** Url que será aberta ao clicar no link. */
    url;
    get type() {
        if (!this.url && this.action.observed) {
            return 'action';
        }
        return isExternalLink(this.url) ? 'externalLink' : 'internalLink';
    }
    /** Ação que será executada quando o usuário clicar sobre o `po-link`.
     * > Ao utilizar junto da propriedade `p-url` a ação será ignorada.
     */
    action = new EventEmitter();
    static ɵfac = function PoLinkBaseComponent_Factory(t) { return new (t || PoLinkBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLinkBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], openNewTab: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-open-new-tab", "openNewTab", convertToBoolean], url: [i0.ɵɵInputFlags.None, "p-url", "url"] }, outputs: { action: "p-action" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLinkBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], openNewTab: [{
            type: Input,
            args: [{ alias: 'p-open-new-tab', transform: convertToBoolean }]
        }], url: [{
            type: Input,
            args: ['p-url']
        }], action: [{
            type: Output,
            args: ['p-action']
        }] }); })();

function PoLinkComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 5);
    i0.ɵɵlistener("click", function PoLinkComponent_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onClick()); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.label);
} }
function PoLinkComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 6);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("href", ctx_r1.url, i0.ɵɵsanitizeUrl)("target", ctx_r1.openNewTab ? "_blank" : "_self");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.label);
} }
function PoLinkComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 7);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("routerLink", ctx_r2.url);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r2.label);
} }
function PoLinkComponent_a_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 8);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("href", ctx_r3.url, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r3.label);
} }
/**
 * @docsExtends PoLinkBaseComponent
 *
 * @example
 *
 * <example name="po-link-basic" title="PO Link Basic" >
 *  <file name="sample-po-link-basic/sample-po-link-basic.component.html"> </file>
 *  <file name="sample-po-link-basic/sample-po-link-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-link-labs" title="PO Link Labs" >
 *  <file name="sample-po-link-labs/sample-po-link-labs.component.html"> </file>
 *  <file name="sample-po-link-labs/sample-po-link-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-link-heroes" title="PO Link Heroes" >
 *  <file name="sample-po-link-heroes/sample-po-link-heroes.component.html"> </file>
 *  <file name="sample-po-link-heroes/sample-po-link-heroes.component.ts"> </file>
 * </example>
 */
class PoLinkComponent extends PoLinkBaseComponent {
    onClick() {
        if (this.url) {
            return;
        }
        else {
            this.action.emit(null);
        }
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoLinkComponent_BaseFactory; return function PoLinkComponent_Factory(t) { return (ɵPoLinkComponent_BaseFactory || (ɵPoLinkComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoLinkComponent)))(t || PoLinkComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLinkComponent, selectors: [["po-link"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 4, consts: [[3, "ngSwitch"], ["class", "po-link", "type", "button", 3, "click", 4, "ngSwitchCase"], ["class", "po-link", 3, "href", "target", 4, "ngSwitchCase"], ["class", "po-link", 3, "routerLink", 4, "ngSwitchCase"], ["class", "po-link", 3, "href", 4, "ngSwitchDefault"], ["type", "button", 1, "po-link", 3, "click"], [1, "po-link", 3, "href", "target"], [1, "po-link", 3, "routerLink"], [1, "po-link", 3, "href"]], template: function PoLinkComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementContainerStart(0, 0);
            i0.ɵɵtemplate(1, PoLinkComponent_button_1_Template, 2, 1, "button", 1)(2, PoLinkComponent_a_2_Template, 2, 3, "a", 2)(3, PoLinkComponent_a_3_Template, 2, 2, "a", 3)(4, PoLinkComponent_a_4_Template, 2, 2, "a", 4);
            i0.ɵɵelementContainerEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "action");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
        } }, dependencies: [i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2.RouterLink], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLinkComponent, [{
        type: Component,
        args: [{ selector: 'po-link', template: "<ng-container [ngSwitch]=\"type\">\n  <button *ngSwitchCase=\"'action'\" class=\"po-link\" type=\"button\" (click)=\"onClick()\">{{ label }}</button>\n\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-link\" [href]=\"url\" [target]=\"openNewTab ? '_blank' : '_self'\">{{\n    label\n  }}</a>\n\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-link\" [routerLink]=\"url\">{{ label }}</a>\n\n  <a *ngSwitchDefault class=\"po-link\" [href]=\"url\">{{ label }}</a>\n</ng-container>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLinkComponent, { className: "PoLinkComponent", filePath: "lib/components/po-link/po-link.component.ts", lineNumber: 29 }); })();

const poPopupDefaultPosition = 'bottom-left';
/**
 * @description
 *
 * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
 *
 * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <po-popup [p-target]="target">
 *   <div p-popup-header-template>
 *     <div>
 *       Dev PO
 *     </div>
 *     <div>
 *       dev.po@po-ui.com.br
 *     </div>
 *   </div>
 * </po-popup >
 * ```
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                       |
 * | `--border-width`                       | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-sm)`                        |
 * | `--border-color`                       | Cor da borda                                          | `var(--color-neutral-light-20)`                 |
 * | `--background`                         | Cor do background                                     | `var(--color-neutral-light-00)`                 |
 * | `--shadow`                             | Contém o valor da sombra do elemento                  | `var(--shadow-md)`                              |
 * | **po-popup po-item-list**              |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--line-height`                        | Tamanho da label                                      | `var(--line-height-md)`                         |
 * | **Action**                             |                                                       |                                                 |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-bold)`                       |
 * | `--color`                              | Cor principal do popup                                | `var(--color-action-default)`                   |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-darkest)`                 |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Pressed**                            |                                                       |                                                 |
 * | `--background-pressed`                 | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-light)`                   |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                  |
 * | **Selected**                           |                                                       |                                                 |
 * | `--font-weight-selected`               | Peso da fonte no estado selecionado                   | `var(--font-weight-bold)`                       |
 * | `--background-selected`                | Cor de background no estado selecionado               | `var(--color-brand-01-lightest)`                |
 * | **Option e check**                     |                                                       |                                                 |
 * | `--color-option`                       | Cor principa no estado Option/check                   | `var(--color-neutral-dark-90)`                  |
 *
 */
class PoPopupBaseComponent {
    arrowDirection = 'top-right';
    showPopup = false;
    oldTarget;
    param;
    clickoutListener;
    resizeListener;
    _actions;
    _customPositions;
    _hideArrow = false;
    _isCornerAlign = false;
    _position = poPopupDefaultPosition;
    _target;
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta a seta do componente *popup*.
     *
     * @default `false`
     */
    set hideArrow(value) {
        this._hideArrow = convertToBoolean(value);
    }
    get hideArrow() {
        return this._hideArrow;
    }
    // Define se o `po-popup` será alinhado pelos cantos do elemento target.
    set isCornerAlign(value) {
        this._isCornerAlign = convertToBoolean(value);
    }
    get isCornerAlign() {
        return this._isCornerAlign;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
     * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     *
     * @default `bottom-left`
     */
    set position(value) {
        this._position = PO_CONTROL_POSITIONS.includes(value) ? value : poPopupDefaultPosition;
    }
    get position() {
        return this._position;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
     * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
     *
     * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
     * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     */
    set customPositions(value) {
        this._customPositions = Array.isArray(value) ? value : [];
    }
    get customPositions() {
        return this._customPositions;
    }
    /**
     * @description
     *
     * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
     * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
     *
     * ```
     * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
     *   Credit Actions
     * </span>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="icon">
     * </po-popup>
     * ```
     *
     * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
     *
     * ```
     * // component.html
     *
     * <po-button #poButton
     *   p-label="Open Popover"
     *   (p-click)="popup.toggle()">
     * </po-button>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="poButtonRef">
     * </po-popup>
     *
     * // component.ts
     *
     * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
     * ```
     */
    set target(value) {
        this._target = value instanceof ElementRef ? value.nativeElement : value;
    }
    get target() {
        return this._target;
    }
    closeEvent = new EventEmitter();
    static ɵfac = function PoPopupBaseComponent_Factory(t) { return new (t || PoPopupBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPopupBaseComponent, inputs: { actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], hideArrow: [i0.ɵɵInputFlags.None, "p-hide-arrow", "hideArrow"], isCornerAlign: [i0.ɵɵInputFlags.None, "p-is-corner-align", "isCornerAlign"], position: [i0.ɵɵInputFlags.None, "p-position", "position"], customPositions: [i0.ɵɵInputFlags.None, "p-custom-positions", "customPositions"], target: [i0.ɵɵInputFlags.None, "p-target", "target"] }, outputs: { closeEvent: "p-close" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupBaseComponent, [{
        type: Directive
    }], null, { actions: [{
            type: Input,
            args: ['p-actions']
        }], hideArrow: [{
            type: Input,
            args: ['p-hide-arrow']
        }], isCornerAlign: [{
            type: Input,
            args: ['p-is-corner-align']
        }], position: [{
            type: Input,
            args: ['p-position']
        }], customPositions: [{
            type: Input,
            args: ['p-custom-positions']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], closeEvent: [{
            type: Output,
            args: ['p-close']
        }] }); })();

var PoItemListType;
(function (PoItemListType) {
    PoItemListType["action"] = "action";
    PoItemListType["check"] = "check";
    PoItemListType["option"] = "option";
    PoItemListType["danger"] = "danger";
})(PoItemListType || (PoItemListType = {}));

var PoItemListFilterMode;
(function (PoItemListFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
    PoItemListFilterMode[PoItemListFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoItemListFilterMode[PoItemListFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoItemListFilterMode[PoItemListFilterMode["endsWith"] = 2] = "endsWith";
})(PoItemListFilterMode || (PoItemListFilterMode = {}));

const poListBoxLiteralsDefault = {
    en: {
        noItems: 'No items found'
    },
    es: {
        noItems: 'No se encontraron artículos'
    },
    pt: {
        noItems: 'Nenhum item encontrado'
    },
    ru: {
        noItems: 'ничего не найдено'
    }
};
/**
 * @description
 * O componente `po-listbox` é uma caixa suspensa que aparece sobre a interface após ser acionado por um gatilho visível em tela, como o dropdown. Ele apoia trazendo agrupamentos de opções. O componente listbox é composto pelo componente [**PO Item List**](/documentation/po-item-list).
 */
class PoListBoxBaseComponent {
    _items = [];
    _type;
    _literals;
    language = poLocaleDefault;
    visible = false;
    set type(value) {
        this._type = PoItemListType[value] ?? 'action';
    }
    get type() {
        return this._type;
    }
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
    }
    get items() {
        return this._items;
    }
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poListBoxLiteralsDefault[poLocaleDefault],
                ...poListBoxLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poListBoxLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListBoxLiteralsDefault[this.language];
    }
    get isItemListGroup() {
        return this.items.length && this.items[0].hasOwnProperty('options');
    }
    isTabs = false;
    // parâmetro que pode ser passado para o popup ao clicar em um item
    param;
    selectItem = new EventEmitter();
    closeEvent = new EventEmitter();
    // MULTISELECT PROPERTIES
    //output para evento do checkbox
    change = new EventEmitter();
    //output para evento do checkbox
    selectCombo = new EventEmitter();
    //output para evento do checkbox de selecionar todos
    changeAll = new EventEmitter();
    UpdateInfiniteScroll = new EventEmitter();
    //valor do checkbox de selecionar todos
    checkboxAllValue;
    // Propriedade que recebe a lista de opções selecionadas.
    selectedOptions = [];
    // Propriedade que recebe um item selecionado.
    selectedOption;
    fieldValue = 'value';
    fieldLabel = 'label';
    // Evento disparado a cada tecla digitada na pesquisa.
    changeSearch = new EventEmitter();
    // Propriedade que recebe as literais definidas no componente `po-multiselect`.
    literalSearch;
    // Propriedade que recebe o valor de comparação de pesquisa
    fieldValueSearch = 'value';
    // Propriedade que indica se o campo de pesquisa deverá ser escondido.
    hideSearch = false;
    // Propriedade que indica se o campo "Selecionar todos" deverá ser escondido.
    hideSelectAll = false;
    //Propriedades relacionados ao template customizado do multiselect
    multiselectTemplate;
    template;
    placeholderSearch;
    searchValue;
    isServerSearching = false;
    infiniteLoading = false;
    infiniteScroll = false;
    cache = false;
    infiniteScrollDistance = 100;
    filterMode = PoItemListFilterMode.contains;
    isFiltering = false;
    shouldMarkLetters = true;
    compareCache = false;
    comboService;
    // Evento disparado quando uma tab é ativada
    activatedTab = new EventEmitter();
    // Evento disparado no click de uma aba do tabs
    clickTab = new EventEmitter();
    changeStateTabs = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoListBoxBaseComponent_Factory(t) { return new (t || PoListBoxBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListBoxBaseComponent, inputs: { visible: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-visible", "visible", convertToBoolean], type: [i0.ɵɵInputFlags.None, "p-type", "type"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], isTabs: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-tabs", "isTabs", convertToBoolean], param: [i0.ɵɵInputFlags.None, "p-param", "param"], checkboxAllValue: [i0.ɵɵInputFlags.None, "p-checkboxAllValue", "checkboxAllValue"], selectedOptions: [i0.ɵɵInputFlags.None, "p-selected-options", "selectedOptions"], selectedOption: [i0.ɵɵInputFlags.None, "p-selected-option", "selectedOption"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], literalSearch: [i0.ɵɵInputFlags.None, "p-literal-search", "literalSearch"], fieldValueSearch: [i0.ɵɵInputFlags.None, "p-field-value-search", "fieldValueSearch"], hideSearch: [i0.ɵɵInputFlags.None, "p-hide-search", "hideSearch"], hideSelectAll: [i0.ɵɵInputFlags.None, "p-hide-select-all", "hideSelectAll"], multiselectTemplate: [i0.ɵɵInputFlags.None, "p-multiselect-template", "multiselectTemplate"], template: [i0.ɵɵInputFlags.None, "p-template", "template"], placeholderSearch: [i0.ɵɵInputFlags.None, "p-placeholder-search", "placeholderSearch"], searchValue: [i0.ɵɵInputFlags.None, "p-search-value", "searchValue"], isServerSearching: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-searching", "isServerSearching", convertToBoolean], infiniteLoading: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-loading", "infiniteLoading", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], cache: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-cache", "cache", convertToBoolean], infiniteScrollDistance: [i0.ɵɵInputFlags.None, "p-infinite-scroll-distance", "infiniteScrollDistance"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], isFiltering: [i0.ɵɵInputFlags.None, "p-filtering", "isFiltering"], shouldMarkLetters: [i0.ɵɵInputFlags.None, "p-should-mark-letter", "shouldMarkLetters"], compareCache: [i0.ɵɵInputFlags.None, "p-compare-cache", "compareCache"], comboService: [i0.ɵɵInputFlags.None, "p-combo-service", "comboService"] }, outputs: { selectItem: "p-select-item", closeEvent: "p-close", change: "p-change", selectCombo: "p-selectcombo-item", changeAll: "p-change-all", UpdateInfiniteScroll: "p-update-infinite-scroll", changeSearch: "p-change-search", activatedTab: "p-activated-tabs", clickTab: "p-click-tabs", changeStateTabs: "p-change-state-tabs" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListBoxBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { visible: [{
            type: Input,
            args: [{ alias: 'p-visible', transform: convertToBoolean }]
        }], type: [{
            type: Input,
            args: ['p-type']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], isTabs: [{
            type: Input,
            args: [{ alias: 'p-is-tabs', transform: convertToBoolean }]
        }], param: [{
            type: Input,
            args: ['p-param']
        }], selectItem: [{
            type: Output,
            args: ['p-select-item']
        }], closeEvent: [{
            type: Output,
            args: ['p-close']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], selectCombo: [{
            type: Output,
            args: ['p-selectcombo-item']
        }], changeAll: [{
            type: Output,
            args: ['p-change-all']
        }], UpdateInfiniteScroll: [{
            type: Output,
            args: ['p-update-infinite-scroll']
        }], checkboxAllValue: [{
            type: Input,
            args: ['p-checkboxAllValue']
        }], selectedOptions: [{
            type: Input,
            args: ['p-selected-options']
        }], selectedOption: [{
            type: Input,
            args: ['p-selected-option']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], changeSearch: [{
            type: Output,
            args: ['p-change-search']
        }], literalSearch: [{
            type: Input,
            args: ['p-literal-search']
        }], fieldValueSearch: [{
            type: Input,
            args: ['p-field-value-search']
        }], hideSearch: [{
            type: Input,
            args: ['p-hide-search']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], multiselectTemplate: [{
            type: Input,
            args: ['p-multiselect-template']
        }], template: [{
            type: Input,
            args: ['p-template']
        }], placeholderSearch: [{
            type: Input,
            args: ['p-placeholder-search']
        }], searchValue: [{
            type: Input,
            args: ['p-search-value']
        }], isServerSearching: [{
            type: Input,
            args: [{ alias: 'p-is-searching', transform: convertToBoolean }]
        }], infiniteLoading: [{
            type: Input,
            args: [{ alias: 'p-infinite-loading', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], cache: [{
            type: Input,
            args: [{ alias: 'p-cache', transform: convertToBoolean }]
        }], infiniteScrollDistance: [{
            type: Input,
            args: ['p-infinite-scroll-distance']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], isFiltering: [{
            type: Input,
            args: ['p-filtering']
        }], shouldMarkLetters: [{
            type: Input,
            args: ['p-should-mark-letter']
        }], compareCache: [{
            type: Input,
            args: ['p-compare-cache']
        }], comboService: [{
            type: Input,
            args: ['p-combo-service']
        }], activatedTab: [{
            type: Output,
            args: ['p-activated-tabs']
        }], clickTab: [{
            type: Output,
            args: ['p-click-tabs']
        }], changeStateTabs: [{
            type: Output,
            args: ['p-change-state-tabs']
        }] }); })();

const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'Загрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: Só é possível realizar alterações ao adicionar a classe `.po-loading`
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-normal)`                       |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-70)`                    |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--border-width`                       | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-sm)`                          |
 * | `--border-color`                       | Cor da borda                                          | `var(--color-neutral-light-20)`                   |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-00)`                   |
 * | `--shadow`                             | Contém o valor da sombra do elemento                  | `var(--shadow-md)`                                |
 * | **po-loading-icon**                    |                                                       |                                                   |
 * | `--color`                              | Cor principal do spinner                              | `var(--color-action-default)`                     |
 *
 */
class PoLoadingOverlayBaseComponent {
    languageService;
    _screenLock = false;
    _text;
    _size;
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamnho do componente.
     *
     * @default `lg`
     */
    set size(value) {
        this._size = value === '' || !value ? 'lg' : value;
    }
    get size() {
        return this._size;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.text = this.getTextDefault();
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
    static ɵfac = function PoLoadingOverlayBaseComponent_Factory(t) { return new (t || PoLoadingOverlayBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingOverlayBaseComponent, inputs: { screenLock: [i0.ɵɵInputFlags.None, "p-screen-lock", "screenLock"], text: [i0.ɵɵInputFlags.None, "p-text", "text"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { screenLock: [{
            type: Input,
            args: ['p-screen-lock']
        }], text: [{
            type: Input,
            args: ['p-text']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

class PoOverlayBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-overlay>
     *  </po-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    screenLock = false;
    static ɵfac = function PoOverlayBaseComponent_Factory(t) { return new (t || PoOverlayBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoOverlayBaseComponent, inputs: { screenLock: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-screen-lock", "screenLock", convertToBoolean] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoOverlayBaseComponent, [{
        type: Directive
    }], null, { screenLock: [{
            type: Input,
            args: [{ alias: 'p-screen-lock', transform: convertToBoolean }]
        }] }); })();

const _c0$1E = ["*"];
class PoOverlayComponent extends PoOverlayBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoOverlayComponent_BaseFactory; return function PoOverlayComponent_Factory(t) { return (ɵPoOverlayComponent_BaseFactory || (ɵPoOverlayComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoOverlayComponent)))(t || PoOverlayComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoOverlayComponent, selectors: [["po-overlay"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1E, decls: 3, vars: 2, consts: [["role", "alert", "aria-busy", "true", 1, "po-overlay"], [1, "po-overlay-content"]], template: function PoOverlayComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵprojection(2);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-overlay-fixed", ctx.screenLock);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoOverlayComponent, [{
        type: Component,
        args: [{ selector: 'po-overlay', template: "<div class=\"po-overlay\" [class.po-overlay-fixed]=\"screenLock\" role=\"alert\" aria-busy=\"true\">\n  <div class=\"po-overlay-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoOverlayComponent, { className: "PoOverlayComponent", filePath: "lib/components/po-overlay/po-overlay.component.ts", lineNumber: 8 }); })();

var PoLoadingIconSize;
(function (PoLoadingIconSize) {
    /** Extra small */
    PoLoadingIconSize["xs"] = "xs";
    /** Small */
    PoLoadingIconSize["sm"] = "sm";
    /** Medium*/
    PoLoadingIconSize["md"] = "md";
    /** Large*/
    PoLoadingIconSize["lg"] = "lg";
})(PoLoadingIconSize || (PoLoadingIconSize = {}));

const poLoadingLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'Загрузка'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
class PoLoadingBaseComponent {
    languageService;
    _text;
    _size;
    /**
     * Texto a ser exibido no componente.
     */
    set text(value) {
        this._text = value || (value === '' ? '' : this.getTextDefault());
    }
    get text() {
        return this._text;
    }
    /**
     * Define o tamanho do ícone.
     *
     * @default `lg`
     *
     * Valores válidos:
     *  - `xs`: tamanho `extra small`
     *  - `sm`: tamanho `small`
     *  - `md`: tamanho `medium`
     *  - `lg`: tamanho `large`
     */
    set size(value) {
        this._size = PoLoadingIconSize[value] ? PoLoadingIconSize[value] : PoLoadingIconSize.lg;
    }
    get size() {
        return this._size;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.text = this.getTextDefault();
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingLiteralsDefault[language].loading;
    }
    static ɵfac = function PoLoadingBaseComponent_Factory(t) { return new (t || PoLoadingBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingBaseComponent, inputs: { text: [i0.ɵɵInputFlags.None, "p-text", "text"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { text: [{
            type: Input,
            args: ['p-text']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que exibe um ícone de carregamento de conteúdo. A cor padrão para ele é a primária conforme o tema utilizado.
 * É possível alterá-la para um tom cinza conforme a necessidade.
 */
class PoLoadingIconComponent {
    _neutralColor;
    _size = 'md';
    id = uuid();
    /**
     * @optional
     *
     * @description
     *
     * Definição para cor neutra (cinza) para o ícone de carregamento.
     *
     * @default `false`
     */
    set neutralColor(value) {
        this._neutralColor = convertToBoolean(value);
    }
    get neutralColor() {
        return this._neutralColor;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição do tamanho do ícone.
     *
     * Valores válidos:
     *  - `xs`: tamanho `extra small`
     *  - `sm`: tamanho `small`
     *  - `md`: tamanho `medium`
     *  - `lg`: tamanho `large`
     *
     * @default `md`
     */
    set size(value) {
        this._size = PoLoadingIconSize[value] ? PoLoadingIconSize[value] : PoLoadingIconSize.md;
    }
    get size() {
        return this._size;
    }
    static ɵfac = function PoLoadingIconComponent_Factory(t) { return new (t || PoLoadingIconComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingIconComponent, selectors: [["po-loading-icon"]], inputs: { neutralColor: [i0.ɵɵInputFlags.None, "p-neutral-color", "neutralColor"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, decls: 14, vars: 8, consts: [["viewBox", "0 0 200 200", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 3, "ngClass"], [3, "id"], ["offset", "0", "stop-opacity", "0", "stop-color", "currentColor"], ["offset", "1", "stop-opacity", "0.5", "stop-color", "currentColor"], ["offset", "0", "stop-opacity", "1", "stop-color", "currentColor"], ["stroke-width", "24", "transform", "matrix(0.876218, 0, 0, 0.87855, 12.377892, 12.144993)"], ["d", "M 4 100 A 96 96 0 0 1 196 100"], ["d", "M 196 100 A 96 96 0 0 1 4 100"], ["stroke", "currentColor", "d", "M 4 100 A 96 96 0 0 1 4 98"], ["from", "0 0 0", "to", "360 0 0", "attributeName", "transform", "type", "rotate", "repeatCount", "indefinite", "dur", "1200ms"]], template: function PoLoadingIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(1, "svg", 0)(2, "defs")(3, "linearGradient", 1);
            i0.ɵɵelement(4, "stop", 2)(5, "stop", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "linearGradient", 1);
            i0.ɵɵelement(7, "stop", 4)(8, "stop", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(9, "g", 5);
            i0.ɵɵelement(10, "path", 6)(11, "path", 7)(12, "path", 8);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(13, "animateTransform", 9);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-loading-icon-container po-loading-svg-", ctx.size, "");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", ctx.neutralColor ? "po-loading-icon-neutral" : "po-loading-icon");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("id", "first" + ctx.id);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("id", "second" + ctx.id);
            i0.ɵɵadvance(4);
            i0.ɵɵattribute("stroke", "url(#" + "second" + ctx.id + ")");
            i0.ɵɵadvance();
            i0.ɵɵattribute("stroke", "url(#" + "first" + ctx.id + ")");
        } }, dependencies: [i1.NgClass], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingIconComponent, [{
        type: Component,
        args: [{ selector: 'po-loading-icon', template: "<div class=\"po-loading-icon-container po-loading-svg-{{ size }}\">\n  <svg\n    [ngClass]=\"neutralColor ? 'po-loading-icon-neutral' : 'po-loading-icon'\"\n    viewBox=\"0 0 200 200\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <defs>\n      <linearGradient [id]=\"'first' + id\">\n        <stop offset=\"0\" stop-opacity=\"0\" stop-color=\"currentColor\" />\n        <stop offset=\"1\" stop-opacity=\"0.5\" stop-color=\"currentColor\" />\n      </linearGradient>\n      <linearGradient [id]=\"'second' + id\">\n        <stop offset=\"0\" stop-opacity=\"1\" stop-color=\"currentColor\" />\n        <stop offset=\"1\" stop-opacity=\"0.5\" stop-color=\"currentColor\" />\n      </linearGradient>\n    </defs>\n    <g stroke-width=\"24\" transform=\"matrix(0.876218, 0, 0, 0.87855, 12.377892, 12.144993)\">\n      <path [attr.stroke]=\"'url(#' + 'second' + id + ')'\" d=\"M 4 100 A 96 96 0 0 1 196 100\" />\n      <path [attr.stroke]=\"'url(#' + 'first' + id + ')'\" d=\"M 196 100 A 96 96 0 0 1 4 100\" />\n      <path stroke=\"currentColor\" d=\"M 4 100 A 96 96 0 0 1 4 98\" />\n    </g>\n\n    <animateTransform\n      from=\"0 0 0\"\n      to=\"360 0 0\"\n      attributeName=\"transform\"\n      type=\"rotate\"\n      repeatCount=\"indefinite\"\n      dur=\"1200ms\"\n    />\n  </svg>\n</div>\n" }]
    }], null, { neutralColor: [{
            type: Input,
            args: ['p-neutral-color']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLoadingIconComponent, { className: "PoLoadingIconComponent", filePath: "lib/components/po-loading/po-loading-icon/po-loading-icon.component.ts", lineNumber: 18 }); })();

function PoLoadingComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 2);
    i0.ɵɵtext(1);
    i0.ɵɵelementStart(2, "div", 3);
    i0.ɵɵtext(3, ".");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 3);
    i0.ɵɵtext(5, ".");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 3);
    i0.ɵɵtext(7, ".");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1("", ctx_r0.text, " ");
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoLoadingBaseComponent
 */
class PoLoadingComponent extends PoLoadingBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoLoadingComponent_BaseFactory; return function PoLoadingComponent_Factory(t) { return (ɵPoLoadingComponent_BaseFactory || (ɵPoLoadingComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoLoadingComponent)))(t || PoLoadingComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingComponent, selectors: [["po-loading"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[3, "p-size"], ["class", "po-loading-label po-text-ellipsis", 4, "ngIf"], [1, "po-loading-label", "po-text-ellipsis"], ["aria-hidden", "true", 1, "po-loading-dot"]], template: function PoLoadingComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵelement(1, "po-loading-icon", 0);
            i0.ɵɵtemplate(2, PoLoadingComponent_span_2_Template, 8, 1, "span", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-loading po-loading-", ctx.size, "");
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-size", ctx.size);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.text);
        } }, dependencies: [i1.NgIf, PoLoadingIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingComponent, [{
        type: Component,
        args: [{ selector: 'po-loading', template: "<div class=\"po-loading po-loading-{{ size }}\">\n  <po-loading-icon [p-size]=\"size\"></po-loading-icon>\n\n  <span *ngIf=\"text\" class=\"po-loading-label po-text-ellipsis\"\n    >{{ text }}\n    <div class=\"po-loading-dot\" aria-hidden=\"true\">.</div>\n    <div class=\"po-loading-dot\" aria-hidden=\"true\">.</div>\n    <div class=\"po-loading-dot\" aria-hidden=\"true\">.</div>\n  </span>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLoadingComponent, { className: "PoLoadingComponent", filePath: "lib/components/po-loading/po-loading.component.ts", lineNumber: 14 }); })();

/**
 *
 * @docsExtends PoLoadingOverlayBaseComponent
 *
 * @example
 *
 * <example name="po-loading-overlay-basic" title="PO Loading Overlay Basic">
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-labs" title="PO Loading Overlay Labs">
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-connection-test" title="PO Loading Overlay - Connection Test">
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
class PoLoadingOverlayComponent extends PoLoadingOverlayBaseComponent {
    changeDetector;
    constructor(changeDetector, languageService) {
        super(languageService);
        this.changeDetector = changeDetector;
    }
    static ɵfac = function PoLoadingOverlayComponent_Factory(t) { return new (t || PoLoadingOverlayComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingOverlayComponent, selectors: [["po-loading-overlay"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 3, consts: [[3, "p-screen-lock"], [3, "p-text", "p-size"]], template: function PoLoadingOverlayComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-overlay", 0);
            i0.ɵɵelement(1, "po-loading", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-screen-lock", ctx.screenLock);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-text", ctx.text)("p-size", ctx.size);
        } }, dependencies: [PoOverlayComponent, PoLoadingComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayComponent, [{
        type: Component,
        args: [{ selector: 'po-loading-overlay', template: "<po-overlay [p-screen-lock]=\"screenLock\">\n  <po-loading [p-text]=\"text\" [p-size]=\"size\"></po-loading>\n</po-overlay>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoLanguageService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLoadingOverlayComponent, { className: "PoLoadingOverlayComponent", filePath: "lib/components/po-loading/po-loading-overlay/po-loading-overlay.component.ts", lineNumber: 32 }); })();

/**
 * @description
 *
 * O componente `po-item-list` é a menor parte da lista de ação que compõem o componente [**PO Listbox**](/documentation/po-listbox).
 */
class PoItemListBaseComponent {
    _label;
    _value;
    _type;
    _visible = true;
    _disabled = false;
    _activeTabs = false;
    set type(value) {
        this._type = PoItemListType[value] ?? 'action';
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como visível.
     *
     * @default `true`
     */
    set visible(value) {
        if (value === true || value === null || value === undefined) {
            this._visible = true;
        }
        else {
            this._visible = false;
        }
    }
    get visible() {
        return this._visible;
    }
    item;
    /** Texto de exibição do item. */
    label;
    /** Valor do item. */
    value;
    danger = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        if (value === false || value === null || value === undefined) {
            this._disabled = false;
        }
        else {
            this._disabled = true;
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se a ação está selecionada.
     *
     * @default `false`
     */
    selected = false;
    /**
     * @optional
     *
     * @description
     *
     * Atribui uma linha separadora acima do item.
     *
     * @default `false`
     */
    separator = false;
    /**
     * @optional
     *
     * @description
     *
     * Define um ícone que será exibido ao lado esquerdo do rótulo.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Ação a ser realizada ao clicar no item do tipo `option`.
     */
    clickItem = new EventEmitter();
    // MULTISELECT PROPERTIES
    //emissao de evento do checkbox
    checkboxItem = new EventEmitter();
    comboItem = new EventEmitter();
    //valor do checkbox de selecionar todos
    checkboxValue;
    fieldValue = 'value';
    fieldLabel = 'label';
    template;
    templateContext;
    searchValue = '';
    filterMode = PoItemListFilterMode.contains;
    isFiltering = false;
    shouldMarkLetters = true;
    compareCache = false;
    comboService;
    // TABS PROPERTIES
    isTabs = false;
    tabHide = false;
    tabsItem = new EventEmitter();
    activatedTab = new EventEmitter();
    // Ativa o botão
    set activeTabs(value) {
        this._activeTabs = value;
        this.emitActiveTabs(this.item);
    }
    get activeTabs() {
        return this._activeTabs;
    }
    emitActiveTabs(tab) {
        if (tab?.active) {
            this.activatedTab.emit(tab);
        }
    }
    static ɵfac = function PoItemListBaseComponent_Factory(t) { return new (t || PoItemListBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoItemListBaseComponent, hostVars: 1, hostBindings: function PoItemListBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-type", ctx.type);
        } }, inputs: { type: [i0.ɵɵInputFlags.None, "p-type", "type"], visible: [i0.ɵɵInputFlags.None, "p-visible", "visible"], item: [i0.ɵɵInputFlags.None, "p-item", "item"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], danger: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-danger", "danger", convertToBoolean], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], selected: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-selected", "selected", convertToBoolean], separator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-separator", "separator", convertToBoolean], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], checkboxValue: [i0.ɵɵInputFlags.None, "p-checkbox-value", "checkboxValue"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], template: [i0.ɵɵInputFlags.None, "p-template", "template"], templateContext: [i0.ɵɵInputFlags.None, "p-template-context", "templateContext"], searchValue: [i0.ɵɵInputFlags.None, "p-search-value", "searchValue"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], isFiltering: [i0.ɵɵInputFlags.None, "p-filtering", "isFiltering"], shouldMarkLetters: [i0.ɵɵInputFlags.None, "p-should-mark-letter", "shouldMarkLetters"], compareCache: [i0.ɵɵInputFlags.None, "p-compare-cache", "compareCache"], comboService: [i0.ɵɵInputFlags.None, "p-combo-service", "comboService"], isTabs: [i0.ɵɵInputFlags.None, "p-is-tabs", "isTabs"], tabHide: [i0.ɵɵInputFlags.None, "p-tab-hide", "tabHide"], activeTabs: [i0.ɵɵInputFlags.None, "p-active-tabs", "activeTabs"] }, outputs: { clickItem: "p-click-item", checkboxItem: "p-selectcheckbox-item", comboItem: "p-selectcombo-item", tabsItem: "p-emit-item-tabs", activatedTab: "p-activated-tabs" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoItemListBaseComponent, [{
        type: Directive
    }], null, { type: [{
            type: HostBinding,
            args: ['attr.p-type']
        }, {
            type: Input,
            args: ['p-type']
        }], visible: [{
            type: Input,
            args: ['p-visible']
        }], item: [{
            type: Input,
            args: ['p-item']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], danger: [{
            type: Input,
            args: [{ alias: 'p-danger', transform: convertToBoolean }]
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], selected: [{
            type: Input,
            args: [{ alias: 'p-selected', transform: convertToBoolean }]
        }], separator: [{
            type: Input,
            args: [{ alias: 'p-separator', transform: convertToBoolean }]
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], clickItem: [{
            type: Output,
            args: ['p-click-item']
        }], checkboxItem: [{
            type: Output,
            args: ['p-selectcheckbox-item']
        }], comboItem: [{
            type: Output,
            args: ['p-selectcombo-item']
        }], checkboxValue: [{
            type: Input,
            args: ['p-checkbox-value']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], template: [{
            type: Input,
            args: ['p-template']
        }], templateContext: [{
            type: Input,
            args: ['p-template-context']
        }], searchValue: [{
            type: Input,
            args: ['p-search-value']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], isFiltering: [{
            type: Input,
            args: ['p-filtering']
        }], shouldMarkLetters: [{
            type: Input,
            args: ['p-should-mark-letter']
        }], compareCache: [{
            type: Input,
            args: ['p-compare-cache']
        }], comboService: [{
            type: Input,
            args: ['p-combo-service']
        }], isTabs: [{
            type: Input,
            args: ['p-is-tabs']
        }], tabHide: [{
            type: Input,
            args: ['p-tab-hide']
        }], tabsItem: [{
            type: Output,
            args: ['p-emit-item-tabs']
        }], activatedTab: [{
            type: Output,
            args: ['p-activated-tabs']
        }], activeTabs: [{
            type: Input,
            args: ['p-active-tabs']
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Enum que contém os valores numéricos dos *keyCodes*.
 */
var PoKeyCodeEnum;
(function (PoKeyCodeEnum) {
    /** Seta para baixo */
    PoKeyCodeEnum[PoKeyCodeEnum["arrowDown"] = 40] = "arrowDown";
    /** Seta para cima */
    PoKeyCodeEnum[PoKeyCodeEnum["arrowUp"] = 38] = "arrowUp";
    /** Backspace */
    PoKeyCodeEnum[PoKeyCodeEnum["backspace"] = 8] = "backspace";
    /** Delete */
    PoKeyCodeEnum[PoKeyCodeEnum["delete"] = 46] = "delete";
    /** Enter */
    PoKeyCodeEnum[PoKeyCodeEnum["enter"] = 13] = "enter";
    /** Esc */
    PoKeyCodeEnum[PoKeyCodeEnum["esc"] = 27] = "esc";
    /** Tecla K */
    PoKeyCodeEnum[PoKeyCodeEnum["keyK"] = 75] = "keyK";
    /** Tecla L */
    PoKeyCodeEnum[PoKeyCodeEnum["keyL"] = 76] = "keyL";
    /** Espaço */
    PoKeyCodeEnum[PoKeyCodeEnum["space"] = 32] = "space";
    /** Tab */
    PoKeyCodeEnum[PoKeyCodeEnum["tab"] = 9] = "tab";
    /** Arrow Left */
    PoKeyCodeEnum[PoKeyCodeEnum["left"] = 37] = "left";
    /** Arrow Right */
    PoKeyCodeEnum[PoKeyCodeEnum["right"] = 39] = "right";
})(PoKeyCodeEnum || (PoKeyCodeEnum = {}));

/**
 * @usedBy PoCheckboxComponent
 *
 * @description
 *
 * Enum para definir o tamanho do po-checkbox.
 */
var PoCheckboxSize;
(function (PoCheckboxSize) {
    /** A caixa de seleção fica do tamanho padrão, com 24px de altura. */
    PoCheckboxSize["medium"] = "medium";
    /** A caixa de seleção fica maior, com 32px de altura. */
    PoCheckboxSize["large"] = "large";
})(PoCheckboxSize || (PoCheckboxSize = {}));

/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado/mixed e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado/mixed.
 *
 * **Acessibilidade tratada no componente:**
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A cor não deve ser o único meio para diferenciar o componente do seu estado marcado e desmarcado. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                                    | Valor Padrão                                    |
 * |----------------------------------------|--------------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                              |                                                 |
 * | `--border-color`                       | Cor da borda                                                 | `var(--color-neutral-dark-70)`                  |
 * | `--color-unchecked`                    | Cor quando não selecionado                                   | `var(--color-neutral-light-00)`                 |
 * | `--color-checked`                      | Cor quando selecionado                                       | `var(--color-action-default)`                   |
 * | **Hover**                              |                                                              |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                                | `var(--color-action-hover)`                     |
 * | `--shadow-color-hover`                 | Cor da sombra no estado hover                                | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                              |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                            | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                              |                                                 |
 * | `--color-unchecked-disabled` &nbsp;    | Cor pricipal quando não selecionado no estado disabled&nbsp; | `var(--color-action-disabled)`                  |
 * | `--color-checked-disabled` &nbsp;      | Cor pricipal quando selecionado no estado disabled           | `var(--color-neutral-dark-70)`                  |
 *
 */
class PoCheckboxBaseComponent {
    /** Define o nome do *checkbox*. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Texto de exibição do *checkbox*. */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado quando o valor do *checkbox* for alterado.
     */
    change = new EventEmitter();
    //propriedade interna recebida do checkbox-group para verificar se o checkbox está ativo, inativo ou indeterminate
    checkboxValue;
    //propriedade interna recebida do checkbox-group para verificar se o checkbox é required
    checkBoxRequired;
    //propriedade interna recebida para desabilitar o tabindex do checkbox na utilização dentro de um list-box
    disabladTabindex = false;
    id = uuid();
    propagateChange;
    onTouched;
    _disabled = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    _size = PoCheckboxSize.medium;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *checkbox*
     *
     * Valores válidos:
     * - `medium`: o `po-checkbox` fica do tamanho padrão, com 24px de altura.;
     * - `large`: o `po-checkbox` fica maior, com 32px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value) {
        this._size = PoCheckboxSize[value] ? PoCheckboxSize[value] : PoCheckboxSize.medium;
    }
    get size() {
        return this._size;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    }
    checkOption(value) {
        if (!this.disabled) {
            value === 'mixed' ? this.changeModelValue(true) : this.changeModelValue(!value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    }
    static ɵfac = function PoCheckboxBaseComponent_Factory(t) { return new (t || PoCheckboxBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxBaseComponent, inputs: { name: "name", autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], checkboxValue: [i0.ɵɵInputFlags.None, "p-checkboxValue", "checkboxValue"], checkBoxRequired: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-required", "checkBoxRequired", convertToBoolean], disabladTabindex: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled-tabindex", "disabladTabindex", convertToBoolean], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxBaseComponent, [{
        type: Directive
    }], null, { name: [{
            type: Input,
            args: ['name']
        }], autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], checkboxValue: [{
            type: Input,
            args: ['p-checkboxValue']
        }], checkBoxRequired: [{
            type: Input,
            args: [{ alias: 'p-required', transform: convertToBoolean }]
        }], disabladTabindex: [{
            type: Input,
            args: [{ alias: 'p-disabled-tabindex', transform: convertToBoolean }]
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

function PoLabelComponent_label_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label", 2);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-label-disabled", ctx_r0.disabled);
    i0.ɵɵattribute("for", ctx_r0.field && ctx_r0.for ? ctx_r0.for : undefined)("p-field", ctx_r0.field);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.label);
} }
function PoLabelComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.requirement);
} }
/**
 * @docsPrivate
 *
 * Componente de uso interno.
 */
class PoLabelComponent {
    _disabled = false;
    _field = false;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o label está desativado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se o label será de um field.
     *
     * @default `false`
     */
    set field(value) {
        this._field = value === '' ? true : convertToBoolean(value);
    }
    get field() {
        return this._field;
    }
    /** Indica o campo vinculado ao label */
    for;
    /** Label do campo. */
    label;
    /** Indica o tipo do campo vinculado ao label */
    requirement;
    static ɵfac = function PoLabelComponent_Factory(t) { return new (t || PoLabelComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLabelComponent, selectors: [["po-label"]], inputs: { disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], field: [i0.ɵɵInputFlags.None, "p-field", "field"], for: [i0.ɵɵInputFlags.None, "p-for", "for"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], requirement: [i0.ɵɵInputFlags.None, "p-requirement", "requirement"] }, decls: 2, vars: 2, consts: [["class", "po-label", 3, "po-label-disabled", 4, "ngIf"], ["class", "po-label-requirement", 4, "ngIf"], [1, "po-label"], [1, "po-label-requirement"]], template: function PoLabelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoLabelComponent_label_0_Template, 2, 5, "label", 0)(1, PoLabelComponent_span_1_Template, 2, 1, "span", 1);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.label);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.field && ctx.requirement);
        } }, dependencies: [i1.NgIf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLabelComponent, [{
        type: Component,
        args: [{ selector: 'po-label', template: "<label\n  *ngIf=\"label\"\n  class=\"po-label\"\n  [attr.for]=\"field && for ? for : undefined\"\n  [attr.p-field]=\"field\"\n  [class.po-label-disabled]=\"disabled\"\n  >{{ label }}</label\n>\n<span *ngIf=\"field && requirement\" class=\"po-label-requirement\">{{ requirement }}</span>\n" }]
    }], null, { disabled: [{
            type: Input,
            args: ['p-disabled']
        }], field: [{
            type: Input,
            args: ['p-field']
        }], for: [{
            type: Input,
            args: ['p-for']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], requirement: [{
            type: Input,
            args: ['p-requirement']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLabelComponent, { className: "PoLabelComponent", filePath: "lib/components/po-label/po-label.component.ts", lineNumber: 14 }); })();

const _c0$1D = ["checkboxLabel"];
function PoCheckboxComponent_po_label_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-label", 5);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r1.disabled)("p-for", ctx_r1.id)("p-label", ctx_r1.label);
} }
/**
 * @docsExtends PoCheckboxBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-basic" title="PO Checkbox Basic">
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-labs" title="PO Checkbox Labs">
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
 * </example>
 */
class PoCheckboxComponent extends PoCheckboxBaseComponent {
    changeDetector;
    checkboxLabel;
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * Função que atribui foco ao *checkbox*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * ...
     * import { ViewChild } from '@angular/core';
     * import { PoCheckboxComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabel && !this.disabled) {
            this.checkboxLabel.nativeElement.focus();
        }
    }
    onBlur() {
        this.onTouched?.();
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    onKeyDown(event, value) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            this.checkOption(value);
            event.preventDefault();
        }
    }
    changeModelValue(value) {
        if (value === null) {
            this.checkboxValue = 'mixed';
        }
        else {
            this.checkboxValue = typeof value === 'boolean' || value === null ? value : false;
        }
        this.changeDetector.detectChanges();
    }
    static ɵfac = function PoCheckboxComponent_Factory(t) { return new (t || PoCheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxComponent, selectors: [["po-checkbox"]], viewQuery: function PoCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1D, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabel = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoCheckboxComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[1, "container-po-checkbox", 3, "click", "keydown"], ["role", "checkbox", 1, "po-checkbox-outline", 3, "tabindex"], ["checkboxLabel", ""], ["aria-label", " ", 1, "po-checkbox", 3, "id"], ["class", "po-checkbox-label", "tabindex", "-1", 3, "p-disabled", "p-for", "p-label", 4, "ngIf"], ["tabindex", "-1", 1, "po-checkbox-label", 3, "p-disabled", "p-for", "p-label"]], template: function PoCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoCheckboxComponent_Template_div_click_0_listener() { return ctx.checkOption(ctx.checkboxValue); })("keydown", function PoCheckboxComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event, ctx.checkboxValue); });
            i0.ɵɵelementStart(1, "div", 1, 2);
            i0.ɵɵelement(3, "span", 3);
            i0.ɵɵtemplate(4, PoCheckboxComponent_po_label_4_Template, 1, 3, "po-label", 4);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵattribute("checked", ctx.checkboxValue);
            i0.ɵɵadvance();
            i0.ɵɵproperty("tabindex", ctx.disabled || ctx.disabladTabindex ? -1 : 0);
            i0.ɵɵattribute("p-size", ctx.size)("aria-checked", ctx.checkboxValue);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("id", ctx.id);
            i0.ɵɵattribute("aria-checked", ctx.checkboxValue)("aria-disabled", ctx.disabled)("required", ctx.checkBoxRequired);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.label);
        } }, dependencies: [i1.NgIf, PoLabelComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxComponent, [{
        type: Component,
        args: [{ selector: 'po-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoCheckboxComponent),
                        multi: true
                    }
                ], template: "<div\n  class=\"container-po-checkbox\"\n  [attr.checked]=\"checkboxValue\"\n  (click)=\"checkOption(checkboxValue)\"\n  (keydown)=\"onKeyDown($event, checkboxValue)\"\n>\n  <div\n    #checkboxLabel\n    role=\"checkbox\"\n    class=\"po-checkbox-outline\"\n    [attr.p-size]=\"size\"\n    [tabindex]=\"disabled || disabladTabindex ? -1 : 0\"\n    [attr.aria-checked]=\"checkboxValue\"\n  >\n    <span\n      [attr.aria-checked]=\"checkboxValue\"\n      aria-label=\" \"\n      [id]=\"id\"\n      class=\"po-checkbox\"\n      [attr.aria-disabled]=\"disabled\"\n      [attr.required]=\"checkBoxRequired\"\n    >\n    </span>\n\n    <po-label\n      *ngIf=\"label\"\n      class=\"po-checkbox-label\"\n      tabindex=\"-1\"\n      [p-disabled]=\"disabled\"\n      [p-for]=\"id\"\n      [p-label]=\"label\"\n    >\n    </po-label>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { checkboxLabel: [{
            type: ViewChild,
            args: ['checkboxLabel', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCheckboxComponent, { className: "PoCheckboxComponent", filePath: "lib/components/po-field/po-checkbox/po-checkbox.component.ts", lineNumber: 48 }); })();

const _c0$1C = ["itemList"];
function PoItemListComponent_div_1_po_icon_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 8);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-icon", ctx_r4.icon);
} }
function PoItemListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4, 5);
    i0.ɵɵtemplate(2, PoItemListComponent_div_1_po_icon_2_Template, 1, 1, "po-icon", 6);
    i0.ɵɵelementStart(3, "span", 7);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-item-list__separator", ctx_r0.separator)("po-item-list__disabled", ctx_r0.disabled || !ctx_r0.visible)("po-item-list__selected", (ctx_r0.selected || ctx_r0.activeTabs) && !ctx_r0.disabled)("po-item-list__hidden", ctx_r0.tabHide)("po-item-list__danger", ctx_r0.danger);
    i0.ɵɵattribute("aria-disabled", ctx_r0.disabled || !ctx_r0.visible)("aria-label", ctx_r0.label);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.icon);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.label);
} }
function PoItemListComponent_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 12);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("innerHTML", ctx_r6.getLabelFormatted(ctx_r6.label), i0.ɵɵsanitizeHtml);
} }
function PoItemListComponent_div_2_ng_template_3_Template(rf, ctx) { }
const _c1$H = a0 => ({ $implicit: a0 });
function PoItemListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9, 5);
    i0.ɵɵlistener("click", function PoItemListComponent_div_2_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onComboItem(ctx_r8.item, $event)); });
    i0.ɵɵtemplate(2, PoItemListComponent_div_2_span_2_Template, 1, 1, "span", 10)(3, PoItemListComponent_div_2_ng_template_3_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-item-list__separator", ctx_r1.separator)("po-item-list__selected", ctx_r1.selected && !ctx_r1.disabled);
    i0.ɵɵattribute("aria-disabled", ctx_r1.disabled)("aria-label", ctx_r1.label);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.template);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template == null ? null : ctx_r1.template.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(9, _c1$H, ctx_r1.templateContext));
} }
function PoItemListComponent_div_3_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 16);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r10.label);
} }
function PoItemListComponent_div_3_ng_template_3_Template(rf, ctx) { }
function PoItemListComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵlistener("click", function PoItemListComponent_div_3_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onCheckboxItem()); })("keydown", function PoItemListComponent_div_3_Template_div_keydown_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onCheckboxItemEmit($event)); })("keyup", function PoItemListComponent_div_3_Template_div_keyup_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onCheckboxItemEmit($event)); });
    i0.ɵɵelement(1, "po-checkbox", 14);
    i0.ɵɵtemplate(2, PoItemListComponent_div_3_span_2_Template, 2, 1, "span", 15)(3, PoItemListComponent_div_3_ng_template_3_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-item-list__separator", ctx_r2.separator)("po-item-list__selected", ctx_r2.selected && !ctx_r2.disabled)("po-item-list__disabled", ctx_r2.disabled);
    i0.ɵɵattribute("aria-disabled", ctx_r2.disabled)("aria-label", ctx_r2.label);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-disabled-tabindex", true)("p-checkboxValue", ctx_r2.checkboxValue === null ? "mixed" : ctx_r2.checkboxValue)("p-disabled", ctx_r2.disabled);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r2.template);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.template == null ? null : ctx_r2.template.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(14, _c1$H, ctx_r2.templateContext));
} }
class PoItemListComponent extends PoItemListBaseComponent {
    sanitized;
    itemList;
    selectedView;
    param;
    clickListener;
    constructor(sanitized) {
        super();
        this.sanitized = sanitized;
    }
    ngOnChanges(changes) {
        if (this.isTabs) {
            if (changes.tabHide?.currentValue || changes.disabled?.currentValue) {
                this.tabsItem.emit(this.item);
            }
            else if (changes.activeTabs?.currentValue) {
                this.emitActiveTabs(this.item);
            }
        }
    }
    onCheckboxItem() {
        const option = { [this.fieldValue]: this.value, [this.fieldLabel]: this.label };
        const selected = !this.checkboxValue;
        this.checkboxItem.emit({ option, selected });
    }
    onComboItem(options, event) {
        const option = { [this.fieldValue]: this.value, [this.fieldLabel]: this.label };
        this.selectedView = options;
        this.comboItem.emit({ ...option, event });
    }
    compareObjects(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
    onCheckboxItemEmit(event) {
        if ((event && event.code === 'Enter') || event.code === 'Space') {
            this.onCheckboxItem();
        }
    }
    getLabelFormatted(label) {
        const sanitizedLabel = this.sanitizeTagHTML(label);
        let format = sanitizedLabel;
        if (this.isFiltering || this.validateForOptionsLabel()) {
            const labelInput = this.sanitizeTagHTML(this.searchValue.toString().toLowerCase());
            const labelLowerCase = sanitizedLabel.toLowerCase();
            const openTagBold = '<span class="po-font-text-large-bold">';
            const closeTagBold = '</span>';
            let startString;
            let middleString;
            let endString;
            switch (this.filterMode) {
                case PoItemListFilterMode.startsWith:
                case PoItemListFilterMode.contains:
                    const indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                    if (indexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, indexOfLabelInput);
                        middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                        endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                        format = startString + openTagBold + middleString + closeTagBold + endString;
                    }
                    break;
                case PoItemListFilterMode.endsWith:
                    const lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                    if (lastIndexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                        middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                        format = startString + openTagBold + middleString + closeTagBold;
                    }
                    break;
            }
        }
        return this.safeHtml(format);
    }
    validateForOptionsLabel() {
        return this.comboService && this.searchValue && !this.compareCache && this.shouldMarkLetters;
    }
    safeHtml(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
    sanitizeTagHTML(value = '') {
        return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
    }
    static ɵfac = function PoItemListComponent_Factory(t) { return new (t || PoItemListComponent)(i0.ɵɵdirectiveInject(i1$1.DomSanitizer)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoItemListComponent, selectors: [["po-item-list"]], viewQuery: function PoItemListComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1C, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemList = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 4, vars: 3, consts: [[3, "ngSwitch", "keydown"], ["class", "po-item-list po-item-list__action", 3, "po-item-list__separator", "po-item-list__disabled", "po-item-list__selected", "po-item-list__hidden", "po-item-list__danger", 4, "ngSwitchDefault"], ["class", "po-item-list po-item-list__option", 3, "po-item-list__separator", "po-item-list__selected", "click", 4, "ngSwitchCase"], ["class", "po-item-list po-item-list__check", 3, "po-item-list__separator", "po-item-list__selected", "po-item-list__disabled", "click", "keydown", "keyup", 4, "ngSwitchCase"], [1, "po-item-list", "po-item-list__action"], ["itemList", ""], ["class", "po-popup-icon-item", 3, "p-icon", 4, "ngIf"], [1, "po-item-list-label"], [1, "po-popup-icon-item", 3, "p-icon"], [1, "po-item-list", "po-item-list__option", 3, "click"], ["class", "po-item-list-label", 3, "innerHTML", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-item-list-label", 3, "innerHTML"], [1, "po-item-list", "po-item-list__check", 3, "click", "keydown", "keyup"], [3, "p-disabled-tabindex", "p-checkboxValue", "p-disabled"], ["class", "po-item-list__label", 4, "ngIf"], [1, "po-item-list__label"]], template: function PoItemListComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementContainerStart(0, 0);
            i0.ɵɵlistener("keydown", function PoItemListComponent_Template_ng_container_keydown_0_listener($event) { return ctx.onCheckboxItemEmit($event); });
            i0.ɵɵtemplate(1, PoItemListComponent_div_1_Template, 5, 14, "div", 1)(2, PoItemListComponent_div_2_Template, 4, 11, "div", 2)(3, PoItemListComponent_div_3_Template, 4, 16, "div", 3);
            i0.ɵɵelementContainerEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngSwitchCase", "option");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "check");
        } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, PoCheckboxComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoItemListComponent, [{
        type: Component,
        args: [{ selector: 'po-item-list', template: "<ng-container [ngSwitch]=\"type\" (keydown)=\"onCheckboxItemEmit($event)\">\n  <div\n    *ngSwitchDefault\n    #itemList\n    [class.po-item-list__separator]=\"separator\"\n    [class.po-item-list__disabled]=\"disabled || !visible\"\n    [class.po-item-list__selected]=\"(selected || activeTabs) && !disabled\"\n    [class.po-item-list__hidden]=\"tabHide\"\n    [attr.aria-disabled]=\"disabled || !visible\"\n    [attr.aria-label]=\"label\"\n    [class.po-item-list__danger]=\"danger\"\n    class=\"po-item-list po-item-list__action\"\n  >\n    <po-icon *ngIf=\"icon\" class=\"po-popup-icon-item\" [p-icon]=\"icon\"></po-icon>\n    <span class=\"po-item-list-label\">{{ label }}</span>\n  </div>\n\n  <div\n    *ngSwitchCase=\"'option'\"\n    #itemList\n    class=\"po-item-list po-item-list__option\"\n    [class.po-item-list__separator]=\"separator\"\n    [class.po-item-list__selected]=\"selected && !disabled\"\n    [attr.aria-disabled]=\"disabled\"\n    [attr.aria-label]=\"label\"\n    (click)=\"onComboItem(item, $event)\"\n  >\n    <span *ngIf=\"!template\" class=\"po-item-list-label\" [innerHTML]=\"getLabelFormatted(label)\"></span>\n\n    <ng-template [ngTemplateOutlet]=\"template?.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: templateContext }\">\n    </ng-template>\n  </div>\n\n  <div\n    *ngSwitchCase=\"'check'\"\n    class=\"po-item-list po-item-list__check\"\n    [class.po-item-list__separator]=\"separator\"\n    [class.po-item-list__selected]=\"selected && !disabled\"\n    [class.po-item-list__disabled]=\"disabled\"\n    [attr.aria-disabled]=\"disabled\"\n    [attr.aria-label]=\"label\"\n    (click)=\"onCheckboxItem()\"\n    (keydown)=\"onCheckboxItemEmit($event)\"\n    (keyup)=\"onCheckboxItemEmit($event)\"\n  >\n    <po-checkbox\n      [p-disabled-tabindex]=\"true\"\n      [p-checkboxValue]=\"checkboxValue === null ? 'mixed' : checkboxValue\"\n      [p-disabled]=\"disabled\"\n    ></po-checkbox>\n\n    <span class=\"po-item-list__label\" *ngIf=\"!template\">{{ label }}</span>\n\n    <ng-template [ngTemplateOutlet]=\"template?.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: templateContext }\">\n    </ng-template>\n  </div>\n</ng-container>\n" }]
    }], () => [{ type: i1$1.DomSanitizer }], { itemList: [{
            type: ViewChild,
            args: ['itemList', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoItemListComponent, { className: "PoItemListComponent", filePath: "lib/components/po-listbox/po-item-list/po-item-list.component.ts", lineNumber: 13 }); })();

const _c0$1B = ["inputElement"];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de pesquisa que será criado dentro do search do `po-listbox`.
 */
class PoSearchListComponent {
    cd;
    inputElement;
    /** Propriedade que recebe as literais definidas no `po-listbox`. */
    literals;
    fieldValue;
    /** Evento que será disparado a cada tecla digitada no campo de busca. */
    change = new EventEmitter();
    _placeholder;
    constructor(cd) {
        this.cd = cd;
    }
    /**
     * @optional
     *
     * @description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * @default `Buscar`
     */
    set placeholder(placeholder) {
        this._placeholder =
            placeholder && this.isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
    }
    get placeholder() {
        return this._placeholder || this.literals.placeholderSearch;
    }
    get inputValue() {
        return this.inputElement.nativeElement.value;
    }
    onChange(event) {
        this.change.emit({ event: event, [this.fieldValue]: this.inputElement.nativeElement.value });
    }
    setFocus() {
        this.inputElement.nativeElement.focus();
    }
    clean() {
        this.inputElement.nativeElement.value = '';
        this.cd.markForCheck();
    }
    isTypeof(object, type) {
        return typeof object === type;
    }
    static ɵfac = function PoSearchListComponent_Factory(t) { return new (t || PoSearchListComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSearchListComponent, selectors: [["po-search-list"]], viewQuery: function PoSearchListComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1B, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        } }, inputs: { literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"] }, outputs: { change: "p-change" }, decls: 5, vars: 1, consts: [[1, "po-field-container-content", "po-listbox-container-search"], [1, "po-field-icon-container-left"], ["p-icon", "ICON_SEARCH", 1, "po-field-icon", "po-icon-input"], ["type", "text", 1, "po-input", "po-input-icon-left", "po-listbox-search-input", 3, "placeholder", "keyup"], ["inputElement", ""]], template: function PoSearchListComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵelement(2, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("keyup", function PoSearchListComponent_Template_input_keyup_3_listener($event) { return ctx.onChange($event); });
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("placeholder", ctx.placeholder);
        } }, dependencies: [PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSearchListComponent, [{
        type: Component,
        args: [{ selector: 'po-search-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container-content po-listbox-container-search\">\n  <div class=\"po-field-icon-container-left\">\n    <po-icon p-icon=\"ICON_SEARCH\" class=\"po-field-icon po-icon-input\"></po-icon>\n  </div>\n\n  <input\n    #inputElement\n    class=\"po-input po-input-icon-left po-listbox-search-input\"\n    type=\"text\"\n    [placeholder]=\"placeholder\"\n    (keyup)=\"onChange($event)\"\n  />\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { inputElement: [{
            type: ViewChild,
            args: ['inputElement', { read: ElementRef, static: true }]
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSearchListComponent, { className: "PoSearchListComponent", filePath: "lib/components/po-listbox/po-search-list/po-search-list.component.ts", lineNumber: 25 }); })();

const _c0$1A = ["listbox"];
const _c1$G = ["listboxItemList"];
const _c2$k = ["searchElement"];
function PoListBoxComponent_po_search_list_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-search-list", 6, 7);
    i0.ɵɵlistener("p-change", function PoListBoxComponent_po_search_list_3_Template_po_search_list_p_change_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.callChangeSearch($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-literals", ctx_r1.literalSearch)("p-field-value", ctx_r1.fieldValueSearch)("p-placeholder", ctx_r1.placeholderSearch);
} }
function PoListBoxComponent_ng_container_4_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 12);
    i0.ɵɵlistener("click", function PoListBoxComponent_ng_container_4_li_3_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r12.changeAll.emit()); })("keydown", function PoListBoxComponent_ng_container_4_li_3_Template_li_keydown_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.changeAllEmit($event)); })("keydown", function PoListBoxComponent_ng_container_4_li_3_Template_li_keydown_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r15.onSelectAllCheckboxKeyDown($event)); });
    i0.ɵɵelement(1, "po-item-list", 13);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵattribute("aria-checked", ctx_r10.checkboxAllValue === null ? "mixed" : ctx_r10.checkboxAllValue);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-selected", ctx_r10.checkboxAllValue)("p-label", ctx_r10.literals.selectAll)("p-checkbox-value", ctx_r10.checkboxAllValue);
} }
function PoListBoxComponent_ng_container_4_li_4_label_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label", 17);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r16 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", item_r16.label, " ");
} }
function PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-item-list", 18);
    i0.ɵɵlistener("p-selectcheckbox-item", function PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template_po_item_list_p_selectcheckbox_item_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r20.checkboxClicked($event)); })("p-selectcombo-item", function PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template_po_item_list_p_selectcombo_item_0_listener() { i0.ɵɵrestoreView(_r21); const item_r16 = i0.ɵɵnextContext().$implicit; const ctx_r22 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r22.optionClicked(item_r16)); })("p-emit-item-tabs", function PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template_po_item_list_p_emit_item_tabs_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r24 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r24.onSelectTabs($event)); })("p-activated-tabs", function PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template_po_item_list_p_activated_tabs_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r25 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r25.onActivatedTabs($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r16 = i0.ɵɵnextContext().$implicit;
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-disabled", ctx_r18.returnBooleanValue(item_r16, "disabled"))("p-visible", ctx_r18.returnBooleanValue(item_r16, "visible"))("p-checkbox-value", ctx_r18.isSelectedItem(item_r16))("p-label", item_r16[ctx_r18.fieldLabel])("p-value", item_r16[ctx_r18.fieldValue])("p-selected", ctx_r18.isSelectedItem(item_r16) || item_r16.selected)("p-active-tabs", item_r16.active)("p-separator", item_r16.separator)("p-danger", item_r16.danger || item_r16.type === "danger")("p-icon", item_r16.icon)("p-type", ctx_r18.type)("p-item", item_r16)("p-tab-hide", item_r16.hide)("p-is-tabs", ctx_r18.isTabs)("p-field-value", ctx_r18.fieldValue)("p-field-label", ctx_r18.fieldLabel)("p-template", ctx_r18.template)("p-template-context", item_r16)("p-search-value", ctx_r18.searchValue)("p-filter-mode", ctx_r18.filterMode)("p-filtering", ctx_r18.isFiltering)("p-should-mark-letter", ctx_r18.shouldMarkLetters)("p-compare-cache", ctx_r18.compareCache)("p-combo-service", ctx_r18.comboService);
    i0.ɵɵattribute("data-item-list", ctx_r18.formatItemList(item_r16));
} }
function PoListBoxComponent_ng_container_4_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 14);
    i0.ɵɵlistener("click", function PoListBoxComponent_ng_container_4_li_4_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r28); const item_r16 = restoredCtx.$implicit; const ctx_r27 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r27.onSelectItem(item_r16)); })("keydown", function PoListBoxComponent_ng_container_4_li_4_Template_li_keydown_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r28); const item_r16 = restoredCtx.$implicit; const ctx_r29 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r29.onKeyDown(item_r16, $event)); });
    i0.ɵɵtemplate(1, PoListBoxComponent_ng_container_4_li_4_label_1_Template, 2, 1, "label", 15)(2, PoListBoxComponent_ng_container_4_li_4_po_item_list_2_Template, 1, 25, "po-item-list", 16);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r16 = ctx.$implicit;
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-listbox-item", ctx_r11.visible);
    i0.ɵɵproperty("cdkOption", item_r16[ctx_r11.fieldLabel])("cdkOptionDisabled", ctx_r11.returnBooleanValue(item_r16, "disabled") || ctx_r11.returnBooleanValue(item_r16, "visible") === false || item_r16.options);
    i0.ɵɵattribute("aria-selected", ctx_r11.isSelectedItem(item_r16) || item_r16.selected);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", item_r16.options);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r11.returnBooleanValue(item_r16, "visible") !== false && !item_r16.options);
} }
function PoListBoxComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ul", 8, 9);
    i0.ɵɵtemplate(3, PoListBoxComponent_ng_container_4_li_3_Template, 2, 4, "li", 10)(4, PoListBoxComponent_ng_container_4_li_4_Template, 3, 7, "li", 11);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("cdkListboxMultiple", ctx_r2.type === "check");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.type === "check" && ctx_r2.items.length && !(ctx_r2.searchElement == null ? null : ctx_r2.searchElement.inputValue) && !ctx_r2.hideSelectAll);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r2.items);
} }
function PoListBoxComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "po-loading-overlay", 19);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-listbox-container-loading-default", !ctx_r3.infiniteLoading);
} }
function PoListBoxComponent_ng_template_6_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 21)(1, "span");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r30 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r30.literals.noItems, "");
} }
function PoListBoxComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoListBoxComponent_ng_template_6_div_0_Template, 3, 1, "div", 20);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", !ctx_r4.items.length && !ctx_r4.isServerSearching && ctx_r4.type !== "action");
} }
const _c3$e = [[["", "p-popup-header-template", ""]]];
const _c4$5 = ["[p-popup-header-template]"];
class PoListBoxComponent extends PoListBoxBaseComponent {
    element;
    renderer;
    router;
    changeDetector;
    listbox;
    listboxItemList;
    searchElement;
    scrollEvent$;
    subscriptionScrollEvent;
    constructor(element, renderer, languageService, router, changeDetector) {
        super(languageService);
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        this.setListBoxMaxHeight();
        this.listboxItemList?.nativeElement.focus();
    }
    ngOnChanges(changes) {
        if (changes?.items) {
            this.setListBoxMaxHeight();
        }
        if (this.visible && this.infiniteScroll) {
            this.checkInfiniteScroll();
        }
    }
    ngOnDestroy() {
        if (this.subscriptionScrollEvent && this.subscriptionScrollEvent.unsubscribe) {
            this.subscriptionScrollEvent.unsubscribe();
        }
    }
    onSelectItem(itemListAction) {
        const isDisabled = itemListAction.hasOwnProperty('disabled') &&
            itemListAction.disabled !== null &&
            itemListAction.disabled !== undefined
            ? this.returnBooleanValue(itemListAction, 'disabled')
            : false;
        const isVisible = itemListAction.hasOwnProperty('visible') &&
            itemListAction.visible !== null &&
            itemListAction.visible !== undefined
            ? this.returnBooleanValue(itemListAction, 'visible')
            : true;
        if (this.isTabs && !itemListAction.disabled && !itemListAction.hide) {
            this.onClickTabs(itemListAction);
        }
        if (itemListAction && itemListAction.action && !isDisabled && isVisible) {
            itemListAction.action(this.param || itemListAction);
        }
        if (itemListAction && itemListAction.url && !isDisabled && isVisible) {
            return this.openUrl(itemListAction.url);
        }
    }
    onSelectAllCheckboxKeyDown(event) {
        if (event.code === 'Tab') {
            this.closeEvent.emit();
        }
    }
    onKeyDown(itemListAction, event) {
        event.preventDefault();
        if ((event && event.code === 'Enter') || event.code === 'Space') {
            switch (this.type) {
                case 'check':
                    this.onSelectCheckBoxItem(itemListAction);
                    break;
                case 'option':
                    this.optionClicked(itemListAction);
                    break;
                case 'action':
                    this.onSelectItem(itemListAction);
                    break;
            }
        }
        if ((event && event.code === 'Escape') || event.code === 'Tab') {
            this.closeEvent.emit();
        }
    }
    checkboxClicked({ option, selected }) {
        if (this.type === 'check') {
            this.change.emit({ selected, option });
        }
    }
    optionClicked(option) {
        if (this.type === 'option') {
            this.items.filter(item => item[this.fieldValue] === option[this.fieldValue] ? (item['selected'] = true) : (item['selected'] = false));
            this.selectCombo.emit({ ...option });
        }
    }
    onSelectCheckBoxItem(option) {
        const selected = !this.isSelectedItem(option);
        this.checkboxClicked({ option, selected });
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem[this.fieldValue] === option[this.fieldValue]);
    }
    changeAllEmit(event) {
        if ((event && event.code === 'Enter') || event.code === 'Space') {
            this.changeAll.emit();
        }
    }
    onSelectTabs(tab) {
        if (this.isTabs && tab) {
            this.changeStateTabs.emit(tab);
        }
    }
    onActivatedTabs(tab) {
        this.activatedTab.emit(tab);
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    showMoreInfiniteScroll({ target }) {
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.UpdateInfiniteScroll.emit();
        }
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime(100));
    }
    setFocus() {
        this.listboxItemList.nativeElement.focus();
    }
    checkInfiniteScroll() {
        if (this.hasInfiniteScroll()) {
            this.includeInfiniteScroll();
        }
    }
    hasInfiniteScroll() {
        this.changeDetector.detectChanges();
        return this.infiniteScroll && this.listboxItemList?.nativeElement.scrollHeight;
    }
    checkTemplate() {
        if (this.cache || this.infiniteScroll) {
            return this.items.length;
        }
        else {
            return !this.isServerSearching && this.items.length;
        }
    }
    includeInfiniteScroll() {
        this.scrollEvent$ = this.scrollListener(this.listboxItemList?.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => {
            this.showMoreInfiniteScroll(event);
        });
    }
    returnBooleanValue(itemListAction, property) {
        return isTypeof(itemListAction[property], 'function')
            ? itemListAction[property](this.param || itemListAction)
            : itemListAction[property];
    }
    setListBoxMaxHeight() {
        const itemsLength = this.items.length;
        if (itemsLength > 6) {
            if (this.type === 'check' && !this.hideSearch) {
                this.renderer.setStyle(this.listbox.nativeElement, 'maxHeight', `${44 * 6 - 44 / 3 + 60}px`);
            }
            else {
                this.renderer.setStyle(this.listbox.nativeElement, 'maxHeight', `${44 * 6 - 44 / 3}px`);
            }
        }
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    onClickTabs(tab) {
        if (!tab.disabled) {
            this.clickTab.emit(tab);
        }
    }
    formatItemList(item) {
        if (this.isTabs) {
            return item.id;
        }
        else {
            try {
                return JSON.stringify(item);
            }
            catch (error) {
                return item;
            }
        }
    }
    static ɵfac = function PoListBoxComponent_Factory(t) { return new (t || PoListBoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoListBoxComponent, selectors: [["po-listbox"]], viewQuery: function PoListBoxComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1A, 7);
            i0.ɵɵviewQuery(_c1$G, 5);
            i0.ɵɵviewQuery(_c2$k, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listbox = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listboxItemList = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchElement = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c4$5, decls: 8, vars: 8, consts: [[1, "po-listbox", 3, "hidden"], ["listbox", ""], [3, "p-literals", "p-field-value", "p-placeholder", "p-change", 4, "ngIf"], [4, "ngIf", "ngIfElse"], [3, "po-listbox-container-loading-default", 4, "ngIf"], ["noDataTemplate", ""], [3, "p-literals", "p-field-value", "p-placeholder", "p-change"], ["searchElement", ""], ["cdkListbox", "", 1, "po-listbox-list", 3, "cdkListboxMultiple"], ["listboxItemList", ""], ["cdkOption", "selectAll", 3, "click", "keydown", 4, "ngIf"], [3, "po-listbox-item", "cdkOption", "cdkOptionDisabled", "click", "keydown", 4, "ngFor", "ngForOf"], ["cdkOption", "selectAll", 3, "click", "keydown"], ["p-type", "check", "p-value", "selectAll", 3, "p-selected", "p-label", "p-checkbox-value"], [3, "cdkOption", "cdkOptionDisabled", "click", "keydown"], ["class", "po-combo-item-title", 4, "ngIf"], [3, "p-disabled", "p-visible", "p-checkbox-value", "p-label", "p-value", "p-selected", "p-active-tabs", "p-separator", "p-danger", "p-icon", "p-type", "p-item", "p-tab-hide", "p-is-tabs", "p-field-value", "p-field-label", "p-template", "p-template-context", "p-search-value", "p-filter-mode", "p-filtering", "p-should-mark-letter", "p-compare-cache", "p-combo-service", "p-selectcheckbox-item", "p-selectcombo-item", "p-emit-item-tabs", "p-activated-tabs", 4, "ngIf"], [1, "po-combo-item-title"], [3, "p-disabled", "p-visible", "p-checkbox-value", "p-label", "p-value", "p-selected", "p-active-tabs", "p-separator", "p-danger", "p-icon", "p-type", "p-item", "p-tab-hide", "p-is-tabs", "p-field-value", "p-field-label", "p-template", "p-template-context", "p-search-value", "p-filter-mode", "p-filtering", "p-should-mark-letter", "p-compare-cache", "p-combo-service", "p-selectcheckbox-item", "p-selectcombo-item", "p-emit-item-tabs", "p-activated-tabs"], ["p-size", "md"], ["class", "po-listbox-container-no-data po-text-center", 4, "ngIf"], [1, "po-listbox-container-no-data", "po-text-center"]], template: function PoListBoxComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef(_c3$e);
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵprojection(2);
            i0.ɵɵtemplate(3, PoListBoxComponent_po_search_list_3_Template, 2, 3, "po-search-list", 2)(4, PoListBoxComponent_ng_container_4_Template, 5, 3, "ng-container", 3)(5, PoListBoxComponent_div_5_Template, 2, 2, "div", 4)(6, PoListBoxComponent_ng_template_6_Template, 1, 1, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            const _r5 = i0.ɵɵreference(7);
            i0.ɵɵclassProp("po-listbox-check", ctx.type === "check" || ctx.type === "option");
            i0.ɵɵproperty("hidden", ctx.visible);
            i0.ɵɵattribute("data-type", ctx.type);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !ctx.hideSearch && ctx.type === "check");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.checkTemplate())("ngIfElse", _r5);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isServerSearching && ctx.type !== "action");
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoLoadingOverlayComponent, i5.CdkListbox, i5.CdkOption, PoItemListComponent, PoSearchListComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListBoxComponent, [{
        type: Component,
        args: [{ selector: 'po-listbox', template: "<div\n  #listbox\n  class=\"po-listbox\"\n  [class.po-listbox-check]=\"type === 'check' || type === 'option'\"\n  [attr.data-type]=\"type\"\n  [hidden]=\"visible\"\n>\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <po-search-list\n    #searchElement\n    *ngIf=\"!hideSearch && type === 'check'\"\n    (p-change)=\"callChangeSearch($event)\"\n    [p-literals]=\"literalSearch\"\n    [p-field-value]=\"fieldValueSearch\"\n    [p-placeholder]=\"placeholderSearch\"\n  ></po-search-list>\n\n  <ng-container *ngIf=\"checkTemplate(); else noDataTemplate\">\n    <ul #listboxItemList cdkListbox [cdkListboxMultiple]=\"type === 'check'\" class=\"po-listbox-list\">\n      <li\n        cdkOption=\"selectAll\"\n        *ngIf=\"type === 'check' && items.length && !searchElement?.inputValue && !hideSelectAll\"\n        [attr.aria-checked]=\"checkboxAllValue === null ? 'mixed' : checkboxAllValue\"\n        (click)=\"changeAll.emit()\"\n        (keydown)=\"changeAllEmit($event)\"\n        (keydown)=\"onSelectAllCheckboxKeyDown($event)\"\n      >\n        <po-item-list\n          [p-selected]=\"checkboxAllValue\"\n          p-type=\"check\"\n          [p-label]=\"literals.selectAll\"\n          p-value=\"selectAll\"\n          [p-checkbox-value]=\"checkboxAllValue\"\n        >\n        </po-item-list>\n      </li>\n      <li\n        [class.po-listbox-item]=\"visible\"\n        *ngFor=\"let item of items\"\n        [cdkOption]=\"item[fieldLabel]\"\n        [cdkOptionDisabled]=\"\n          returnBooleanValue(item, 'disabled') || returnBooleanValue(item, 'visible') === false || item.options\n        \"\n        [attr.aria-selected]=\"isSelectedItem(item) || item.selected\"\n        (click)=\"onSelectItem(item)\"\n        (keydown)=\"onKeyDown(item, $event)\"\n      >\n        <label *ngIf=\"item.options\" class=\"po-combo-item-title\">\n          {{ item.label }}\n        </label>\n        <po-item-list\n          *ngIf=\"returnBooleanValue(item, 'visible') !== false && !item.options\"\n          [p-disabled]=\"returnBooleanValue(item, 'disabled')\"\n          [p-visible]=\"returnBooleanValue(item, 'visible')\"\n          [p-checkbox-value]=\"isSelectedItem(item)\"\n          [attr.data-item-list]=\"formatItemList(item)\"\n          [p-label]=\"item[fieldLabel]\"\n          [p-value]=\"item[fieldValue]\"\n          [p-selected]=\"isSelectedItem(item) || item.selected\"\n          [p-active-tabs]=\"item.active\"\n          [p-separator]=\"item.separator\"\n          [p-danger]=\"item.danger || item.type === 'danger'\"\n          [p-icon]=\"item.icon\"\n          [p-type]=\"type\"\n          [p-item]=\"item\"\n          [p-tab-hide]=\"item.hide\"\n          [p-is-tabs]=\"isTabs\"\n          [p-field-value]=\"fieldValue\"\n          [p-field-label]=\"fieldLabel\"\n          [p-template]=\"template\"\n          [p-template-context]=\"item\"\n          (p-selectcheckbox-item)=\"checkboxClicked($event)\"\n          (p-selectcombo-item)=\"optionClicked(item)\"\n          (p-emit-item-tabs)=\"onSelectTabs($event)\"\n          (p-activated-tabs)=\"onActivatedTabs($event)\"\n          [p-search-value]=\"searchValue\"\n          [p-filter-mode]=\"filterMode\"\n          [p-filtering]=\"isFiltering\"\n          [p-should-mark-letter]=\"shouldMarkLetters\"\n          [p-compare-cache]=\"compareCache\"\n          [p-combo-service]=\"comboService\"\n        ></po-item-list>\n      </li>\n    </ul>\n  </ng-container>\n\n  <div *ngIf=\"isServerSearching && type !== 'action'\" [class.po-listbox-container-loading-default]=\"!infiniteLoading\">\n    <po-loading-overlay p-size=\"md\"></po-loading-overlay>\n  </div>\n\n  <ng-template #noDataTemplate>\n    <div\n      *ngIf=\"!items.length && !isServerSearching && type !== 'action'\"\n      class=\"po-listbox-container-no-data po-text-center\"\n    >\n      <span> {{ literals.noItems }}</span>\n    </div>\n  </ng-template>\n</div>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: PoLanguageService }, { type: i2.Router }, { type: i0.ChangeDetectorRef }], { listbox: [{
            type: ViewChild,
            args: ['listbox', { static: true }]
        }], listboxItemList: [{
            type: ViewChild,
            args: ['listboxItemList', { static: false }]
        }], searchElement: [{
            type: ViewChild,
            args: ['searchElement']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoListBoxComponent, { className: "PoListBoxComponent", filePath: "lib/components/po-listbox/po-listbox.component.ts", lineNumber: 29 }); })();

const _c0$1z = ["popupRef"];
const _c1$F = ["listbox"];
const _c2$j = ["poListBoxRef"];
function PoPopupComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMapInterpolate1("po-popup-arrow po-arrow-", ctx_r2.arrowDirection, "");
} }
function PoPopupComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 1, 2);
    i0.ɵɵtemplate(2, PoPopupComponent_div_0_div_2_Template, 1, 3, "div", 3);
    i0.ɵɵelementStart(3, "div", 4)(4, "po-listbox", 5, 6);
    i0.ɵɵlistener("p-close", function PoPopupComponent_div_0_Template_po_listbox_p_close_4_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.close()); });
    i0.ɵɵelementStart(7, "div", 7);
    i0.ɵɵprojection(8);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.hideArrow);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-items", ctx_r0.actions)("p-param", ctx_r0.param);
} }
const _c3$d = [[["", "p-popup-header-template", ""]]];
const _c4$4 = ["[p-popup-header-template]"];
/**
 *
 * @docsExtends PoPopupBaseComponent
 *
 * @example
 *
 * <example name="po-popup-basic" title="PO Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="PO Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="PO Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
class PoPopupComponent extends PoPopupBaseComponent {
    renderer;
    router;
    poControlPosition;
    changeDetector;
    popupRef;
    listbox;
    //utilizado apenas no theme builder
    poListBoxRef;
    constructor(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        super();
        this.renderer = renderer;
        this.router = router;
        this.poControlPosition = poControlPosition;
        this.changeDetector = changeDetector;
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    close() {
        this.removeListeners();
        this.showPopup = false;
        this.closeEvent.emit();
    }
    onActionClick(popupAction) {
        const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            popupAction.action(this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    }
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    open(param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    }
    returnBooleanValue(popupAction, property) {
        return isTypeof(popupAction[property], 'function')
            ? popupAction[property](this.param || popupAction)
            : popupAction[property];
    }
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    toggle(param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    }
    checkAllActionIsInvisible() {
        if (this.actions.every(item => item.visible === false)) {
            return true;
        }
        return false;
    }
    clickedOutDisabledItem(event) {
        const containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    }
    clickedOutHeaderTemplate(event) {
        const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    }
    clickedOutTarget(event) {
        return this.target && !this.target.contains(event.target);
    }
    closePopupOnClickout(event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    }
    elementContains(element, className) {
        return element && element.classList.contains(className);
    }
    hasContentToShow() {
        return !!(this.popupRef?.nativeElement && this.listbox?.nativeElement);
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onScroll = ({ target }) => {
        const { showPopup, popupRef } = this;
        if (showPopup && popupRef?.nativeElement && !popupRef.nativeElement.contains(target)) {
            this.close();
        }
    };
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setPosition() {
        if (this.listbox.nativeElement.querySelector('.po-listbox')) {
            this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
            this.poControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.poControlPosition.getArrowDirection();
        }
    }
    validateInitialContent() {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    }
    static ɵfac = function PoPopupComponent_Factory(t) { return new (t || PoPopupComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPopupComponent, selectors: [["po-popup"]], viewQuery: function PoPopupComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1z, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$F, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$j, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupRef = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listbox = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poListBoxRef = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4$4, decls: 1, vars: 1, consts: [["class", "po-popup", 4, "ngIf"], [1, "po-popup"], ["popupRef", ""], [3, "class", 4, "ngIf"], [1, "po-popup-container"], ["p-type", "action", 3, "p-items", "p-param", "p-close"], ["listbox", "", "poListBoxRef", ""], ["p-popup-header-template", ""]], template: function PoPopupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef(_c3$d);
            i0.ɵɵtemplate(0, PoPopupComponent_div_0_Template, 9, 3, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.showPopup && ctx.actions.length && !ctx.checkAllActionIsInvisible());
        } }, dependencies: [i1.NgIf, PoListBoxComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupComponent, [{
        type: Component,
        args: [{ selector: 'po-popup', providers: [PoControlPositionService], template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup && actions.length && !checkAllActionIsInvisible()\">\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popup-container\">\n    <po-listbox #listbox #poListBoxRef p-type=\"action\" [p-items]=\"actions\" [p-param]=\"param\" (p-close)=\"close()\">\n      <div p-popup-header-template>\n        <ng-content select=\"[p-popup-header-template]\"></ng-content>\n      </div>\n    </po-listbox>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i2.Router }, { type: PoControlPositionService }, { type: i0.ChangeDetectorRef }], { popupRef: [{
            type: ViewChild,
            args: ['popupRef', { read: ElementRef }]
        }], listbox: [{
            type: ViewChild,
            args: ['listbox', { read: ElementRef }]
        }], poListBoxRef: [{
            type: ViewChild,
            args: ['poListBoxRef']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPopupComponent, { className: "PoPopupComponent", filePath: "lib/components/po-popup/po-popup.component.ts", lineNumber: 38 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
class PoBreadcrumbFavoriteService {
    http;
    _url;
    _bodyParams;
    get url() {
        return this._url;
    }
    get bodyParams() {
        return this._bodyParams;
    }
    constructor(http) {
        this.http = http;
    }
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
    static ɵfac = function PoBreadcrumbFavoriteService_Factory(t) { return new (t || PoBreadcrumbFavoriteService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoBreadcrumbFavoriteService, factory: PoBreadcrumbFavoriteService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

function PoBreadcrumbFavoriteComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.literals == null ? null : ctx_r0.literals.unfavorite);
} }
function PoBreadcrumbFavoriteComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.literals == null ? null : ctx_r1.literals.favorite);
} }
const PoBreadcrumbLiterals = {
    en: {
        favorite: 'Favorite',
        unfavorite: 'Unfavorite'
    },
    es: {
        favorite: 'Favor',
        unfavorite: 'Desfavorecer'
    },
    pt: {
        favorite: 'Favoritar',
        unfavorite: 'Desfavoritar'
    },
    ru: {
        favorite: 'Любимый',
        unfavorite: 'Немилость'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza o serviço de favoritar do po-breadcrumb.
 */
class PoBreadcrumbFavoriteComponent {
    service;
    languageService;
    // URL do serviço.
    favoriteService;
    // Item do breadcrumb ativo.
    itemActive;
    // Parâmetro que será enviado junto com o serviço de favoritar.
    paramsService;
    // Esconde literal e mantém apenas icone
    hiddenLiteral = false;
    favorite = false;
    literals;
    getSubscription;
    setSubscription;
    constructor(service, languageService) {
        this.service = service;
        this.languageService = languageService;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...PoBreadcrumbLiterals[language]
        };
    }
    ngOnInit() {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    }
    toggleFavoriteAction() {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    }
    getStatusFavorite() {
        this.getSubscription = this.service.getFavorite().subscribe(result => (this.favorite = result.isFavorite));
    }
    setStatusFavorite(status) {
        this.setSubscription = this.service
            .sendStatusFavorite(status)
            .subscribe(result => (this.favorite = result.isFavorite));
    }
    static ɵfac = function PoBreadcrumbFavoriteComponent_Factory(t) { return new (t || PoBreadcrumbFavoriteComponent)(i0.ɵɵdirectiveInject(PoBreadcrumbFavoriteService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbFavoriteComponent, selectors: [["po-breadcrumb-favorite"]], inputs: { favoriteService: [i0.ɵɵInputFlags.None, "p-favorite-service", "favoriteService"], itemActive: [i0.ɵɵInputFlags.None, "p-item-active", "itemActive"], paramsService: [i0.ɵɵInputFlags.None, "p-params-service", "paramsService"], hiddenLiteral: [i0.ɵɵInputFlags.None, "p-hidden-literal", "hiddenLiteral"] }, features: [i0.ɵɵProvidersFeature([PoBreadcrumbFavoriteService])], decls: 4, vars: 4, consts: [["tabindex", "0", "role", "button", 1, "po-breadcrumb-favorite", "po-clickable", 3, "click", "keyup.enter"], ["p-icon", "ICON_STAR", 1, "po-breadcrumb-favorite-star", "po-clickable"], ["class", "po-hidden-sm po-breadcrumb-favorite-label", 4, "ngIf"], [1, "po-hidden-sm", "po-breadcrumb-favorite-label"]], template: function PoBreadcrumbFavoriteComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoBreadcrumbFavoriteComponent_Template_div_click_0_listener() { return ctx.toggleFavoriteAction(); })("keyup.enter", function PoBreadcrumbFavoriteComponent_Template_div_keyup_enter_0_listener() { return ctx.toggleFavoriteAction(); });
            i0.ɵɵelement(1, "po-icon", 1);
            i0.ɵɵtemplate(2, PoBreadcrumbFavoriteComponent_span_2_Template, 2, 1, "span", 2)(3, PoBreadcrumbFavoriteComponent_span_3_Template, 2, 1, "span", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-breadcrumb-favorite-star-active", ctx.favorite);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.favorite && !ctx.hiddenLiteral);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.favorite && !ctx.hiddenLiteral);
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteComponent, [{
        type: Component,
        args: [{ selector: 'po-breadcrumb-favorite', providers: [PoBreadcrumbFavoriteService], template: "<div\n  tabindex=\"0\"\n  role=\"button\"\n  class=\"po-breadcrumb-favorite po-clickable\"\n  (click)=\"toggleFavoriteAction()\"\n  (keyup.enter)=\"toggleFavoriteAction()\"\n>\n  <po-icon\n    p-icon=\"ICON_STAR\"\n    class=\"po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\n  >\n  </po-icon>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite && !hiddenLiteral\">{{\n    literals?.unfavorite\n  }}</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite && !hiddenLiteral\">{{\n    literals?.favorite\n  }}</span>\n</div>\n" }]
    }], () => [{ type: PoBreadcrumbFavoriteService }, { type: PoLanguageService }], { favoriteService: [{
            type: Input,
            args: ['p-favorite-service']
        }], itemActive: [{
            type: Input,
            args: ['p-item-active']
        }], paramsService: [{
            type: Input,
            args: ['p-params-service']
        }], hiddenLiteral: [{
            type: Input,
            args: ['p-hidden-literal']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoBreadcrumbFavoriteComponent, { className: "PoBreadcrumbFavoriteComponent", filePath: "lib/components/po-breadcrumb/po-breadcrumb-favorite/po-breadcrumb-favorite.component.ts", lineNumber: 41 }); })();

const _c0$1y = ["breadcrumb"];
const _c1$E = ["dropdownIcon"];
const _c2$i = ["target"];
const _c3$c = ["popup"];
function PoBreadcrumbComponent_ul_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ul", 6, 7)(2, "li")(3, "po-link", 8);
    i0.ɵɵlistener("p-action", function PoBreadcrumbComponent_ul_3_Template_po_link_p_action_3_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.emitAction(ctx_r7.itemsView[0])); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(4, "po-icon", 9);
    i0.ɵɵelementStart(5, "li", 10, 11);
    i0.ɵɵlistener("click", function PoBreadcrumbComponent_ul_3_Template_li_click_5_listener() { i0.ɵɵrestoreView(_r8); const _r6 = i0.ɵɵreference(16); return i0.ɵɵresetView(_r6.toggle()); })("keyup", function PoBreadcrumbComponent_ul_3_Template_li_keyup_5_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.openPopup($event)); });
    i0.ɵɵelement(7, "po-icon", 12);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(8, "po-icon", 9);
    i0.ɵɵelementStart(9, "li")(10, "po-link", 8);
    i0.ɵɵlistener("p-action", function PoBreadcrumbComponent_ul_3_Template_po_link_p_action_10_listener() { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.emitAction(ctx_r11.itemsView[ctx_r11.itemsView.length - 2])); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(11, "po-icon", 9);
    i0.ɵɵelementStart(12, "li")(13, "span", 13);
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "po-popup", 14, 15);
    i0.ɵɵlistener("p-close", function PoBreadcrumbComponent_ul_3_Template_po_popup_p_close_15_listener() { i0.ɵɵrestoreView(_r8); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.closePopUp()); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const _r5 = i0.ɵɵreference(6);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("p-label", ctx_r1.itemsView[0].label)("p-url", ctx_r1.itemsView[0].link);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-label", ctx_r1.literals.literalButtonPopup);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("p-label", ctx_r1.itemsView[ctx_r1.itemsView.length - 2].label)("p-url", ctx_r1.itemsView[ctx_r1.itemsView.length - 2].link);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-current", ctx_r1.itemsView[ctx_r1.itemsView.length - 1].label);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.itemsView[ctx_r1.itemsView.length - 1].label);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-hide-arrow", true)("p-actions", ctx_r1.itemsViewPopup)("p-target", _r5);
} }
function PoBreadcrumbComponent_ul_4_li_1_po_link_1_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-link", 8);
    i0.ɵɵlistener("p-action", function PoBreadcrumbComponent_ul_4_li_1_po_link_1_Template_po_link_p_action_0_listener() { i0.ɵɵrestoreView(_r21); const item_r14 = i0.ɵɵnextContext().$implicit; const ctx_r19 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r19.emitAction(item_r14)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r14 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("p-label", item_r14.label)("p-url", item_r14.link);
} }
function PoBreadcrumbComponent_ul_4_li_1_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r14 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵattribute("aria-current", item_r14.label);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(item_r14.label);
} }
function PoBreadcrumbComponent_ul_4_li_1_po_icon_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 9);
} }
function PoBreadcrumbComponent_ul_4_li_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 18);
    i0.ɵɵtemplate(1, PoBreadcrumbComponent_ul_4_li_1_po_link_1_Template, 1, 2, "po-link", 19)(2, PoBreadcrumbComponent_ul_4_li_1_span_2_Template, 2, 2, "span", 20)(3, PoBreadcrumbComponent_ul_4_li_1_po_icon_3_Template, 1, 0, "po-icon", 21);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const itemIndex_r15 = ctx.index;
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !(itemIndex_r15 === ctx_r13.itemsView.length - 1));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", itemIndex_r15 === ctx_r13.itemsView.length - 1);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !(itemIndex_r15 === ctx_r13.itemsView.length - 1));
} }
function PoBreadcrumbComponent_ul_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "ul", 16);
    i0.ɵɵtemplate(1, PoBreadcrumbComponent_ul_4_li_1_Template, 4, 3, "li", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r2.itemsView);
} }
function PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-breadcrumb-favorite", 22);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-favorite-service", ctx_r3.favoriteService)("p-item-active", ctx_r3.items[ctx_r3.items.length - 1])("p-params-service", ctx_r3.paramsService)("p-hidden-literal", ctx_r3.hiddenLiteralFavorite);
} }
const poBreadcrumbLiterals = {
    en: {
        literalButtonPopup: 'Menu pop up collapsed'
    },
    es: {
        literalButtonPopup: 'Menú pop up colapsado'
    },
    pt: {
        literalButtonPopup: 'Menu pop up colapsado'
    },
    ru: {
        literalButtonPopup: 'меню свернуто'
    }
};
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent {
    element;
    renderer;
    languageService;
    breadcrumbElement;
    dropdownIcon;
    svgTarget;
    popupContainer;
    showDropdown = false;
    showDropdownToggle = false;
    dropdownItems;
    literals;
    hiddenLiteralFavorite = false;
    _breadcrumbItemsLenght = 0;
    calculatedElement = false;
    differ;
    hiddenWithoutResize = false;
    initialized = false;
    timeoutResize;
    constructor(differs, element, renderer, languageService) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.languageService = languageService;
        this.differ = differs.find([]).create(null);
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poBreadcrumbLiterals[language]
        };
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    ngDoCheck() {
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    ngOnDestroy() {
        this.removeResizeListener();
    }
    emitAction(item) {
        if (item.action) {
            item.action();
        }
    }
    openPopup(event) {
        if (event.code === 'Enter' || event.code === 'Space') {
            this.popupContainer.open();
        }
    }
    closePopUp() {
        this.svgTarget.nativeElement.focus();
    }
    checkChangeOnItems() {
        if (this.differ) {
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    calcBreadcrumb() {
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        const existLabel = this.existsFavoritelabel();
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite, existLabel);
        const breadcrumbTooltip = this.getBreadcrumbTooltipWidth();
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
        if (breadcrumbTooltip && breadcrumb <= breadcrumbTooltip) {
            this.hiddenLiteralFavorite = true;
        }
        else {
            this.hiddenLiteralFavorite = false;
        }
    }
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService
            ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
            : 0;
    }
    getBreadcrumbTooltipWidth() {
        return this.favoriteService ? this.element.nativeElement.querySelector('.po-breadcrumb-tooltip')?.offsetWidth : 0;
    }
    existsFavoritelabel() {
        return !!this.element.nativeElement.querySelector('.po-breadcrumb-favorite-label');
    }
    getBreadcrumbWidth(breadcrumbFavorite, existLabel) {
        const widthSpan = !existLabel ? 95 : 0;
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - (breadcrumbFavorite + widthSpan);
    }
    calcBreadcrumbItemsWidth() {
        const breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(breadcrumb => breadcrumb['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
    }
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            if (this.calculatedElement &&
                !this.hiddenWithoutResize &&
                this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }, 50);
    }
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeResizeListener() {
        this.resizeListener();
    }
    static ɵfac = function PoBreadcrumbComponent_Factory(t) { return new (t || PoBreadcrumbComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbComponent, selectors: [["po-breadcrumb"]], viewQuery: function PoBreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1y, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$E, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$i, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$c, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.breadcrumbElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownIcon = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgTarget = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupContainer = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 3, consts: [[1, "po-breadcrumb"], ["breadcrumb", ""], [1, "po-breadcrumb-items"], ["class", "po-breadcrumb-item po-clickable po-breadcrumb-tooltip", 4, "ngIf"], ["class", "po-breadcrumb-item-container", 4, "ngIf"], [3, "p-favorite-service", "p-item-active", "p-params-service", "p-hidden-literal", 4, "ngIf"], [1, "po-breadcrumb-item", "po-clickable", "po-breadcrumb-tooltip"], ["dropdownIcon", ""], [3, "p-label", "p-url", "p-action"], ["p-icon", "ICON_ARROW_RIGHT po-breadcrumb-icon-arrow"], ["role", "button", "tabindex", "0", 1, "po-breadcrumb-icon-more", 3, "click", "keyup"], ["target", ""], ["p-icon", "ICON_MORE_VERT"], ["role", "link", "tabindex", "0", 1, "po-breadcrumb-item-activate"], ["p-position", "bottom-right", 3, "p-hide-arrow", "p-actions", "p-target", "p-close"], ["popup", ""], [1, "po-breadcrumb-item-container"], ["class", "po-breadcrumb-item", 4, "ngFor", "ngForOf"], [1, "po-breadcrumb-item"], [3, "p-label", "p-url", "p-action", 4, "ngIf"], ["class", "po-breadcrumb-item-activate", "role", "link", "tabindex", "0", 4, "ngIf"], ["p-icon", "ICON_ARROW_RIGHT po-breadcrumb-icon-arrow", 4, "ngIf"], [3, "p-favorite-service", "p-item-active", "p-params-service", "p-hidden-literal"]], template: function PoBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "nav", 0, 1)(2, "div", 2);
            i0.ɵɵtemplate(3, PoBreadcrumbComponent_ul_3_Template, 17, 10, "ul", 3)(4, PoBreadcrumbComponent_ul_4_Template, 2, 1, "ul", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template, 1, 4, "po-breadcrumb-favorite", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.showDropdownToggle && ctx.itemsView.length >= 4);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.showDropdownToggle || ctx.itemsView.length < 4);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.favoriteService);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoLinkComponent, PoPopupComponent, PoIconComponent, PoBreadcrumbFavoriteComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbComponent, [{
        type: Component,
        args: [{ selector: 'po-breadcrumb', template: "<nav class=\"po-breadcrumb\" #breadcrumb>\n  <div class=\"po-breadcrumb-items\">\n    <ul\n      #dropdownIcon\n      *ngIf=\"showDropdownToggle && itemsView.length >= 4\"\n      class=\"po-breadcrumb-item po-clickable po-breadcrumb-tooltip\"\n    >\n      <li>\n        <po-link\n          [p-label]=\"itemsView[0].label\"\n          [p-url]=\"itemsView[0].link\"\n          (p-action)=\"emitAction(itemsView[0])\"\n        ></po-link>\n      </li>\n\n      <po-icon p-icon=\"ICON_ARROW_RIGHT po-breadcrumb-icon-arrow\"></po-icon>\n\n      <li\n        #target\n        class=\"po-breadcrumb-icon-more\"\n        [attr.aria-label]=\"literals.literalButtonPopup\"\n        role=\"button\"\n        tabindex=\"0\"\n        (click)=\"popup.toggle()\"\n        (keyup)=\"openPopup($event)\"\n      >\n        <po-icon p-icon=\"ICON_MORE_VERT\"></po-icon>\n      </li>\n      <po-icon p-icon=\"ICON_ARROW_RIGHT po-breadcrumb-icon-arrow\"></po-icon>\n\n      <li>\n        <po-link\n          [p-label]=\"itemsView[itemsView.length - 2].label\"\n          [p-url]=\"itemsView[itemsView.length - 2].link\"\n          (p-action)=\"emitAction(itemsView[itemsView.length - 2])\"\n        ></po-link>\n      </li>\n      <po-icon p-icon=\"ICON_ARROW_RIGHT po-breadcrumb-icon-arrow\"></po-icon>\n\n      <li>\n        <span\n          class=\"po-breadcrumb-item-activate\"\n          role=\"link\"\n          tabindex=\"0\"\n          [attr.aria-current]=\"itemsView[itemsView.length - 1].label\"\n          >{{ itemsView[itemsView.length - 1].label }}</span\n        >\n      </li>\n      <po-popup\n        #popup\n        p-position=\"bottom-right\"\n        (p-close)=\"closePopUp()\"\n        [p-hide-arrow]=\"true\"\n        [p-actions]=\"itemsViewPopup\"\n        [p-target]=\"target\"\n      >\n      </po-popup>\n    </ul>\n\n    <ul *ngIf=\"!showDropdownToggle || itemsView.length < 4\" class=\"po-breadcrumb-item-container\">\n      <li *ngFor=\"let item of itemsView; let itemIndex = index\" class=\"po-breadcrumb-item\">\n        <po-link\n          *ngIf=\"!(itemIndex === itemsView.length - 1)\"\n          [p-label]=\"item.label\"\n          [p-url]=\"item.link\"\n          (p-action)=\"emitAction(item)\"\n        ></po-link>\n        <span\n          class=\"po-breadcrumb-item-activate\"\n          role=\"link\"\n          tabindex=\"0\"\n          *ngIf=\"itemIndex === itemsView.length - 1\"\n          [attr.aria-current]=\"item.label\"\n          >{{ item.label }}</span\n        >\n        <po-icon\n          *ngIf=\"!(itemIndex === itemsView.length - 1)\"\n          p-icon=\"ICON_ARROW_RIGHT po-breadcrumb-icon-arrow\"\n        ></po-icon>\n      </li>\n    </ul>\n  </div>\n\n  <po-breadcrumb-favorite\n    *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\"\n    [p-hidden-literal]=\"hiddenLiteralFavorite\"\n  >\n  </po-breadcrumb-favorite>\n</nav>\n" }]
    }], () => [{ type: i0.IterableDiffers }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: PoLanguageService }], { breadcrumbElement: [{
            type: ViewChild,
            args: ['breadcrumb', { read: ElementRef, static: true }]
        }], dropdownIcon: [{
            type: ViewChild,
            args: ['dropdownIcon', { read: ElementRef }]
        }], svgTarget: [{
            type: ViewChild,
            args: ['target', { read: ElementRef }]
        }], popupContainer: [{
            type: ViewChild,
            args: ['popup']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoBreadcrumbComponent, { className: "PoBreadcrumbComponent", filePath: "lib/components/po-breadcrumb/po-breadcrumb.component.ts", lineNumber: 51 }); })();

/**
 * @description
 *
 * Módulo do componente po-link.
 */
class PoLinkModule {
    static ɵfac = function PoLinkModule_Factory(t) { return new (t || PoLinkModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLinkModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLinkModule, [{
        type: NgModule,
        args: [{
                declarations: [PoLinkComponent],
                imports: [CommonModule, RouterModule],
                exports: [PoLinkComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoLinkModule, { declarations: [PoLinkComponent], imports: [CommonModule, RouterModule], exports: [PoLinkComponent] }); })();

class PoLabelModule {
    static ɵfac = function PoLabelModule_Factory(t) { return new (t || PoLabelModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLabelModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLabelModule, [{
        type: NgModule,
        args: [{
                declarations: [PoLabelComponent],
                exports: [PoLabelComponent],
                imports: [CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoLabelModule, { declarations: [PoLabelComponent], imports: [CommonModule], exports: [PoLabelComponent] }); })();

class PoCheckboxModule {
    static ɵfac = function PoCheckboxModule_Factory(t) { return new (t || PoCheckboxModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCheckboxModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoLabelModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxModule, [{
        type: NgModule,
        args: [{
                declarations: [PoCheckboxComponent],
                exports: [PoCheckboxComponent],
                imports: [CommonModule, FormsModule, PoLabelModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCheckboxModule, { declarations: [PoCheckboxComponent], imports: [CommonModule, FormsModule, PoLabelModule], exports: [PoCheckboxComponent] }); })();

class PoOverlayModule {
    static ɵfac = function PoOverlayModule_Factory(t) { return new (t || PoOverlayModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoOverlayModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoOverlayModule, [{
        type: NgModule,
        args: [{
                declarations: [PoOverlayComponent],
                imports: [CommonModule],
                exports: [PoOverlayComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoOverlayModule, { declarations: [PoOverlayComponent], imports: [CommonModule], exports: [PoOverlayComponent] }); })();

/**
 *
 * @description
 *
 * Módulo do componente po-loading-overlay.
 */
class PoLoadingModule {
    static ɵfac = function PoLoadingModule_Factory(t) { return new (t || PoLoadingModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLoadingModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoLanguageModule, PoOverlayModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingModule, [{
        type: NgModule,
        args: [{
                declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent],
                exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent],
                imports: [CommonModule, PoLanguageModule, PoOverlayModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoLoadingModule, { declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent], imports: [CommonModule, PoLanguageModule, PoOverlayModule], exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent] }); })();

class PoListBoxModule {
    static ɵfac = function PoListBoxModule_Factory(t) { return new (t || PoListBoxModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoListBoxModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoCheckboxModule, PoIconModule, PoLoadingModule, CdkListboxModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [PoListBoxComponent, PoItemListComponent, PoSearchListComponent],
                exports: [PoListBoxComponent],
                imports: [CommonModule, PoCheckboxModule, PoIconModule, PoLoadingModule, CdkListboxModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoListBoxModule, { declarations: [PoListBoxComponent, PoItemListComponent, PoSearchListComponent], imports: [CommonModule, PoCheckboxModule, PoIconModule, PoLoadingModule, CdkListboxModule], exports: [PoListBoxComponent] }); })();

/**
 * @description
 *
 * Módulo do componente po-popup.
 */
class PoPopupModule {
    static ɵfac = function PoPopupModule_Factory(t) { return new (t || PoPopupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPopupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoListBoxModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoListBoxModule],
                declarations: [PoPopupComponent],
                exports: [PoPopupComponent],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPopupModule, { declarations: [PoPopupComponent], imports: [CommonModule, PoListBoxModule], exports: [PoPopupComponent] }); })();

/**
 * @description
 *
 * Módulo do componente po-breadcrumb.
 *
 */
class PoBreadcrumbModule {
    static ɵfac = function PoBreadcrumbModule_Factory(t) { return new (t || PoBreadcrumbModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoBreadcrumbModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule, PoLinkModule, PoPopupModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule, PoLinkModule, PoPopupModule, PoIconModule],
                declarations: [PoBreadcrumbComponent, PoBreadcrumbFavoriteComponent],
                exports: [PoBreadcrumbComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoBreadcrumbModule, { declarations: [PoBreadcrumbComponent, PoBreadcrumbFavoriteComponent], imports: [CommonModule, RouterModule, PoLinkModule, PoPopupModule, PoIconModule], exports: [PoBreadcrumbComponent] }); })();

var PoButtonKind;
(function (PoButtonKind) {
    PoButtonKind["primary"] = "primary";
    PoButtonKind["secondary"] = "secondary";
    PoButtonKind["tertiary"] = "tertiary";
})(PoButtonKind || (PoButtonKind = {}));

var PoButtonSize;
(function (PoButtonSize) {
    PoButtonSize["medium"] = "medium";
    PoButtonSize["large"] = "large";
})(PoButtonSize || (PoButtonSize = {}));

/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre a propriedade `p-danger`.
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Quando em foco, o botão é ativado usando as teclas de Espaço e Enter do teclado. [W3C WAI-ARIA 3.5 Button - Keyboard Interaction](https://www.w3.org/WAI/ARIA/apg/#keyboard-interaction-3)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                              | Descrição                                             | Valor Padrão                                      |
 * |------------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | `--font-family`                          | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                            | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--font-weight`                          | Peso da fonte                                         | `var(--font-weight-bold)`                         |
 * | `--line-height`                          | Tamanho da label                                      | `var(--line-height-none)`                         |
 * | `--border-radius`                        | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--border-width`                         | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-md)`                          |
 * | `--padding`                              | Preenchimento                                         | `0 1em`                                           |                                                                        | ---                                             |
 * | **Danger**                               |                                                       |                                                   |
 * | `--text-color-danger`                    | Cor do texto no estado danger                         | `var(--color-neutral-light-00)`                   |
 * | `--color-button-danger`                  | Cor do botão no estado danger                         | `var(--color-feedback-negative-dark)`             |
 * | `--color-danger-hover`                   | Cor de hover no estado danger                         | `var(--color-feedback-negative-darker)`           |
 * | `--color-danger-pressed`                 | Cor pressionada no estado danger                      | `var(--color-feedback-negative-darkest)`          |
 * | `--background-danger-hover`              | Cor de background de hover no estado danger           | `var(--color-feedback-negative-lighter)`          |
 * | `--border-color-danger-hover`            | Cor da borda de hover no estado danger                | `var(--color-feedback-negative-darkest)`          |
 * | `--background-danger-pressed`            | Cor de background pressionado no estado danger        | `var(--color-feedback-negative-light)`            |
 * | `--background-color-button-danger`&nbsp; | Cor de background do botão no estado danger           | `var(--color-transparent)`                        |
 * | **Default Values**                       |                                                       |                                                   |
 * | `--text-color`                           | Cor do texto                                          | `var(--color-neutral-light-00)`                   |
 * | `--color`                                | Cor principal do botão                                | `var(--color-action-default)`                     |
 * | `--background-color`                     | Cor de background                                     | `var(--color-transparent)`                        |
 * | `--border-color`                         | Cor da borda                                          | `var(--color-transparent)`                        |
 * | `--shadow`                               | Contém o valor da sombra do elemento                  | `var(--shadow-none)`                              |
 * | **Hover**                                |                                                       |                                                   |
 * | `--color-hover`                          | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                     | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                   |
 * | `--border-color-hover`                   | Cor da borda no estado hover                          | `var(--color-brand-01-darkest)`                   |
 * | **Focused**                              |                                                       |                                                   |
 * | `--outline-color-focused`                | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Pressed**                              |                                                       |                                                   |
 * | `--color-pressed`                        | Cor principal no estado de pressionado                | `var(--color-action-pressed)`                     |
 * | `--background-pressed`                   | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-light)`                     |
 * | **Disabled**                             |                                                       |                                                   |
 * | `--text-color-disabled`                  | Cor do texto no estado disabled                       | `var(--color-neutral-dark-70)`                    |
 * | `--color-disabled`                       | Cor principal no estado disabled                      | `var(--color-action-disabled)`                    |
 * | `--background-color-disabled`            | Cor de background no estado disabled                  | `var(--color-transparent)`                        |
 *
 */
class PoButtonBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Label do botão.
     */
    label;
    /**
     * @optional
     *
     * @description
     * Ícone exibido ao lado esquerdo do label do botão.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    icon;
    /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
    click = new EventEmitter();
    _danger = false;
    _disabled = false;
    _loading = false;
    _kind = PoButtonKind.secondary;
    _size = PoButtonSize.medium;
    hasSize = false;
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deve ser usado em ações irreversíveis que o usuário precisa ter cuidado ao executá-la, como a exclusão de um registro.
     *
     * > A propriedade `p-kind="tertiary"` será inativada ao utilizar esta propriedade.
     */
    set danger(value) {
        this._danger = this.kind !== PoButtonKind.tertiary ? value : false;
    }
    get danger() {
        return this._danger;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do `po-button`.
     *
     * Valores válidos:
     * - `medium`: o `po-button` fica do tamanho padrão, com 44px de altura.;
     * - `large`: o `po-button` fica maior, com 56px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value) {
        this._size = PoButtonSize[value] ? PoButtonSize[value] : PoButtonSize.medium;
        this.hasSize = true;
    }
    get size() {
        return this._size;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valores válidos:
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `secondary`: estilo padrão do `po-button`.
     *  - `tertiary`: o `po-button` é exibido sem cor do fundo, recebendo menos destaque entre as ações.
     *
     * @default `secondary`
     */
    set kind(value) {
        this._kind = PoButtonKind[value] ? PoButtonKind[value] : PoButtonKind.secondary;
    }
    get kind() {
        return this._kind;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define um `aria-label` para o `po-button`.
     *
     * Caso esta propriedade não seja informada será considerada a label do botão.
     *
     * > Em caso de botões com apenas ícone a atribuição de valor à esta propriedade é muito importante para acessibilidade.
     */
    ariaLabel;
    static ɵfac = function PoButtonBaseComponent_Factory(t) { return new (t || PoButtonBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonBaseComponent, hostVars: 3, hostBindings: function PoButtonBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-danger", ctx.danger)("p-size", ctx.size)("p-kind", ctx.kind);
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], loading: [i0.ɵɵInputFlags.None, "p-loading", "loading"], danger: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-danger", "danger", convertToBoolean], size: [i0.ɵɵInputFlags.None, "p-size", "size"], kind: [i0.ɵɵInputFlags.None, "p-kind", "kind"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], ariaLabel: [i0.ɵɵInputFlags.None, "p-aria-label", "ariaLabel"] }, outputs: { click: "p-click" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], danger: [{
            type: HostBinding,
            args: ['attr.p-danger']
        }, {
            type: Input,
            args: [{ alias: 'p-danger', transform: convertToBoolean }]
        }], size: [{
            type: HostBinding,
            args: ['attr.p-size']
        }, {
            type: Input,
            args: ['p-size']
        }], kind: [{
            type: HostBinding,
            args: ['attr.p-kind']
        }, {
            type: Input,
            args: ['p-kind']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], ariaLabel: [{
            type: Input,
            args: ['p-aria-label']
        }] }); })();

const _c0$1x = ["button"];
function PoButtonComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵelement(1, "po-loading-icon", 7);
    i0.ɵɵelementEnd();
} }
function PoButtonComponent_po_icon_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 8);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-icon", ctx_r2.icon);
} }
function PoButtonComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 9);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r3.label);
} }
/**
 * @docsExtends PoButtonBaseComponent
 *
 * @example
 *
 * <example name="po-button-basic" title="PO Button Basic">
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-labs" title="PO Button Labs">
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-social-network" title="PO Button Social Network">
 *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.html"> </file>
 *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.ts"> </file>
 * </example>
 */
class PoButtonComponent extends PoButtonBaseComponent {
    buttonElement;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.buttonElement.nativeElement.focus();
        }
    }
    onClick() {
        this.click.emit(null);
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoButtonComponent_BaseFactory; return function PoButtonComponent_Factory(t) { return (ɵPoButtonComponent_BaseFactory || (ɵPoButtonComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoButtonComponent)))(t || PoButtonComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoButtonComponent, selectors: [["po-button"]], viewQuery: function PoButtonComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1x, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonElement = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 8, consts: [["type", "button", 1, "po-button", 3, "disabled", "click"], ["button", ""], ["class", "po-button-loading-icon", 4, "ngIf"], [1, "po-button-container"], ["class", "po-button-icon", 3, "p-icon", 4, "ngIf"], ["class", "po-button-label", 4, "ngIf"], [1, "po-button-loading-icon"], ["p-neutral-color", "", "p-size", "sm"], [1, "po-button-icon", 3, "p-icon"], [1, "po-button-label"]], template: function PoButtonComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "button", 0, 1);
            i0.ɵɵlistener("click", function PoButtonComponent_Template_button_click_0_listener() { return ctx.onClick(); });
            i0.ɵɵtemplate(2, PoButtonComponent_div_2_Template, 2, 0, "div", 2);
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoButtonComponent_po_icon_4_Template, 1, 1, "po-icon", 4)(5, PoButtonComponent_span_5_Template, 2, 1, "span", 5);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("disabled", ctx.disabled || ctx.loading);
            i0.ɵɵattribute("p-size", ctx.size)("p-kind", ctx.kind)("p-danger", ctx.danger)("aria-label", ctx.ariaLabel);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.loading);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.label);
        } }, dependencies: [i1.NgIf, PoLoadingIconComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonComponent, [{
        type: Component,
        args: [{ selector: 'po-button', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  #button\n  class=\"po-button\"\n  type=\"button\"\n  [attr.p-size]=\"size\"\n  [attr.p-kind]=\"kind\"\n  [attr.p-danger]=\"danger\"\n  [disabled]=\"disabled || loading\"\n  [attr.aria-label]=\"ariaLabel\"\n  (click)=\"onClick()\"\n>\n  <div *ngIf=\"loading\" class=\"po-button-loading-icon\">\n    <po-loading-icon p-neutral-color p-size=\"sm\"></po-loading-icon>\n  </div>\n\n  <div class=\"po-button-container\">\n    <po-icon *ngIf=\"icon\" class=\"po-button-icon\" [p-icon]=\"icon\"></po-icon>\n    <span *ngIf=\"label\" class=\"po-button-label\">{{ label }}</span>\n  </div>\n</button>\n" }]
    }], null, { buttonElement: [{
            type: ViewChild,
            args: ['button', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoButtonComponent, { className: "PoButtonComponent", filePath: "lib/components/po-button/po-button.component.ts", lineNumber: 34 }); })();

/**
 * @description
 *
 * Módulo do componente po-button.
 */
class PoButtonModule {
    static ɵfac = function PoButtonModule_Factory(t) { return new (t || PoButtonModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoButtonModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoLoadingModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoLoadingModule, PoIconModule],
                declarations: [PoButtonComponent],
                exports: [PoButtonComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoButtonModule, { declarations: [PoButtonComponent], imports: [CommonModule, PoLoadingModule, PoIconModule], exports: [PoButtonComponent] }); })();

/**
 * @usedBy PoButtonGroupComponent
 *
 * @description
 *
 * Define o tipo de seleção dos botões do `po-button-group`.
 */
var PoButtonGroupToggle;
(function (PoButtonGroupToggle) {
    /** Seleção múltipla. */
    PoButtonGroupToggle["Multiple"] = "multiple";
    /** Seleção desabilitada. */
    PoButtonGroupToggle["None"] = "none";
    /** Seleção única. */
    PoButtonGroupToggle["Single"] = "single";
})(PoButtonGroupToggle || (PoButtonGroupToggle = {}));

const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-bold)`                       |
 * | `--line-height`                        | Tamanho da label                                      | `var(--line-height-none)`                       |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                       |
 * | `--border-width`                       | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-md)`                        |
 * | `--padding`                            | Preenchimento                                         | `0 1em`                                         |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-light-00)`                 |
 * | `--color`                              | Cor principal do botão                                | `var(--color-action-default)`                   |
 * | `--background-color`                   | Cor de background                                     | `var(--color-transparent)`                      |
 * | `--shadow`                             | Contém o valor da sombra do elemento                  | `var(--shadow-none)`                            |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                     |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                 |
 * | `--border-color-hover`                 | Cor da borda no estado hover                          | `var(--color-brand-01-darkest)`                 |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Pressed**                            |                                                       |                                                 |
 * | `--color-pressed`                      | Cor principal no estado de pressionado                | `var(--color-action-pressed)`                   |
 * | `--background-pressed`                 | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-light)`                   |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                  |
 * | `--background-color-disabled` &nbsp;   | Cor de background no estado disabled                  | `var(--color-transparent)`                      |
 *
 */
class PoButtonGroupBaseComponent {
    /** Lista de botões. */
    buttons = [];
    _toggle = PO_TOGGLE_TYPE_DEFAULT;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoButtonGroupToggle`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
    static ɵfac = function PoButtonGroupBaseComponent_Factory(t) { return new (t || PoButtonGroupBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonGroupBaseComponent, inputs: { buttons: [i0.ɵɵInputFlags.None, "p-buttons", "buttons"], toggle: [i0.ɵɵInputFlags.None, "p-toggle", "toggle"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupBaseComponent, [{
        type: Directive
    }], null, { buttons: [{
            type: Input,
            args: ['p-buttons']
        }], toggle: [{
            type: Input,
            args: ['p-toggle']
        }] }); })();

function PoButtonGroupComponent_po_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 2);
    i0.ɵɵlistener("p-click", function PoButtonGroupComponent_po_button_1_Template_po_button_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const button_r1 = restoredCtx.$implicit; const i_r2 = restoredCtx.index; const ctx_r3 = i0.ɵɵnextContext(); ctx_r3.onButtonClick(button_r1, i_r2); return i0.ɵɵresetView(button_r1.action(button_r1)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r1 = ctx.$implicit;
    i0.ɵɵclassProp("po-button-group-button-selected", button_r1.selected)("po-button-group-disabled", button_r1.disabled);
    i0.ɵɵproperty("p-disabled", button_r1.disabled)("p-icon", button_r1.icon)("p-label", button_r1.label)("p-tooltip", !button_r1.disabled ? button_r1.tooltip : undefined);
} }
/**
 * @docsExtends PoButtonGroupBaseComponent
 *
 * @example
 *
 * <example name="po-button-group-basic" title="PO Button Group Basic">
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.html"> </file>
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-labs" title="PO Button Group Labs">
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.html"> </file>
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.ts"> </file>
 * </example>
 *
 *
 * <example name="po-button-group-attendance" title="PO Button Group - Attendance">
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.html"> </file>
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-post" title="PO Button Group - Post">
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.html"> </file>
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.ts"> </file>
 * </example>
 */
class PoButtonGroupComponent extends PoButtonGroupBaseComponent {
    constructor(viewRef) {
        super();
    }
    static ɵfac = function PoButtonGroupComponent_Factory(t) { return new (t || PoButtonGroupComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoButtonGroupComponent, selectors: [["po-button-group"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 1, consts: [[1, "po-button-group-container"], ["class", "po-sm-12 po-button-group", "p-tooltip-position", "bottom", 3, "po-button-group-button-selected", "po-button-group-disabled", "p-disabled", "p-icon", "p-label", "p-tooltip", "p-click", 4, "ngFor", "ngForOf"], ["p-tooltip-position", "bottom", 1, "po-sm-12", "po-button-group", 3, "p-disabled", "p-icon", "p-label", "p-tooltip", "p-click"]], template: function PoButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoButtonGroupComponent_po_button_1_Template, 1, 8, "po-button", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.buttons);
        } }, dependencies: [i1.NgForOf, PoButtonComponent, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-button-group', template: "<div class=\"po-button-group-container\">\n  <po-button\n    *ngFor=\"let button of buttons; index as i\"\n    class=\"po-sm-12 po-button-group\"\n    [class.po-button-group-button-selected]=\"button.selected\"\n    [class.po-button-group-disabled]=\"button.disabled\"\n    p-tooltip-position=\"bottom\"\n    [p-disabled]=\"button.disabled\"\n    [p-icon]=\"button.icon\"\n    [p-label]=\"button.label\"\n    [p-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\n    (p-click)=\"onButtonClick(button, i); button.action(button)\"\n  >\n  </po-button>\n</div>\n" }]
    }], () => [{ type: i0.ViewContainerRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoButtonGroupComponent, { className: "PoButtonGroupComponent", filePath: "lib/components/po-button-group/po-button-group.component.ts", lineNumber: 35 }); })();

/**
 * @description
 *
 * Módulo do componente po-button-group.
 */
class PoButtonGroupModule {
    static ɵfac = function PoButtonGroupModule_Factory(t) { return new (t || PoButtonGroupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoButtonGroupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoButtonModule, PoTooltipModule],
                declarations: [PoButtonGroupComponent],
                exports: [PoButtonGroupComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoButtonGroupModule, { declarations: [PoButtonGroupComponent], imports: [CommonModule, PoButtonModule, PoTooltipModule], exports: [PoButtonGroupComponent] }); })();

/**
 * @usedBy PoCalendarComponent
 *
 * @description
 *
 * *Enum* `PoCalendarMode` para especificar os modos de visualização do calendário.
 */
var PoCalendarMode;
(function (PoCalendarMode) {
    /** Define que o calendário será exibido em modo faixa de seleção. */
    PoCalendarMode["Range"] = "range";
})(PoCalendarMode || (PoCalendarMode = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
class PoDateService {
    dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
    isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
        '(?:0[1-9]|1[0-2])-' +
        '(?:0[1-9]|[12]\\d|3[01])' +
        'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
        '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
        '(?:|:?[0-5]\\d)$');
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param minDate Definir `true` caso seja `minDate`.
     * @param maxDate Definir `true` caso seja `maxDate`.
     */
    convertIsoToDate(dateString, minDate, maxDate) {
        if (dateString) {
            const { year, month, day } = this.getDateFromIso(dateString);
            if (minDate) {
                const date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                const date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                const miliseconds = Date.parse(dateString);
                const timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    }
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param date Data no formato `Date`.
     */
    convertDateToISO(date) {
        if (date) {
            const fullYear = date.getFullYear();
            const getMonth = date.getMonth() + 1;
            const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            const month = getMonth < 10 ? '0' + getMonth : getMonth;
            const year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param year Ano a ser validado.
     */
    formatYear(year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return `0${year}`;
        }
        if (year > 9 && year < 100) {
            return `00${year}`;
        }
        if (year >= 0 && year < 10) {
            return `000${year}`;
        }
    }
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param isoDate Ano em formato string.
     */
    getDateFromIso(isoDate) {
        const day = parseInt(isoDate.substring(8, 10), 10);
        const month = parseInt(isoDate.substring(5, 7), 10);
        const year = parseInt(isoDate.substring(0, 4), 10);
        return { year, month, day };
    }
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     */
    getDateForDateRange(date, isMinDate) {
        const lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            const { year, month, day } = this.splitDate(date);
            const validDate = new Date(year, month, day, ...lastHour);
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    }
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     *
     * @param dateA primeira data
     * @param dateB segunda data
     */
    isDateRangeValid(dateA = '', dateB = '') {
        const dateASplitted = dateA.split('-').map(item => parseInt(item, 10));
        const dateBSplitted = dateB.split('-').map(item => parseInt(item, 10));
        for (let index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param stringDate Data.
     */
    isValidIso(stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    }
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param date Data.
     * @param year .
     */
    setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param date Valor da data.
     */
    splitDate(date) {
        const year = date.getFullYear();
        const month = date.getMonth();
        const day = date.getDate();
        return { year, month, day };
    }
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param date Data a ser validada.
     * @param minDate Data inicial.
     * @param maxDate Data final.
     */
    validateDateRange(date, minDate, maxDate) {
        if (minDate && maxDate) {
            return date >= minDate && date <= maxDate;
        }
        else if (minDate && !maxDate) {
            return date >= minDate;
        }
        else if (!minDate && maxDate) {
            return date <= maxDate;
        }
        else {
            return true;
        }
    }
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @param date Data que será validada.
     */
    validateDate(date) {
        const validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    }
    static ɵfac = function PoDateService_Factory(t) { return new (t || PoDateService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDateService, factory: PoDateService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

/**
 * @description
 *
 * Módulo do serviço `po-date`.
 */
class PoDateTimeModule {
    static ɵfac = function PoDateTimeModule_Factory(t) { return new (t || PoDateTimeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDateTimeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoDateService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDateTimeModule, [{
        type: NgModule,
        args: [{
                providers: [PoDateService],
                bootstrap: []
            }]
    }], null, null); })();

/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
class PoCalendarBaseComponent {
    poDate;
    languageService;
    /** Evento disparado ao selecionar um dia do calendário. */
    change = new EventEmitter();
    activateDate;
    value;
    onTouched = null;
    propagateChange = null;
    today = new Date();
    shortLanguage;
    _locale;
    _maxDate;
    _minDate;
    _mode;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        this.shortLanguage = languageService.getShortLanguage();
        this._locale = this.languageService.getShortLanguage();
    }
    setActivateDate(date) {
        let newData;
        if (typeof date !== 'string') {
            const temporaryDate = new Date(date);
            const year = temporaryDate.getFullYear();
            const month = ('0' + (temporaryDate.getMonth() + 1)).slice(-2);
            const day = ('0' + temporaryDate.getDate()).slice(-2);
            const formattedDate = `${year}-${month}-${day}`;
            newData = formattedDate + 'T00:00:00';
        }
        else {
            newData = date + 'T00:00:00';
        }
        const activateDate = date ? date : this.verifyActivateDate();
        let checkedStart;
        let checkedEnd;
        if (this.isRange) {
            if (new Date(newData).getDate() > 28) {
                checkedStart = new Date(activateDate);
                checkedEnd = new Date(checkedStart.getFullYear(), checkedStart.getMonth() + 1, 0, 23, 59, 59, 999);
                checkedEnd.setMilliseconds(checkedEnd.getMilliseconds() + 1);
            }
            else {
                checkedStart =
                    typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
                checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            }
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
    static ɵfac = function PoCalendarBaseComponent_Factory(t) { return new (t || PoCalendarBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCalendarBaseComponent, inputs: { locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], mode: [i0.ɵɵInputFlags.None, "p-mode", "mode"] }, outputs: { change: "p-change" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarBaseComponent, [{
        type: Directive
    }], () => [{ type: PoDateService }, { type: PoLanguageService }], { change: [{
            type: Output,
            args: ['p-change']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], mode: [{
            type: Input,
            args: ['p-mode']
        }] }); })();

const poCalendarServiceFirstWeekDayDefault = 0;
class PoCalendarService {
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    static ɵfac = function PoCalendarService_Factory(t) { return new (t || PoCalendarService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoCalendarService, factory: PoCalendarService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarService, [{
        type: Injectable
    }], null, null); })();

class PoCalendarLangService {
    language = poLocaleDefault;
    months = [
        {
            pt: 'Janeiro',
            en: 'January',
            es: 'Enero',
            ru: 'Январь'
        },
        {
            pt: 'Fevereiro',
            en: 'February',
            es: 'Febrero',
            ru: 'Февраль'
        },
        {
            pt: 'Março',
            en: 'March',
            es: 'Marzo',
            ru: 'Март'
        },
        {
            pt: 'Abril',
            en: 'April',
            es: 'Abril',
            ru: 'Апрель'
        },
        {
            pt: 'Maio',
            en: 'May',
            es: 'Mayo',
            ru: 'Май'
        },
        {
            pt: 'Junho',
            en: 'June',
            es: 'Junio',
            ru: 'Июнь'
        },
        {
            pt: 'Julho',
            en: 'July',
            es: 'Julio',
            ru: 'Июль'
        },
        {
            pt: 'Agosto',
            en: 'August',
            es: 'Agosto',
            ru: 'Август'
        },
        {
            pt: 'Setembro',
            en: 'September',
            es: 'Setiembre',
            ru: 'Сентябрь'
        },
        {
            pt: 'Outubro',
            en: 'October',
            es: 'Octubre',
            ru: 'Октябрь'
        },
        {
            pt: 'Novembro',
            en: 'November',
            es: 'Noviembre',
            ru: 'Ноябрь'
        },
        {
            pt: 'Dezembro',
            en: 'December',
            es: 'Diciembre',
            ru: 'Декабрь'
        }
    ];
    shortWeekDays = [
        {
            pt: 'Dom',
            en: 'Sun',
            es: 'Dom',
            ru: 'Вс'
        },
        {
            pt: 'Seg',
            en: 'Mon',
            es: 'Lun',
            ru: 'Пн'
        },
        {
            pt: 'Ter',
            en: 'Tue',
            es: 'Mar',
            ru: 'Вт'
        },
        {
            pt: 'Qua',
            en: 'Wed',
            es: 'Mié',
            ru: 'Ср'
        },
        {
            pt: 'Qui',
            en: 'Thu',
            es: 'Jue',
            ru: 'Чт'
        },
        {
            pt: 'Sex',
            en: 'Fri',
            es: 'Vie',
            ru: 'Пт'
        },
        {
            pt: 'Sáb',
            en: 'Sat',
            es: 'Sáb',
            ru: 'Сб'
        }
    ];
    monthLabel = {
        pt: 'Mês',
        en: 'Month',
        es: 'Mes',
        ru: 'Месяц'
    };
    yearLabel = {
        pt: 'Ano',
        en: 'Year',
        es: 'Año',
        ru: 'Год'
    };
    todayLabel = {
        pt: 'Hoje',
        en: 'Today',
        es: 'Hoy',
        ru: 'Сегодня'
    };
    getMonth(month) {
        return this.months[month][this.language];
    }
    getMonthLabel() {
        return this.monthLabel[this.language];
    }
    getMonthsArray() {
        const arrMonths = Array();
        for (let i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    }
    getWeekDays(day) {
        return this.shortWeekDays[day][this.language];
    }
    getWeekDaysArray() {
        const arrWeekDays = Array();
        for (let i = 0; i < this.shortWeekDays.length; i++) {
            const weekDay = this.shortWeekDays[i][this.language];
            arrWeekDays.push(weekDay.toLowerCase());
        }
        return arrWeekDays;
    }
    getYearLabel() {
        return this.yearLabel[this.language];
    }
    getTodayLabel() {
        return this.todayLabel[this.language];
    }
    setLanguage(language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = poLocales.includes(language) ? language : poLocaleDefault;
        }
    }
    static ɵfac = function PoCalendarLangService_Factory(t) { return new (t || PoCalendarLangService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoCalendarLangService, factory: PoCalendarLangService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarLangService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

function PoCalendarHeaderComponent_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 4);
    i0.ɵɵlistener("click", function PoCalendarHeaderComponent_po_icon_1_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.previous.emit()); });
    i0.ɵɵelementEnd();
} }
function PoCalendarHeaderComponent_po_icon_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 5);
    i0.ɵɵlistener("click", function PoCalendarHeaderComponent_po_icon_4_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.next.emit()); });
    i0.ɵɵelementEnd();
} }
const _c0$1w = ["*"];
class PoCalendarHeaderComponent {
    hidePrevious = false;
    hideNext = false;
    previous = new EventEmitter();
    next = new EventEmitter();
    constructor() { }
    static ɵfac = function PoCalendarHeaderComponent_Factory(t) { return new (t || PoCalendarHeaderComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarHeaderComponent, selectors: [["po-calendar-header"]], inputs: { hidePrevious: [i0.ɵɵInputFlags.None, "p-hide-previous", "hidePrevious"], hideNext: [i0.ɵɵInputFlags.None, "p-hide-next", "hideNext"] }, outputs: { previous: "p-previous", next: "p-next" }, ngContentSelectors: _c0$1w, decls: 5, vars: 2, consts: [[1, "po-calendar-header"], ["p-icon", "ICON_ARROW_LEFT", "class", "po-calendar-header-left", 3, "click", 4, "ngIf"], ["attr-calendar", "", 1, "po-calendar-header-title"], ["p-icon", "ICON_ARROW_RIGHT", "class", "po-calendar-header-right", 3, "click", 4, "ngIf"], ["p-icon", "ICON_ARROW_LEFT", 1, "po-calendar-header-left", 3, "click"], ["p-icon", "ICON_ARROW_RIGHT", 1, "po-calendar-header-right", 3, "click"]], template: function PoCalendarHeaderComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoCalendarHeaderComponent_po_icon_1_Template, 1, 0, "po-icon", 1);
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoCalendarHeaderComponent_po_icon_4_Template, 1, 0, "po-icon", 3);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", (ctx.previous == null ? null : ctx.previous.observers) && !ctx.hidePrevious);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.next == null ? null : ctx.next.observers.length) && !ctx.hideNext);
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarHeaderComponent, [{
        type: Component,
        args: [{ selector: 'po-calendar-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-calendar-header\">\n  <po-icon\n    p-icon=\"ICON_ARROW_LEFT\"\n    *ngIf=\"previous?.observers && !hidePrevious\"\n    class=\"po-calendar-header-left\"\n    (click)=\"previous.emit()\"\n  >\n  </po-icon>\n  <div class=\"po-calendar-header-title\" attr-calendar>\n    <ng-content></ng-content>\n  </div>\n\n  <po-icon\n    p-icon=\"ICON_ARROW_RIGHT\"\n    *ngIf=\"next?.observers.length && !hideNext\"\n    class=\"po-calendar-header-right\"\n    (click)=\"next.emit()\"\n  >\n  </po-icon>\n</div>\n" }]
    }], () => [], { hidePrevious: [{
            type: Input,
            args: ['p-hide-previous']
        }], hideNext: [{
            type: Input,
            args: ['p-hide-next']
        }], previous: [{
            type: Output,
            args: ['p-previous']
        }], next: [{
            type: Output,
            args: ['p-next']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCalendarHeaderComponent, { className: "PoCalendarHeaderComponent", filePath: "lib/components/po-calendar/po-calendar-header/po-calendar-header.component.ts", lineNumber: 8 }); })();

function PoCalendarWrapperComponent_ng_container_1_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const weekDay_r6 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", weekDay_r6, " ");
} }
function PoCalendarWrapperComponent_ng_container_1_div_10_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r8.getDayForegroundColor(day_r7));
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", day_r7.getDate(), " ");
} }
function PoCalendarWrapperComponent_ng_container_1_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r11); const day_r7 = restoredCtx.$implicit; const ctx_r10 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r10.onSelectDate(day_r7)); })("mouseenter", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r11); const day_r7 = restoredCtx.$implicit; const ctx_r12 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r12.onMouseEnter(day_r7)); })("mouseleave", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_mouseleave_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r13.onMouseLeave()); });
    i0.ɵɵtemplate(1, PoCalendarWrapperComponent_ng_container_1_div_10_span_1_Template, 2, 2, "span", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r7 = ctx.$implicit;
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r5.getDayBackgroundColor(day_r7));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", day_r7 !== 0);
} }
function PoCalendarWrapperComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-calendar-header", 2);
    i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_1_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onPreviousMonth()); })("p-next", function PoCalendarWrapperComponent_ng_container_1_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onNextMonth()); });
    i0.ɵɵelementStart(2, "span", 3);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_Template_span_click_2_listener() { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.selectDisplayMode("month")); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "span", 4);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_Template_span_click_4_listener() { i0.ɵɵrestoreView(_r15); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.selectDisplayMode("year")); });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "div", 5)(7, "div", 6);
    i0.ɵɵtemplate(8, PoCalendarWrapperComponent_ng_container_1_div_8_Template, 2, 1, "div", 7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "div", 8);
    i0.ɵɵtemplate(10, PoCalendarWrapperComponent_ng_container_1_div_10_Template, 2, 2, "div", 9);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-hide-previous", ctx_r0.isEndPart)("p-hide-next", ctx_r0.isStartPart && !ctx_r0.responsive);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.displayMonth);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.displayYear);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r0.displayWeekDays);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.displayDays);
} }
function PoCalendarWrapperComponent_ng_container_2_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_2_div_9_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r23); const i_r21 = restoredCtx.index; const ctx_r22 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r22.onSelectMonth(ctx_r22.displayYear, i_r21)); });
    i0.ɵɵelementStart(1, "span", 13);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const month_r20 = ctx.$implicit;
    const i_r21 = ctx.index;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r19.getBackgroundColor(i_r21, ctx_r19.displayMonthNumber));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", ctx_r19.getForegroundColor(i_r21, ctx_r19.displayMonthNumber));
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", month_r20, " ");
} }
function PoCalendarWrapperComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-calendar-header", 14);
    i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_2_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.updateYear(-1)); })("p-next", function PoCalendarWrapperComponent_ng_container_2_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r25); const ctx_r26 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r26.updateYear(1)); });
    i0.ɵɵelementStart(2, "span", 4);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_2_Template_span_click_2_listener() { i0.ɵɵrestoreView(_r25); const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.selectDisplayMode("year")); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div", 5)(5, "div", 6)(6, "div", 10);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "div", 15);
    i0.ɵɵtemplate(9, PoCalendarWrapperComponent_ng_container_2_div_9_Template, 3, 3, "div", 16);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.displayYear, " ");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.monthLabel, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.displayMonths);
} }
function PoCalendarWrapperComponent_ng_container_3_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r32 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_3_div_8_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r32); const year_r29 = restoredCtx.$implicit; const ctx_r31 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r31.onSelectYear(year_r29, ctx_r31.displayMonthNumber)); });
    i0.ɵɵelementStart(1, "span", 13);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const year_r29 = ctx.$implicit;
    const ctx_r28 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r28.getBackgroundColor(year_r29, ctx_r28.currentYear));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", ctx_r28.getForegroundColor(year_r29, ctx_r28.currentYear));
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", year_r29, " ");
} }
function PoCalendarWrapperComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r34 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-calendar-header", 14);
    i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_3_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r33.updateYear(-10)); })("p-next", function PoCalendarWrapperComponent_ng_container_3_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r34); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.updateYear(10)); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 5)(4, "div", 6)(5, "div", 10);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(7, "div", 18);
    i0.ɵɵtemplate(8, PoCalendarWrapperComponent_ng_container_3_div_8_Template, 3, 3, "div", 19);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate2(" ", ctx_r2.displayStartDecade, " - ", ctx_r2.displayFinalDecade, " ");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r2.yearLabel, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r2.displayDecade);
} }
function PoCalendarWrapperComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 21)(2, "div", 22)(3, "button", 23);
    i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_4_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.onSelectDate(ctx_r36.today)); });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", ctx_r3.isTodayUnavailable());
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r3.displayToday, " ");
} }
class PoCalendarWrapperComponent {
    poCalendarService;
    poCalendarLangService;
    poDate;
    value;
    mode = 'day';
    responsive = false;
    partType;
    range = false;
    activateDate = new Date();
    selectedValue;
    minDate;
    maxDate;
    hoverValue;
    headerChange = new EventEmitter();
    selectDate = new EventEmitter();
    hoverDate = new Subject().pipe(debounceTime$1(100));
    currentYear;
    displayDays;
    displayDecade;
    displayFinalDecade;
    displayMonth;
    displayMonthNumber;
    displayMonths = Array();
    displayStartDecade;
    displayWeekDays = Array();
    displayYear;
    displayToday;
    today = new Date();
    currentMonthNumber;
    date;
    lastDisplay;
    _locale;
    set locale(value) {
        this._locale = value;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    get monthLabel() {
        return this.poCalendarLangService.getMonthLabel();
    }
    get yearLabel() {
        return this.poCalendarLangService.getYearLabel();
    }
    get isDayVisible() {
        return this.mode === 'day';
    }
    get isMonthVisible() {
        return this.mode === 'month';
    }
    get isYearVisible() {
        return this.mode === 'year';
    }
    get isStartPart() {
        return this.partType === 'start';
    }
    get isEndPart() {
        return this.partType === 'end';
    }
    constructor(poCalendarService, poCalendarLangService, poDate) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.poDate = poDate;
    }
    ngOnInit() {
        this.init();
    }
    ngOnChanges(changes) {
        const { activateDate } = changes;
        if (activateDate) {
            this.updateDate(activateDate.currentValue);
        }
    }
    getBackgroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    getDayBackgroundColor(date) {
        return this.getDayColor(date, 'background');
    }
    getDayForegroundColor(date) {
        return this.getDayColor(date, 'foreground');
    }
    getForegroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    isTodayUnavailable() {
        return this.minDate > this.today || this.maxDate < this.today;
    }
    onNextMonth() {
        this.displayMonthNumber < 11
            ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
            : this.updateDisplay(this.displayYear + 1, 0);
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onPreviousMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onMouseEnter(day) {
        this.hoverDate.next(day);
    }
    onMouseLeave() {
        this.hoverDate.next(null);
    }
    // Ao selecionar uma data
    onSelectDate(date) {
        this.selectDate.emit(date);
    }
    // Ao selecionar um mês
    onSelectMonth(year, month) {
        this.selectDisplayMode('day');
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    // Ao selecionar um ano
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.selectDisplayMode(this.lastDisplay === 'month' ? 'month' : 'day');
        this.currentYear = year;
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    selectDisplayMode(mode) {
        this.lastDisplay = this.mode;
        this.mode = mode;
    }
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    addAllYearsInDecade(year) {
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    equalsDate(date1, date2) {
        try {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
        catch (error) {
            return false;
        }
    }
    // Obtém um array de todos os anos desta década
    getDecadeArray(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    getColorForDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-selected`
            : `po-calendar-box-${local}-selected-disabled`;
    }
    getColorForDefaultDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}`
            : `po-calendar-box-${local}-disabled`;
    }
    getColorForToday(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-today`
            : `po-calendar-box-${local}-today-disabled`;
    }
    getColorForDateRange(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-in-range`
            : `po-calendar-box-${local}-in-range-disabled`;
    }
    getDayColor(date, local) {
        const start = this.selectedValue?.start;
        const end = this.selectedValue?.end;
        if (this.range && (this.equalsDate(date, start) || this.equalsDate(date, end))) {
            return this.getColorForDate(date, local);
        }
        else if (this.range && start && end && date > start && date < end) {
            return this.getColorForDateRange(date, local);
        }
        else if (this.range && start && !end && date > start && date < this.hoverValue) {
            return `po-calendar-box-${local}-hover`;
        }
        else if (!this.range && this.equalsDate(date, this.value)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDefaultDate(date, local);
        }
    }
    init() {
        this.updateDate(this.activateDate);
        this.initializeLanguage();
        this.selectDisplayMode('day');
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
        this.displayToday = this.poCalendarLangService.getTodayLabel();
    }
    updateDate(value = new Date()) {
        const date = new Date(value);
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    updateDisplay(year, month) {
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    }
    static ɵfac = function PoCalendarWrapperComponent_Factory(t) { return new (t || PoCalendarWrapperComponent)(i0.ɵɵdirectiveInject(PoCalendarService), i0.ɵɵdirectiveInject(PoCalendarLangService), i0.ɵɵdirectiveInject(PoDateService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarWrapperComponent, selectors: [["po-calendar-wrapper"]], inputs: { value: [i0.ɵɵInputFlags.None, "p-value", "value"], mode: [i0.ɵɵInputFlags.None, "p-mode", "mode"], responsive: [i0.ɵɵInputFlags.None, "p-responsive", "responsive"], partType: [i0.ɵɵInputFlags.None, "p-part-type", "partType"], range: [i0.ɵɵInputFlags.None, "p-range", "range"], activateDate: [i0.ɵɵInputFlags.None, "p-activate-date", "activateDate"], selectedValue: [i0.ɵɵInputFlags.None, "p-selected-value", "selectedValue"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], hoverValue: [i0.ɵɵInputFlags.None, "p-hover-value", "hoverValue"], locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"] }, outputs: { headerChange: "p-header-change", selectDate: "p-select-date", hoverDate: "p-hover-date" }, features: [i0.ɵɵProvidersFeature([PoCalendarService]), i0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "po-calendar-wrapper"], [4, "ngIf"], [3, "p-hide-previous", "p-hide-next", "p-previous", "p-next"], [1, "po-clickable", "po-mr-1", 3, "click"], [1, "po-clickable", 3, "click"], [1, "po-calendar-content"], [1, "po-calendar-labels"], ["class", "po-calendar-label", 4, "ngFor", "ngForOf"], [1, "po-calendar-content-list-day"], ["class", "po-calendar-day", "attr-calendar", "", 3, "ngClass", "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [1, "po-calendar-label"], ["attr-calendar", "", 1, "po-calendar-day", 3, "ngClass", "click", "mouseenter", "mouseleave"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "p-previous", "p-next"], [1, "po-calendar-content-list-month"], ["class", "po-calendar-month", "attr-calendar", "", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["attr-calendar", "", 1, "po-calendar-month", 3, "ngClass", "click"], [1, "po-calendar-content-list-year"], ["class", "po-calendar-year", "attr-calendar", "", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["attr-calendar", "", 1, "po-calendar-year", 3, "ngClass", "click"], [1, "po-calendar-footer"], [1, "po-calendar-footer-today"], ["type", "button", 1, "po-calendar-footer-today-button", 3, "disabled", "click"]], template: function PoCalendarWrapperComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoCalendarWrapperComponent_ng_container_1_Template, 11, 6, "ng-container", 1)(2, PoCalendarWrapperComponent_ng_container_2_Template, 10, 3, "ng-container", 1)(3, PoCalendarWrapperComponent_ng_container_3_Template, 9, 4, "ng-container", 1)(4, PoCalendarWrapperComponent_ng_container_4_Template, 5, 2, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isDayVisible);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isMonthVisible);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isYearVisible);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.range);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoCalendarHeaderComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarWrapperComponent, [{
        type: Component,
        args: [{ selector: 'po-calendar-wrapper', providers: [PoCalendarService], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-calendar-wrapper\">\n  <ng-container *ngIf=\"isDayVisible\">\n    <po-calendar-header\n      [p-hide-previous]=\"isEndPart\"\n      [p-hide-next]=\"isStartPart && !responsive\"\n      (p-previous)=\"onPreviousMonth()\"\n      (p-next)=\"onNextMonth()\"\n    >\n      <span class=\"po-clickable po-mr-1\" (click)=\"selectDisplayMode('month')\">{{ displayMonth }}</span>\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">{{ displayYear }}</span>\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let weekDay of displayWeekDays\">\n          {{ weekDay }}\n        </div>\n      </div>\n\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\"\n          (mouseenter)=\"onMouseEnter(day)\"\n          (mouseleave)=\"onMouseLeave()\"\n          attr-calendar\n        >\n          <span *ngIf=\"day !== 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isMonthVisible\">\n    <po-calendar-header (p-previous)=\"updateYear(-1)\" (p-next)=\"updateYear(1)\">\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">\n        {{ displayYear }}\n      </span>\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ monthLabel }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isYearVisible\">\n    <po-calendar-header (p-previous)=\"updateYear(-10)\" (p-next)=\"updateYear(10)\">\n      {{ displayStartDecade }} - {{ displayFinalDecade }}\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ yearLabel }}\n        </div>\n      </div>\n\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"!range\">\n    <div class=\"po-calendar-footer\">\n      <div class=\"po-calendar-footer-today\">\n        <button\n          type=\"button\"\n          class=\"po-calendar-footer-today-button\"\n          (click)=\"onSelectDate(today)\"\n          [disabled]=\"isTodayUnavailable()\"\n        >\n          {{ displayToday }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n" }]
    }], () => [{ type: PoCalendarService }, { type: PoCalendarLangService }, { type: PoDateService }], { value: [{
            type: Input,
            args: ['p-value']
        }], mode: [{
            type: Input,
            args: ['p-mode']
        }], responsive: [{
            type: Input,
            args: ['p-responsive']
        }], partType: [{
            type: Input,
            args: ['p-part-type']
        }], range: [{
            type: Input,
            args: ['p-range']
        }], activateDate: [{
            type: Input,
            args: ['p-activate-date']
        }], selectedValue: [{
            type: Input,
            args: ['p-selected-value']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], hoverValue: [{
            type: Input,
            args: ['p-hover-value']
        }], headerChange: [{
            type: Output,
            args: ['p-header-change']
        }], selectDate: [{
            type: Output,
            args: ['p-select-date']
        }], hoverDate: [{
            type: Output,
            args: ['p-hover-date']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCalendarWrapperComponent, { className: "PoCalendarWrapperComponent", filePath: "lib/components/po-calendar/po-calendar-wrapper/po-calendar-wrapper.component.ts", lineNumber: 16 }); })();

function PoCalendarComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoCalendarComponent_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0$1v = () => ({ partType: "end" });
function PoCalendarComponent_ng_template_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction0(2, _c0$1v));
} }
const _c1$D = () => ({ partType: "start" });
function PoCalendarComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 5)(2, PoCalendarComponent_ng_template_1_ng_container_2_Template, 2, 3, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction0(3, _c1$D));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r1.isResponsive);
} }
function PoCalendarComponent_ng_template_3_ng_template_1_Template(rf, ctx) { }
function PoCalendarComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_3_ng_template_1_Template, 0, 0, "ng-template", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoCalendarComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-calendar-wrapper", 9);
    i0.ɵɵlistener("p-header-change", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_header_change_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onHeaderChange($event, partType_r11)); })("p-select-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_select_date_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onSelectDate($event, partType_r11)); })("p-hover-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_hover_date_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onHoverDate($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const partType_r11 = ctx.partType;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-value", ctx_r5.getValue(partType_r11))("p-activate-date", ctx_r5.getActivateDate(partType_r11))("p-locale", ctx_r5.locale)("p-min-date", ctx_r5.minDate)("p-max-date", ctx_r5.maxDate)("p-part-type", partType_r11)("p-range", ctx_r5.isRange)("p-responsive", ctx_r5.isResponsive)("p-selected-value", ctx_r5.value)("p-hover-value", ctx_r5.hoverValue);
} }
/* istanbul ignore next */
const providers$6 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    }
];
const poCalendarRangeWidth = 600;
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
class PoCalendarComponent extends PoCalendarBaseComponent {
    changeDetector;
    hoverValue;
    constructor(changeDetector, poDate, languageService) {
        super(poDate, languageService);
        this.changeDetector = changeDetector;
    }
    get isResponsive() {
        return window.innerWidth < poCalendarRangeWidth;
    }
    ngOnInit() {
        this.setActivateDate();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.setActivateDate();
        }
    }
    getActivateDate(partType) {
        if (this.isRange && this.activateDate) {
            return this.activateDate[partType];
        }
        else {
            return this.activateDate;
        }
    }
    getValue(partType) {
        if (this.isRange && this.value) {
            return this.value[partType];
        }
        else {
            return this.value;
        }
    }
    onSelectDate(selectedDate, partType) {
        let newValue;
        if (this.isRange) {
            newValue = this.getValueFromSelectedDate(selectedDate);
            if (partType === 'end' && (!this.value?.start || (this.value.start && this.value.end))) {
                this.setActivateDate(selectedDate);
            }
        }
        else {
            newValue = selectedDate;
            this.setActivateDate(selectedDate);
        }
        this.value = newValue;
        const newModel = this.convertDateToISO(this.value);
        this.updateModel(newModel);
        this.change.emit(newModel);
    }
    onHoverDate(date) {
        this.hoverValue = date;
    }
    onHeaderChange({ month, year }, partType) {
        if (this.isRange) {
            let newStart;
            let newEnd;
            const { start, end } = this.activateDate;
            if (partType === 'end') {
                const newYear = month === 0 ? year - 1 : year;
                const daysInMonth = new Date(newYear, month, 0).getDate();
                if (year !== newYear) {
                    newStart = new Date(year, month - 1, Math.min(start.getDate(), daysInMonth));
                    newEnd = new Date(year, month, Math.min(end.getDate(), daysInMonth));
                }
                else {
                    newStart = new Date(newYear, month - 1, Math.min(start.getDate(), daysInMonth));
                    newEnd = new Date(newYear, month, Math.min(end.getDate(), daysInMonth));
                }
            }
            else {
                const newYear = month === 11 ? year + 1 : year;
                const daysInMonth = new Date(newYear, month + 1, 0).getDate();
                if (year !== newYear) {
                    newEnd = new Date(year, month + 1, Math.min(end.getDate(), daysInMonth));
                    newStart = new Date(year, month, Math.min(start.getDate(), daysInMonth));
                }
                else {
                    newEnd = new Date(newYear, month + 1, Math.min(end.getDate(), daysInMonth));
                    newStart = new Date(newYear, month, Math.min(start.getDate(), daysInMonth));
                }
            }
            this.activateDate = { start: newStart, end: newEnd };
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    validate(c) {
        return null;
    }
    writeValue(value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.value = null;
        }
        const activateDate = this.getValidateStartDate(value);
        this.setActivateDate(activateDate);
        this.changeDetector.markForCheck();
    }
    getValidateStartDate(value) {
        if (this.isRange) {
            return value?.start || null;
        }
        else if (value instanceof Date || typeof value === 'string') {
            return value;
        }
        return null;
    }
    getValueFromSelectedDate(selectedDate) {
        if (!this.value?.start || this.value.start > selectedDate || (this.value.end && this.value.start)) {
            return { start: new Date(selectedDate), end: null };
        }
        return { start: new Date(this.value.start), end: new Date(selectedDate) };
    }
    convertDateToISO(date) {
        if (this.isRange) {
            const start = date?.start instanceof Date ? this.poDate.convertDateToISO(date.start) : null;
            const end = date?.end instanceof Date ? this.poDate.convertDateToISO(date.end) : null;
            return { start, end };
        }
        else {
            return this.poDate.convertDateToISO(date);
        }
    }
    convertDateFromIso(stringDate) {
        if (stringDate && typeof stringDate === 'string') {
            const { year, month, day } = this.poDate.getDateFromIso(stringDate);
            const date = new Date(year, month - 1, day);
            this.poDate.setYearFrom0To100(date, year);
            return date;
        }
        return null;
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    writeDate(value) {
        if (this.isRange) {
            const start = value?.start;
            const end = value?.end;
            const newStart = start instanceof Date ? new Date(start) : this.convertDateFromIso(start);
            const newEnd = end instanceof Date ? new Date(end) : this.convertDateFromIso(end);
            this.value = { start: newStart, end: newEnd };
        }
        else {
            this.value = value instanceof Date ? new Date(value) : this.convertDateFromIso(value);
        }
    }
    static ɵfac = function PoCalendarComponent_Factory(t) { return new (t || PoCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarComponent, selectors: [["po-calendar"]], features: [i0.ɵɵProvidersFeature(providers$6), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["rangeTemplate", ""], ["calendarTemplate", ""], ["calendarWrapper", ""], [1, "po-calendar-range"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [1, "po-calendar"], [3, "ngTemplateOutlet"], [3, "p-value", "p-activate-date", "p-locale", "p-min-date", "p-max-date", "p-part-type", "p-range", "p-responsive", "p-selected-value", "p-hover-value", "p-header-change", "p-select-date", "p-hover-date"]], template: function PoCalendarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoCalendarComponent_ng_container_0_Template, 1, 0, "ng-container", 0)(1, PoCalendarComponent_ng_template_1_Template, 3, 4, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(3, PoCalendarComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(5, PoCalendarComponent_ng_template_5_Template, 1, 10, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            const _r4 = i0.ɵɵreference(4);
            i0.ɵɵproperty("ngIf", ctx.isRange)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoCalendarWrapperComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarComponent, [{
        type: Component,
        args: [{ selector: 'po-calendar', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$6, template: "<ng-container *ngIf=\"isRange; then rangeTemplate; else calendarTemplate\"></ng-container>\n\n<ng-template #rangeTemplate>\n  <div class=\"po-calendar-range\">\n    <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'start' }\"></ng-container>\n    <ng-container *ngIf=\"!isResponsive\">\n      <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'end' }\"></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n<ng-template #calendarTemplate>\n  <div class=\"po-calendar\">\n    <ng-template [ngTemplateOutlet]=\"calendarWrapper\"></ng-template>\n  </div>\n</ng-template>\n\n<ng-template #calendarWrapper let-partType=\"partType\">\n  <po-calendar-wrapper\n    [p-value]=\"getValue(partType)\"\n    [p-activate-date]=\"getActivateDate(partType)\"\n    [p-locale]=\"locale\"\n    [p-min-date]=\"minDate\"\n    [p-max-date]=\"maxDate\"\n    [p-part-type]=\"partType\"\n    [p-range]=\"isRange\"\n    [p-responsive]=\"isResponsive\"\n    [p-selected-value]=\"value\"\n    [p-hover-value]=\"hoverValue\"\n    (p-header-change)=\"onHeaderChange($event, partType)\"\n    (p-select-date)=\"onSelectDate($event, partType)\"\n    (p-hover-date)=\"onHoverDate($event)\"\n  >\n  </po-calendar-wrapper>\n</ng-template>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoDateService }, { type: PoLanguageService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCalendarComponent, { className: "PoCalendarComponent", filePath: "lib/components/po-calendar/po-calendar.component.ts", lineNumber: 61 }); })();

/**
 * @description
 * Módulo do componente `po-calendar`.
 */
class PoCalendarModule {
    static ɵfac = function PoCalendarModule_Factory(t) { return new (t || PoCalendarModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCalendarModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule],
                declarations: [PoCalendarComponent, PoCalendarHeaderComponent, PoCalendarWrapperComponent],
                exports: [PoCalendarComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCalendarModule, { declarations: [PoCalendarComponent, PoCalendarHeaderComponent, PoCalendarWrapperComponent], imports: [CommonModule, PoIconModule], exports: [PoCalendarComponent] }); })();

/**
 * @usedBy PoChartComponent
 *
 * @description
 *
 * *Enum* `PoChartType` para especificação dos tipos de gráficos.
 */
var PoChartType;
(function (PoChartType) {
    /**
     * Tipo de gráfico que exibe os dados de modo quantitativo, utilizando linhas contínuas demarcadas por pontos para cada valor de série definido.
     * Similar ao gráfico de linha, diferencia-se pela área localizada abaixo da linha das séries, que é preenchida com cores para um destaque explícita da evolução e mudança dos dados.
     */
    PoChartType["Area"] = "area";
    /**
     * Exibe os dados em formato de rosca, dividindo em partes proporcionais.
     */
    PoChartType["Donut"] = "donut";
    /**
     * Exibe os dados em formato circular, dividindo proporcionalmente em fatias.
     */
    PoChartType["Pie"] = "pie";
    /**
     * Gráfico que mostra os dados de modo linear e contínuo. É útil, por exemplo, para fazer comparações de tendência durante determinado período.
     * Pode ser utilizado em conjunto com gráficos dos tipos `column` e `area`, definindo-se o tipo através da propriedade `PoChartSerie.type`.
     */
    PoChartType["Line"] = "line";
    /**
     * Gráfico que exibe os dados em forma de barras verticais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo entre diversas séries.
     * As séries são exibidas lado-a-lado, com um pequeno espaço entre elas.
     */
    PoChartType["Column"] = "column";
    /**
     * Gráfico que exibe os dados em forma de barras horizontais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo de séries e categorias.
     */
    PoChartType["Bar"] = "bar";
})(PoChartType || (PoChartType = {}));

// Padding padrão
const PoChartPadding = 24;
// Área lateral designada para os rótulos do eixo X
const PoChartAxisXLabelArea = 56;
// Quantidade de linhas do eixo X
const PoChartGridLines = 5;
// Padding top para área interna de plotagem do grid para evitar overflow no hover dos pontos do gráfico do tipo linha;
const PoChartPlotAreaPaddingTop = 8;
// Angulação inicial de raio para gráficos do tipo circular
const PoChartStartAngle = -Math.PI / 2;
// Valor referente à espessura padrão do gráfico do tipo Donut.
const PoChartDonutDefaultThickness = 40;
// Valor para subtração do valor de angulo radiano final de série em tipos Donut e Pie. Necessário para o caso de uma série única: se uma circunferência tiver valores de ângulo de raio inicial e final iguais não plota.
const PoChartCompleteCircle = 0.0001;
// Duração da animação para gráficos dos tipos Donut e Pie.
const durationTime = 1500;
const PoChartAngleStepInterval = (Math.PI * 2) / Math.floor(durationTime / 60);

class PoChartMathsService {
    /**
     * Calcula e retorna os válores mínimo e máximo das séries.
     *
     * @param series Lista de séries.
     * @param acceptNegativeValues boolean.
     */
    calculateMinAndMaxValues(series, acceptNegativeValues = true) {
        const minValue = this.getDomain(series, 'min');
        const maxValue = this.getDomain(series, 'max');
        return {
            minValue: !acceptNegativeValues && minValue < 0 ? 0 : minValue,
            maxValue: acceptNegativeValues && maxValue < 0 ? 0 : maxValue
        };
    }
    /**
     * Retorna o valor com maior quantidade de dígitos entre todas as séries.
     * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.
     *
     * @param data Lista de séries.
     * @param type O tipo do gráfico'.
     * @param options As opções para validação de número de linhas do eixo X'.
     */
    getLongestDataValue(data = [], type, options) {
        if (type === PoChartType.Bar) {
            return this.getLongestData(data);
        }
        else {
            return this.getAxisXLabelLongestValue(data, this.amountOfGridLines(options?.axis));
        }
    }
    /**
     * Retorna o tamanho da série que tiver mais itens.
     *
     * @param series Lista de séries.
     */
    seriesGreaterLength(series) {
        return series.reduce((result, serie) => (result > serie.data.length ? result : serie.data.length), 0);
    }
    /**
     * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.
     *
     * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.
     *
     * Por exemplo:
     *    minValue = -10;
     *    maxValue = 0;
     *    serieValue = -8
     *    O resultado será de 0.20;
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param serieValue O valor da série.
     */
    getSeriePercentage(minMaxValues, serieValue) {
        const { minValue, maxValue } = minMaxValues;
        const range = maxValue - minValue;
        const displacement = serieValue - minValue;
        const result = displacement / range;
        return isNaN(result) ? 0 : result;
    }
    /**
     * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param gridLines Quantidade de linhas horizontais. Valor default é 5.
     */
    range(minMaxValues, gridLines = 5) {
        const { minValue, maxValue } = minMaxValues;
        const result = [];
        const step = this.getGridLineArea(minMaxValues, gridLines);
        for (let index = minValue; index <= maxValue; index = (index * 10 + step * 10) / 10) {
            result.push(index);
        }
        return result;
    }
    /**
     *
     * Verifica se o valor passado é um Integer ou Float.
     *
     * @param number O valor a ser validado
     */
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    amountOfGridLines(options) {
        const gridLines = options?.gridLines ?? PoChartGridLines;
        return gridLines && gridLines >= 2 && gridLines <= 10 ? gridLines : PoChartGridLines;
    }
    getAxisXLabelLongestValue(data, gridLines) {
        const allowNegativeData = data.every(dataItem => dataItem.type === PoChartType.Line);
        const domain = this.calculateMinAndMaxValues(data, allowNegativeData);
        const axisXLabelsList = this.range(domain, gridLines);
        return this.getLongestData(axisXLabelsList);
    }
    // Cálculo que retorna o valor obtido de gridLines em relação ao alcance dos valores mínimos e máximos das séries (maxMinValues)
    getGridLineArea(minMaxValues, gridLines) {
        const percentageValue = this.getFractionFromInt(gridLines - 1);
        const { minValue, maxValue } = minMaxValues;
        const result = (percentageValue * (maxValue - minValue)) / 100;
        return result === 0 ? 1 : result;
    }
    // Retorna o valor máximo ou mínimo das séries baseado no tipo passado(type).
    getDomain(series, type) {
        const result = Math[type](...series.map(serie => {
            if (Array.isArray(serie.data)) {
                return Math[type](...serie.data);
            }
        }));
        return isNaN(result) ? 0 : result;
    }
    // Retorna a fração do número passado referente à quantidade de linhas no eixo X (gridLines)
    getFractionFromInt(value) {
        return (1 / value) * (100 / 1);
    }
    getLongestData(serie) {
        const newSerie = [...serie];
        return newSerie.sort((longest, current) => current.toString().length - longest.toString().length)['0'];
    }
    static ɵfac = function PoChartMathsService_Factory(t) { return new (t || PoChartMathsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartMathsService, factory: PoChartMathsService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartMathsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

const _c0$1u = ["chartLine"];
class PoChartLineBaseComponent {
    mathsService;
    renderer;
    elementRef;
    alignByTheCorners = false;
    categories;
    categoriesCoordinates;
    svgSpace;
    pointClick = new EventEmitter();
    pointHover = new EventEmitter();
    chartLine;
    activeTooltip;
    animate = true;
    chartType;
    seriesPathsCoordinates;
    seriesPointsCoordinates = [];
    firstValidItemFromSerieArray;
    seriesLength;
    _containerSize = {};
    _range = {};
    _series = [];
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.seriePathPointsDefinition(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.seriePathPointsDefinition(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.animate = true;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.chartType = this._series[0].type;
            this.seriePathPointsDefinition(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    constructor(mathsService, renderer, elementRef) {
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onSeriePointClick(selectedItem) {
        this.pointClick.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    svgPathCommand() {
        const command = this.firstValidItemFromSerieArray ? 'M' : 'L';
        // firstValidItemFromSerieArray: tratamento para permitir ao usuário definir o primeiro valor como null para que seja ignorado;
        this.firstValidItemFromSerieArray = false;
        return command;
    }
    xCoordinate(index, containerSize) {
        const halfCategoryWidth = !this.alignByTheCorners
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / this.seriesLength / 2
            : 0;
        const divideIndexBySeriesLength = index / (this.alignByTheCorners ? this.seriesLength - 1 : this.seriesLength);
        const xRatio = isNaN(divideIndexBySeriesLength) ? 0 : divideIndexBySeriesLength;
        return Math.floor(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    serieCategory(index, categories = []) {
        return categories[index] ?? undefined;
    }
    seriePathPointsDefinition(containerSize, series, range) {
        this.seriesPointsCoordinates = [];
        this.seriesPathsCoordinates = series.map((serie) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = '';
                let pointCoordinates = [];
                const color = serie.color;
                this.firstValidItemFromSerieArray = true;
                serie.data.forEach((data, index) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const svgPathCommand = this.svgPathCommand();
                        const xCoordinate = this.xCoordinate(index, containerSize);
                        const yCoordinate = this.yCoordinate(range, data, containerSize);
                        const category = this.serieCategory(index, this.categories);
                        const label = serie.label;
                        const tooltip = serie.tooltip;
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        const isActive = this.chartType === PoChartType.Line;
                        pointCoordinates = [
                            ...pointCoordinates,
                            { category, label, tooltipLabel, data: data, xCoordinate, yCoordinate, color, isActive }
                        ];
                        pathCoordinates += ` ${svgPathCommand}${xCoordinate} ${yCoordinate}`;
                    }
                });
                pathCoordinates = this.verifyIfClosePath(pathCoordinates, serie.data.length - 1, range, 0, containerSize);
                this.seriesPointsCoordinates = [...this.seriesPointsCoordinates, pointCoordinates];
                return { coordinates: pathCoordinates, color, isActive: true };
            }
        });
    }
    verifyIfClosePath(pathCoordinates, lastIndex, range, data, containerSize) {
        const { axisXLabelWidth, svgWidth } = containerSize;
        if (this.chartType === PoChartType.Area) {
            const xLastPosition = this.xCoordinate(lastIndex, containerSize);
            const baseYCoordinate = this.yCoordinate(range, data, containerSize);
            const xInitialPosition = Math.floor(this.alignByTheCorners
                ? axisXLabelWidth
                : axisXLabelWidth + (svgWidth - axisXLabelWidth) / this.seriesLength / 2);
            return `${pathCoordinates} ${xLastPosition} ${baseYCoordinate} L${xInitialPosition} ${baseYCoordinate} Z`;
        }
        return pathCoordinates;
    }
    yCoordinate(range, data, containerSize) {
        const yRratio = this.mathsService.getSeriePercentage(range, data);
        const yCoordinate = containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRratio + PoChartPlotAreaPaddingTop;
        return Math.floor(yCoordinate);
    }
    static ɵfac = function PoChartLineBaseComponent_Factory(t) { return new (t || PoChartLineBaseComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartLineBaseComponent, viewQuery: function PoChartLineBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1u, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLine = _t.first);
        } }, inputs: { alignByTheCorners: [i0.ɵɵInputFlags.None, "p-align-by-the-corners", "alignByTheCorners"], categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], categoriesCoordinates: [i0.ɵɵInputFlags.None, "p-categories-coordinates", "categoriesCoordinates"], svgSpace: [i0.ɵɵInputFlags.None, "p-svg-space", "svgSpace"], range: [i0.ɵɵInputFlags.None, "p-range", "range"], containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, outputs: { pointClick: "p-point-click", pointHover: "p-point-hover" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLineBaseComponent, [{
        type: Directive
    }], () => [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }], { alignByTheCorners: [{
            type: Input,
            args: ['p-align-by-the-corners']
        }], categories: [{
            type: Input,
            args: ['p-categories']
        }], categoriesCoordinates: [{
            type: Input,
            args: ['p-categories-coordinates']
        }], svgSpace: [{
            type: Input,
            args: ['p-svg-space']
        }], pointClick: [{
            type: Output,
            args: ['p-point-click']
        }], pointHover: [{
            type: Output,
            args: ['p-point-hover']
        }], chartLine: [{
            type: ViewChild,
            args: ['chartLine']
        }], range: [{
            type: Input,
            args: ['p-range']
        }], containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();

const _c0$1t = ["chartPath"];
const _c1$C = ["po-chart-path", ""];
const pathDashoffsetDefaultWidth = 0;
class PoChartPathComponent {
    changeDetector;
    isActive = true;
    chartLine = false;
    coordinates;
    chartPath;
    pathWidth;
    _animate;
    _color;
    set color(value) {
        this._color = value.includes('po-color') && this.chartLine ? value.replace('po-color', 'po-border-color') : value;
    }
    get color() {
        return this._color;
    }
    set animate(value) {
        this._animate = value;
        if (!this.animate) {
            this.pathWidth = pathDashoffsetDefaultWidth;
        }
    }
    get animate() {
        return this._animate;
    }
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        if (!isIE()) {
            this.pathAnimation();
        }
    }
    pathAnimation() {
        this.pathWidth = this.chartPath.nativeElement.getTotalLength();
        this.changeDetector.detectChanges();
        setTimeout(this.preventsAnimatingAgain.bind(this), 700);
    }
    // Redefine pathWidth para zero após o período da animação para que a linha se expanda normalmente on resize.
    preventsAnimatingAgain() {
        this.pathWidth = pathDashoffsetDefaultWidth;
    }
    static ɵfac = function PoChartPathComponent_Factory(t) { return new (t || PoChartPathComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPathComponent, selectors: [["", "po-chart-path", ""]], viewQuery: function PoChartPathComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1t, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartPath = _t.first);
        } }, inputs: { isActive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-active", "isActive", convertToBoolean], chartLine: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-chart-line", "chartLine", convertToBoolean], coordinates: [i0.ɵɵInputFlags.None, "p-coordinates", "coordinates"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], animate: [i0.ɵɵInputFlags.None, "p-animate", "animate"] }, features: [i0.ɵɵInputTransformsFeature], attrs: _c1$C, decls: 2, vars: 11, consts: [[1, "po-chart-path"], ["chartPath", ""]], template: function PoChartPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelement(0, "path", 0, 1);
        } if (rf & 2) {
            i0.ɵɵclassMap((ctx.color == null ? null : ctx.color.includes("po-border-color")) || (ctx.color == null ? null : ctx.color.includes("po-color")) ? ctx.color : "");
            i0.ɵɵclassProp("po-chart-active-path", ctx.isActive)("po-chart-line-path", ctx.chartLine);
            i0.ɵɵattribute("fill", ctx.chartLine ? "none" : ctx.color)("stroke-dasharray", ctx.pathWidth)("stroke-dashoffset", ctx.pathWidth)("stroke", ctx.chartLine ? ctx.color : "")("d", ctx.coordinates);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-path]', template: "<svg:path #chartPath\n  class=\"po-chart-path\"\n  [class.po-chart-active-path]=\"isActive\"\n  [class.po-chart-line-path]=\"chartLine\"\n  [class]=\"color?.includes('po-border-color') || color?.includes('po-color') ? color : ''\"\n  [attr.fill]=\"chartLine ? 'none' : color\"\n  [attr.stroke-dasharray]=\"pathWidth\"\n  [attr.stroke-dashoffset]=\"pathWidth\"\n  [attr.stroke]=\"chartLine ? color : ''\"\n  [attr.d]=\"coordinates\">\n</svg:path> " }]
    }], () => [{ type: i0.ChangeDetectorRef }], { isActive: [{
            type: Input,
            args: [{ alias: 'p-is-active', transform: convertToBoolean }]
        }], chartLine: [{
            type: Input,
            args: [{ alias: 'p-chart-line', transform: convertToBoolean }]
        }], coordinates: [{
            type: Input,
            args: ['p-coordinates']
        }], chartPath: [{
            type: ViewChild,
            args: ['chartPath', { static: true }]
        }], color: [{
            type: Input,
            args: ['p-color']
        }], animate: [{
            type: Input,
            args: ['p-animate']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartPathComponent, { className: "PoChartPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-line/po-chart-path/po-chart-path.component.ts", lineNumber: 11 }); })();

const _c0$1s = ["po-chart-series-point", ""];
function PoChartSeriesPointComponent__svg_circle_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "circle", 1);
    i0.ɵɵlistener("click", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onClick(item_r1)); })("mouseenter", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_mouseenter_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onMouseEnter($event, item_r1)); })("mouseleave", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_mouseleave_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onMouseLeave($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap((ctx_r0.strokeColor == null ? null : ctx_r0.strokeColor.includes("po-border-color")) ? ctx_r0.strokeColor : "");
    i0.ɵɵclassProp("po-chart-active-point", item_r1.isActive);
    i0.ɵɵproperty("p-tooltip", item_r1.tooltipLabel)("p-append-in-body", true)("p-display-tooltip", !ctx_r0.chartLine && item_r1.isActive);
    i0.ɵɵattribute("cx", item_r1.xCoordinate)("cy", item_r1.yCoordinate)("r", ctx_r0.radius)("stroke", ctx_r0.strokeColor);
} }
const RADIUS_DEFAULT_SIZE = 5;
const RADIUS_HOVER_SIZE = 10;
const ANIMATION_DURATION_TIME = 700;
class PoChartSeriesPointComponent {
    renderer;
    elementRef;
    animate;
    isActive;
    chartLine = false;
    // Referência para o svgPathGroup ao qual pertence o ponto. Necessário para reordenação dos svgElements no DOM para tratamento onHover
    relativeTo;
    pointClick = new EventEmitter();
    pointHover = new EventEmitter();
    coordinates$;
    radius = RADIUS_DEFAULT_SIZE;
    strokeColor;
    _color;
    _coordinates = [];
    animationState = true;
    set color(value) {
        this.strokeColor = value.includes('po-color') ? value.replace('po-color', 'po-border-color') : value;
        this._color = value;
    }
    get color() {
        return this._color;
    }
    set coordinates(value) {
        this._coordinates = value;
        this.coordinates$ = this.displayPointsWithDelay(this._coordinates);
    }
    get coordinates() {
        return this._coordinates;
    }
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    trackBy(index) {
        return index;
    }
    onClick(point) {
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointClick.emit(selectedItem);
    }
    onMouseEnter(event, point) {
        this.setPointAttribute(event.target, true);
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointHover.emit({ relativeTo: this.relativeTo, ...selectedItem });
    }
    onMouseLeave(event) {
        this.setPointAttribute(event.target, false);
    }
    displayPointsWithDelay(coordinates) {
        if (this.animationState && !isIE()) {
            const animationTimer = ANIMATION_DURATION_TIME / coordinates.length;
            return from(coordinates).pipe(concatMap((item, index) => timer(index === 0 || !this.animate ? 0 : animationTimer).pipe(mapTo(item))), scan((acc, curr) => acc.concat(curr), []), tap(() => (this.animationState = false)));
        }
        else {
            return from([coordinates]);
        }
    }
    setPointAttribute(target, isHover) {
        this.renderer.setAttribute(target, 'r', isHover ? RADIUS_HOVER_SIZE.toString() : RADIUS_DEFAULT_SIZE.toString());
        if (this.color.includes('po-color')) {
            this.renderer.setAttribute(target, 'class', isHover ? `${this.strokeColor} ${this.color}` : `po-chart-line-point po-chart-active-point ${this.strokeColor}`);
        }
        else {
            this.renderer[isHover ? 'setStyle' : 'removeStyle'](target, 'fill', isHover ? this.color : undefined);
        }
    }
    static ɵfac = function PoChartSeriesPointComponent_Factory(t) { return new (t || PoChartSeriesPointComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartSeriesPointComponent, selectors: [["", "po-chart-series-point", ""]], inputs: { animate: [i0.ɵɵInputFlags.None, "p-animate", "animate"], isActive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-is-active", "isActive", convertToBoolean], chartLine: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-chart-line", "chartLine", convertToBoolean], relativeTo: [i0.ɵɵInputFlags.None, "p-relative-to", "relativeTo"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], coordinates: [i0.ɵɵInputFlags.None, "p-coordinates", "coordinates"] }, outputs: { pointClick: "p-point-click", pointHover: "p-point-hover" }, features: [i0.ɵɵInputTransformsFeature], attrs: _c0$1s, decls: 2, vars: 4, consts: [["p-tooltip-position", "top", "class", "po-chart-line-point", 3, "p-tooltip", "p-append-in-body", "p-display-tooltip", "class", "po-chart-active-point", "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["p-tooltip-position", "top", 1, "po-chart-line-point", 3, "p-tooltip", "p-append-in-body", "p-display-tooltip", "click", "mouseenter", "mouseleave"]], template: function PoChartSeriesPointComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoChartSeriesPointComponent__svg_circle_0_Template, 1, 11, "circle", 0);
            i0.ɵɵpipe(1, "async");
        } if (rf & 2) {
            i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(1, 2, ctx.coordinates$))("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoTooltipDirective, i1.AsyncPipe], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartSeriesPointComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-series-point]', template: "<svg:circle *ngFor=\"let item of coordinates$ | async; trackBy: trackBy\" \n  [p-tooltip]=\"item.tooltipLabel\"\n  [p-append-in-body]='true'\n  [p-display-tooltip]=\"!chartLine && item.isActive\"\n  p-tooltip-position=\"top\"\n  class=\"po-chart-line-point\"\n  [class]=\"strokeColor?.includes('po-border-color') ? strokeColor : ''\"\n  [class.po-chart-active-point]=\"item.isActive\"\n  [attr.cx]=\"item.xCoordinate\"\n  [attr.cy]=\"item.yCoordinate\"\n  [attr.r]=\"radius\"\n  [attr.stroke]=\"strokeColor\"\n  (click)=\"onClick(item)\"\n  (mouseenter)=\"onMouseEnter($event, item)\"\n  (mouseleave)=\"onMouseLeave($event)\"\n  >\n</svg:circle>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }], { animate: [{
            type: Input,
            args: ['p-animate']
        }], isActive: [{
            type: Input,
            args: [{ alias: 'p-is-active', transform: convertToBoolean }]
        }], chartLine: [{
            type: Input,
            args: [{ alias: 'p-chart-line', transform: convertToBoolean }]
        }], relativeTo: [{
            type: Input,
            args: ['p-relative-to']
        }], pointClick: [{
            type: Output,
            args: ['p-point-click']
        }], pointHover: [{
            type: Output,
            args: ['p-point-hover']
        }], color: [{
            type: Input,
            args: ['p-color']
        }], coordinates: [{
            type: Input,
            args: ['p-coordinates']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartSeriesPointComponent, { className: "PoChartSeriesPointComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-line/po-chart-series-point/po-chart-series-point.component.ts", lineNumber: 17 }); })();

const _c0$1r = ["po-chart-area", ""];
function PoChartAreaComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 2);
    i0.ɵɵlistener("mouseenter", function PoChartAreaComponent__svg_g_2_Template__svg_g_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onEnter(i_r3)); })("mouseleave", function PoChartAreaComponent__svg_g_2_Template__svg_g_mouseleave_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onLeave(i_r3)); });
    i0.ɵɵelement(1, "g", 3);
    i0.ɵɵelementStart(2, "g", 4);
    i0.ɵɵlistener("p-point-click", function PoChartAreaComponent__svg_g_2_Template__svg_g_p_point_click_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSeriePointClick($event)); })("p-point-hover", function PoChartAreaComponent__svg_g_2_Template__svg_g_p_point_hover_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onSeriePointHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-line-path-group-" + i_r3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-chart-line", ctx_r1.chartType === "line")("p-animate", ctx_r1.animate)("p-color", item_r2.color)("p-coordinates", item_r2 == null ? null : item_r2.coordinates)("p-is-active", item_r2.isActive);
    i0.ɵɵattribute("key", "po-chart-line-path-" + i_r3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-animate", ctx_r1.animate)("p-chart-line", ctx_r1.chartType === "line")("p-color", item_r2.color)("p-coordinates", ctx_r1.seriesPointsCoordinates[i_r3])("p-is-active", ctx_r1.activeTooltip)("p-relative-to", "po-chart-line-path-group-" + i_r3);
    i0.ɵɵattribute("key", "po-chart-line-path-points-group-" + i_r3);
} }
class PoChartAreaComponent extends PoChartLineBaseComponent {
    mathsService;
    renderer;
    elementRef;
    currentActiveSerieIndex;
    mouseMoveSubscription$;
    previousActiveSerieIndex;
    constructor(mathsService, renderer, elementRef) {
        super(mathsService, renderer, elementRef);
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onEnter(serieIndex) {
        this.applyActiveItem(this.seriesPathsCoordinates, serieIndex);
        this.initializeListener(serieIndex);
        this.activeTooltip = true;
    }
    onLeave(serieIndex) {
        this.removeListener();
        this.applyActiveItem(this.seriesPathsCoordinates);
        this.applyActiveItem(this.seriesPointsCoordinates[serieIndex], null);
    }
    onSeriePointHover(selectedItem) {
        const { relativeTo, ...item } = selectedItem;
        this.pointHover.emit(item);
    }
    applyActiveItem(list, index) {
        list.forEach((serie, seriesIndex) => {
            serie['isActive'] = index === undefined ? true : index === seriesIndex;
        });
    }
    getMouseCoordinates(event) {
        event.preventDefault();
        const { svgDomMatrix, svgPoint } = this.svgSpace;
        svgPoint.x = event.clientX;
        svgPoint.y = event.clientY;
        // Retorna as coordenadas do mouse em relação ao container svg.
        return svgPoint.matrixTransform(svgDomMatrix);
    }
    initializeListener(serieIndex) {
        let pointPosition;
        this.previousActiveSerieIndex = undefined;
        this.mouseMoveSubscription$ = fromEvent(this.elementRef.nativeElement, 'mousemove')
            .pipe(debounceTime$1(10), tap((event) => (pointPosition = this.getMouseCoordinates(event))), switchMap(() => of(this.verifyActiveArea(pointPosition))))
            .subscribe(activeObjIndex => {
            if (activeObjIndex !== undefined) {
                this.applyActiveItem(this.seriesPointsCoordinates[serieIndex], activeObjIndex);
            }
        });
    }
    removeListener() {
        this.mouseMoveSubscription$.unsubscribe();
    }
    verifyActiveArea(pointPosition) {
        const { x } = pointPosition;
        this.currentActiveSerieIndex = this.categoriesCoordinates.findIndex((category, index) => (x >= category && index === this.categoriesCoordinates.length - 1) ||
            (x >= category && x <= this.categoriesCoordinates[index + 1]));
        if (this.currentActiveSerieIndex >= 0 && this.currentActiveSerieIndex !== this.previousActiveSerieIndex) {
            this.previousActiveSerieIndex = this.currentActiveSerieIndex;
            return this.currentActiveSerieIndex;
        }
        return undefined;
    }
    static ɵfac = function PoChartAreaComponent_Factory(t) { return new (t || PoChartAreaComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAreaComponent, selectors: [["", "po-chart-area", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1r, decls: 3, vars: 2, consts: [["chartLine", ""], [3, "class", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseenter", "mouseleave"], ["po-chart-path", "", 3, "p-chart-line", "p-animate", "p-color", "p-coordinates", "p-is-active"], ["po-chart-series-point", "", 3, "p-animate", "p-chart-line", "p-color", "p-coordinates", "p-is-active", "p-relative-to", "p-point-click", "p-point-hover"]], template: function PoChartAreaComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g", null, 0);
            i0.ɵɵtemplate(2, PoChartAreaComponent__svg_g_2_Template, 3, 15, "g", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoChartPathComponent, PoChartSeriesPointComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAreaComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-area]', template: "<svg:g #chartLine>\n\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-line-path-group-' + i\"\n    (mouseenter)=\"onEnter(i)\"\n    (mouseleave)=\"onLeave(i)\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-path\n      [p-chart-line]=\"chartType === 'line'\"\n      [attr.key]=\"'po-chart-line-path-' + i\"\n      [p-animate]=\"animate\"\n      [p-color]=\"item.color\" \n      [p-coordinates]=\"item?.coordinates\"\n      [p-is-active]=\"item.isActive\"\n      >\n      </svg:g>\n\n    <!-- SERIES POINTS -->\n    <svg:g po-chart-series-point\n      [p-animate]=\"animate\"\n      [p-chart-line]=\"chartType === 'line'\"\n      [p-color]=\"item.color\"\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\n      [p-is-active]=\"activeTooltip\"\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\n      (p-point-click)=\"onSeriePointClick($event)\"\n      (p-point-hover)=\"onSeriePointHover($event)\"\n      ></svg:g>\n  </svg:g>\n\n</svg:g>" }]
    }], () => [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartAreaComponent, { className: "PoChartAreaComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-line/po-chart-area/po-chart-area.component.ts", lineNumber: 15 }); })();

const _c0$1q = ["po-chart-axis-path", ""];
function PoChartAxisPathComponent__svg_path_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelement(0, "path", 1);
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    i0.ɵɵattribute("d", item_r2.coordinates);
} }
function PoChartAxisPathComponent__svg_path_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelement(0, "path", 1);
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    i0.ɵɵattribute("d", item_r3.coordinates);
} }
class PoChartAxisPathComponent {
    axisXCoordinates;
    axisYCoordinates;
    constructor() { }
    trackBy(index) {
        return index;
    }
    static ɵfac = function PoChartAxisPathComponent_Factory(t) { return new (t || PoChartAxisPathComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisPathComponent, selectors: [["", "po-chart-axis-path", ""]], inputs: { axisXCoordinates: [i0.ɵɵInputFlags.None, "p-axis-x-coordinates", "axisXCoordinates"], axisYCoordinates: [i0.ɵɵInputFlags.None, "p-axis-y-coordinates", "axisYCoordinates"] }, attrs: _c0$1q, decls: 4, vars: 4, consts: [["class", "po-chart-axis-path", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-chart-axis-path"]], template: function PoChartAxisPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartAxisPathComponent__svg_path_1_Template, 1, 1, "path", 0);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "g");
            i0.ɵɵtemplate(3, PoChartAxisPathComponent__svg_path_3_Template, 1, 1, "path", 0);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.axisXCoordinates)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.axisYCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-axis-path]', template: "<svg:g>\n  <svg:path *ngFor=\"let item of axisXCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-path\" \n    [attr.d]=\"item.coordinates\">\n  </svg:path> \n</svg:g>\n\n<svg:g>\n  <svg:path *ngFor=\"let item of axisYCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-path\" \n    [attr.d]=\"item.coordinates\">\n  </svg:path> \n</svg:g>" }]
    }], () => [], { axisXCoordinates: [{
            type: Input,
            args: ['p-axis-x-coordinates']
        }], axisYCoordinates: [{
            type: Input,
            args: ['p-axis-y-coordinates']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartAxisPathComponent, { className: "PoChartAxisPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-axis/po-chart-axis-path/po-chart-axis-path.component.ts", lineNumber: 9 }); })();

const _c0$1p = ["po-chart-axis-label", ""];
function PoChartAxisLabelComponent__svg_text_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "text", 2);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    i0.ɵɵattribute("x", item_r2.xCoordinate)("y", item_r2.yCoordinate);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", item_r2.label, " ");
} }
function PoChartAxisLabelComponent__svg_text_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "text", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-chart-centered-label", !ctx_r1.alignByTheCorners);
    i0.ɵɵattribute("x", item_r3.xCoordinate)("y", item_r3.yCoordinate);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", item_r3.label, " ");
} }
class PoChartAxisLabelComponent {
    alignByTheCorners = false;
    axisXLabelCoordinates;
    axisYLabelCoordinates;
    type;
    constructor() { }
    trackBy(index) {
        return index;
    }
    static ɵfac = function PoChartAxisLabelComponent_Factory(t) { return new (t || PoChartAxisLabelComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisLabelComponent, selectors: [["", "po-chart-axis-label", ""]], inputs: { alignByTheCorners: [i0.ɵɵInputFlags.None, "p-align-by-the-corners", "alignByTheCorners"], axisXLabelCoordinates: [i0.ɵɵInputFlags.None, "p-axis-x-label-coordinates", "axisXLabelCoordinates"], axisYLabelCoordinates: [i0.ɵɵInputFlags.None, "p-axis-y-label-coordinates", "axisYLabelCoordinates"], type: [i0.ɵɵInputFlags.None, "p-type", "type"] }, attrs: _c0$1p, decls: 4, vars: 4, consts: [["class", "po-chart-axis-x-label", "dominant-baseline", "middle", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-chart-axis-y-label", 3, "po-chart-centered-label", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["dominant-baseline", "middle", 1, "po-chart-axis-x-label"], [1, "po-chart-axis-y-label"]], template: function PoChartAxisLabelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartAxisLabelComponent__svg_text_1_Template, 2, 3, "text", 0);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "g");
            i0.ɵɵtemplate(3, PoChartAxisLabelComponent__svg_text_3_Template, 2, 5, "text", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.axisXLabelCoordinates)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.axisYLabelCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisLabelComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-axis-label]', template: "<svg:g>\n  <svg:text *ngFor=\"let item of axisXLabelCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-x-label\" \n    dominant-baseline=\"middle\"\n    [attr.x]=\"item.xCoordinate\"\n    [attr.y]=\"item.yCoordinate\">\n    {{ item.label }}\n  </svg:text> \n</svg:g>\n\n<svg:g>\n  <svg:text *ngFor=\"let item of axisYLabelCoordinates; let first = first; let last = last; trackBy: trackBy\"\n    class=\"po-chart-axis-y-label\" \n    [class.po-chart-centered-label]=\"!alignByTheCorners\"\n    [attr.x]=\"item.xCoordinate\"\n    [attr.y]=\"item.yCoordinate\">\n    {{ item.label }}\n  </svg:text> \n</svg:g>" }]
    }], () => [], { alignByTheCorners: [{
            type: Input,
            args: ['p-align-by-the-corners']
        }], axisXLabelCoordinates: [{
            type: Input,
            args: ['p-axis-x-label-coordinates']
        }], axisYLabelCoordinates: [{
            type: Input,
            args: ['p-axis-y-label-coordinates']
        }], type: [{
            type: Input,
            args: ['p-type']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartAxisLabelComponent, { className: "PoChartAxisLabelComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-axis/po-chart-axis-label/po-chart-axis-label.component.ts", lineNumber: 10 }); })();

const _c0$1o = ["po-chart-axis", ""];
class PoChartAxisComponent {
    mathsService;
    alignByTheCorners = false;
    type;
    range;
    categoriesCoordinates = new EventEmitter();
    axisXCoordinates;
    axisXLabelCoordinates;
    axisYCoordinates;
    axisYLabelCoordinates;
    axisXLabels = [];
    axisYLabels = [];
    gridLines = PoChartGridLines;
    seriesLength = 0;
    _axisOptions;
    _categories = [];
    _containerSize = {};
    _series = [];
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.checkAxisOptions(this.axisOptions);
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this._series = [];
            this.cleanUpCoordinates();
        }
    }
    get series() {
        return this._series;
    }
    set categories(value) {
        this._categories = value;
        if (this.type === PoChartType.Bar) {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get categories() {
        return this._categories;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.checkAxisOptions(this.axisOptions);
        this.setAxisXCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
        this.setAxisYCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
    }
    get containerSize() {
        return this._containerSize;
    }
    set axisOptions(value) {
        this._axisOptions = value;
        this.checkAxisOptions(this._axisOptions);
        if (this.type === PoChartType.Bar) {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get axisOptions() {
        return this._axisOptions;
    }
    constructor(mathsService) {
        this.mathsService = mathsService;
    }
    setAxisXCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        if (seriesLength) {
            const amountOfAxisLabels = type === PoChartType.Bar ? seriesLength : gridLines;
            this.calculateAxisXLabelCoordinates(amountOfAxisLabels, containerSize, minMaxAxisValues, type);
        }
        const amountOfAxisXLines = this.amountOfAxisXLines(seriesLength, gridLines, type);
        this.calculateAxisXCoordinates(amountOfAxisXLines, containerSize, minMaxAxisValues);
    }
    amountOfAxisXLines(seriesLength, gridLines, type) {
        if (type === PoChartType.Bar) {
            return seriesLength <= 1 ? 2 : seriesLength + 1;
        }
        return gridLines === 0 ? 1 : gridLines;
    }
    setAxisYCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        const amountOfAxisY = type === PoChartType.Bar ? gridLines : seriesLength;
        if (seriesLength) {
            this.calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type);
        }
        if (type === PoChartType.Area) {
            this.getCategoriesRangeForMouseMove(amountOfAxisY, containerSize);
        }
        this.calculateAxisYCoordinates(amountOfAxisY, containerSize, type, minMaxAxisValues);
    }
    calculateAxisXCoordinates(amountOfAxisX, containerSize, range) {
        const startX = containerSize.axisXLabelWidth;
        const endX = containerSize.svgWidth;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(amountOfAxisX)].map((_, index) => {
            const yCoordinate = this.calculateAxisXCoordinateY(amountOfAxisX, containerSize, index);
            const coordinates = `M${startX} ${yCoordinate} L${endX}, ${yCoordinate}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `column`, `area` e `line`.
        if (this.type !== PoChartType.Bar && range.minValue < 0 && !this.axisXLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startX, endX);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisXCoordinates = coordinatesList;
    }
    getCoordinatesRelatedToZero(containerSize, range, start, end, isAxisY = false) {
        const type = isAxisY ? PoChartType.Bar : PoChartType.Column;
        const basePosition = this.axisCoordinatesForValueZero(range, 0, containerSize, isAxisY);
        const coordinates = {
            column: {
                startX: start,
                endX: end,
                startY: basePosition,
                endY: basePosition
            },
            bar: {
                startX: basePosition,
                endX: basePosition,
                startY: start,
                endY: end
            }
        };
        return {
            coordinates: `M${coordinates[type].startX} ${coordinates[type].startY} L${coordinates[type].endX} ${coordinates[type].endY}`
        };
    }
    axisCoordinatesForValueZero(range, data, containerSize, isAxisY) {
        const { axisXLabelWidth, svgWidth, svgPlottingAreaHeight } = containerSize;
        const ratio = this.mathsService.getSeriePercentage(range, data);
        return Math.floor(isAxisY
            ? axisXLabelWidth + (svgWidth - axisXLabelWidth) * ratio
            : svgPlottingAreaHeight - svgPlottingAreaHeight * ratio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisXLabelCoordinates(amountOfAxisX, containerSize, minMaxAxisValues, type) {
        this.axisXLabels = this.getAxisXLabels(type, minMaxAxisValues, amountOfAxisX);
        this.axisXLabelCoordinates = [...Array(amountOfAxisX)].map((_, index) => {
            const label = this.axisXLabels[index];
            const xCoordinate = this.calculateAxisXLabelXCoordinate(containerSize.axisXLabelWidth);
            const yCoordinate = this.calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisYCoordinates(amountOfAxisY, containerSize, type, range) {
        const startY = PoChartPlotAreaPaddingTop;
        const endY = containerSize.svgPlottingAreaHeight + PoChartPlotAreaPaddingTop;
        // tratamento necessário para criar uma linha a mais para fechar o gráfico
        const length = amountOfAxisY === 0 || type === PoChartType.Bar ? amountOfAxisY : amountOfAxisY + 1;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(length)].map((_, index) => {
            const xCoordinate = this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index);
            const coordinates = `M${xCoordinate} ${startY} L${xCoordinate}, ${endY}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `bar`.
        if (type === PoChartType.Bar && range.minValue < 0 && !this.axisYLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startY, endY, true);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisYCoordinates = [...coordinatesList];
    }
    calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type) {
        this.axisYLabels = this.getAxisYLabels(type, minMaxAxisValues, amountOfAxisY);
        this.axisYLabelCoordinates = [...Array(amountOfAxisY)].map((_, index) => {
            const label = this.axisYLabels[index];
            const xCoordinate = this.getAxisXCoordinates(containerSize, amountOfAxisY, type, index);
            const yCoordinate = this.calculateAxisYLabelYCoordinate(containerSize);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisXLabelXCoordinate(axisXLabelWidth) {
        const labelPoChartPadding = PoChartPadding / 3;
        return axisXLabelWidth - labelPoChartPadding;
    }
    calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisX : amountOfAxisX - 1;
        const yRatio = index / amountOfLines;
        if (type !== PoChartType.Bar) {
            return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        }
        const halfCategoryHeight = containerSize.svgPlottingAreaHeight / amountOfAxisX / 2;
        return (containerSize.svgPlottingAreaHeight -
            halfCategoryHeight -
            containerSize.svgPlottingAreaHeight * yRatio +
            PoChartPlotAreaPaddingTop);
    }
    calculateAxisXCoordinateY(amountOfAxisX, containerSize, index) {
        const yRatio = index / (amountOfAxisX - 1);
        return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisYLabelYCoordinate(containerSize) {
        const textPoChartPadding = PoChartPadding / 3;
        return containerSize.svgHeight - textPoChartPadding;
    }
    centeredInCategoryArea(containerSize, amountOfAxisY, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisY - 1 : amountOfAxisY;
        const xRatio = index / amountOfLines;
        if (type === PoChartType.Bar) {
            return Math.round(containerSize.axisXLabelWidth + (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
        }
        const halfCategoryWidth = (containerSize.svgWidth - containerSize.axisXLabelWidth) / amountOfAxisY / 2;
        return Math.round(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, subtractCategoryWidth = false) {
        const amountOfLines = this.alignByTheCorners ? amountOfAxisY - 1 : amountOfAxisY;
        const halfCategoryWidth = this.alignByTheCorners && subtractCategoryWidth
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / (amountOfAxisY - 1) / 2
            : 0;
        const divideIndexByAmountOfLines = index / amountOfLines;
        const xRatio = divideIndexByAmountOfLines === Infinity ? 0 : divideIndexByAmountOfLines;
        return Math.round(containerSize.axisXLabelWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio -
            halfCategoryWidth);
    }
    checkAxisOptions(options = {}) {
        this.gridLines =
            options.gridLines && this.isValidGridLinesLengthOption(options.gridLines) ? options.gridLines : PoChartGridLines;
    }
    cleanUpCoordinates() {
        this.axisXCoordinates = [];
        this.axisYCoordinates = [];
        this.axisXLabelCoordinates = [];
        this.axisYLabelCoordinates = [];
        this.seriesLength = 0;
    }
    getAxisXCoordinates(containerSize, amountOfAxisY, type, index) {
        return this.alignByTheCorners
            ? this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index)
            : this.centeredInCategoryArea(containerSize, amountOfAxisY, type, index);
    }
    getCategoriesRangeForMouseMove(amountOfAxisY, containerSize) {
        const categoriesCoordinates = [...Array(amountOfAxisY)].map((_, index) => this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, true));
        this.categoriesCoordinates.emit(categoriesCoordinates);
    }
    isValidGridLinesLengthOption(gridLines) {
        return gridLines >= 2 && gridLines <= 10;
    }
    getAxisXLabels(type, minMaxAxisValues, amountOfAxisX) {
        if (type === PoChartType.Bar) {
            const axisXLabelsList = this.formatCategoriesLabels(amountOfAxisX, this.categories);
            return axisXLabelsList.reverse();
        }
        return this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX);
    }
    getAxisYLabels(type, minMaxAxisValues, amountOfAxisX) {
        return type === PoChartType.Bar
            ? this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX)
            : this.formatCategoriesLabels(amountOfAxisX, this.categories);
    }
    formatCategoriesLabels(amountOfAxisX, categories = []) {
        return [...Array(amountOfAxisX)].map((_, index) => categories[index] ?? '-');
    }
    generateAverageOfLabels(minMaxAxisValues, amountOfAxisLines) {
        const averageLabelsList = this.mathsService.range(minMaxAxisValues, amountOfAxisLines);
        return averageLabelsList.map(label => {
            const formattedDigit = label.toFixed(label % 1 && 2);
            // Remove dígitos com zero.
            // Também trata caso quando o valor retornado era -0, substituindo-o por 0.
            const removeZeroDigits = formattedDigit.replace(/\.00$/, '').replace(/\-0$/, 0);
            return removeZeroDigits.toString();
        });
    }
    static ɵfac = function PoChartAxisComponent_Factory(t) { return new (t || PoChartAxisComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisComponent, selectors: [["", "po-chart-axis", ""]], inputs: { alignByTheCorners: [i0.ɵɵInputFlags.None, "p-align-by-the-corners", "alignByTheCorners"], type: [i0.ɵɵInputFlags.None, "p-type", "type"], range: [i0.ɵɵInputFlags.None, "p-range", "range"], series: [i0.ɵɵInputFlags.None, "p-series", "series"], categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], axisOptions: [i0.ɵɵInputFlags.None, "p-options", "axisOptions"] }, outputs: { categoriesCoordinates: "p-categories-coordinates" }, attrs: _c0$1o, decls: 2, vars: 6, consts: [["po-chart-axis-path", "", 3, "p-axis-x-coordinates", "p-axis-y-coordinates"], ["po-chart-axis-label", "", 3, "p-align-by-the-corners", "p-axis-x-label-coordinates", "p-axis-y-label-coordinates", "p-type"]], template: function PoChartAxisComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelement(0, "g", 0)(1, "g", 1);
        } if (rf & 2) {
            i0.ɵɵproperty("p-axis-x-coordinates", ctx.axisXCoordinates)("p-axis-y-coordinates", ctx.axisYCoordinates);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-align-by-the-corners", ctx.alignByTheCorners)("p-axis-x-label-coordinates", ctx.axisXLabelCoordinates)("p-axis-y-label-coordinates", ctx.axisYLabelCoordinates)("p-type", ctx.type);
        } }, dependencies: [PoChartAxisPathComponent, PoChartAxisLabelComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-axis]', template: "<svg:g po-chart-axis-path [p-axis-x-coordinates]=\"axisXCoordinates\" [p-axis-y-coordinates]=\"axisYCoordinates\"></svg:g>\n\n<svg:g po-chart-axis-label \n  [p-align-by-the-corners]=\"alignByTheCorners\" \n  [p-axis-x-label-coordinates]=\"axisXLabelCoordinates\" \n  [p-axis-y-label-coordinates]=\"axisYLabelCoordinates\" \n  [p-type]=\"type\"\n  >\n</svg:g>" }]
    }], () => [{ type: PoChartMathsService }], { alignByTheCorners: [{
            type: Input,
            args: ['p-align-by-the-corners']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], range: [{
            type: Input,
            args: ['p-range']
        }], categoriesCoordinates: [{
            type: Output,
            args: ['p-categories-coordinates']
        }], series: [{
            type: Input,
            args: ['p-series']
        }], categories: [{
            type: Input,
            args: ['p-categories']
        }], containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], axisOptions: [{
            type: Input,
            args: ['p-options']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartAxisComponent, { className: "PoChartAxisComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-axis/po-chart-axis.component.ts", lineNumber: 21 }); })();

class PoChartBarBaseComponent {
    mathsService;
    categories;
    barClick = new EventEmitter();
    barHover = new EventEmitter();
    seriesPathsCoordinates;
    seriesGreaterLength;
    _containerSize = {};
    _range = {};
    _series = [];
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.calculateSeriesPathsCoordinates(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.calculateSeriesPathsCoordinates(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesGreaterLength = this.mathsService.seriesGreaterLength(this.series);
            this.calculateSeriesPathsCoordinates(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    constructor(mathsService) {
        this.mathsService = mathsService;
    }
    onSerieBarClick(selectedItem) {
        this.barClick.emit(selectedItem);
    }
    onSerieBarHover(selectedItem) {
        this.barHover.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    calculateSeriesPathsCoordinates(containerSize, series, range) {
        this.seriesPathsCoordinates = series.map((serie, seriesIndex) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = [];
                serie.data.forEach((data, serieDataIndex) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const coordinates = this.barCoordinates(seriesIndex, serieDataIndex, containerSize, range, data);
                        const category = this.serieCategory(serieDataIndex, this.categories);
                        const label = serie['label'];
                        const color = serie['color'];
                        const tooltip = serie['tooltip'];
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        pathCoordinates = [...pathCoordinates, { category, color, label, tooltipLabel, data, coordinates }];
                    }
                });
                return pathCoordinates;
            }
        });
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    serieCategory(index, categories = []) {
        return categories[index] ?? undefined;
    }
    static ɵfac = function PoChartBarBaseComponent_Factory(t) { return new (t || PoChartBarBaseComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartBarBaseComponent, inputs: { categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], range: [i0.ɵɵInputFlags.None, "p-range", "range"], containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, outputs: { barClick: "p-bar-click", barHover: "p-bar-hover" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarBaseComponent, [{
        type: Directive
    }], () => [{ type: PoChartMathsService }], { categories: [{
            type: Input,
            args: ['p-categories']
        }], barClick: [{
            type: Output,
            args: ['p-bar-click']
        }], barHover: [{
            type: Output,
            args: ['p-bar-hover']
        }], range: [{
            type: Input,
            args: ['p-range']
        }], containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();

const _c0$1n = ["po-chart-bar-path", ""];
function PoChartBarPathComponent__svg_path_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "path", 1);
    i0.ɵɵlistener("mouseenter", function PoChartBarPathComponent__svg_path_0_Template__svg_path_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onMouseEnter(item_r1)); })("click", function PoChartBarPathComponent__svg_path_0_Template__svg_path_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onClick(item_r1)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap((ctx_r0.color == null ? null : ctx_r0.color.includes("po-color")) ? ctx_r0.color : "");
    i0.ɵɵproperty("p-tooltip", item_r1.tooltipLabel)("p-tooltip-position", ctx_r0.tooltipPosition)("p-append-in-body", true);
    i0.ɵɵattribute("fill", ctx_r0.color)("d", item_r1.coordinates);
} }
class PoChartBarPathComponent {
    color;
    coordinates;
    tooltipPosition;
    barClick = new EventEmitter();
    barHover = new EventEmitter();
    constructor() { }
    trackBy(index) {
        return index;
    }
    onClick(item) {
        const selectedItem = { label: item.label, data: item.data, category: item.category };
        this.barClick.emit(selectedItem);
    }
    onMouseEnter(item) {
        const selectedItem = { label: item.label, data: item.data, category: item.category };
        this.barHover.emit(selectedItem);
    }
    static ɵfac = function PoChartBarPathComponent_Factory(t) { return new (t || PoChartBarPathComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartBarPathComponent, selectors: [["", "po-chart-bar-path", ""]], inputs: { color: [i0.ɵɵInputFlags.None, "p-color", "color"], coordinates: [i0.ɵɵInputFlags.None, "p-coordinates", "coordinates"], tooltipPosition: [i0.ɵɵInputFlags.None, "p-tooltip-position", "tooltipPosition"] }, outputs: { barClick: "p-bar-click", barHover: "p-bar-hover" }, attrs: _c0$1n, decls: 1, vars: 2, consts: [["class", "po-chart-bar-path", 3, "p-tooltip", "p-tooltip-position", "p-append-in-body", "class", "mouseenter", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-chart-bar-path", 3, "p-tooltip", "p-tooltip-position", "p-append-in-body", "mouseenter", "click"]], template: function PoChartBarPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoChartBarPathComponent__svg_path_0_Template, 1, 7, "path", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.coordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-bar-path]', template: "<svg:path *ngFor=\"let item of coordinates; trackBy: trackBy\"\n  [p-tooltip]=\"item.tooltipLabel\"\n  [p-tooltip-position]=\"tooltipPosition\"\n  [p-append-in-body]='true'\n  class=\"po-chart-bar-path\"\n  [class]=\"color?.includes('po-color') ? color : ''\"\n  [attr.fill]=\"color\"\n  [attr.d]=\"item.coordinates\"\n  (mouseenter)=\"onMouseEnter(item)\"\n  (click)=\"onClick(item)\">\n</svg:path> \n" }]
    }], () => [], { color: [{
            type: Input,
            args: ['p-color']
        }], coordinates: [{
            type: Input,
            args: ['p-coordinates']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], barClick: [{
            type: Output,
            args: ['p-bar-click']
        }], barHover: [{
            type: Output,
            args: ['p-bar-hover']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartBarPathComponent, { className: "PoChartBarPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-bar/po-chart-bar-path/po-chart-bar-path.component.ts", lineNumber: 9 }); })();

const _c0$1m = ["po-chart-bar", ""];
function PoChartBarComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 1);
    i0.ɵɵlistener("p-bar-click", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
    i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
} }
class PoChartBarComponent extends PoChartBarBaseComponent {
    mathsService;
    tooltipPosition = 'right';
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgPlottingAreaWidth, barHeight, spaceBetweenBars } = this.calculateElementsMeasurements(containerSize);
        const { x1, x2 } = this.xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, containerSize.axisXLabelWidth, containerSize.svgWidth, serieValue);
        const { y1, y2 } = this.yCoordinates(seriesIndex, serieItemDataIndex, containerSize.svgPlottingAreaHeight, barHeight, spaceBetweenBars);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(containerSize) {
        const { svgWidth, svgPlottingAreaHeight, axisXLabelWidth } = containerSize;
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const svgPlottingAreaWidth = svgWidth - axisXLabelWidth;
        const categoryHeight = svgPlottingAreaHeight / this.seriesGreaterLength;
        const columnFraction = categoryHeight / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barHeight = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { svgPlottingAreaWidth, barHeight, spaceBetweenBars };
    }
    xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, axisXLabelWidth, svgWidth, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const valueZeroPercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const x1 = axisXLabelWidth + (svgWidth - axisXLabelWidth) * valueZeroPercentage;
        const xRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const x2 = Math.round(svgPlottingAreaWidth * xRatio + axisXLabelWidth);
        return { x1, x2 };
    }
    yCoordinates(seriesIndex, serieItemDataIndex, svgPlottingAreaHeight, barHeight, spaceBetweenBars) {
        const spaceBetweenAxisAndBars = barHeight;
        const yRatio = serieItemDataIndex / this.seriesGreaterLength;
        const y1 = Math.round(PoChartPlotAreaPaddingTop +
            svgPlottingAreaHeight * yRatio +
            spaceBetweenAxisAndBars +
            barHeight * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const y2 = Math.round(y1 + barHeight);
        return { y1, y2 };
    }
    static ɵfac = function PoChartBarComponent_Factory(t) { return new (t || PoChartBarComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartBarComponent, selectors: [["", "po-chart-bar", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1m, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartBarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartBarComponent__svg_g_1_Template, 2, 6, "g", 0);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoChartBarPathComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-bar]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
    }], () => [{ type: PoChartMathsService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartBarComponent, { className: "PoChartBarComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-bar/po-chart-bar.component.ts", lineNumber: 15 }); })();

const _c0$1l = ["po-chart-column", ""];
function PoChartColumnComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 1);
    i0.ɵɵlistener("p-bar-click", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
    i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
} }
class PoChartColumnComponent extends PoChartBarBaseComponent {
    mathsService;
    tooltipPosition = 'top';
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgWidth, axisXLabelWidth, svgPlottingAreaHeight } = containerSize;
        const { chartBarPlotArea, barWidth, spaceBetweenBars } = this.calculateElementsMeasurements(svgWidth, axisXLabelWidth);
        const { x1, x2 } = this.xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth);
        const { y1, y2 } = this.yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(svgWidth, axisXLabelWidth) {
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const chartBarPlotArea = svgWidth - axisXLabelWidth;
        const categoryWidth = chartBarPlotArea / this.seriesGreaterLength;
        const columnFraction = categoryWidth / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barWidth = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { chartBarPlotArea, barWidth, spaceBetweenBars };
    }
    xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth) {
        // A área lateral entre a coluna e a linha do eixo Y do grid será sempre equivalente à largura da coluna.
        const spaceBetweenAxisAndBars = barWidth;
        const xRatio = serieItemDataIndex / this.seriesGreaterLength;
        const x1 = Math.round(axisXLabelWidth +
            chartBarPlotArea * xRatio +
            spaceBetweenAxisAndBars +
            barWidth * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const x2 = Math.round(x1 + barWidth);
        return { x1, x2 };
    }
    yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const minValuePercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const y1 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * minValuePercentage + PoChartPlotAreaPaddingTop);
        const yRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const y2 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        return { y1, y2 };
    }
    static ɵfac = function PoChartColumnComponent_Factory(t) { return new (t || PoChartColumnComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartColumnComponent, selectors: [["", "po-chart-column", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1l, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartColumnComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartColumnComponent__svg_g_1_Template, 2, 6, "g", 0);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoChartBarPathComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartColumnComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-column]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
    }], () => [{ type: PoChartMathsService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartColumnComponent, { className: "PoChartColumnComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-bar/po-chart-column/po-chart-column.component.ts", lineNumber: 15 }); })();

// Array de cores para gráficos definido pela equipe de UX PO.
const PoDefaultColors = [
    ['#29B6C5'],
    ['#0C6C94', '#29B6C5'],
    ['#0C6C94', '#29B6C5', '#C9ECF0'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
    ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
    ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
    ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
    [
        '#0C6C94',
        '#00BAD5',
        '#00A7C7',
        '#0197B8',
        '#0088AC',
        '#23789F',
        '#2B6992',
        '#315C87',
        '#364E7C',
        '#36436F',
        '#32285C'
    ],
    [
        '#0C6C94',
        '#00BAD5',
        '#00A7C7',
        '#0197B8',
        '#0088AC',
        '#23789F',
        '#2B6992',
        '#315C87',
        '#364E7C',
        '#36436F',
        '#333565',
        '#32285C'
    ]
];
// Cores que será utilizado texto preto
const PoDefaultColorsTextBlack = ['#94DAE2', '#C9ECF0'];

const poColorPalette = Object.values(PoColorPaletteEnum);
class PoColorService {
    defaultColors = [];
    colorBlack = '#000000';
    /**
     * Avalia a propriedade `color` na lista de items passada. Caso sim, trata se é decimal ou string `po-color`. Caso não haja, retorna a cor default.
     *
     * @param data
     */
    getColors(data) {
        this.verifyIfHasColorProperty(data);
        return data.map((dataItem, index) => {
            if (dataItem.color) {
                dataItem.color = this.verifyIfIsPoColorPalette(dataItem.color);
                return dataItem;
            }
            const color = this.defaultColors[index] === undefined ? this.colorBlack : this.defaultColors[index];
            return { ...dataItem, color };
        });
    }
    verifyIfHasColorProperty(data) {
        const hasColorProperty = data.every(dataItem => dataItem.hasOwnProperty('color') && dataItem.color?.length > 0);
        if (!hasColorProperty) {
            this.defaultColors = this.getDefaultColors(data.length);
        }
    }
    verifyIfIsPoColorPalette(color) {
        if (poColorPalette.includes(color)) {
            return `po-${color}`;
        }
        return color;
    }
    getDefaultColors(length) {
        if (length === 1) {
            return PoDefaultColors[0];
        }
        const colorsLength = PoDefaultColors.length;
        if (length > colorsLength) {
            const quantityDuplicates = length / colorsLength;
            let colors = PoDefaultColors[colorsLength - 1];
            for (let i = 0; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoDefaultColors[colorsLength]);
            }
            return colors;
        }
        return PoDefaultColors[length - 1];
    }
    static ɵfac = function PoColorService_Factory(t) { return new (t || PoColorService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorService, factory: PoColorService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

const poChartDefaultHeight = 400;
const poChartMinHeight = 200;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.
 *
 * O componente permite utilizar em conjunto séries do tipo linha e coluna.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
class PoChartBaseComponent {
    colorService;
    /** Define o título do gráfico. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * O evento emitirá o seguinte parâmetro:
     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
     * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.
     */
    seriesClick = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:
     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
     * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.
     */
    seriesHover = new EventEmitter();
    // manipulação das séries tratadas internamente para preservar 'p-series';
    chartSeries = [];
    chartType;
    svgContainerSize;
    _options;
    _categories;
    _height;
    _series;
    _type;
    defaultType;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value) {
        const intValue = convertToInt(value);
        let height;
        if (isTypeof(value, 'number')) {
            height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
        }
        else {
            height = this.setDefaultHeight();
        }
        this._height = height;
        this.getSvgContainerSize();
        this.rebuildComponentRef();
    }
    get height() {
        return this._height || this.setDefaultHeight();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.
     *
     * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.
     *
     * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:
     * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.
     * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     */
    set type(value) {
        // O Valor default definido em `p-series` de acordo com a primeira série passada.
        this._type = Object.values(PoChartType).includes(value) ? value : undefined;
        this.rebuildComponentRef();
    }
    get type() {
        return this._type;
    }
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     */
    set series(value) {
        this._series = value || [];
        if (Array.isArray(this._series) && this._series.length) {
            this.setTypeDefault(this._series[0]);
        }
        else {
            this.transformObjectToArrayObject(this.series);
            this.rebuildComponentRef();
        }
    }
    get series() {
        return this._series;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.
     *
     * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.
     *
     * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.
     */
    set categories(value) {
        if (Array.isArray(value)) {
            this._categories = value;
        }
    }
    get categories() {
        return this._categories;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as configurações usadas no `po-chart`.
     *
     * É possível, por exemplo, definir as configurações de exibição das legendas,
     * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:
     *
     * ```
     *  chartOptions: PoChartOptions = {
     *    legend: true,
     *    axis: {
     *      minRange: 0,
     *      maxRange: 100,
     *      gridLines: 5,
     *    },
     *  };
     * ```
     */
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            if (this._options.hasOwnProperty('legend') && typeof this._options.legend === 'boolean') {
                this.getSvgContainerSize();
            }
        }
    }
    get options() {
        return this._options;
    }
    constructor(colorService) {
        this.colorService = colorService;
    }
    get isTypeCircular() {
        return this.defaultType === PoChartType.Pie || this.defaultType === PoChartType.Donut;
    }
    ngOnChanges(changes) {
        const isArrayOfseries = Array.isArray(this.series) && this.series.length > 0;
        if ((changes.series && isArrayOfseries) ||
            (changes.type && isArrayOfseries) ||
            (changes.categories && isArrayOfseries)) {
            this.validateSerieAndAddType(this.series);
        }
        if ((changes.type && !this.isTypeCircular) || (changes.categories && !this.isTypeCircular)) {
            this.svgContainerSize = {
                ...this.svgContainerSize,
                axisXLabelWidth: this.calculateAxisXLabelArea()
            };
        }
    }
    onSeriesClick(event) {
        this.seriesClick.emit(event);
    }
    onSeriesHover(event) {
        this.seriesHover.emit(event);
    }
    setDefaultHeight() {
        return poChartDefaultHeight;
    }
    transformObjectToArrayObject(serie) {
        this.chartSeries = typeof serie === 'object' && Object.keys(serie).length ? [{ ...serie }] : [];
    }
    setTypeDefault(serie) {
        const data = serie.data;
        const serieType = Object.values(PoChartType).includes(serie.type) ? serie.type : undefined;
        this.defaultType = serieType ? serieType : Array.isArray(data) ? PoChartType.Column : PoChartType.Pie;
    }
    validateSerieAndAddType(series) {
        const filteredSeries = series.filter(serie => this.isTypeCircular ? typeof serie.data === 'number' : Array.isArray(serie.data));
        this.chartSeries = this.appendType(this.appendColors(filteredSeries));
    }
    appendColors(series) {
        return this.colorService.getColors(series);
    }
    appendType(series) {
        return series.map((serie, index) => {
            if (index === 0) {
                this.chartType = Object.values(PoChartType).includes(serie.type)
                    ? serie.type
                    : this.type || this.defaultType;
            }
            return { ...serie, type: serie.type || this.chartType };
        });
    }
    static ɵfac = function PoChartBaseComponent_Factory(t) { return new (t || PoChartBaseComponent)(i0.ɵɵdirectiveInject(PoColorService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], type: [i0.ɵɵInputFlags.None, "p-type", "type"], series: [i0.ɵɵInputFlags.None, "p-series", "series"], categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], options: [i0.ɵɵInputFlags.None, "p-options", "options"] }, outputs: { seriesClick: "p-series-click", seriesHover: "p-series-hover" }, features: [i0.ɵɵNgOnChangesFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBaseComponent, [{
        type: Directive
    }], () => [{ type: PoColorService }], { title: [{
            type: Input,
            args: ['p-title']
        }], seriesClick: [{
            type: Output,
            args: ['p-series-click']
        }], seriesHover: [{
            type: Output,
            args: ['p-series-hover']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], series: [{
            type: Input,
            args: ['p-series']
        }], categories: [{
            type: Input,
            args: ['p-categories']
        }], options: [{
            type: Input,
            args: ['p-options']
        }] }); })();

class PoChartSvgContainerService {
    constructor() { }
    /**
     * Retorna um objeto do tipo PoChartContainerSize contendo as dimensões necessárias para plotagem do SVG.
     *
     * @param chartHeight
     * @param chartWrapperWidth
     * @param chartHeaderHeight
     * @param chartLegendHeight
     */
    calculateSVGContainerMeasurements(chartHeight = 0, chartWrapperWidth = 0, chartHeaderHeight = 0, chartLegendHeight = 0) {
        const svgWidth = this.svgWidth(chartWrapperWidth);
        const centerX = this.center(chartWrapperWidth);
        const svgHeight = this.svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight);
        const centerY = this.center(svgHeight);
        const svgPlottingAreaHeight = this.svgPlottingAreaHeight(svgHeight);
        return {
            svgWidth,
            svgHeight,
            centerX,
            centerY,
            svgPlottingAreaHeight
        };
    }
    // Largura do container.
    svgWidth(chartWrapperWidth) {
        const wrapperWidth = chartWrapperWidth - PoChartPadding * 2;
        return wrapperWidth > 0 ? wrapperWidth : 0;
    }
    // O centro do container. Usado para gráficos do tipo circular.
    center(dimension) {
        return dimension / 2;
    }
    // Altura do container
    svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight) {
        const subtractedHeights = chartHeight - chartHeaderHeight - chartLegendHeight - PoChartPadding * 2;
        return subtractedHeights <= 0 ? 0 : subtractedHeights;
    }
    /**
     * Altura da área de plotagem.
     * Subtrai a altura do container SVG pelo padding superior + área para overflow de labels do eixo X.
     */
    svgPlottingAreaHeight(svgHeight) {
        return svgHeight - PoChartPadding - 8;
    }
    static ɵfac = function PoChartSvgContainerService_Factory(t) { return new (t || PoChartSvgContainerService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartSvgContainerService, factory: PoChartSvgContainerService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartSvgContainerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [], null); })();

const _c0$1k = ["po-chart-line", ""];
function PoChartLineComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 2);
    i0.ɵɵlistener("mouseenter", function PoChartLineComponent__svg_g_2_Template__svg_g_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onEnter(i_r3)); })("mouseleave", function PoChartLineComponent__svg_g_2_Template__svg_g_mouseleave_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onLeave(i_r3)); });
    i0.ɵɵelement(1, "g", 3);
    i0.ɵɵelementStart(2, "g", 4);
    i0.ɵɵlistener("p-point-click", function PoChartLineComponent__svg_g_2_Template__svg_g_p_point_click_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSeriePointClick($event)); })("p-point-hover", function PoChartLineComponent__svg_g_2_Template__svg_g_p_point_hover_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onSeriePointHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-line-path-group-" + i_r3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-chart-line", ctx_r1.chartType === "line")("p-animate", ctx_r1.animate)("p-color", item_r2.color)("p-coordinates", item_r2 == null ? null : item_r2.coordinates)("p-is-active", item_r2.isActive);
    i0.ɵɵattribute("key", "po-chart-line-path-" + i_r3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-animate", ctx_r1.animate)("p-chart-line", ctx_r1.chartType === "line")("p-color", item_r2.color)("p-coordinates", ctx_r1.seriesPointsCoordinates[i_r3])("p-is-active", ctx_r1.activeTooltip)("p-relative-to", "po-chart-line-path-group-" + i_r3);
    i0.ɵɵattribute("key", "po-chart-line-path-points-group-" + i_r3);
} }
class PoChartLineComponent extends PoChartLineBaseComponent {
    mathsService;
    renderer;
    elementRef;
    constructor(mathsService, renderer, elementRef) {
        super(mathsService, renderer, elementRef);
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onEnter(serieIndex) {
        return null;
    }
    onLeave(serieIndex) {
        return null;
    }
    onSeriePointHover(selectedItem) {
        const { relativeTo, ...item } = selectedItem;
        this.reorderSVGGroup(relativeTo);
        this.pointHover.emit(item);
    }
    // É necessário reordenar os svgs on hover pois eventualmente os elemntos svg ficam por trás de outros. Não há z-index para svgElement.
    reorderSVGGroup(pathGroup) {
        const pathGroupElement = this.elementRef.nativeElement.querySelectorAll(`.${pathGroup}`);
        this.animate = false;
        this.renderer.appendChild(this.chartLine.nativeElement, pathGroupElement[0]);
    }
    static ɵfac = function PoChartLineComponent_Factory(t) { return new (t || PoChartLineComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartLineComponent, selectors: [["", "po-chart-line", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1k, decls: 3, vars: 2, consts: [["chartLine", ""], [3, "class", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseenter", "mouseleave"], ["po-chart-path", "", 3, "p-chart-line", "p-animate", "p-color", "p-coordinates", "p-is-active"], ["po-chart-series-point", "", 3, "p-animate", "p-chart-line", "p-color", "p-coordinates", "p-is-active", "p-relative-to", "p-point-click", "p-point-hover"]], template: function PoChartLineComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g", null, 0);
            i0.ɵɵtemplate(2, PoChartLineComponent__svg_g_2_Template, 3, 15, "g", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, PoChartPathComponent, PoChartSeriesPointComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLineComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-line]', template: "<svg:g #chartLine>\n\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-line-path-group-' + i\"\n    (mouseenter)=\"onEnter(i)\"\n    (mouseleave)=\"onLeave(i)\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-path\n      [p-chart-line]=\"chartType === 'line'\"\n      [attr.key]=\"'po-chart-line-path-' + i\"\n      [p-animate]=\"animate\"\n      [p-color]=\"item.color\" \n      [p-coordinates]=\"item?.coordinates\"\n      [p-is-active]=\"item.isActive\"\n      >\n      </svg:g>\n\n    <!-- SERIES POINTS -->\n    <svg:g po-chart-series-point\n      [p-animate]=\"animate\"\n      [p-chart-line]=\"chartType === 'line'\"\n      [p-color]=\"item.color\"\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\n      [p-is-active]=\"activeTooltip\"\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\n      (p-point-click)=\"onSeriePointClick($event)\"\n      (p-point-hover)=\"onSeriePointHover($event)\"\n      ></svg:g>\n  </svg:g>\n\n</svg:g>" }]
    }], () => [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartLineComponent, { className: "PoChartLineComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-line/po-chart-line.component.ts", lineNumber: 10 }); })();

const _c0$1j = ["svgPaths"];
const _c1$B = ["svgLabels"];
class PoChartCircularComponent {
    ngZone;
    changeDetector;
    containerSize;
    circularClick = new EventEmitter();
    circularHover = new EventEmitter();
    svgPaths;
    svgLabels;
    canDisplayLabels = false;
    seriesLabels = [];
    seriesList;
    showLabels = false;
    innerRadius;
    totalValue;
    _options;
    _series;
    animate;
    set options(value) {
        if (!isNaN(value?.innerRadius)) {
            this._options = value;
            this.innerRadius = Math.min(Math.max(this._options.innerRadius, 0), 100);
        }
    }
    get options() {
        return this._options;
    }
    set series(value) {
        this._series = value;
        this.animate = true;
    }
    get series() {
        return this._series;
    }
    constructor(ngZone, changeDetector) {
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
    }
    onSerieClick(selectedItem) {
        this.circularClick.emit(selectedItem);
    }
    onSerieHover(selectedItem) {
        this.circularHover.emit(selectedItem);
    }
    calculateAngle(data, totalValue) {
        return (data / totalValue) * (Math.PI * 2);
    }
    drawSeries(series = [], height) {
        this.seriesList = [];
        this.showLabels = false;
        this.totalValue = this.calculateTotalValue(series);
        if (this.totalValue && this.totalValue > 0) {
            this.seriesList = this.validateSeries(series);
            this.changeDetector.detectChanges();
            if (this.seriesList.length && this.svgPaths) {
                this.initDrawPaths(this.seriesList, this.totalValue, height);
            }
        }
    }
    calculateTotalValue(series) {
        return series.reduce((previousValue, serie) => {
            const data = serie.data ? serie.data : serie.value;
            return previousValue + (data > 0 ? data : 0);
        }, 0);
    }
    calculateSerieCoordinates(series, totalValue, height) {
        let startRadianAngle;
        let endRadianAngle = PoChartStartAngle;
        series.forEach((serie, index) => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, totalValue) - PoChartCompleteCircle;
            const coordinates = this.calculateCoordinates(height, startRadianAngle, endRadianAngle);
            this.svgPaths.toArray()[index].applyCoordinates(coordinates);
            this.showLabels = this.canDisplayLabels;
        });
    }
    calculateCoordinatesWithAnimation(series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle = 0, seriesIndex = 0) {
        const finishedCurrentSerie = currentRadianAngle > endRadianAngle;
        const finishedAllSeries = seriesIndex === series.length;
        if (finishedAllSeries) {
            this.animate = false;
            return;
        }
        if (finishedCurrentSerie) {
            this.setSerieLabelCoordinates(seriesIndex);
            currentRadianAngle = 0;
            seriesIndex++;
            startRadianAngle = startRadianAngle + endRadianAngle;
            endRadianAngle =
                seriesIndex < series.length ? this.calculateAngle(series[seriesIndex].data, totalValue) : undefined;
        }
        else {
            currentRadianAngle += PoChartAngleStepInterval;
            const currentEndRadianAngle = this.calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle);
            const coordinates = this.calculateCoordinates(height, startRadianAngle, currentEndRadianAngle);
            this.svgPaths.toArray()[seriesIndex].applyCoordinates(coordinates);
        }
        window.requestAnimationFrame(this.calculateCoordinatesWithAnimation.bind(this, series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex));
    }
    calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle) {
        const isSerieDrawCompleted = startRadianAngle + currentRadianAngle > startRadianAngle + endRadianAngle;
        return isSerieDrawCompleted
            ? startRadianAngle + endRadianAngle - PoChartCompleteCircle
            : startRadianAngle + currentRadianAngle;
    }
    initDrawPaths(seriesList, totalValue, height) {
        if (!this.animate) {
            this.calculateSerieCoordinates(seriesList, totalValue, height);
        }
        else {
            const startRadianAngle = PoChartStartAngle;
            const endRadianAngle = this.calculateAngle(seriesList[0].data, totalValue);
            this.ngZone.runOutsideAngular(() => this.calculateCoordinatesWithAnimation(seriesList, totalValue, height, startRadianAngle, endRadianAngle));
        }
    }
    setSerieLabelCoordinates(index) {
        if (this.svgLabels.toArray().length) {
            this.svgLabels.toArray()[index].applyCoordinates(this.seriesLabels[index]);
        }
    }
    validateSeries(series) {
        return series.reduce((seriesList, serie) => {
            const data = serie.data ?? serie.value;
            if (data && data > 0) {
                const color = serie.color;
                const label = serie.label;
                const tooltip = serie.tooltip;
                const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                seriesList = [...seriesList, { data, color, label, tooltipLabel }];
            }
            return seriesList;
        }, []);
    }
    static ɵfac = function PoChartCircularComponent_Factory(t) { return new (t || PoChartCircularComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartCircularComponent, viewQuery: function PoChartCircularComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1j, 5);
            i0.ɵɵviewQuery(_c1$B, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPaths = _t);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgLabels = _t);
        } }, inputs: { containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, outputs: { circularClick: "p-circular-click", circularHover: "p-circular-hover" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularComponent, [{
        type: Directive
    }], () => [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }], { containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], circularClick: [{
            type: Output,
            args: ['p-circular-click']
        }], circularHover: [{
            type: Output,
            args: ['p-circular-hover']
        }], svgPaths: [{
            type: ViewChildren,
            args: ['svgPaths']
        }], svgLabels: [{
            type: ViewChildren,
            args: ['svgLabels']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();

class PoChartTooltipDirective {
    elementRef;
    renderer;
    tooltip;
    lastTooltipText;
    tooltipElement;
    tooltipText;
    tooltipTextContent;
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    onMouseEnter(event) {
        this.tooltipElement ? this.showTooltip() : this.createTooltip();
        this.tooltipPosition(event);
        this.lastTooltipText = this.tooltip;
    }
    onMouseLeave() {
        this.hideTooltip();
    }
    onMouseMove(event) {
        this.tooltipPosition(event);
    }
    calculateTooltipPosition(event) {
        const displacement = 12;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    createTooltip() {
        const chartWrapper = this.elementRef.nativeElement.closest('.po-chart-wrapper');
        this.tooltipElement = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipElement, 'po-chart-tooltip');
        this.renderer.addClass(this.tooltipElement, 'po-tooltip');
        this.renderer.setStyle(this.tooltipElement, 'transition', 'visibility .3s, opacity .3s linear');
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0.9);
        const divArrow = this.renderer.createElement('div');
        this.renderer.addClass(divArrow, 'po-tooltip-arrow');
        this.renderer.addClass(divArrow, 'po-arrow-bottom');
        this.tooltipText = this.renderer.createElement('p');
        this.renderer.addClass(this.tooltipText, 'po-tooltip-content');
        this.tooltipTextContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        this.renderer.appendChild(this.tooltipElement, divArrow);
        this.renderer.appendChild(this.tooltipElement, this.tooltipText);
        this.renderer.appendChild(chartWrapper, this.tooltipElement);
    }
    hideTooltip() {
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0);
        this.renderer.setStyle(this.tooltipElement, 'visibility', 'hidden');
    }
    showTooltip() {
        this.renderer.setStyle(this.tooltipElement, 'opacity', 0.9);
        this.renderer.setStyle(this.tooltipElement, 'visibility', 'visible');
        this.updatetooltipTextContent();
    }
    tooltipPosition(event) {
        const tooltipPositions = this.calculateTooltipPosition(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    updatetooltipTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.tooltipText, this.tooltipTextContent);
            this.tooltipTextContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        }
    }
    static ɵfac = function PoChartTooltipDirective_Factory(t) { return new (t || PoChartTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartTooltipDirective, selectors: [["", "p-chart-tooltip", ""]], hostBindings: function PoChartTooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("mouseenter", function PoChartTooltipDirective_mouseenter_HostBindingHandler($event) { return ctx.onMouseEnter($event); })("mouseleave", function PoChartTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("mousemove", function PoChartTooltipDirective_mousemove_HostBindingHandler($event) { return ctx.onMouseMove($event); });
        } }, inputs: { tooltip: [i0.ɵɵInputFlags.None, "p-chart-tooltip", "tooltip"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartTooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[p-chart-tooltip]'
            }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], { tooltip: [{
            type: Input,
            args: ['p-chart-tooltip']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onMouseMove: [{
            type: HostListener,
            args: ['mousemove', ['$event']]
        }] }); })();

const _c0$1i = ["svgPath"];
const _c1$A = ["po-chart-circular-path", ""];
class PoChartCircularPathComponent {
    renderer;
    serie;
    onClick = new EventEmitter();
    onHover = new EventEmitter();
    svgPath;
    constructor(renderer) {
        this.renderer = renderer;
    }
    applyCoordinates(coordinates) {
        this.renderer.setAttribute(this.svgPath.nativeElement, 'd', coordinates);
    }
    onMouseClick() {
        const { label, data } = this.serie;
        this.onClick.emit({ label, data });
    }
    onMouseEnter() {
        const { label, data } = this.serie;
        this.onHover.emit({ label, data });
    }
    static ɵfac = function PoChartCircularPathComponent_Factory(t) { return new (t || PoChartCircularPathComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartCircularPathComponent, selectors: [["", "po-chart-circular-path", ""]], viewQuery: function PoChartCircularPathComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1i, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPath = _t.first);
        } }, inputs: { serie: [i0.ɵɵInputFlags.None, "p-serie", "serie"] }, outputs: { onClick: "p-on-click", onHover: "p-on-hover" }, attrs: _c1$A, decls: 2, vars: 4, consts: [[1, "po-path-item", 3, "p-chart-tooltip", "click", "mouseenter"], ["svgPath", ""]], template: function PoChartCircularPathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "path", 0, 1);
            i0.ɵɵlistener("click", function PoChartCircularPathComponent_Template__svg_path_click_0_listener() { return ctx.onMouseClick(); })("mouseenter", function PoChartCircularPathComponent_Template__svg_path_mouseenter_0_listener() { return ctx.onMouseEnter(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMap((ctx.serie == null ? null : ctx.serie.color.includes("po-color")) ? ctx.serie.color : "");
            i0.ɵɵproperty("p-chart-tooltip", ctx.serie == null ? null : ctx.serie.tooltipLabel);
            i0.ɵɵattribute("fill", ctx.serie == null ? null : ctx.serie.color);
        } }, dependencies: [PoChartTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularPathComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-circular-path]', template: "<svg:path #svgPath\n  class=\"po-path-item\"\n  [class]=\"serie?.color.includes('po-color') ? serie.color : ''\"\n  [p-chart-tooltip]=\"serie?.tooltipLabel\"\n  [attr.fill]=\"serie?.color\"\n  (click)=\"onMouseClick()\"\n  (mouseenter)=\"onMouseEnter()\"\n  >\n</svg:path> \n" }]
    }], () => [{ type: i0.Renderer2 }], { serie: [{
            type: Input,
            args: ['p-serie']
        }], onClick: [{
            type: Output,
            args: ['p-on-click']
        }], onHover: [{
            type: Output,
            args: ['p-on-hover']
        }], svgPath: [{
            type: ViewChild,
            args: ['svgPath', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartCircularPathComponent, { className: "PoChartCircularPathComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-circular-path/po-chart-circular-path.component.ts", lineNumber: 9 }); })();

const _c0$1h = ["svgLabel"];
const _c1$z = ["po-chart-circular-label", ""];
class PoChartCircularLabelComponent {
    changeDetection;
    renderer;
    serie;
    showLabel;
    svgLabel;
    constructor(changeDetection, renderer) {
        this.changeDetection = changeDetection;
        this.renderer = renderer;
    }
    applyCoordinates(coordinates) {
        this.renderer.setAttribute(this.svgLabel.nativeElement, 'x', coordinates.xCoordinate.toString());
        this.renderer.setAttribute(this.svgLabel.nativeElement, 'y', coordinates.yCoordinate.toString());
        this.showLabel = true;
        this.changeDetection.detectChanges();
    }
    static ɵfac = function PoChartCircularLabelComponent_Factory(t) { return new (t || PoChartCircularLabelComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartCircularLabelComponent, selectors: [["", "po-chart-circular-label", ""]], viewQuery: function PoChartCircularLabelComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1h, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgLabel = _t.first);
        } }, inputs: { serie: [i0.ɵɵInputFlags.None, "p-serie", "serie"], showLabel: [i0.ɵɵInputFlags.None, "p-show-label", "showLabel"] }, attrs: _c1$z, decls: 3, vars: 6, consts: [["dominant-baseline", "middle", 1, "po-chart-label"], ["svgLabel", ""]], template: function PoChartCircularLabelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "text", 0, 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-invisible", !ctx.showLabel);
            i0.ɵɵattribute("fill", ctx.serie == null ? null : ctx.serie.color)("x", ctx.serie == null ? null : ctx.serie.xCoordinate)("y", ctx.serie == null ? null : ctx.serie.yCoordinate);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.serie == null ? null : ctx.serie.label, "\n");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularLabelComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-circular-label]', template: "<svg:text #svgLabel \n  class=\"po-chart-label\" \n  dominant-baseline=\"middle\"\n  [class.po-invisible]=\"!showLabel\"\n  [attr.fill]=\"serie?.color\"\n  [attr.x]=\"serie?.xCoordinate\"\n  [attr.y]=\"serie?.yCoordinate\">\n  {{ serie?.label }}\n</svg:text> " }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { serie: [{
            type: Input,
            args: ['p-serie']
        }], showLabel: [{
            type: Input,
            args: ['p-show-label']
        }], svgLabel: [{
            type: ViewChild,
            args: ['svgLabel', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartCircularLabelComponent, { className: "PoChartCircularLabelComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-circular-label/po-chart-circular-label.component.ts", lineNumber: 9 }); })();

const _c0$1g = ["po-chart-pie", ""];
function PoChartPieComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
    i0.ɵɵlistener("p-on-click", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieClick($event)); })("p-on-hover", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSerieHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r2);
    i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
} }
function PoChartPieComponent__svg_g_2__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵelement(1, "g", 4, 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const i_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
    i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
} }
function PoChartPieComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
} }
class PoChartPieComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            radius,
            radius,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    static ɵfac = function PoChartPieComponent_Factory(t) { return new (t || PoChartPieComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPieComponent, selectors: [["", "po-chart-pie", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0$1g, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartPieComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_1_Template, 3, 2, "g", 0)(2, PoChartPieComponent__svg_g_2_Template, 2, 1, "g", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesList);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoChartCircularPathComponent, PoChartCircularLabelComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPieComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-pie]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
    }], () => [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartPieComponent, { className: "PoChartPieComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-pie/po-chart-pie.component.ts", lineNumber: 9 }); })();

const _c0$1f = ["po-chart-donut", ""];
function PoChartDonutComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
    i0.ɵɵlistener("p-on-click", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieClick($event)); })("p-on-hover", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSerieHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r2);
    i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
} }
function PoChartDonutComponent__svg_g_2__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵelement(1, "g", 4, 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const i_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
    i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
} }
function PoChartDonutComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
} }
class PoChartDonutComponent extends PoChartCircularComponent {
    poChartBlackColor = '#000000';
    poChartWhiteColor = '#ffffff';
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize || changes.options) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
            this.applySeriesLabels(this.seriesList, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const startInnerX = radius + cosAlpha * innerRadius;
        const startInnerY = radius + sinAlpha * innerRadius;
        const endInnerX = radius + cosBeta * innerRadius;
        const endInnerY = radius + sinBeta * innerRadius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        this.verifyDisplayLabels(radius, innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            largeArc ? '1,0' : '0,0',
            startInnerX,
            startInnerY,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = this.getPercentValue(data, this.totalValue) + '%';
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    applySeriesLabels(seriesList, height) {
        let startRadianAngle = PoChartStartAngle;
        let endRadianAngle = PoChartStartAngle;
        this.seriesLabels = seriesList.map(serie => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, this.totalValue);
            const label = this.getPercentValue(serie.data, this.totalValue) + '% ';
            const color = this.getTextColor(serie.color);
            const coordinates = this.calculateLabelCoordinates(height, startRadianAngle, endRadianAngle);
            return { ...coordinates, label, color };
        });
    }
    calculateLabelCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sliceCenterAngle = (startRadianAngle + endRadianAngle) / 2;
        const labelRadius = innerRadius + (radius - innerRadius) / 2;
        const xCoordinate = labelRadius * Math.cos(sliceCenterAngle) + radius;
        const yCoordinate = labelRadius * Math.sin(sliceCenterAngle) + radius;
        return { xCoordinate, yCoordinate };
    }
    getInnerRadius(radius) {
        const defaultInnerRadius = radius - PoChartDonutDefaultThickness;
        return this.innerRadius >= 0 ? (this.innerRadius / 100) * radius : defaultInnerRadius;
    }
    getPercentValue(value, totalValue) {
        const percentValue = (value / totalValue) * 100;
        const floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    }
    getTextColor(color) {
        if (PoDefaultColorsTextBlack.includes(color)) {
            return this.poChartBlackColor;
        }
        return this.poChartWhiteColor;
    }
    verifyDisplayLabels(radius, innerRadius) {
        this.canDisplayLabels = radius - innerRadius >= radius - (radius - PoChartDonutDefaultThickness);
    }
    static ɵfac = function PoChartDonutComponent_Factory(t) { return new (t || PoChartDonutComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartDonutComponent, selectors: [["", "po-chart-donut", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0$1f, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartDonutComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_1_Template, 3, 2, "g", 0)(2, PoChartDonutComponent__svg_g_2_Template, 2, 1, "g", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.seriesList);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoChartCircularPathComponent, PoChartCircularLabelComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartDonutComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-donut]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
    }], () => [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartDonutComponent, { className: "PoChartDonutComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-circular/po-chart-donut/po-chart-donut.component.ts", lineNumber: 13 }); })();

const _c0$1e = ["svgELement"];
function PoChartContainerComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 9);
    i0.ɵɵlistener("p-categories-coordinates", function PoChartContainerComponent__svg_g_2_Template__svg_g_p_categories_coordinates_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.getCategoriesCoordinates($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-align-by-the-corners", ctx_r1.alignByTheCorners)("p-range", ctx_r1.range)("p-type", ctx_r1.type)("p-series", ctx_r1.series)("p-container-size", ctx_r1.containerSize)("p-options", ctx_r1.axisOptions)("p-categories", ctx_r1.categories);
} }
function PoChartContainerComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 10);
    i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_3_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_3_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-align-by-the-corners", ctx_r2.alignByTheCorners)("p-svg-space", ctx_r2.svgSpace)("p-categories", ctx_r2.categories)("p-categories-coordinates", ctx_r2.categoriesCoordinates)("p-range", ctx_r2.range)("p-series", ctx_r2.seriesByType["area"])("p-container-size", ctx_r2.containerSize);
} }
function PoChartContainerComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 11);
    i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_4_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_4_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-categories", ctx_r3.categories)("p-range", ctx_r3.range)("p-series", ctx_r3.seriesByType["column"])("p-container-size", ctx_r3.containerSize);
} }
function PoChartContainerComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 12);
    i0.ɵɵlistener("p-point-hover", function PoChartContainerComponent__svg_g_5_Template__svg_g_p_point_hover_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onSerieHover($event)); })("p-point-click", function PoChartContainerComponent__svg_g_5_Template__svg_g_p_point_click_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-categories", ctx_r4.categories)("p-range", ctx_r4.range)("p-series", ctx_r4.seriesByType["line"])("p-container-size", ctx_r4.containerSize);
} }
function PoChartContainerComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 13);
    i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_6_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_6_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r21 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r21.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-categories", ctx_r5.categories)("p-range", ctx_r5.range)("p-series", ctx_r5.seriesByType["bar"])("p-container-size", ctx_r5.containerSize);
} }
function PoChartContainerComponent__svg_g_7_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 14);
    i0.ɵɵlistener("p-circular-hover", function PoChartContainerComponent__svg_g_7_Template__svg_g_p_circular_hover_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r22.onSerieHover($event)); })("p-circular-click", function PoChartContainerComponent__svg_g_7_Template__svg_g_p_circular_click_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-series", ctx_r6.seriesByType["pie"])("p-container-size", ctx_r6.containerSize);
} }
function PoChartContainerComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g", 15);
    i0.ɵɵlistener("p-circular-hover", function PoChartContainerComponent__svg_g_8_Template__svg_g_p_circular_hover_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.onSerieHover($event)); })("p-circular-click", function PoChartContainerComponent__svg_g_8_Template__svg_g_p_circular_click_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.onSerieClick($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-options", ctx_r7.options)("p-series", ctx_r7.seriesByType["donut"])("p-container-size", ctx_r7.containerSize);
} }
class PoChartContainerComponent {
    mathsService;
    categories;
    type;
    containerSize;
    serieClick = new EventEmitter();
    serieHover = new EventEmitter();
    svgELement;
    alignByTheCorners;
    axisOptions;
    categoriesCoordinates;
    range;
    seriesByType;
    svgSpace;
    viewBox;
    _options;
    _series = [];
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            this.verifyAxisOptions(this._options);
        }
    }
    get options() {
        return this._options;
    }
    set series(data) {
        this._series = data;
        this.setAlignByTheCorners(this._series);
        this.setSeriesByType(this._series);
        this.setRange(this._series, this.options);
    }
    get series() {
        return this._series;
    }
    get isTypeCircular() {
        return this.type === PoChartType.Pie || this.type === PoChartType.Donut;
    }
    constructor(mathsService) {
        this.mathsService = mathsService;
    }
    ngOnChanges(changes) {
        if (changes.type || changes.containerSize) {
            this.setViewBox();
            this.setSvgSpace();
        }
    }
    getCategoriesCoordinates(value) {
        this.categoriesCoordinates = value;
    }
    onSerieClick(event) {
        this.serieClick.emit(event);
    }
    onSerieHover(event) {
        this.serieHover.emit(event);
    }
    getRange(series, options = {}) {
        const domain = this.mathsService.calculateMinAndMaxValues(series);
        const minValue = !options.axis?.minRange && domain.minValue > 0
            ? 0
            : options.axis?.minRange < domain.minValue
                ? options.axis.minRange
                : domain.minValue;
        const maxValue = options.axis?.maxRange > domain.maxValue ? options.axis.maxRange : domain.maxValue;
        const updatedDomainValues = { minValue, maxValue };
        return { ...domain, ...updatedDomainValues };
    }
    setSvgSpace() {
        // Representa um ponto 2D dentro do viewport do SVG. Ele é a representação do cursor do mouse para comparação de coordenadas com cada dado de série.
        const svgPoint = this.svgELement.nativeElement.createSVGPoint();
        // Retorna um DOMMatrix representando as matrizes 2D e 3D transformadas a partir das coordenadas do elemento, em relação ao document, para coordenadas relativas ao viewport do SVG.
        // É utilizado nos gráficos do tipo área para que seja possível equiparar as coordenadas do evento com cada dado de série, para assim ativar o ponto de dado equivalente.
        const svgDomMatrix = this.svgELement.nativeElement.getScreenCTM()?.inverse();
        this.svgSpace = { svgPoint, svgDomMatrix };
    }
    setAlignByTheCorners(series) {
        this.alignByTheCorners = series.every(serie => serie.type === PoChartType.Area || serie.type === PoChartType.Bar);
    }
    setRange(series, options = {}) {
        if (!this.isTypeCircular) {
            this.range = this.getRange(series, options);
        }
    }
    setSeriesByType(series) {
        this.seriesByType = {
            [PoChartType.Area]: series.filter(serie => serie.type === PoChartType.Area),
            [PoChartType.Column]: series.filter(serie => serie.type === PoChartType.Column),
            [PoChartType.Bar]: series.filter(serie => serie.type === PoChartType.Bar),
            [PoChartType.Line]: series.filter(serie => serie.type === PoChartType.Line),
            [PoChartType.Donut]: series.filter(serie => serie.type === PoChartType.Donut),
            [PoChartType.Pie]: series.filter(serie => serie.type === PoChartType.Pie)
        };
    }
    setViewBox() {
        const { svgWidth, svgHeight } = this.containerSize;
        const viewBoxWidth = this.isTypeCircular ? svgHeight : svgWidth;
        // Tratamento necessário para que não corte o vetor nas extremidades
        const offsetXY = 1;
        this.viewBox = `${offsetXY} -${offsetXY} ${viewBoxWidth} ${this.containerSize.svgHeight}`;
    }
    verifyAxisOptions(options) {
        if (!this.isTypeCircular && options.hasOwnProperty('axis')) {
            this.range = this.getRange(this.series, this.options);
            this.axisOptions = {
                ...this.axisOptions,
                ...options.axis
            };
        }
    }
    static ɵfac = function PoChartContainerComponent_Factory(t) { return new (t || PoChartContainerComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartContainerComponent, selectors: [["po-chart-container"]], viewQuery: function PoChartContainerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1e, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgELement = _t.first);
        } }, inputs: { categories: [i0.ɵɵInputFlags.None, "p-categories", "categories"], type: [i0.ɵɵInputFlags.None, "p-type", "type"], containerSize: [i0.ɵɵInputFlags.None, "p-container-size", "containerSize"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, outputs: { serieClick: "p-serie-click", serieHover: "p-serie-hover" }, features: [i0.ɵɵNgOnChangesFeature], decls: 9, vars: 10, consts: [["preserveAspectRatio", "xMidYMin meet", 1, "po-chart-svg-element"], ["svgELement", ""], ["po-chart-axis", "", 3, "p-align-by-the-corners", "p-range", "p-type", "p-series", "p-container-size", "p-options", "p-categories", "p-categories-coordinates", 4, "ngIf"], ["po-chart-area", "", 3, "p-align-by-the-corners", "p-svg-space", "p-categories", "p-categories-coordinates", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-column", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-line", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-point-hover", "p-point-click", 4, "ngIf"], ["po-chart-bar", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-pie", "", 3, "p-series", "p-container-size", "p-circular-hover", "p-circular-click", 4, "ngIf"], ["po-chart-donut", "", 3, "p-options", "p-series", "p-container-size", "p-circular-hover", "p-circular-click", 4, "ngIf"], ["po-chart-axis", "", 3, "p-align-by-the-corners", "p-range", "p-type", "p-series", "p-container-size", "p-options", "p-categories", "p-categories-coordinates"], ["po-chart-area", "", 3, "p-align-by-the-corners", "p-svg-space", "p-categories", "p-categories-coordinates", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-column", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-line", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-point-hover", "p-point-click"], ["po-chart-bar", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-pie", "", 3, "p-series", "p-container-size", "p-circular-hover", "p-circular-click"], ["po-chart-donut", "", 3, "p-options", "p-series", "p-container-size", "p-circular-hover", "p-circular-click"]], template: function PoChartContainerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "svg", 0, 1);
            i0.ɵɵtemplate(2, PoChartContainerComponent__svg_g_2_Template, 1, 7, "g", 2)(3, PoChartContainerComponent__svg_g_3_Template, 1, 7, "g", 3)(4, PoChartContainerComponent__svg_g_4_Template, 1, 4, "g", 4)(5, PoChartContainerComponent__svg_g_5_Template, 1, 4, "g", 5)(6, PoChartContainerComponent__svg_g_6_Template, 1, 4, "g", 6)(7, PoChartContainerComponent__svg_g_7_Template, 1, 2, "g", 7)(8, PoChartContainerComponent__svg_g_8_Template, 1, 3, "g", 8);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵattribute("viewBox", ctx.viewBox)("width", ctx.containerSize.svgWidth)("height", ctx.containerSize.svgHeight);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.isTypeCircular);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["area"].length);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["column"].length);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["line"].length);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "bar");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "pie");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "donut");
        } }, dependencies: [i1.NgIf, PoChartAreaComponent, PoChartAxisComponent, PoChartLineComponent, PoChartPieComponent, PoChartDonutComponent, PoChartBarComponent, PoChartColumnComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartContainerComponent, [{
        type: Component,
        args: [{ selector: 'po-chart-container', template: "<svg:svg\n  #svgELement\n  class=\"po-chart-svg-element\"\n  preserveAspectRatio=\"xMidYMin meet\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.width]=\"containerSize.svgWidth\"\n  [attr.height]=\"containerSize.svgHeight\"\n>\n  <!-- axis -->\n  <svg:g\n    *ngIf=\"!isTypeCircular\"\n    po-chart-axis\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-range]=\"range\"\n    [p-type]=\"type\"\n    [p-series]=\"series\"\n    [p-container-size]=\"containerSize\"\n    [p-options]=\"axisOptions\"\n    [p-categories]=\"categories\"\n    (p-categories-coordinates)=\"getCategoriesCoordinates($event)\"\n  ></svg:g>\n\n  <!-- chart area -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['area'].length\"\n    po-chart-area\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-svg-space]=\"svgSpace\"\n    [p-categories]=\"categories\"\n    [p-categories-coordinates]=\"categoriesCoordinates\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['area']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart column -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['column'].length\"\n    po-chart-column\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['column']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart line -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['line'].length\"\n    po-chart-line\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['line']\"\n    [p-container-size]=\"containerSize\"\n    (p-point-hover)=\"onSerieHover($event)\"\n    (p-point-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart bar -->\n  <svg:g\n    *ngIf=\"type === 'bar'\"\n    po-chart-bar\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['bar']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'pie'\"\n    po-chart-pie\n    [p-series]=\"seriesByType['pie']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'donut'\"\n    po-chart-donut\n    [p-options]=\"options\"\n    [p-series]=\"seriesByType['donut']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n</svg:svg>\n" }]
    }], () => [{ type: PoChartMathsService }], { categories: [{
            type: Input,
            args: ['p-categories']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], serieClick: [{
            type: Output,
            args: ['p-serie-click']
        }], serieHover: [{
            type: Output,
            args: ['p-serie-hover']
        }], svgELement: [{
            type: ViewChild,
            args: ['svgELement', { static: true }]
        }], options: [{
            type: Input,
            args: ['p-options']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartContainerComponent, { className: "PoChartContainerComponent", filePath: "lib/components/po-chart/po-chart-container/po-chart-container.component.ts", lineNumber: 15 }); })();

function PoChartLegendComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵelement(1, "div", 4);
    i0.ɵɵelementStart(2, "span", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const serie_r1 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵclassMap((serie_r1.color == null ? null : serie_r1.color.includes("po-color")) ? serie_r1.color : "");
    i0.ɵɵstyleProp("background", serie_r1.color);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(serie_r1.label || serie_r1.category);
} }
class PoChartLegendComponent {
    type;
    _series;
    set series(value) {
        this._series = value;
    }
    get series() {
        return this._series;
    }
    static ɵfac = function PoChartLegendComponent_Factory(t) { return new (t || PoChartLegendComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartLegendComponent, selectors: [["po-chart-legend"]], inputs: { type: [i0.ɵɵInputFlags.None, "p-type", "type"], series: [i0.ɵɵInputFlags.None, "p-series", "series"] }, decls: 3, vars: 1, consts: [[1, "po-chart-legend"], [1, "po-chart-legend-container"], ["class", "po-chart-legend-item", 4, "ngFor", "ngForOf"], [1, "po-chart-legend-item"], [1, "po-chart-legend-square"], [1, "po-chart-legend-text"]], template: function PoChartLegendComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoChartLegendComponent_div_2_Template, 4, 5, "div", 2);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.series);
        } }, dependencies: [i1.NgForOf], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLegendComponent, [{
        type: Component,
        args: [{ selector: 'po-chart-legend', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-chart-legend\">\n  <div class=\"po-chart-legend-container\">\n    <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n      <div\n        class=\"po-chart-legend-square\"\n        [class]=\"serie.color?.includes('po-color') ? serie.color : ''\"\n        [style.background]=\"serie.color\"\n      ></div>\n      <span class=\"po-chart-legend-text\">{{ serie.label || serie.category }}</span>\n    </div>\n  </div>\n</div>\n" }]
    }], null, { type: [{
            type: Input,
            args: ['p-type']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartLegendComponent, { className: "PoChartLegendComponent", filePath: "lib/components/po-chart/po-chart-legend/po-chart-legend.component.ts", lineNumber: 10 }); })();

/// <reference types="resize-observer-browser" />
/// <reference types="resize-observer-browser" />
class PoResizeObserverDirective {
    elementRef;
    resize = new EventEmitter();
    subscription = new Subscription();
    observer;
    chartWidthResize$ = new Subject();
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngOnDestroy() {
        if (this.isResizeObserverSupported) {
            this.observer.unobserve(this.elementRef.nativeElement);
            this.subscription.unsubscribe();
        }
    }
    ngOnInit() {
        if (this.isResizeObserverSupported) {
            this.observer = new window.ResizeObserver(() => {
                this.chartWidthResize$.next({});
            });
            this.observer.observe(this.elementRef.nativeElement);
            this.subscription.add(this.chartWidthResize$.pipe(debounceTime$1(20)).subscribe(_ => {
                this.resize.emit();
            }));
        }
    }
    get isResizeObserverSupported() {
        return typeof window.ResizeObserver === 'function';
    }
    static ɵfac = function PoResizeObserverDirective_Factory(t) { return new (t || PoResizeObserverDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoResizeObserverDirective, selectors: [["", "p-resize-observer", ""]], outputs: { resize: "p-resize-observer" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoResizeObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[p-resize-observer]'
            }]
    }], () => [{ type: i0.ElementRef }], { resize: [{
            type: Output,
            args: ['p-resize-observer']
        }] }); })();

const _c0$1d = ["chartContainer"];
const _c1$y = ["chartHeader"];
const _c2$h = ["chartLegend"];
const _c3$b = ["chartWrapper"];
function PoChartComponent_ng_template_7_Template(rf, ctx) { }
function PoChartComponent_div_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoChartComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoChartComponent_div_9_ng_container_1_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(11);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoChartComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-chart-legend", 10, 11);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-series", ctx_r5.chartSeries)("p-type", ctx_r5.type);
} }
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
class PoChartComponent extends PoChartBaseComponent {
    colorService;
    changeDetector;
    containerService;
    componentFactoryResolver;
    elementRef;
    mathsService;
    renderer;
    chartContainer;
    chartHeader;
    chartLegend;
    chartWrapper;
    calculatedComponentRefElement = false;
    calculatedSvgContainerElement = false;
    componentRef;
    initialized = false;
    windowResizeListener = new Subject();
    subscription = new Subscription();
    mappings = {};
    constructor(colorService, changeDetector, containerService, componentFactoryResolver, elementRef, mathsService, renderer) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
        this.containerService = containerService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.elementRef = elementRef;
        this.mathsService = mathsService;
        this.renderer = renderer;
    }
    onResize = () => {
        this.getSvgContainerSize();
        this.windowResizeListener.next({});
    };
    ngAfterViewInit() {
        this.initialized = true;
        this.getSvgContainerSize();
    }
    ngDoCheck() {
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const isDynamicChart = this.getComponentType(this.type);
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        // Quando modificada a estrutura dos gráficos do tipo circular isto será melhorado.
        if (charWrapperWidth && this.initialized && !isDynamicChart && !this.calculatedSvgContainerElement) {
            this.getSvgContainerSize();
            this.calculatedSvgContainerElement = true;
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.removeWindowResizeListener();
    }
    resizeAction() {
        this.getSvgContainerSize();
        this.windowResizeListener.next({});
        this.changeDetector.detectChanges();
    }
    ngOnInit() {
        this.getSvgContainerSize();
    }
    rebuildComponentRef() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    calculateAxisXLabelArea() {
        const axisXLabels = this.chartType === PoChartType.Bar ? this.categories : this.chartSeries;
        return this.getAxisXLabelArea(this.mathsService.getLongestDataValue(axisXLabels, this.chartType, this.options));
    }
    getSvgContainerSize() {
        let axisXLabelWidth;
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        if (!this.isTypeCircular) {
            axisXLabelWidth = this.calculateAxisXLabelArea();
        }
        this.svgContainerSize = {
            ...this.containerService.calculateSVGContainerMeasurements(this.height, chartWrapperWidth, chartHeaderHeight, chartLegendHeight),
            axisXLabelWidth
        };
    }
    chartLegendHeight(chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    }
    createComponent() {
        const componentType = this.getComponentType(this.type);
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        const instance = this.componentRef.instance;
        this.setComponentRefProperties(instance);
        return instance;
    }
    dynamicComponentSetting() {
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    getAxisXLabelArea(axisXLabel) {
        const labelPoChartPadding = PoChartPadding / 3;
        const spanElement = this.renderer.createElement('span');
        this.renderer.addClass(spanElement, 'po-chart-axis-x-label');
        spanElement.innerHTML = axisXLabel;
        this.renderer.appendChild(this.elementRef.nativeElement, spanElement);
        const axisXLabelWidth = Math.ceil(spanElement.offsetWidth) + labelPoChartPadding;
        this.renderer.removeChild(this.elementRef.nativeElement, spanElement);
        return axisXLabelWidth > PoChartAxisXLabelArea ? axisXLabelWidth : PoChartAxisXLabelArea;
    }
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    getChartMeasurements() {
        const chartWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const chartHeaderHeight = this.chartHeader.nativeElement.offsetHeight;
        const chartLegendHeight = this.chartLegendHeight(this.chartLegend);
        return { chartWrapperWidth, chartHeaderHeight, chartLegendHeight };
    }
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = () => { };
        }
    }
    setComponentRefProperties(instance) {
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        instance.chartHeader = chartHeaderHeight;
        instance.chartLegend = chartLegendHeight;
        instance.chartWrapper = chartWrapperWidth;
        instance.colors = PoDefaultColors[0];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    }
    setClickSubscribe(instance) {
        this.subscription.add(instance.onSerieClick.subscribe(event => {
            this.onSeriesClick(event);
        }));
    }
    setHoverSubscribe(instance) {
        this.subscription.add(instance.onSerieHover.subscribe(event => {
            this.onSeriesHover(event);
        }));
    }
    setResizeListenerSubscribe(instance) {
        this.subscription.add(this.windowResizeListener.subscribe(() => {
            const measuresForComponentRef = this.getChartMeasurements();
            instance.chartWrapper = measuresForComponentRef.chartWrapperWidth;
            instance.chartHeader = measuresForComponentRef.chartHeaderHeight;
            instance.chartLegend = measuresForComponentRef.chartLegendHeight;
        }));
    }
    static ɵfac = function PoChartComponent_Factory(t) { return new (t || PoChartComponent)(i0.ɵɵdirectiveInject(PoColorService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoChartSvgContainerService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartComponent, selectors: [["po-chart"]], viewQuery: function PoChartComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1d, 7, ViewContainerRef);
            i0.ɵɵviewQuery(_c1$y, 7);
            i0.ɵɵviewQuery(_c2$h, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$b, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartHeader = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLegend = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartWrapper = _t.first);
        } }, hostBindings: function PoChartComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("resize", function PoChartComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "po-chart-wrapper", 3, "p-resize-observer"], ["chartWrapper", ""], [1, "po-chart-header"], ["chartHeader", ""], [1, "po-chart-title"], [3, "p-options", "p-type", "p-series", "p-categories", "p-container-size", "p-serie-click", "p-serie-hover"], ["chartContainer", ""], [4, "ngIf"], ["chartLegendGroup", ""], [4, "ngTemplateOutlet"], [3, "p-series", "p-type"], ["chartLegend", ""]], template: function PoChartComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("p-resize-observer", function PoChartComponent_Template_div_p_resize_observer_0_listener() { return ctx.resizeAction(); });
            i0.ɵɵelementStart(2, "div", 2, 3)(4, "div", 4);
            i0.ɵɵtext(5);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "po-chart-container", 5);
            i0.ɵɵlistener("p-serie-click", function PoChartComponent_Template_po_chart_container_p_serie_click_6_listener($event) { return ctx.onSeriesClick($event); })("p-serie-hover", function PoChartComponent_Template_po_chart_container_p_serie_hover_6_listener($event) { return ctx.onSeriesHover($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoChartComponent_ng_template_7_Template, 0, 0, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor)(9, PoChartComponent_div_9_Template, 2, 1, "div", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoChartComponent_ng_template_10_Template, 2, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵadvance(5);
            i0.ɵɵtextInterpolate(ctx.title);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-options", ctx.options)("p-type", ctx.chartType)("p-series", ctx.chartSeries)("p-categories", ctx.categories)("p-container-size", ctx.svgContainerSize);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.options == null ? null : ctx.options.legend) !== false);
        } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoChartContainerComponent, PoChartLegendComponent, PoResizeObserverDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartComponent, [{
        type: Component,
        args: [{ selector: 'po-chart', template: "<div #chartWrapper class=\"po-chart-wrapper\" (p-resize-observer)=\"resizeAction()\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n\n  <po-chart-container\n    [p-options]=\"options\"\n    [p-type]=\"chartType\"\n    [p-series]=\"chartSeries\"\n    [p-categories]=\"categories\"\n    [p-container-size]=\"svgContainerSize\"\n    (p-serie-click)=\"onSeriesClick($event)\"\n    (p-serie-hover)=\"onSeriesHover($event)\"\n  ></po-chart-container>\n\n  <!-- Inje\u00E7\u00E3o de gr\u00E1ficos do tipo gauge. Remover na deprecia\u00E7\u00E3o.  -->\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"options?.legend !== false\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-series]=\"chartSeries\" [p-type]=\"type\"> </po-chart-legend>\n</ng-template>\n" }]
    }], () => [{ type: PoColorService }, { type: i0.ChangeDetectorRef }, { type: PoChartSvgContainerService }, { type: i0.ComponentFactoryResolver }, { type: i0.ElementRef }, { type: PoChartMathsService }, { type: i0.Renderer2 }], { chartContainer: [{
            type: ViewChild,
            args: ['chartContainer', { read: ViewContainerRef, static: true }]
        }], chartHeader: [{
            type: ViewChild,
            args: ['chartHeader', { static: true }]
        }], chartLegend: [{
            type: ViewChild,
            args: ['chartLegend', { read: ElementRef }]
        }], chartWrapper: [{
            type: ViewChild,
            args: ['chartWrapper', { static: true }]
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoChartComponent, { className: "PoChartComponent", filePath: "lib/components/po-chart/po-chart.component.ts", lineNumber: 53 }); })();

/**
 * @description
 *
 * Módulo do componente `po-chart`.
 */
class PoChartModule {
    static ɵfac = function PoChartModule_Factory(t) { return new (t || PoChartModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoChartModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoTooltipModule],
                declarations: [
                    PoChartAreaComponent,
                    PoChartAxisComponent,
                    PoChartAxisPathComponent,
                    PoChartAxisLabelComponent,
                    PoChartComponent,
                    PoChartContainerComponent,
                    PoChartLegendComponent,
                    PoChartLineComponent,
                    PoChartPathComponent,
                    PoChartPieComponent,
                    PoChartDonutComponent,
                    PoChartSeriesPointComponent,
                    PoChartBarComponent,
                    PoChartColumnComponent,
                    PoChartBarPathComponent,
                    PoChartCircularPathComponent,
                    PoChartCircularLabelComponent,
                    PoChartTooltipDirective,
                    PoResizeObserverDirective
                ],
                exports: [PoChartComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoChartModule, { declarations: [PoChartAreaComponent,
        PoChartAxisComponent,
        PoChartAxisPathComponent,
        PoChartAxisLabelComponent,
        PoChartComponent,
        PoChartContainerComponent,
        PoChartLegendComponent,
        PoChartLineComponent,
        PoChartPathComponent,
        PoChartPieComponent,
        PoChartDonutComponent,
        PoChartSeriesPointComponent,
        PoChartBarComponent,
        PoChartColumnComponent,
        PoChartBarPathComponent,
        PoChartCircularPathComponent,
        PoChartCircularLabelComponent,
        PoChartTooltipDirective,
        PoResizeObserverDirective], imports: [CommonModule, PoTooltipModule], exports: [PoChartComponent] }); })();

/**
 * @description
 *
 * O `po-container` é um componente que visa facilitar o agrupamento de conteúdos.
 * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
 * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
 * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
 * assim possibilitando o tratamento para diferentes resoluções.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                                    | Descrição                                              | Valor Padrão                                     |
 * |------------------------------------------------|--------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                             |                                                        |                                                  |
 * | `--padding` &nbsp;                             | Preenchimento                                          | `1rem`                                           |
 * | `--border-radius` &nbsp;                       | Contém o valor do raio dos cantos do elemento&nbsp;    | `var(--border-radius-md)`                        |
 * | `--border-width` &nbsp;                        | Contém o valor da largura dos cantos do elemento&nbsp; | `var(--border-width-sm)`                         |
 * | `--border-color` &nbsp;                        | Cor da borda                                           | `var(--color-neutral-light-20)`                  |
 * | `--background` &nbsp;                          | Cor de background                                      | `var(--color-neutral-light-00)`                  |
 *
 */
class PoContainerBaseComponent {
    _height;
    _noBorder = false;
    _noPadding = false;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-container`.
     *
     * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a borda e a sombra em torno do `po-container`.
     *
     * @default `false`
     */
    set noBorder(value) {
        this._noBorder = convertToBoolean(value);
    }
    get noBorder() {
        return this._noBorder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o espaçamento interno do `po-container`.
     *
     * @default `false`
     */
    set noPadding(value) {
        this._noPadding = convertToBoolean(value);
    }
    get noPadding() {
        return this._noPadding;
    }
    static ɵfac = function PoContainerBaseComponent_Factory(t) { return new (t || PoContainerBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoContainerBaseComponent, inputs: { height: [i0.ɵɵInputFlags.None, "p-height", "height"], noBorder: [i0.ɵɵInputFlags.None, "p-no-border", "noBorder"], noPadding: [i0.ɵɵInputFlags.None, "p-no-padding", "noPadding"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerBaseComponent, [{
        type: Directive
    }], null, { height: [{
            type: Input,
            args: ['p-height']
        }], noBorder: [{
            type: Input,
            args: ['p-no-border']
        }], noPadding: [{
            type: Input,
            args: ['p-no-padding']
        }] }); })();

const _c0$1c = ["*"];
/**
 * @docsExtends PoContainerBaseComponent
 *
 * @example
 *
 * <example name="po-container-basic" title="PO Container Basic">
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.html"> </file>
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-labs" title="PO Container Labs">
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.html"> </file>
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-dashboard" title="PO Container - Dashboard">
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.html"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.ts"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.service.ts"> </file>
 * </example>
 */
class PoContainerComponent extends PoContainerBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoContainerComponent_BaseFactory; return function PoContainerComponent_Factory(t) { return (ɵPoContainerComponent_BaseFactory || (ɵPoContainerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoContainerComponent)))(t || PoContainerComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoContainerComponent, selectors: [["po-container"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1c, decls: 2, vars: 6, consts: [[1, "po-container"]], template: function PoContainerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height ? ctx.height + "px" : "auto");
            i0.ɵɵclassProp("po-container-no-border", ctx.noBorder)("po-container-no-padding", ctx.noPadding);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerComponent, [{
        type: Component,
        args: [{ selector: 'po-container', template: "<div\n  class=\"po-container\"\n  [class.po-container-no-border]=\"noBorder\"\n  [class.po-container-no-padding]=\"noPadding\"\n  [style.height]=\"height ? height + 'px' : 'auto'\"\n>\n  <ng-content></ng-content>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoContainerComponent, { className: "PoContainerComponent", filePath: "lib/components/po-container/po-container.component.ts", lineNumber: 30 }); })();

/**
 * @description
 *
 * Módulo do componente `po-container`.
 */
class PoContainerModule {
    static ɵfac = function PoContainerModule_Factory(t) { return new (t || PoContainerModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoContainerModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [PoContainerComponent],
                declarations: [PoContainerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoContainerModule, { declarations: [PoContainerComponent], imports: [CommonModule], exports: [PoContainerComponent] }); })();

const PoDisclaimerLiterals = {
    en: {
        remove: 'Remove'
    },
    es: {
        remove: 'Eliminar'
    },
    pt: {
        remove: 'Remover'
    },
    ru: {
        remove: 'удалять'
    }
};

const PO_DISCLAIMER_TYPES = ['default', 'danger'];
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
class PoDisclaimerBaseComponent {
    languageService;
    /**
     * Label que aparecerá dentro do po-disclaimer.
     * Quando não for definido um label será apresentada a propriedade p-value.
     */
    label;
    /** Valor do po-disclaimer. */
    value;
    /** Nome da propriedade vinculada à este po-disclaimer. */
    property;
    disclaimerCustomWidth = 201;
    lastDisclaimer = false;
    tooltipPosition = 'bottom';
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao fechar o disclaimer.
     * Para este evento será passado como parâmetro um objeto com value, label e property.
     */
    closeAction = new EventEmitter();
    clickNumber = new EventEmitter();
    literals;
    showDisclaimer = true;
    _type = 'default';
    _hideClose = false;
    /**
     * @description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * @default false
     */
    set hideClose(value) {
        this._hideClose = value === '' ? true : convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * @default default
     * @optional
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    get type() {
        return this._type;
    }
    constructor(languageService) {
        this.languageService = languageService;
        const language = this.languageService?.getShortLanguage();
        this.literals = {
            ...PoDisclaimerLiterals[language]
        };
    }
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    getLabel() {
        return this.label ? this.label : this.value;
    }
    setAriaLabel() {
        return this.label ? this.label + ' ' + this.literals.remove : this.value + ' ' + this.literals.remove;
    }
    static ɵfac = function PoDisclaimerBaseComponent_Factory(t) { return new (t || PoDisclaimerBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], property: [i0.ɵɵInputFlags.None, "p-property", "property"], disclaimerCustomWidth: [i0.ɵɵInputFlags.None, "p-disclaimer-custom-width", "disclaimerCustomWidth"], lastDisclaimer: [i0.ɵɵInputFlags.None, "p-last-disclaimer", "lastDisclaimer"], tooltipPosition: [i0.ɵɵInputFlags.None, "p-tooltip-position", "tooltipPosition"], hideClose: [i0.ɵɵInputFlags.None, "p-hide-close", "hideClose"], type: [i0.ɵɵInputFlags.None, "p-type", "type"] }, outputs: { closeAction: "p-close-action", clickNumber: "p-click-number" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { label: [{
            type: Input,
            args: ['p-label']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], property: [{
            type: Input,
            args: ['p-property']
        }], disclaimerCustomWidth: [{
            type: Input,
            args: ['p-disclaimer-custom-width']
        }], lastDisclaimer: [{
            type: Input,
            args: ['p-last-disclaimer']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], closeAction: [{
            type: Output,
            args: ['p-close-action']
        }], clickNumber: [{
            type: Output,
            args: ['p-click-number']
        }], hideClose: [{
            type: Input,
            args: ['p-hide-close']
        }], type: [{
            type: Input,
            args: ['p-type']
        }] }); })();

const _c0$1b = ["disclaimerContainer"];
function PoDisclaimerComponent_div_2_po_icon_4_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 7);
    i0.ɵɵlistener("click", function PoDisclaimerComponent_div_2_po_icon_4_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.close()); })("keydown", function PoDisclaimerComponent_div_2_po_icon_4_Template_po_icon_keydown_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.onKeyPress($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-disclaimer-remove-danger", ctx_r2.type === "danger");
    i0.ɵɵattribute("aria-label", ctx_r2.setAriaLabel())("role", !ctx_r2.hideClose ? "button" : "");
} }
function PoDisclaimerComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵlistener("click", function PoDisclaimerComponent_div_2_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.emitLastDisclaimer(ctx_r6.lastDisclaimer)); })("keydown.enter", function PoDisclaimerComponent_div_2_Template_div_keydown_enter_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.emitLastDisclaimer(ctx_r8.lastDisclaimer)); });
    i0.ɵɵelementStart(1, "div", 4)(2, "span", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(4, PoDisclaimerComponent_div_2_po_icon_4_Template, 1, 4, "po-icon", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-disclaimer-remove-all", ctx_r1.hideClose)("po-disclaimer-danger", ctx_r1.type === "danger");
    i0.ɵɵproperty("p-tooltip", ctx_r1.getWidthDisclaimer() ? ctx_r1.getLabel() : "")("p-tooltip-position", ctx_r1.tooltipPosition)("tabindex", ctx_r1.hideClose ? "0" : "-1");
    i0.ɵɵadvance();
    i0.ɵɵclassProp("show-close", !ctx_r1.hideClose);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.getLabel(), " ");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hideClose === false);
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoDisclaimerBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-disclaimer" title="PO Disclaimer">
 *   <file name="sample-po-disclaimer.component.html"> </file>
 *   <file name="sample-po-disclaimer.component.ts"> </file>
 * </example-private>
 */
class PoDisclaimerComponent extends PoDisclaimerBaseComponent {
    disclaimerContainer;
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.close();
        }
    }
    emitLastDisclaimer(isLast) {
        if (isLast) {
            this.clickNumber.emit();
        }
    }
    getWidthDisclaimer() {
        return this.disclaimerContainer.nativeElement.offsetWidth > this.disclaimerCustomWidth;
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoDisclaimerComponent_BaseFactory; return function PoDisclaimerComponent_Factory(t) { return (ɵPoDisclaimerComponent_BaseFactory || (ɵPoDisclaimerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoDisclaimerComponent)))(t || PoDisclaimerComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerComponent, selectors: [["po-disclaimer"]], viewQuery: function PoDisclaimerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1b, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.disclaimerContainer = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 1, consts: [[1, "disclaimer-container"], ["disclaimerContainer", ""], ["class", "po-disclaimer", 3, "po-disclaimer-remove-all", "po-disclaimer-danger", "p-tooltip", "p-tooltip-position", "tabindex", "click", "keydown.enter", 4, "ngIf"], [1, "po-disclaimer", 3, "p-tooltip", "p-tooltip-position", "tabindex", "click", "keydown.enter"], [1, "po-disclaimer-label"], [1, "label"], ["p-icon", "ICON_CLOSE", "class", "po-disclaimer-remove po-clickable", "tabindex", "0", 3, "po-disclaimer-remove-danger", "click", "keydown", 4, "ngIf"], ["p-icon", "ICON_CLOSE", "tabindex", "0", 1, "po-disclaimer-remove", "po-clickable", 3, "click", "keydown"]], template: function PoDisclaimerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoDisclaimerComponent_div_2_Template, 5, 11, "div", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.showDisclaimer === true);
        } }, dependencies: [i1.NgIf, PoIconComponent, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerComponent, [{
        type: Component,
        args: [{ selector: 'po-disclaimer', template: "<div #disclaimerContainer class=\"disclaimer-container\">\n  <div\n    *ngIf=\"showDisclaimer === true\"\n    class=\"po-disclaimer\"\n    [class.po-disclaimer-remove-all]=\"hideClose\"\n    [class.po-disclaimer-danger]=\"type === 'danger'\"\n    [p-tooltip]=\"getWidthDisclaimer() ? getLabel() : ''\"\n    [p-tooltip-position]=\"tooltipPosition\"\n    [tabindex]=\"hideClose ? '0' : '-1'\"\n    (click)=\"emitLastDisclaimer(lastDisclaimer)\"\n    (keydown.enter)=\"emitLastDisclaimer(lastDisclaimer)\"\n  >\n    <div class=\"po-disclaimer-label\" [class.show-close]=\"!hideClose\">\n      <span class=\"label\">\n        {{ getLabel() }}\n      </span>\n    </div>\n    <po-icon\n      p-icon=\"ICON_CLOSE\"\n      *ngIf=\"hideClose === false\"\n      [attr.aria-label]=\"setAriaLabel()\"\n      [attr.role]=\"!hideClose ? 'button' : ''\"\n      class=\"po-disclaimer-remove po-clickable\"\n      tabindex=\"0\"\n      [class.po-disclaimer-remove-danger]=\"type === 'danger'\"\n      (click)=\"close()\"\n      (keydown)=\"onKeyPress($event)\"\n    ></po-icon>\n  </div>\n</div>\n" }]
    }], null, { disclaimerContainer: [{
            type: ViewChild,
            args: ['disclaimerContainer', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDisclaimerComponent, { className: "PoDisclaimerComponent", filePath: "lib/components/po-disclaimer/po-disclaimer.component.ts", lineNumber: 23 }); })();

/**
 * @description
 * Módulo do componente po-disclaimer.
 */
class PoDisclaimerModule {
    static ɵfac = function PoDisclaimerModule_Factory(t) { return new (t || PoDisclaimerModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDisclaimerModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule, PoTooltipModule],
                declarations: [PoDisclaimerComponent],
                exports: [PoDisclaimerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDisclaimerModule, { declarations: [PoDisclaimerComponent], imports: [CommonModule, PoIconModule, PoTooltipModule], exports: [PoDisclaimerComponent] }); })();

const poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' },
    ru: { removeAll: 'Удалить все' }
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
class PoDisclaimerGroupBaseComponent {
    changeDetector;
    /** Título do grupo de *disclaimers*. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
     *
     * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
     */
    remove = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
     * utilizando o botão "remover todos".
     *
     * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
     */
    removeAll = new EventEmitter();
    literals;
    _disclaimers = [];
    _hideRemoveAll = false;
    differ;
    previousDisclaimers = [];
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value) {
        this.previousDisclaimers = [...this.disclaimers];
        this._disclaimers = this.checkDisclaimers(value);
    }
    get disclaimers() {
        return this._disclaimers;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value) {
        this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
    }
    get hideRemoveAll() {
        return this._hideRemoveAll;
    }
    constructor(differs, languageService, changeDetector) {
        this.changeDetector = changeDetector;
        const language = languageService.getShortLanguage();
        this.differ = differs.find([]).create(null);
        this.literals = {
            ...poDisclaimerGroupLiteralsDefault[poLocaleDefault],
            ...poDisclaimerGroupLiteralsDefault[language]
        };
    }
    ngDoCheck() {
        this.checkChanges();
    }
    isRemoveAll() {
        return !this.hideRemoveAll && this.disclaimers.filter(c => !c.hideClose).length > 1;
    }
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    }
    removeAllItems() {
        const removeItems = [];
        this.disclaimers.forEach(disclaimer => {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(disclaimer => this.removeDisclaimer(disclaimer));
        this.emitChangeDisclaimers();
        this.removeAll.emit([...removeItems]);
    }
    removeDisclaimer(disclaimer) {
        const itemIndex = this.disclaimers.findIndex(d => d['$id'] === disclaimer['$id']);
        this.disclaimers.splice(itemIndex, 1);
    }
    emitChangeDisclaimers() {
        setTimeout(() => {
            this.change.emit(this.disclaimers);
        });
        this.previousDisclaimers = [...this._disclaimers];
        this.changeDetector?.detectChanges();
    }
    checkChanges() {
        if (this.differ) {
            const changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
        else {
            this.changeDetector?.detectChanges();
        }
    }
    checkDisclaimers(disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (let i = 0; i < disclaimers.length; i++) {
                const disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    }
    disclaimersAreChanged(disclaimers) {
        const currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value ||
            disclaimer.property !== this.previousDisclaimers[index].property);
    }
    static ɵfac = function PoDisclaimerGroupBaseComponent_Factory(t) { return new (t || PoDisclaimerGroupBaseComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerGroupBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], disclaimers: [i0.ɵɵInputFlags.None, "p-disclaimers", "disclaimers"], hideRemoveAll: [i0.ɵɵInputFlags.None, "p-hide-remove-all", "hideRemoveAll"] }, outputs: { change: "p-change", remove: "p-remove", removeAll: "p-remove-all" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.IterableDiffers }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }], { title: [{
            type: Input,
            args: ['p-title']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], remove: [{
            type: Output,
            args: ['p-remove']
        }], removeAll: [{
            type: Output,
            args: ['p-remove-all']
        }], disclaimers: [{
            type: Input,
            args: ['p-disclaimers']
        }], hideRemoveAll: [{
            type: Input,
            args: ['p-hide-remove-all']
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Este é um componente interno utilizado pelo po-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
 * po-disclaimers do grupo.
 */
class PoDisclaimerRemoveComponent {
    /** Texto exibido.  */
    label;
    /** Ação para remover todos.  */
    removeAllAction = new EventEmitter();
    // Emite a ação de remover todos.
    removeAction() {
        this.removeAllAction.emit();
    }
    static ɵfac = function PoDisclaimerRemoveComponent_Factory(t) { return new (t || PoDisclaimerRemoveComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerRemoveComponent, selectors: [["po-disclaimer-remove"]], inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"] }, outputs: { removeAllAction: "p-remove-all-action" }, decls: 1, vars: 2, consts: [["p-type", "danger", 1, "po-clickable", 3, "p-inverse", "p-value", "p-click"]], template: function PoDisclaimerRemoveComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-tag", 0);
            i0.ɵɵlistener("p-click", function PoDisclaimerRemoveComponent_Template_po_tag_p_click_0_listener() { return ctx.removeAction(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-inverse", true)("p-value", ctx.label);
        } }, dependencies: [PoTagComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerRemoveComponent, [{
        type: Component,
        args: [{ selector: 'po-disclaimer-remove', template: "<po-tag class=\"po-clickable\" [p-inverse]=\"true\" p-type=\"danger\" [p-value]=\"label\" (p-click)=\"removeAction()\"> </po-tag>\n" }]
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], removeAllAction: [{
            type: Output,
            args: ['p-remove-all-action']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDisclaimerRemoveComponent, { className: "PoDisclaimerRemoveComponent", filePath: "lib/components/po-disclaimer-group/po-disclaimer-remove/po-disclaimer-remove.component.ts", lineNumber: 14 }); })();

function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer-remove", 5);
    i0.ɵɵlistener("keydown", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_keydown_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.onKeyPress($event)); })("p-remove-all-action", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_p_remove_all_action_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.removeAllItems()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-label", ctx_r1.literals.removeAll);
} }
function PoDisclaimerGroupComponent_div_0_po_tag_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-tag", 6);
    i0.ɵɵlistener("p-close", function PoDisclaimerGroupComponent_div_0_po_tag_4_Template_po_tag_p_close_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r8); const disclaimer_r6 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.onCloseAction(disclaimer_r6, $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const disclaimer_r6 = ctx.$implicit;
    i0.ɵɵproperty("p-value", disclaimer_r6.label || disclaimer_r6.value)("p-removable", !disclaimer_r6.hideClose);
} }
function PoDisclaimerGroupComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template, 1, 1, "po-disclaimer-remove", 3)(4, PoDisclaimerGroupComponent_div_0_po_tag_4_Template, 1, 2, "po-tag", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.title);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.isRemoveAll());
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r0.disclaimers);
} }
/**
 * @docsExtends PoDisclaimerGroupBaseComponent
 *
 * @example
 *
 * <example name="po-disclaimer-group-basic" title="PO Disclaimer Group Basic">
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-labs" title="PO Disclaimer Group Labs">
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-sw-planets" title="PO Disclaimer Group - Star Wars Planets">
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
class PoDisclaimerGroupComponent extends PoDisclaimerGroupBaseComponent {
    changeDetector;
    subscription = new Subscription();
    el = inject(ElementRef);
    constructor(differs, languageService, changeDetector) {
        super(differs, languageService, changeDetector);
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        this.handleKeyboardNavigationTag();
    }
    ngOnChanges(changes) {
        if (changes.disclaimers) {
            setTimeout(() => {
                this.handleKeyboardNavigationTag();
            });
        }
    }
    onCloseAction(disclaimer, event) {
        const index = this.disclaimers.findIndex(option => option.value === disclaimer.value);
        this.removeDisclaimer(disclaimer);
        this.emitChangeDisclaimers();
        this.remove.emit({
            removedDisclaimer: { ...disclaimer },
            currentDisclaimers: [...this.disclaimers]
        });
        setTimeout(() => {
            this.focusOnNextTag(index, event);
        }, 300);
    }
    focusOnNextTag(indexClosed, clickOrEnter) {
        if (clickOrEnter === 'enter') {
            const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
            indexClosed = indexClosed || indexClosed === 0 ? indexClosed : tagRemoveElements.length;
            this.focusOnRemoveTag(tagRemoveElements, indexClosed);
        }
        else {
            indexClosed = 0;
        }
        this.handleKeyboardNavigationTag(indexClosed);
    }
    handleKeyboardNavigationTag(initialIndex = 0) {
        this.subscription.unsubscribe();
        this.subscription = new Subscription();
        const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
        this.initializeTagRemoveElements(tagRemoveElements, initialIndex);
    }
    handleArrowLeft(tagRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index - 1].focus();
            this.setTabIndex(tagRemoveElements[index - 1], 0);
        }
    }
    handleArrowRight(tagRemoveElements, index) {
        if (index < tagRemoveElements.length - 1) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index + 1].focus();
            this.setTabIndex(tagRemoveElements[index + 1], 0);
        }
    }
    setTabIndex(element, tabIndex) {
        element.setAttribute('tabindex', tabIndex);
    }
    initializeTagRemoveElements(tagRemoveElements, initialIndex) {
        tagRemoveElements.forEach((tagRemoveElement, index) => {
            if (index === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex], 0);
            }
            else if (tagRemoveElements.length === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex - 1], 0);
            }
            else {
                this.setTabIndex(tagRemoveElement, -1);
            }
            this.subscription.add(fromEvent(tagRemoveElement, 'keydown').subscribe((event) => {
                this.handleKeyDown(event, tagRemoveElements, index);
            }));
            if (index !== 0) {
                this.subscription.add(fromEvent(tagRemoveElements, 'blur').subscribe(() => {
                    this.setTabIndex(tagRemoveElements[index], -1);
                    this.setTabIndex(tagRemoveElements[0], 0);
                }));
            }
        });
    }
    handleKeyDown(event, tagRemoveElements, index) {
        const KEY_SPACE = 'Space';
        const KEY_ARROW_LEFT = 'ArrowLeft';
        const KEY_ARROW_RIGHT = 'ArrowRight';
        if (event.code === KEY_SPACE) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (event.key === KEY_ARROW_LEFT) {
            this.handleArrowLeft(tagRemoveElements, index);
        }
        else if (event.key === KEY_ARROW_RIGHT) {
            this.handleArrowRight(tagRemoveElements, index);
        }
    }
    focusOnRemoveTag(tag, indexClosed) {
        if (tag.length === indexClosed) {
            tag[indexClosed - 1]?.focus();
        }
        else {
            tag[indexClosed]?.focus();
        }
    }
    static ɵfac = function PoDisclaimerGroupComponent_Factory(t) { return new (t || PoDisclaimerGroupComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerGroupComponent, selectors: [["po-disclaimer-group"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "po-disclaimer-group", 4, "ngIf"], [1, "po-disclaimer-group"], [1, "po-disclaimer-group-title"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action", 4, "ngIf"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-value", "p-removable", "p-close", 4, "ngFor", "ngForOf"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-value", "p-removable", "p-close"]], template: function PoDisclaimerGroupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoDisclaimerGroupComponent_div_0_Template, 5, 3, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.disclaimers.length > 0);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoTagComponent, PoDisclaimerRemoveComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-disclaimer-group', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\">\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\n\n  <po-disclaimer-remove\n    *ngIf=\"isRemoveAll()\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (p-remove-all-action)=\"removeAllItems()\"\n  >\n  </po-disclaimer-remove>\n\n  <po-tag\n    *ngFor=\"let disclaimer of disclaimers\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-value]=\"disclaimer.label || disclaimer.value\"\n    [p-removable]=\"!disclaimer.hideClose\"\n    (p-close)=\"onCloseAction(disclaimer, $event)\"\n  >\n  </po-tag>\n</div>\n" }]
    }], () => [{ type: i0.IterableDiffers }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDisclaimerGroupComponent, { className: "PoDisclaimerGroupComponent", filePath: "lib/components/po-disclaimer-group/po-disclaimer-group.component.ts", lineNumber: 46 }); })();

/**
 * @description
 *
 * Módulo do componente po-disclaimer-group.
 */
class PoDisclaimerGroupModule {
    static ɵfac = function PoDisclaimerGroupModule_Factory(t) { return new (t || PoDisclaimerGroupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDisclaimerGroupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoDisclaimerModule, PoTagModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoDisclaimerModule, PoTagModule],
                declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent],
                exports: [PoDisclaimerGroupComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDisclaimerGroupModule, { declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent], imports: [CommonModule, PoDisclaimerModule, PoTagModule], exports: [PoDisclaimerGroupComponent] }); })();

/**
 * @description
 *
 * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '@angular/router';
 *
 * @NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do po-menu](/guides/getting-started).
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                     |
 * |----------------------------------------|-------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                  |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                       |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                       |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-bold)`                        |
 * | `--line-height`                        | Tamanho da label                                      | `var(--line-height-none)`                        |
 * | `--color`                              | Cor principal do dropdown                             | `var(--color-action-default)`                    |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                        |
 * | `--border-width`                       | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-md)`                         |
 * | `--padding`                            | Preenchimento                                         | `0 1em`                                          |
 * | **Hover**                              |                                                       |                                                  |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-darkest)`                  |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                  |
 * | **Focused**                            |                                                       |                                                  |
 * | `--outline-color-focused` &nbsp;       | Cor do outline do estado de focus                     | `var(--color-action-focus)`                      |
 * | **Pressed**                            |                                                       |                                                  |
 * | `--background-pressed` &nbsp;          | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-light)`                    |
 * | **Disabled**                           |                                                       |                                                  |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                   |
 *
 */
class PoDropdownBaseComponent {
    /** Adiciona um rótulo ao `dropdown`. */
    label;
    icon = 'ICON_ARROW_DOWN';
    open = false;
    _actions;
    _disabled = false;
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    static ɵfac = function PoDropdownBaseComponent_Factory(t) { return new (t || PoDropdownBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDropdownBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }] }); })();

const _c0$1a = ["dropdownRef"];
const _c1$x = ["popupRef"];
const _c2$g = (a0, a1) => ({ "po-dropdown-button-disabled": a0, "po-dropdown-button-open": a1 });
const _c3$a = () => ["bottom-left", "top-left"];
/**
 * @docsExtends PoDropdownBaseComponent
 *
 * @example
 *
 * <example name="po-dropdown-basic" title="PO Dropdown Basic" >
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.html"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-labs" title="PO Dropdown Labs" >
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.html"> </file>
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-social-network" title="PO Dropdown - Social Network" >
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.html"> </file>
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.ts"> </file>
 * </example>
 */
class PoDropdownComponent extends PoDropdownBaseComponent {
    renderer;
    changeDetector;
    dropdownRef;
    popupRef;
    clickoutListener;
    resizeListener;
    constructor(renderer, changeDetector) {
        super();
        this.renderer = renderer;
        this.changeDetector = changeDetector;
    }
    onKeyDown(event) {
        if (isKeyCodeEnter(event)) {
            this.toggleDropdown();
        }
    }
    toggleDropdown() {
        this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
    }
    checkClickArea(event) {
        return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
    }
    hideDropdown() {
        this.icon = 'ICON_ARROW_DOWN';
        this.removeListeners();
        this.popupRef.close();
        this.open = false;
        this.changeDetector.detectChanges();
    }
    initializeListeners() {
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnDropdown(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.hideDropdown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onScroll = ({ target }) => {
        if (this.open && target.className !== 'po-popup-container' && !this.isDropdownClosed()) {
            this.hideDropdown();
        }
    };
    isDropdownClosed() {
        const dropdownRect = this.dropdownRef.nativeElement.getBoundingClientRect();
        return dropdownRect.top >= 0 && dropdownRect.bottom <= window.innerHeight;
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    showDropdown() {
        this.icon = 'ICON_ARROW_UP';
        this.initializeListeners();
        this.popupRef.open();
        this.open = true;
        this.changeDetector.detectChanges();
    }
    wasClickedOnDropdown(event) {
        const clickedOnDropdown = this.checkClickArea(event);
        if (!clickedOnDropdown) {
            this.hideDropdown();
        }
    }
    static ɵfac = function PoDropdownComponent_Factory(t) { return new (t || PoDropdownComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDropdownComponent, selectors: [["po-dropdown"]], viewQuery: function PoDropdownComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1a, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$x, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownRef = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupRef = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 12, consts: [[1, "po-dropdown", 3, "tabindex", "click", "keydown"], ["dropdownRef", ""], [1, "po-dropdown-button", 3, "ngClass"], [1, "po-dropdown-icon", 3, "p-icon"], ["p-hide-arrow", "", "p-is-corner-align", "", "p-position", "bottom-left", 3, "p-actions", "p-custom-positions", "p-target"], ["popupRef", ""]], template: function PoDropdownComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoDropdownComponent_Template_div_click_0_listener() { return ctx.toggleDropdown(); })("keydown", function PoDropdownComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementStart(2, "div", 2)(3, "span");
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(5, "po-icon", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(6, "po-popup", 4, 5);
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵpropertyInterpolate("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("disabled", ctx.disabled);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(8, _c2$g, ctx.disabled, ctx.open));
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.label);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-icon", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.actions)("p-custom-positions", i0.ɵɵpureFunction0(11, _c3$a))("p-target", _r0);
        } }, dependencies: [i1.NgClass, PoPopupComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownComponent, [{
        type: Component,
        args: [{ selector: 'po-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  #dropdownRef\n  class=\"po-dropdown\"\n  [attr.disabled]=\"disabled\"\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\n  (click)=\"toggleDropdown()\"\n  (keydown)=\"onKeyDown($event)\"\n>\n  <div\n    class=\"po-dropdown-button\"\n    [ngClass]=\"{ 'po-dropdown-button-disabled': disabled, 'po-dropdown-button-open': open }\"\n  >\n    <span>{{ label }}</span>\n    <po-icon class=\"po-dropdown-icon\" [p-icon]=\"icon\"></po-icon>\n  </div>\n</div>\n\n<po-popup\n  #popupRef\n  p-hide-arrow\n  p-is-corner-align\n  p-position=\"bottom-left\"\n  [p-actions]=\"actions\"\n  [p-custom-positions]=\"['bottom-left', 'top-left']\"\n  [p-target]=\"dropdownRef\"\n>\n</po-popup>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }], { dropdownRef: [{
            type: ViewChild,
            args: ['dropdownRef', { read: ElementRef, static: true }]
        }], popupRef: [{
            type: ViewChild,
            args: ['popupRef']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDropdownComponent, { className: "PoDropdownComponent", filePath: "lib/components/po-dropdown/po-dropdown.component.ts", lineNumber: 34 }); })();

/**
 * @description
 * Módulo do componente po-dropdown.
 */
class PoDropdownModule {
    static ɵfac = function PoDropdownModule_Factory(t) { return new (t || PoDropdownModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDropdownModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoPopupModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoPopupModule, PoIconModule],
                declarations: [PoDropdownComponent],
                exports: [PoDropdownComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDropdownModule, { declarations: [PoDropdownComponent], imports: [CommonModule, PoPopupModule, PoIconModule], exports: [PoDropdownComponent] }); })();

function PoFieldContainerBottomComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵelement(1, "po-icon", 4);
    i0.ɵɵelementStart(2, "span");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorPattern, "");
} }
function PoFieldContainerBottomComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r1.help, " ");
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o po-field-container.
 * Essa margem inferior pode conter uma mensagem de erro.
 */
class PoFieldContainerBottomComponent {
    /**
     * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
     * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     */
    errorPattern = '';
    disabled = false;
    help;
    static ɵfac = function PoFieldContainerBottomComponent_Factory(t) { return new (t || PoFieldContainerBottomComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoFieldContainerBottomComponent, selectors: [["po-field-container-bottom"]], inputs: { errorPattern: [i0.ɵɵInputFlags.None, "p-error-pattern", "errorPattern"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], help: [i0.ɵɵInputFlags.None, "p-help", "help"] }, decls: 3, vars: 4, consts: [[1, "po-field-container-bottom"], ["class", "po-field-container-bottom-text-error", 4, "ngIf"], ["class", "po-field-container-bottom-help-text", 4, "ngIf"], [1, "po-field-container-bottom-text-error"], ["p-icon", "ICON_WARNING"], [1, "po-field-container-bottom-help-text"]], template: function PoFieldContainerBottomComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoFieldContainerBottomComponent_div_1_Template, 4, 1, "div", 1)(2, PoFieldContainerBottomComponent_span_2_Template, 2, 1, "span", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-field-container-bottom-disabled", ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.errorPattern);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.help && !ctx.errorPattern);
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerBottomComponent, [{
        type: Component,
        args: [{ selector: 'po-field-container-bottom', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container-bottom\" [class.po-field-container-bottom-disabled]=\"disabled\">\n  <div *ngIf=\"errorPattern\" class=\"po-field-container-bottom-text-error\">\n    <po-icon p-icon=\"ICON_WARNING\"></po-icon>\n    <span> {{ errorPattern }}</span>\n  </div>\n  <span *ngIf=\"help && !errorPattern\" class=\"po-field-container-bottom-help-text\">\n    {{ help }}\n  </span>\n</div>\n" }]
    }], null, { errorPattern: [{
            type: Input,
            args: ['p-error-pattern']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], help: [{
            type: Input,
            args: ['p-help']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoFieldContainerBottomComponent, { className: "PoFieldContainerBottomComponent", filePath: "lib/components/po-field/po-field-container/po-field-container-bottom/po-field-container-bottom.component.ts", lineNumber: 16 }); })();

const poFieldContainerLiterals = {
    en: {
        optional: 'Optional',
        required: 'Required'
    },
    es: {
        optional: 'Opcional',
        required: 'Obligatorio'
    },
    pt: {
        optional: 'Opcional',
        required: 'Obrigatório'
    },
    ru: {
        optional: 'Пожеланию',
        required: 'Обязательный'
    }
};

function PoFieldContainerComponent_po_label_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-label", 4);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r0.disabled)("p-for", ctx_r0.id)("p-label", ctx_r0.label)("p-requirement", ctx_r0.requirement);
} }
function PoFieldContainerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.help);
} }
const _c0$19 = ["*"];
/**
 * @docsPrivate
 *
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
class PoFieldContainerComponent {
    /** Indica se o campo será desabilitado. */
    disabled;
    /** Identificador do campo */
    id;
    /** Label do campo. */
    label;
    /** Texto de apoio do campo. */
    help;
    literals;
    requirement;
    _optional = false;
    _required = false;
    /** Indica se o campo será opcional. */
    set optional(value) {
        this._optional = convertToBoolean(value);
    }
    get optional() {
        return this._optional;
    }
    /** Indica se o campo será obrigatório. */
    set required(value) {
        this._required = convertToBoolean(value);
    }
    get required() {
        return this._required;
    }
    /** Define se a indicação de campo obrigatório será exibida. */
    showRequired = false;
    constructor(languageService) {
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poFieldContainerLiterals[language]
        };
    }
    ngOnInit() {
        this.setRequirement();
    }
    ngOnChanges(changes) {
        if (changes.help || changes.label || changes.optional || changes.required || changes.showRequired) {
            this.setRequirement();
        }
    }
    setRequirement() {
        if (this.label || this.help) {
            if (!this.required && this.optional) {
                this.requirement = this.literals['optional'];
            }
            else if (this.required && this.showRequired) {
                this.requirement = this.literals['required'];
            }
            else {
                this.requirement = undefined;
            }
        }
    }
    static ɵfac = function PoFieldContainerComponent_Factory(t) { return new (t || PoFieldContainerComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoFieldContainerComponent, selectors: [["po-field-container"]], inputs: { disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], id: [i0.ɵɵInputFlags.None, "p-id", "id"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$19, decls: 5, vars: 2, consts: [[1, "po-field-container"], [1, "po-field-container-title"], ["p-field", "true", 3, "p-disabled", "p-for", "p-label", "p-requirement", 4, "ngIf"], ["class", "po-field-help", 4, "ngIf"], ["p-field", "true", 3, "p-disabled", "p-for", "p-label", "p-requirement"], [1, "po-field-help"]], template: function PoFieldContainerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoFieldContainerComponent_po_label_2_Template, 1, 4, "po-label", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoFieldContainerComponent_div_3_Template, 2, 1, "div", 3);
            i0.ɵɵprojection(4);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.label || ctx.help);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.help);
        } }, dependencies: [i1.NgIf, PoLabelComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerComponent, [{
        type: Component,
        args: [{ selector: 'po-field-container', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container\">\n  <div class=\"po-field-container-title\">\n    <po-label\n      *ngIf=\"label || help\"\n      [p-disabled]=\"disabled\"\n      p-field=\"true\"\n      [p-for]=\"id\"\n      [p-label]=\"label\"\n      [p-requirement]=\"requirement\"\n    ></po-label>\n  </div>\n\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\n\n  <ng-content></ng-content>\n</div>\n" }]
    }], () => [{ type: PoLanguageService }], { disabled: [{
            type: Input,
            args: ['p-disabled']
        }], id: [{
            type: Input,
            args: ['p-id']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoFieldContainerComponent, { className: "PoFieldContainerComponent", filePath: "lib/components/po-field/po-field-container/po-field-container.component.ts", lineNumber: 17 }); })();

/**
 * @description
 *
 * Módulo do componente `po-field-container`.
 */
class PoFieldContainerModule {
    static ɵfac = function PoFieldContainerModule_Factory(t) { return new (t || PoFieldContainerModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoFieldContainerModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoLabelModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoLabelModule, PoIconModule],
                exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent],
                declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoFieldContainerModule, { declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent], imports: [CommonModule, PoLabelModule, PoIconModule], exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent] }); })();

function requiredFailed(required, disabled, value) {
    const valid = (typeof value === 'string' && value) ||
        (typeof value === 'object' && value && value.length) ||
        (typeof value === 'number' && (value || value === 0)) ||
        (typeof value === 'boolean' && value);
    return required && !disabled && !valid;
}
function maxlengpoailed(maxlength, value) {
    const validMaxlength = maxlength || maxlength === 0;
    const validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
function minlengpoailed(minlength, value) {
    const validMinlength = minlength || minlength === 0;
    const validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
function patternFailed(pattern, value) {
    let reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return pattern && value && !reg.test(value);
}
function minFailed(min, value) {
    const validValue = value || value === 0;
    const validMin = min || min === 0;
    return validValue && validMin && value < min;
}
function maxFailed(max, value) {
    const validValue = value || value === 0;
    const validMax = max || max === 0;
    return validValue && validMax && value > max;
}
function dateFailed(value) {
    return value && isNaN(Date.parse(value));
}

const poCheckboxGroupColumnsDefaultLength = 6;
const poCheckboxGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
class PoCheckboxGroupBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Nome dos checkboxes */
    name;
    /** Texto de apoio do campo */
    help;
    /** Label do campo */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-checkbox-group ... [ngModel]="checkboxgroupModel" (ngModelChange)="checkboxgroupModel = $event"> </po-checkbox-group>
     * ```
     *
     */
    ngModelChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo
     */
    change = new EventEmitter();
    checkboxGroupOptionsView;
    checkedOptions = {};
    checkedOptionsList = [];
    mdColumns = poCheckboxGroupColumnsDefaultLength;
    propagateChange;
    validatorChange;
    _columns = poCheckboxGroupColumnsDefaultLength;
    _disabled = false;
    _indeterminate = false;
    _options;
    _required = false;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
     * - É possível exibir as opções entre `1` e `4` colunas.
     * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
     * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
     * o *grid system* será composto por `2` colunas.
     * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
     *
     * @default `2`
     *
     */
    set columns(value) {
        const columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todos os itens do checkbox.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.checkIndeterminate());
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
     * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
     *
     * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
     * `ngModel`, diferente do array que contém apenas os valores selecionados.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
     */
    set options(value) {
        this._options = Array.isArray(value) ? value : [];
        this.removeDuplicatedOptions();
        this.setCheckboxGroupOptionsView(this.options);
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.checkIndeterminate());
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    changeValue() {
        const value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    }
    checkIndeterminate() {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    }
    checkOption(value) {
        if (!this._disabled && !value.disabled && !value.fixed) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) { }
    writeValue(optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
            this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    checkOptionModel(optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    }
    generateCheckOptions(optionsModel) {
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach((option) => {
                this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach((option) => {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                this.checkedOptions = optionsModel;
            });
        }
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    }
    isInvalidIndeterminate() {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return Object.values(this.checkedOptions).every(value => value === false);
        }
        return false;
    }
    removeDuplicatedOptions() {
        this.options.forEach((option, index) => {
            const duplicatedIndex = this.options.findIndex((optionFind) => optionFind.value === option.value) === index;
            if (!duplicatedIndex) {
                this.options.splice(this.options.indexOf(option), 1);
            }
        });
    }
    setCheckboxGroupOptionsView(optionsList) {
        this.checkboxGroupOptionsView = optionsList.map(option => ({ ...option, id: uuid() }));
    }
    static ɵfac = function PoCheckboxGroupBaseComponent_Factory(t) { return new (t || PoCheckboxGroupBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxGroupBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], name: "name", help: [i0.ɵɵInputFlags.None, "p-help", "help"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], indeterminate: [i0.ɵɵInputFlags.None, "p-indeterminate", "indeterminate"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, outputs: { ngModelChange: "ngModelChange", change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], name: [{
            type: Input,
            args: ['name']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], indeterminate: [{
            type: Input,
            args: ['p-indeterminate']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();

const _c0$18 = ["checkboxLabel"];
function PoCheckboxGroupComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li")(1, "po-checkbox", 4, 5);
    i0.ɵɵlistener("click", function PoCheckboxGroupComponent_li_3_Template_po_checkbox_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.checkOption(option_r1)); })("keydown", function PoCheckboxGroupComponent_li_3_Template_po_checkbox_keydown_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onKeyDown($event, option_r1)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate2("po-checkbox-group-item po-md-", ctx_r0.mdColumns, " po-lg-", ctx_r0.columns, "");
    i0.ɵɵclassProp("po-checkbox-group-item-disabled", option_r1.disabled || ctx_r0.disabled);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-label", option_r1.label)("p-disabled", option_r1.disabled || ctx_r0.disabled)("p-checkboxValue", ctx_r0.checkedOptions[option_r1.value] === null ? "mixed" : ctx_r0.checkedOptions[option_r1.value])("p-required", ctx_r0.required);
} }
/**
 * @docsExtends PoCheckboxGroupBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
class PoCheckboxGroupComponent extends PoCheckboxGroupBaseComponent {
    changeDetector;
    checkboxLabels;
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    ngAfterViewChecked() {
        this.changeDetector.detectChanges();
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabels && !this.disabled) {
            const checkboxLabel = this.checkboxLabels.find((_, index) => !this.options[index].disabled);
            if (checkboxLabel) {
                checkboxLabel.checkboxLabel.nativeElement.focus();
            }
        }
    }
    onKeyDown(event, option) {
        const spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    }
    trackByFn(index) {
        return index;
    }
    static ɵfac = function PoCheckboxGroupComponent_Factory(t) { return new (t || PoCheckboxGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxGroupComponent, selectors: [["po-checkbox-group"]], viewQuery: function PoCheckboxGroupComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$18, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabels = _t);
        } }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoCheckboxGroupComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoCheckboxGroupComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[3, "p-disabled", "p-help", "p-label", "p-optional", "p-required", "p-show-required"], ["role", "group", 1, "po-field-container-content", "po-checkbox-group-content"], [1, "po-row", "po-pt-2", "po-pb-1"], [3, "class", "po-checkbox-group-item-disabled", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-label", "p-disabled", "p-checkboxValue", "p-required", "click", "keydown"], ["checkboxLabel", ""]], template: function PoCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "ul", 2);
            i0.ɵɵtemplate(3, PoCheckboxGroupComponent_li_3_Template, 3, 10, "li", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-help", ctx.help)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵattribute("aria-label", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.checkboxGroupOptionsView)("ngForTrackBy", ctx.trackByFn);
        } }, dependencies: [i1.NgForOf, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoCheckboxComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-checkbox-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoCheckboxGroupComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoCheckboxGroupComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div role=\"group\" [attr.aria-label]=\"label\" class=\"po-field-container-content po-checkbox-group-content\">\n    <ul class=\"po-row po-pt-2 po-pb-1\">\n      <li\n        *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\"\n      >\n        <po-checkbox\n          #checkboxLabel\n          [p-label]=\"option.label\"\n          [p-disabled]=\"option.disabled || disabled\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\"\n          [p-checkboxValue]=\"checkedOptions[option.value] === null ? 'mixed' : checkedOptions[option.value]\"\n          [p-required]=\"required\"\n        >\n        </po-checkbox>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { checkboxLabels: [{
            type: ViewChildren,
            args: ['checkboxLabel']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCheckboxGroupComponent, { className: "PoCheckboxGroupComponent", filePath: "lib/components/po-field/po-checkbox-group/po-checkbox-group.component.ts", lineNumber: 54 }); })();

/**
 * @description
 *
 * Módulo do componente `po-checkbox-group`.
 */
class PoCheckboxGroupModule {
    static ɵfac = function PoCheckboxGroupModule_Factory(t) { return new (t || PoCheckboxGroupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCheckboxGroupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule],
                exports: [PoCheckboxGroupComponent],
                declarations: [PoCheckboxGroupComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCheckboxGroupModule, { declarations: [PoCheckboxGroupComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule], exports: [PoCheckboxGroupComponent] }); })();

const poRadioGroupColumnsDefaultLength = 6;
const poRadioGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 *
 * #### Acessibilidade tratada no componente interno `po-radio`:
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A cor não deve ser o único meio para diferenciar o radio button normal do selecionado, por isso deve-se manter uma diferença visual entre os estados. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 * - Quando em foco, o componente é ativado usando as teclas de Espaço e Enter do teclado. [W3C WAI-ARIA 3.5 Button - Keyboard Interaction](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-3)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [(WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 *
 * Conforme documentação em: https://doc.animaliads.io/docs/components/radio
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: No componente Radio Group, a customização ocorre principalmente nos elementos `po-radio` que compõem o grupo de opções. <br>
 * Portanto, ao aplicar estilos customizados, é importante focar na customização dos elementos `po-radio` em vez do próprio `po-radio-group`.
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                                   | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                             |                                                 |
 * | `--border-color`                       | Cor da borda                                                | `var(--color-neutral-dark-70)`                  |
 * | **Hover**                              |                                                             |                                                 |
 * | `--shadow-color-hover`                 | Cor da sombra no estado hover                               | `var(--color-brand-01-lighter)`                 |
 * | `--color-hover`                        | Cor principal no estado hover                               | `var(--color-brand-01-dark)`                    |
 * | **Focused**                            |                                                             |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                           | `var(--color-brand-01-darkest)`                 |
 * | **checked**                            |                                                             |                                                 |
 * | `--color-unchecked`                    | Cor quando não selecionado                                  | `var(--color-neutral-light-00)`                 |
 * | `--color-checked`                      | Cor quando selecionado                                      | `var(--color-action-default)`                   |
 * | **Disabled**                           |                                                             |                                                 |
 * | `--color-unchecked-disabled`           | Cor pricipal quando não selecionado no estado disabled      | `var(--color-neutral-light-30)`                 |
 * | `--color-checked-disabled`             | Cor pricipal quando selecionado no estado disabled          | `var(--color-neutral-dark-70)`                  |
 *
 */
class PoRadioGroupBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Nome das opções. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Evento ao alterar valor do campo.
     */
    change = new EventEmitter();
    mdColumns = poRadioGroupColumnsDefaultLength;
    value;
    onTouched = null;
    _columns = poRadioGroupColumnsDefaultLength;
    _disabled = false;
    _options;
    _required = false;
    onChangePropagate = null;
    validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value) {
        const columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value) {
        this._options = value;
        removeDuplicatedOptions(this.options);
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *radio*
     * @default `medium`
     */
    size;
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    changeValue(changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onChangePropagate = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        const element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    static ɵfac = function PoRadioGroupBaseComponent_Factory(t) { return new (t || PoRadioGroupBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRadioGroupBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], name: "name", optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], name: [{
            type: Input,
            args: ['name']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

class PoFieldModel {
    /** Rótulo exibido pelo componente. */
    label;
    /** Nome do componente. */
    name;
    /** Texto de apoio para o campo. */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    disabled = false;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    change = new EventEmitter();
    value;
    onTouched;
    propagateChange;
    constructor() { }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        this.onWriteValue(value);
    }
    emitChange(value) {
        this.change.emit(value);
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    static ɵfac = function PoFieldModel_Factory(t) { return new (t || PoFieldModel)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoFieldModel, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], name: "name", help: [i0.ɵɵInputFlags.None, "p-help", "help"], disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabled", convertToBoolean] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldModel, [{
        type: Directive
    }], () => [], { label: [{
            type: Input,
            args: ['p-label']
        }], name: [{
            type: Input,
            args: ['name']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], disabled: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], change: [{
            type: Output,
            args: ['p-change']
        }] }); })();

/**
 * @usedBy PoRadioComponent
 *
 * @description
 *
 * Enum para definir o tamanho do po-radio.
 */
var PoRadioSize;
(function (PoRadioSize) {
    PoRadioSize["Medium"] = "medium";
    PoRadioSize["Large"] = "large";
})(PoRadioSize || (PoRadioSize = {}));

const _c0$17 = ["radio"];
const _c1$w = ["radioInput"];
function PoRadioComponent_po_label_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-label", 6);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r2.disabled)("p-label", ctx_r2.label);
} }
class PoRadioComponent extends PoFieldModel {
    changeDetector;
    renderer;
    radio;
    radioInput;
    value = false;
    _size = PoRadioSize.Medium;
    /** Define o valor do *radio* */
    radioValue;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *radio*
     * @default `medium`
     */
    set size(value) {
        this._size = Object.values(PoRadioSize).includes(value) ? value : PoRadioSize.Medium;
    }
    get size() {
        return this._size;
    }
    required;
    /** Define o status do *radio* */
    checked = false;
    /** Emite evento para a tabela ao selecionar ou desselecionar */
    changeSelected = new EventEmitter();
    constructor(changeDetector, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
    }
    /**
     * Função que atribui foco ao *radio*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * import { ViewChild } from '@angular/core';
     * import { PoRadioComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRadioComponent, { static: true }) radio: PoRadioComponent;
     *
     * focusRadio() {
     * this.radio.focus();
     * }
     * ```
     *
     */
    focus() {
        if (!this.disabled) {
            this.radioInput.nativeElement.focus();
            this.onKeyup();
        }
    }
    onBlur() {
        this.onTouched?.();
    }
    onKeyDown(event) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            this.eventClick();
        }
    }
    changeValue(value) {
        if (value) {
            this.value = value;
            this.updateModel(value);
            this.emitChange(this.value);
        }
    }
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.value);
            this.changeDetector.detectChanges();
            this.changeSelected.emit(null);
        }
    }
    onWriteValue(value) {
        if (value !== this.value) {
            this.value = !!value;
            this.changeDetector.markForCheck();
        }
    }
    focusOut() {
        this.renderer.removeClass(this.radio.nativeElement, 'po-radio-focus');
    }
    onKeyup() {
        this.renderer.addClass(this.radio.nativeElement, 'po-radio-focus');
    }
    onKeydown() {
        this.renderer.addClass(this.radio.nativeElement, 'po-radio-focus');
    }
    static ɵfac = function PoRadioComponent_Factory(t) { return new (t || PoRadioComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRadioComponent, selectors: [["po-radio"]], viewQuery: function PoRadioComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$17, 7);
            i0.ɵɵviewQuery(_c1$w, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radio = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioInput = _t.first);
        } }, hostBindings: function PoRadioComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("focusout", function PoRadioComponent_focusout_HostBindingHandler($event) { return ctx.focusOut($event.target); })("keyup", function PoRadioComponent_keyup_HostBindingHandler($event) { return ctx.onKeyup($event.target); })("keydown", function PoRadioComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event.target); });
        } }, inputs: { radioValue: [i0.ɵɵInputFlags.None, "p-value", "radioValue"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], required: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-required", "required", convertToBoolean], checked: [i0.ɵɵInputFlags.None, "p-checked", "checked"] }, outputs: { changeSelected: "p-change-selected" }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoRadioComponent),
                    multi: true
                }
            ]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 7, consts: [[1, "po-radio"], ["radio", ""], [3, "click", "keydown"], ["type", "radio", 3, "checked", "disabled", "name", "required", "value"], ["radioInput", ""], [3, "p-disabled", "p-label", 4, "ngIf"], [3, "p-disabled", "p-label"]], template: function PoRadioComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "label", 2);
            i0.ɵɵlistener("click", function PoRadioComponent_Template_label_click_2_listener() { return ctx.eventClick(); })("keydown", function PoRadioComponent_Template_label_keydown_2_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelement(3, "input", 3, 4);
            i0.ɵɵtemplate(5, PoRadioComponent_po_label_5_Template, 1, 2, "po-label", 5);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            let tmp_2_0;
            let tmp_4_0;
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("checked", ctx.checked)("disabled", ctx.disabled)("name", (tmp_2_0 = ctx.name) !== null && tmp_2_0 !== undefined ? tmp_2_0 : "po-input-radio")("required", ctx.required)("value", (tmp_4_0 = ctx.radioValue) !== null && tmp_4_0 !== undefined ? tmp_4_0 : "");
            i0.ɵɵattribute("p-size", ctx.size);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.label);
        } }, dependencies: [i1.NgIf, PoLabelComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioComponent, [{
        type: Component,
        args: [{ selector: 'po-radio', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoRadioComponent),
                        multi: true
                    }
                ], template: "<div #radio class=\"po-radio\">\n  <label (click)=\"eventClick()\" (keydown)=\"onKeyDown($event)\">\n    <input\n      #radioInput\n      type=\"radio\"\n      [attr.p-size]=\"size\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [name]=\"name ?? 'po-input-radio'\"\n      [required]=\"required\"\n      [value]=\"radioValue ?? ''\"\n    />\n    <po-label *ngIf=\"label\" [p-disabled]=\"disabled\" [p-label]=\"label\"></po-label>\n  </label>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { radio: [{
            type: ViewChild,
            args: ['radio', { static: true }]
        }], radioInput: [{
            type: ViewChild,
            args: ['radioInput', { static: true }]
        }], radioValue: [{
            type: Input,
            args: ['p-value']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], required: [{
            type: Input,
            args: [{ alias: 'p-required', transform: convertToBoolean }]
        }], checked: [{
            type: Input,
            args: ['p-checked']
        }], changeSelected: [{
            type: Output,
            args: ['p-change-selected']
        }], focusOut: [{
            type: HostListener,
            args: ['focusout', ['$event.target']]
        }], onKeyup: [{
            type: HostListener,
            args: ['keyup', ['$event.target']]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event.target']]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRadioComponent, { className: "PoRadioComponent", filePath: "lib/components/po-field/po-radio/po-radio.component.ts", lineNumber: 34 }); })();

const _c0$16 = ["inp"];
const _c1$v = ["inputRadio"];
function PoRadioGroupComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "po-radio", 5, 6);
    i0.ɵɵlistener("keyup", function PoRadioGroupComponent_div_4_Template_po_radio_keyup_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r2 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onKeyUp($event, option_r2.value)); })("click", function PoRadioGroupComponent_div_4_Template_po_radio_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r2 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.eventClick(option_r2.value, option_r2.disabled === true || ctx_r6.disabled)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate2("po-radio-group-item po-md-", ctx_r1.mdColumns, " po-lg-", ctx_r1.columns, "");
    i0.ɵɵadvance();
    i0.ɵɵproperty("name", ctx_r1.name)("p-checked", ctx_r1.value === option_r2.value)("p-disabled", option_r2.disabled === true || ctx_r1.disabled)("p-label", option_r2.label)("p-required", ctx_r1.required)("p-size", ctx_r1.size)("p-value", option_r2.value);
} }
/**
 * @docsExtends PoRadioGroupBaseComponent
 *
 * @example
 *
 * <example name="po-radio-group-basic" title="PO Radio Group Basic">
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-labs" title="PO Radio Group Labs">
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator" title="PO Radio Group - Translator">
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator-reactive-form" title="PO Radio Group - Translator Reactive Form">
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
class PoRadioGroupComponent extends PoRadioGroupBaseComponent {
    cd;
    /** Label do campo. */
    label;
    /** Texto de apoio do campo. */
    help;
    inputEl;
    radioLabels;
    differ;
    constructor(differs, cd) {
        super();
        this.cd = cd;
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
        this.cd.markForCheck();
    }
    eventClick(value, disabled) {
        if (!disabled) {
            this.onTouched?.();
            this.changeValue(value);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     */
    focus() {
        if (this.radioLabels && !this.disabled) {
            const radioLabel = this.radioLabels.find((_, index) => !this.options[index].disabled);
            if (radioLabel) {
                radioLabel.focus();
            }
        }
    }
    getElementByValue(value) {
        return this.inputEl.nativeElement.querySelector(`input[value='${value}']`);
    }
    onKeyUp(event, value) {
        const key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    }
    isArrowKey(key) {
        return key >= 37 && key <= 40;
    }
    static ɵfac = function PoRadioGroupComponent_Factory(t) { return new (t || PoRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRadioGroupComponent, selectors: [["po-radio-group"]], viewQuery: function PoRadioGroupComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$16, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$v, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioLabels = _t);
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoRadioGroupComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoRadioGroupComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 10, consts: [[3, "p-disabled", "p-help", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["role", "radiogroup", 1, "po-radio-group"], ["inp", ""], [3, "class", 4, "ngFor", "ngForOf"], [3, "name", "p-checked", "p-disabled", "p-label", "p-required", "p-size", "p-value", "keyup", "click"], ["inputRadio", ""]], template: function PoRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵtemplate(4, PoRadioGroupComponent_div_4_Template, 3, 11, "div", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(5, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-help", ctx.help)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance();
            i0.ɵɵattribute("aria-label", ctx.label)("data-options", ctx.options.length);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.options);
        } }, dependencies: [i1.NgForOf, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoRadioComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoRadioGroupComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoRadioGroupComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\" [attr.name]=\"name\">\n    <div #inp class=\"po-radio-group\" role=\"radiogroup\" [attr.aria-label]=\"label\" [attr.data-options]=\"options.length\">\n      <div *ngFor=\"let option of options\" class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n        <po-radio\n          #inputRadio\n          [name]=\"name\"\n          [p-checked]=\"value === option.value\"\n          [p-disabled]=\"option.disabled === true || disabled\"\n          [p-label]=\"option.label\"\n          [p-required]=\"required\"\n          [p-size]=\"size\"\n          [p-value]=\"option.value\"\n          (keyup)=\"onKeyUp($event, option.value)\"\n          (click)=\"eventClick(option.value, option.disabled === true || disabled)\"\n        >\n        </po-radio>\n      </div>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }], { label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], radioLabels: [{
            type: ViewChildren,
            args: ['inputRadio']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRadioGroupComponent, { className: "PoRadioGroupComponent", filePath: "lib/components/po-field/po-radio-group/po-radio-group.component.ts", lineNumber: 67 }); })();

class PoRadioModule {
    static ɵfac = function PoRadioModule_Factory(t) { return new (t || PoRadioModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoRadioModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoLabelModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioModule, [{
        type: NgModule,
        args: [{
                declarations: [PoRadioComponent],
                exports: [PoRadioComponent],
                imports: [CommonModule, FormsModule, PoLabelModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoRadioModule, { declarations: [PoRadioComponent], imports: [CommonModule, FormsModule, PoLabelModule], exports: [PoRadioComponent] }); })();

/**
 * @description
 *
 * Módulo do componente `po-radio-group`.
 */
class PoRadioGroupModule {
    static ɵfac = function PoRadioGroupModule_Factory(t) { return new (t || PoRadioGroupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoRadioGroupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoRadioModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, PoFieldContainerModule, PoRadioModule],
                exports: [PoRadioGroupComponent],
                declarations: [PoRadioGroupComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoRadioGroupModule, { declarations: [PoRadioGroupComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoRadioModule], exports: [PoRadioGroupComponent] }); })();

/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
class PoCleanBaseComponent {
    /** Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizará o po-clean. */
    inputRef;
    /** Valor que será atribuído ao campo quando for clicado no po-clean. */
    defaultValue = '';
    /**
     * @optional
     *
     * @description
     *
     *
     * Evento disparado quando executada ação do po-clean.
     * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
     * e provavelmente será preciso emitir o evento para atualizar o model.
     */
    changeEvent = new EventEmitter();
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return this.defaultValue !== this.getInputValue();
    }
    static ɵfac = function PoCleanBaseComponent_Factory(t) { return new (t || PoCleanBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCleanBaseComponent, inputs: { inputRef: [i0.ɵɵInputFlags.None, "p-element-ref", "inputRef"], defaultValue: [i0.ɵɵInputFlags.None, "p-default-value", "defaultValue"] }, outputs: { changeEvent: "p-change-event" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanBaseComponent, [{
        type: Directive
    }], null, { inputRef: [{
            type: Input,
            args: ['p-element-ref']
        }], defaultValue: [{
            type: Input,
            args: ['p-default-value']
        }], changeEvent: [{
            type: Output,
            args: ['p-change-event']
        }] }); })();

function PoCleanComponent_po_icon_0_Template(rf, ctx) { if (rf & 1) {
    const _r2 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 1);
    i0.ɵɵlistener("click", function PoCleanComponent_po_icon_0_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.clear()); });
    i0.ɵɵelementEnd();
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoCleanBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-clean-labs" title="PO Clean Labs">
 *   <file name="sample-po-clean-labs.component.html"> </file>
 *   <file name="sample-po-clean-labs.component.ts"> </file>
 * </example-private>
 */
class PoCleanComponent extends PoCleanBaseComponent {
    setInputValue(value) {
        if (this.inputRef && this.inputRef.nativeElement) {
            this.inputRef.nativeElement.value = value;
        }
    }
    getInputValue() {
        if (this.inputRef && this.inputRef.nativeElement) {
            return this.inputRef.nativeElement.value;
        }
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoCleanComponent_BaseFactory; return function PoCleanComponent_Factory(t) { return (ɵPoCleanComponent_BaseFactory || (ɵPoCleanComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoCleanComponent)))(t || PoCleanComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCleanComponent, selectors: [["po-clean"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["p-icon", "ICON_CLEAR_CONTENT po-field-icon", 3, "click", 4, "ngIf"], ["p-icon", "ICON_CLEAR_CONTENT po-field-icon", 3, "click"]], template: function PoCleanComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoCleanComponent_po_icon_0_Template, 1, 0, "po-icon", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.showIcon());
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanComponent, [{
        type: Component,
        args: [{ selector: 'po-clean', template: "<po-icon p-icon=\"ICON_CLEAR_CONTENT po-field-icon\" *ngIf=\"showIcon()\" (click)=\"clear()\"> </po-icon>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoCleanComponent, { className: "PoCleanComponent", filePath: "lib/components/po-field/po-clean/po-clean.component.ts", lineNumber: 21 }); })();

/**
 * @description
 *
 * Módulo do componente `po-clean`.
 */
class PoCleanModule {
    static ɵfac = function PoCleanModule_Factory(t) { return new (t || PoCleanModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCleanModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule],
                exports: [PoCleanComponent],
                declarations: [PoCleanComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCleanModule, { declarations: [PoCleanComponent], imports: [CommonModule, PoIconModule], exports: [PoCleanComponent] }); })();

/**
 * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
class PoMask {
    mask = '';
    formatModel = false;
    // controle de posição
    initialPosition = 0;
    finalPosition = 0;
    pattern = '';
    get getPattern() {
        return this.pattern;
    }
    valueToInput;
    get getValueToInput() {
        return this.valueToInput;
    }
    set setValueToInput(value) {
        this.valueToInput = value;
    }
    valueToModel;
    get getValueToModel() {
        return this.valueToModel;
    }
    set setValueToModel(value) {
        this.valueToModel = value;
    }
    formattingEnds;
    constructor(mask, formatModel) {
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    keyup($event) {
        if (this.mask) {
            const value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    }
    setPositionNotShiftKey($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    }
    setSelectionRange($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    }
    keydown($event) {
        if (this.mask) {
            let value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey ||
                ($event.metaKey && $event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) ||
                $event.keyCode === 16 ||
                $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default:
                        // qualquer outra tecla válida
                        this.getPosition($event);
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    }
    clearRangeSelection(value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    }
    // passa a posição do click para o controle de posição
    click($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    }
    blur($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            let value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    }
    revertPositions(initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            const tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    }
    // reseta o controle de posição
    resetPositions($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    }
    // posiciona o cursor de acordo com o controle de posição
    setPositions($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    }
    // muda a posição do cursor e atualiza o controle de posição
    changePosition($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    }
    getPosition($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    }
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    controlFormatting(value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        let valueProcessed;
        let maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        const arrMasks = [];
        let contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    }
    // Função que formata a máscara com o valor passado
    formatValue(value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        const guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        let contGuide = 0;
        // String final formatada
        let valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (let i = 0; i < value.length; i++) {
            const charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    }
    // verifica se tem algum caracter de mascara antes do cursor
    checkMaskBefore($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    }
    // verifica se tem algum caracter de mascara depois do cursor
    checkMaskAfter($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    }
    // Retorna a máscara sem um valor opcional
    replaceOptionalNumber(mask) {
        let i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    }
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    isFixedCharacterGuide(key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    }
    // Retorna caracteres permitidos somente na máscara \/() +-
    getFixedCharacterGuide() {
        return /[\\\/() +-.\:]/g;
    }
    // Caracteres permitidos de serem digitados
    listValidKeys() {
        return /[a-zA-Z0-9]/g;
    }
    // Se é um dígito válido
    isKeyValid(keyCode) {
        return this.isKeyCodeValid(keyCode);
    }
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    isKeyCodeValid(keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            keyCode === 8 ||
            keyCode === 9 ||
            keyCode === 46);
    }
    // Se está de acordo com a máscara
    isKeyValidMask(key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    }
    // Retorna se a chave foi aprovada pela expressão regular
    testRegex(key, regex) {
        return regex.test(key);
    }
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    removeFormattingValue(value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    }
    // Verifica se contém valor opcional na máscara 0-9?
    hasOptionalNumber(mask) {
        return mask.match(/\d\?/g);
    }
    // Retorna a expressão regular correspondente ao comando passado
    replaceMask(char) {
        let regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    }
    getRegexFromMask(mask) {
        if (mask) {
            let pattern;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    }
}

/**
 * @usedBy PoDatepickerComponent
 *
 * @description
 *
 * *Enum* que define o padrão de formatação das datas.
 *
 * > Caso um formato padrão seja definido, o mesmo não será mais alterado de acordo com o formato de entrada.
 */
var PoDatepickerIsoFormat;
(function (PoDatepickerIsoFormat) {
    /** Padrão **E8601DAw** (*yyyy-mm-dd*). */
    PoDatepickerIsoFormat["Basic"] = "basic";
    /** Padrão **E8601DZw** (*yyyy-mm-ddThh:mm:ss+|-hh:mm*). */
    PoDatepickerIsoFormat["Extended"] = "extended";
})(PoDatepickerIsoFormat || (PoDatepickerIsoFormat = {}));

const poDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * @description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
 * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: Só é possível realizar alterações ao adicionar a classe `.po-input`
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                     |
 * |----------------------------------------|-------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                  |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                       |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                       |
 * | `--text-color-placeholder` &nbsp;      | Cor principal do texto do placeholder                 | `var(--color-neutral-light-30)`                  |
 * | `--color`                              | Cor principal do datepicker                           | `var(--color-neutral-dark-70)`                   |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                  |
 * | `--padding`                            | Preenchimento                                         | `0 0.5rem`                                       |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                   |
 * | **Hover**                              |                                                       |                                                  |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-dark)`                     |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                 |
 * | **Focused**                            |                                                       |                                                  |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                    |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                      |
 * | **Disabled**                           |                                                       |                                                  |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-light-30)`                  |
 * | `--background-disabled`                | Cor de background no estado disabled &nbsp;           | `var(--color-neutral-light-20)`                  |
 * | `--text-color-disabled`                | Cor do texto no estado disabled                       | `var(--color-neutral-dark-70)`                   |
 *
 */
class PoDatepickerBaseComponent {
    languageService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /* Nome do componente datepicker. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * Mensagem apresentada quando a data for inválida ou fora do período.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
     */
    errorPattern = '';
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao sair do campo.
     */
    onblur = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    onchange = new EventEmitter();
    offset;
    firstStart = true;
    hour = 'T00:00:00-00:00';
    isExtendedISO = false;
    objMask;
    onChangeModel = null;
    validatorChange;
    onTouchedModel = null;
    shortLanguage;
    _format = poDatepickerFormatDefault;
    _isoFormat;
    _maxDate;
    _minDate;
    _noAutocomplete = false;
    _placeholder = '';
    previousValue;
    _date;
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     */
    set placeholder(placeholder) {
        this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /** Desabilita o campo. */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    disabled = false;
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    /** Torna o elemento somente leitura. */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    readonly = false;
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    required = false;
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /** Habilita ação para limpar o campo. */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    clean = false;
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição da data.
     *
     * Valores válidos:
     *  - `dd/mm/yyyy`
     *  - `mm/dd/yyyy`
     *  - `yyyy/mm/dd`
     *
     * @default `dd/mm/yyyy`
     */
    set format(value) {
        if (value) {
            value = value.toLowerCase();
            if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                this._format = value;
                this.objMask = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
                this.refreshValue(this.date);
                return;
            }
        }
        this._format = poDatepickerFormatDefault;
        this.objMask = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
    }
    get format() {
        return this._format;
    }
    /**
     * @optional
     *
     * @description
     *
     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
     *
     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
     */
    set isoFormat(value) {
        if (Object.values(PoDatepickerIsoFormat).includes(value)) {
            this._isoFormat = value;
            this.isExtendedISO = value === PoDatepickerIsoFormat.Extended;
        }
    }
    get isoFormat() {
        return this._isoFormat;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do Datepicker.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    _locale;
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
            this.objMask = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
        else {
            this._locale = this.shortLanguage;
            this.objMask = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
        this.refreshValue(this.date);
    }
    get locale() {
        return this._locale || this.shortLanguage;
    }
    constructor(languageService) {
        this.languageService = languageService;
    }
    set date(value) {
        this._date = typeof value === 'string' ? convertIsoToDate(value, false, false) : value;
    }
    get date() {
        return this._date;
    }
    ngOnInit() {
        this.offset = new Date().getTimezoneOffset();
        this.formatTimezoneAndHour(this.offset);
        // Classe de máscara
        this.objMask = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
    }
    // Converte um objeto string em Date
    getDateFromString(dateString) {
        const day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        const month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        const year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        const date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day ? date : null;
    }
    // Formata a data.
    formatToDate(value) {
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    // Método responsável por controlar o modelo.
    controlModel(date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    }
    // Executa a função onChange
    callOnChange(value, retry = true) {
        if (this.onChangeModel && value !== this.previousValue) {
            this.onChangeModel(value);
            this.previousValue = value;
        }
        else if (retry) {
            setTimeout(() => this.callOnChange(value, false));
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern =
            this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return {
                date: {
                    valid: false
                }
            };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (this.date && !validateDateRange(this.date, this._minDate, this._maxDate)) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask(format = this.format) {
        let mask = format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
    formatTimezoneAndHour(offset) {
        const offsetAbsolute = Math.abs(offset);
        const timezone = (offset < 0 ? '+' : '-') +
            ('00' + Math.floor(offsetAbsolute / 60)).slice(-2) +
            ':' +
            ('00' + (offsetAbsolute % 60)).slice(-2);
        this.hour = 'T00:00:00' + timezone;
    }
    static ɵfac = function PoDatepickerBaseComponent_Factory(t) { return new (t || PoDatepickerBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDatepickerBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], name: "name", optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], errorPattern: [i0.ɵɵInputFlags.None, "p-error-pattern", "errorPattern"], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], setDisabled: [i0.ɵɵInputFlags.None, "p-disabled", "setDisabled"], setReadonly: [i0.ɵɵInputFlags.None, "p-readonly", "setReadonly"], setRequired: [i0.ɵɵInputFlags.None, "p-required", "setRequired"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], setClean: [i0.ɵɵInputFlags.None, "p-clean", "setClean"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], format: [i0.ɵɵInputFlags.None, "p-format", "format"], isoFormat: [i0.ɵɵInputFlags.None, "p-iso-format", "isoFormat"], locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"] }, outputs: { onblur: "p-blur", onchange: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], name: [{
            type: Input,
            args: ['name']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], errorPattern: [{
            type: Input,
            args: ['p-error-pattern']
        }], onblur: [{
            type: Output,
            args: ['p-blur']
        }], onchange: [{
            type: Output,
            args: ['p-change']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], setDisabled: [{
            type: Input,
            args: ['p-disabled']
        }], setReadonly: [{
            type: Input,
            args: ['p-readonly']
        }], setRequired: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], setClean: [{
            type: Input,
            args: ['p-clean']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], format: [{
            type: Input,
            args: ['p-format']
        }], isoFormat: [{
            type: Input,
            args: ['p-iso-format']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }] }); })();

const PoDatepickerLiterals = {
    en: {
        open: 'Open calendar'
    },
    es: {
        open: 'Calendario abierto'
    },
    pt: {
        open: 'Abrir calendário'
    },
    ru: {
        open: 'открытый календарь'
    }
};

const _c0$15 = ["calendar"];
const _c1$u = ["dialogPicker"];
const _c2$f = ["iconDatepicker"];
const _c3$9 = ["inp"];
function PoDatepickerComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 14);
    i0.ɵɵlistener("p-change-event", function PoDatepickerComponent_po_clean_6_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.clear()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
} }
function PoDatepickerComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 15);
} }
const poCalendarContentOffset$1 = 8;
const poCalendarPositionDefault$1 = 'bottom-left';
/**
 * @docsExtends PoDatepickerBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-basic" title="PO Datepicker Basic">
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-labs" title="PO Datepicker Labs">
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare" title="PO Datepicker - Airfare">
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare-reactive-form" title="PO Datepicker - Airfare Reactive Form">
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
class PoDatepickerComponent extends PoDatepickerBaseComponent {
    languageService;
    controlPosition;
    renderer;
    calendar;
    dialogPicker;
    iconDatepicker;
    inputEl;
    /** Rótulo do campo. */
    label;
    /** Texto de apoio do campo. */
    help;
    el;
    hour;
    id = `po-datepicker[${uuid()}]`;
    visible = false;
    literals;
    eventListenerFunction;
    eventResizeListener;
    clickListener;
    dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
    isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
        '(?:0[1-9]|1[0-2])-' +
        '(?:0[1-9]|[12]\\d|3[01])' +
        'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
        '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
        '(?:|:?[0-5]\\d)$');
    timeoutChange;
    valueBeforeChange;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    constructor(languageService, controlPosition, renderer, el) {
        super(languageService);
        this.languageService = languageService;
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.shortLanguage = this.languageService.getShortLanguage();
        this.el = el;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...PoDatepickerLiterals[language]
        };
    }
    onKeyup($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    }
    onKeydown($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    }
    ngAfterViewInit() {
        this.setDialogPickerStyleDisplay('none');
        if (this.autoFocus) {
            this.focus();
        }
        this.renderer.setAttribute(this.iconDatepicker.buttonElement.nativeElement, 'aria-label', this.literals.open);
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    togglePicker() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.visible) {
            this.setCalendarPosition();
            this.initializeListeners();
            this.visible = true;
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    }
    dateSelected() {
        this.onTouchedModel?.();
        if (!this.verifyMobile()) {
            this.inputEl.nativeElement.focus();
        }
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.controlChangeEmitter();
        this.closeCalendar();
    }
    // Esconde Picker quando for clicado fora
    wasClickedOnPicker(event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.buttonElement.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    clear() {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    }
    eventOnBlur($event) {
        this.onTouchedModel?.();
        const date = this.inputEl.nativeElement.value;
        const newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = null;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    }
    eventOnClick($event) {
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(() => this.togglePicker(), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    }
    onKeyPress(event) {
        if (isKeyCodeEnter(event) || isKeyCodeSpace(event)) {
            this.togglePicker();
        }
    }
    formatToDate(value) {
        if (!value) {
            return undefined;
        }
        let dateFormatted = replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale));
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    refreshValue(value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                const dateString = value.toString();
                this.hour =
                    'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidExtendedIso(value)) {
                    this.hour = value.substring(10, 25);
                }
                if (this.isoFormat === undefined) {
                    this.isExtendedISO = this.isValidExtendedIso(value);
                }
                const day = parseInt(value.substring(8, 10), 10);
                const month = parseInt(value.substring(5, 7), 10) - 1;
                const year = parseInt(value.substring(0, 4), 10);
                const dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
            this.callOnChange(this.date, false);
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    }
    isValidDateIso(value) {
        return this.dateRegex.test(value);
    }
    isValidExtendedIso(value) {
        return this.isoRegex.test(value);
    }
    hasOverlayClass(element) {
        return element.classList.contains('po-datepicker-calendar-overlay');
    }
    /* istanbul ignore next */
    verifyMobile() {
        return isMobile();
    }
    closeCalendar() {
        this.visible = false;
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    }
    controlChangeEmitter() {
        const dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.onchange.emit(dateModelFormatted);
            }, 200);
        }
    }
    hasAttrCalendar(element) {
        const attrCalendar = 'attr-calendar';
        return ((element && element.hasAttribute(attrCalendar)) ||
            (element.parentElement && element.parentElement.hasAttribute(attrCalendar)));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.closeCalendar();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onScroll = () => {
        this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
    };
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setDialogPickerStyleDisplay(value) {
        this.dialogPicker.nativeElement.style.display = value;
    }
    setCalendarPosition() {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset$1, this.inputEl, ['top-left', 'top-right', 'bottom-left', 'bottom-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
    }
    static ɵfac = function PoDatepickerComponent_Factory(t) { return new (t || PoDatepickerComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDatepickerComponent, selectors: [["po-datepicker"]], viewQuery: function PoDatepickerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$15, 7);
            i0.ɵɵviewQuery(_c1$u, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$f, 5);
            i0.ɵɵviewQuery(_c3$9, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogPicker = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconDatepicker = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, hostBindings: function PoDatepickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("keyup", function PoDatepickerComponent_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); })("keydown", function PoDatepickerComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoDatepickerComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoDatepickerComponent),
                    multi: true
                },
                PoControlPositionService
            ]), i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 29, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content", "po-field-container-content-datepicker"], [1, "po-field-container-input"], ["type", "text", 1, "po-input", "po-datepicker", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "blur", "click"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-element-ref", "p-change-event", 4, "ngIf"], ["p-icon", "ICON_CALENDAR", "p-kind", "tertiary", 1, "po-datepicker-button", 3, "p-disabled", "keydown", "p-click"], ["iconDatepicker", ""], ["dialogPicker", ""], ["class", "po-datepicker-calendar-overlay", 4, "ngIf"], [3, "ngModel", "p-max-date", "p-min-date", "p-locale", "ngModelChange", "p-change"], ["calendar", ""], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-icon-input", 3, "p-element-ref", "p-change-event"], [1, "po-datepicker-calendar-overlay"]], template: function PoDatepickerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2)(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoDatepickerComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoDatepickerComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoDatepickerComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "po-button", 7, 8);
            i0.ɵɵlistener("keydown", function PoDatepickerComponent_Template_po_button_keydown_7_listener($event) { return ctx.onKeyPress($event); })("p-click", function PoDatepickerComponent_Template_po_button_p_click_7_listener() { return ctx.togglePicker(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(9, "div", null, 9);
            i0.ɵɵtemplate(11, PoDatepickerComponent_div_11_Template, 1, 0, "div", 10);
            i0.ɵɵelementStart(12, "po-calendar", 11, 12);
            i0.ɵɵtwoWayListener("ngModelChange", function PoDatepickerComponent_Template_po_calendar_ngModelChange_12_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.date, $event) || (ctx.date = $event); return $event; });
            i0.ɵɵlistener("p-change", function PoDatepickerComponent_Template_po_calendar_p_change_12_listener() { return ctx.dateSelected(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(14, "po-field-container-bottom", 13);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(4);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(3);
            i0.ɵɵclassProp("po-input-icon-right", ctx.clean && _r0.value);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-disabled", ctx.disabled || ctx.readonly);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-datepicker-popup-calendar", !ctx.verifyMobile());
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.verifyMobile());
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-datepicker-calendar-mobile", ctx.verifyMobile());
            i0.ɵɵtwoWayProperty("ngModel", ctx.date);
            i0.ɵɵproperty("p-max-date", ctx.maxDate)("p-min-date", ctx.minDate)("p-locale", ctx.locale);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoCleanComponent, PoCalendarComponent, PoButtonComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerComponent, [{
        type: Component,
        args: [{ selector: 'po-datepicker', providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoDatepickerComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoDatepickerComponent),
                        multi: true
                    },
                    PoControlPositionService
                ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content po-field-container-content-datepicker\">\n    <div class=\"po-field-container-input\">\n      <input\n        #inp\n        class=\"po-input po-datepicker\"\n        [class.po-input-icon-right]=\"clean && inp.value\"\n        type=\"text\"\n        [attr.name]=\"name\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [id]=\"id\"\n        [placeholder]=\"disabled ? '' : placeholder\"\n        [readonly]=\"readonly\"\n        [required]=\"required\"\n        (blur)=\"eventOnBlur($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n      <div class=\"po-field-icon-container-right\">\n        <po-clean\n          class=\"po-icon-input\"\n          *ngIf=\"clean && !disabled && !readonly\"\n          [p-element-ref]=\"inputEl\"\n          (p-change-event)=\"clear()\"\n        >\n        </po-clean>\n      </div>\n    </div>\n    <po-button\n      #iconDatepicker\n      class=\"po-datepicker-button\"\n      p-icon=\"ICON_CALENDAR\"\n      p-kind=\"tertiary\"\n      [p-disabled]=\"disabled || readonly\"\n      (keydown)=\"onKeyPress($event)\"\n      (p-click)=\"togglePicker()\"\n    >\n    </po-button>\n  </div>\n\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <div *ngIf=\"verifyMobile()\" class=\"po-datepicker-calendar-overlay\"></div>\n    <po-calendar\n      [class.po-datepicker-calendar-mobile]=\"verifyMobile()\"\n      #calendar\n      [(ngModel)]=\"date\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      [p-locale]=\"locale\"\n      (p-change)=\"dateSelected()\"\n    >\n    </po-calendar>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorPattern()\"\n  ></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: PoLanguageService }, { type: PoControlPositionService }, { type: i0.Renderer2 }, { type: i0.ElementRef }], { calendar: [{
            type: ViewChild,
            args: ['calendar', { static: true }]
        }], dialogPicker: [{
            type: ViewChild,
            args: ['dialogPicker', { read: ElementRef, static: true }]
        }], iconDatepicker: [{
            type: ViewChild,
            args: ['iconDatepicker']
        }], inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], onKeyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDatepickerComponent, { className: "PoDatepickerComponent", filePath: "lib/components/po-field/po-datepicker/po-datepicker.component.ts", lineNumber: 80 }); })();

/**
 * @description
 *
 * Módulo do componente `po-datepicker`.
 */
class PoDatepickerModule {
    static ɵfac = function PoDatepickerModule_Factory(t) { return new (t || PoDatepickerModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDatepickerModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule, PoButtonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule, PoButtonModule],
                exports: [PoDatepickerComponent],
                declarations: [PoDatepickerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDatepickerModule, { declarations: [PoDatepickerComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule, PoButtonModule], exports: [PoDatepickerComponent] }); })();

const poModalLiterals = {
    en: {
        close: 'Close'
    },
    es: {
        close: 'Cerrar'
    },
    pt: {
        close: 'Fechar'
    },
    ru: {
        close: 'Закрыть'
    }
};

/**
 * @description
 *
 * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
 * `po-table` e os demais componentes do PO.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado e / ou definir o botão com o tipo *danger*. Também é possível utilizar
 * o componente [`PoModalFooter`](/documentation/po-modal-footer).
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                                  | Descrição                                             | Valor Padrão                                     |
 * |----------------------------------------------|-------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                           |                                                       |                                                  |
 * | `--border-radius` &nbsp;                     | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                        |
 * | `--border-width` &nbsp;                      | Contém o valor da largura dos cantos do elemento&nbsp;| `var(--border-width-sm)`                         |
 * | `--border-color` &nbsp;                      | Cor da borda                                          | `var(--color-neutral-light-20)`                  |
 * | `--background` &nbsp;                        | Cor de background                                     | `var(--color-neutral-light-00)`                  |
 * | `--shadow` &nbsp;                            | Contém o valor da sombra do elemento                  | `var(--shadow-md)`                               |
 * | `--color-overlay` &nbsp;                     | Cor da camada visual temporária                       | `var(--color-neutral-dark-80)`                   |
 * | `--opacity-overlay` &nbsp;                   | Opacidade da camada visual temporária &nbsp;          | `0.7`                                            |
 * | `--color-divider` &nbsp;                     | Cor das divisões do modal                             | `var(--color-neutral-light-20)`                  |
 *
 */
class PoModalBaseComponent {
    /** Título da modal. */
    title;
    /** Evento disparado ao fechar o modal. */
    closeModal = new EventEmitter();
    /**
     * Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da primeira ação.
     * Caso esta propriedade não seja definida ou esteja incompleta, automaticamente será adicionado um botão de ação com
     * a função de fechar a modal.
     */
    primaryAction;
    /** Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da segunda ação. */
    secondaryAction;
    language;
    literals;
    // Controla se a modal fica oculto ou visível, por padrão é oculto
    isHidden = true;
    // Event emmiter para quando a modal é fechada pelo 'X'.
    onXClosed = new EventEmitter();
    _hideClose = false;
    _size = 'md';
    /**
     * Define o tamanho da modal.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra grande)
     *  - `auto` (automático)
     *
     * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
     * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Define o fechamento da modal ao clicar fora da mesma.
     * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    clickOut = false;
    set setClickOut(value) {
        this.clickOut = value === '' ? false : convertToBoolean(value);
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o ícone de fechar do cabeçalho da modal.
     *
     * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
     *
     * @default `false`
     */
    set hideClose(value) {
        this._hideClose = convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @optional
     *
     * @description
     * Ícone exibido ao lado esquerdo do label do titúlo da modal.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-modal p-icon="po-icon-user" p-title="PO Modal"></po-modal>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-modal p-icon="fa fa-podcast" p-title="PO Modal"></po-modal>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-modal [p-icon]="template" p-title="PO Modal"></po-modal>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     */
    icon;
    constructor(poLanguageService) {
        this.language = poLanguageService.getShortLanguage();
        this.literals = {
            ...poModalLiterals[this.language]
        };
    }
    /** Função para fechar a modal. */
    close(xClosed = false) {
        this.closeModal.emit();
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    }
    /** Função para abrir a modal. */
    open() {
        this.validPrimaryAction();
        this.isHidden = false;
    }
    validPrimaryAction() {
        if (!this.primaryAction) {
            this.primaryAction = {
                action: () => this.close(),
                label: this.literals.close
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = () => this.close();
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = this.literals.close;
        }
    }
    static ɵfac = function PoModalBaseComponent_Factory(t) { return new (t || PoModalBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoModalBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], primaryAction: [i0.ɵɵInputFlags.None, "p-primary-action", "primaryAction"], secondaryAction: [i0.ɵɵInputFlags.None, "p-secondary-action", "secondaryAction"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], setClickOut: [i0.ɵɵInputFlags.None, "p-click-out", "setClickOut"], hideClose: [i0.ɵɵInputFlags.None, "p-hide-close", "hideClose"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"] }, outputs: { closeModal: "p-close" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { title: [{
            type: Input,
            args: ['p-title']
        }], closeModal: [{
            type: Output,
            args: ['p-close']
        }], primaryAction: [{
            type: Input,
            args: ['p-primary-action']
        }], secondaryAction: [{
            type: Input,
            args: ['p-secondary-action']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], setClickOut: [{
            type: Input,
            args: ['p-click-out']
        }], hideClose: [{
            type: Input,
            args: ['p-hide-close']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }] }); })();

const _c0$14 = ["*"];
/**
 * @description
 *
 * O componente `po-modal-footer` pode ser utilizado para incluir os botões de ações no rodapé da [`PoModal`](/documentation/po-modal), bem como para dar liberdade ao desenvolvedor de incluir outros itens necessários.
 * > Como boa prática, deve-se observar a utilização de apenas um botão primário.
 *
 * ```
 * <po-modal p-title="Title Modal" #modal>
 *  <po-modal-footer>
 *    <po-button p-label="Close" (p-click)="modal.close()"> </po-button>
 *    <po-button p-label="Clean" (p-click)="clean()"> </po-button>
 *    <po-button p-label="Confirm" p-kind="primary" (p-click)="confirm()"> </po-button>
 *  </po-modal-footer>
 * </po-modal>
 * ```
 */
class PoModalFooterComponent {
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o alinhamento padrão, à direita, dos botões de ações que ficam no rodapé da [`PoModal`](/documentation/po-modal).
     *
     * > Caso a propriedade esteja habilitada, o alinhamento deverá ser a esquerda e pode ser personalizado.
     *
     * @default false
     */
    disabledAlign = false;
    static ɵfac = function PoModalFooterComponent_Factory(t) { return new (t || PoModalFooterComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoModalFooterComponent, selectors: [["po-modal-footer"]], inputs: { disabledAlign: [i0.ɵɵInputFlags.None, "p-disabled-align", "disabledAlign"] }, ngContentSelectors: _c0$14, decls: 2, vars: 2, consts: [[1, "po-modal-footer"]], template: function PoModalFooterComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-modal-footer-align-right", !ctx.disabledAlign);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalFooterComponent, [{
        type: Component,
        args: [{ selector: 'po-modal-footer', template: "<div class=\"po-modal-footer\" [class.po-modal-footer-align-right]=\"!disabledAlign\">\n  <ng-content></ng-content>\n</div>\n" }]
    }], null, { disabledAlign: [{
            type: Input,
            args: ['p-disabled-align']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoModalFooterComponent, { className: "PoModalFooterComponent", filePath: "lib/components/po-modal/po-modal-footer/po-modal-footer.component.ts", lineNumber: 23 }); })();

class PoActiveOverlayService {
    activeOverlay = [];
    static ɵfac = function PoActiveOverlayService_Factory(t) { return new (t || PoActiveOverlayService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoActiveOverlayService, factory: PoActiveOverlayService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoActiveOverlayService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

const _c0$13 = ["modalContent"];
const _c1$t = ["modalContainer"];
function PoModalComponent_div_0_po_icon_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 16);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-icon", ctx_r3.icon);
} }
function PoModalComponent_div_0_po_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 17);
    i0.ɵɵlistener("p-click", function PoModalComponent_div_0_po_button_12_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r8.close(true)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-aria-label", ctx_r4.literals.close);
} }
function PoModalComponent_div_0_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵprojection(1, 1);
    i0.ɵɵelementContainerEnd();
} }
function PoModalComponent_div_0_ng_template_16_po_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 21);
    i0.ɵɵlistener("p-click", function PoModalComponent_div_0_ng_template_16_po_button_2_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r11.secondaryAction.action()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-danger", ctx_r10.getSecondaryActionButtonDanger())("p-disabled", ctx_r10.secondaryAction.disabled)("p-label", ctx_r10.secondaryAction.label)("p-loading", ctx_r10.secondaryAction.loading);
} }
function PoModalComponent_div_0_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-modal-footer")(1, "div", 18);
    i0.ɵɵtemplate(2, PoModalComponent_div_0_ng_template_16_po_button_2_Template, 1, 4, "po-button", 19);
    i0.ɵɵelementStart(3, "po-button", 20);
    i0.ɵɵlistener("p-click", function PoModalComponent_div_0_ng_template_16_Template_po_button_p_click_3_listener() { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r13.primaryAction.action()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.secondaryAction);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-danger", ctx_r6.primaryAction.danger)("p-disabled", ctx_r6.primaryAction.disabled)("p-label", ctx_r6.primaryAction.label)("p-loading", ctx_r6.primaryAction.loading);
} }
function PoModalComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 1, 2);
    i0.ɵɵlistener("keydown.esc", function PoModalComponent_div_0_Template_div_keydown_esc_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.closeModalOnEscapeKey($event)); });
    i0.ɵɵelementStart(2, "div", 3);
    i0.ɵɵlistener("mousedown", function PoModalComponent_div_0_Template_div_mousedown_2_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.onClickOut($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 4)(4, "div", 5)(5, "div", 6, 7)(7, "div", 8)(8, "div", 9);
    i0.ɵɵtemplate(9, PoModalComponent_div_0_po_icon_9_Template, 1, 1, "po-icon", 10);
    i0.ɵɵelementStart(10, "div", 11);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(12, PoModalComponent_div_0_po_button_12_Template, 1, 1, "po-button", 12);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "div", 13);
    i0.ɵɵprojection(14);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(15, PoModalComponent_div_0_ng_container_15_Template, 2, 0, "ng-container", 14)(16, PoModalComponent_div_0_ng_template_16_Template, 4, 5, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const _r7 = i0.ɵɵreference(17);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵclassMapInterpolate1("po-modal-content po-modal-", ctx_r0.size, "");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r0.icon);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.title, " ");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r0.hideClose);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.modalFooter)("ngIfElse", _r7);
} }
const _c2$e = ["*", [["po-modal-footer"]]];
const _c3$8 = ["*", "po-modal-footer"];
/**
 * @docsExtends PoModalBaseComponent
 *
 * @example
 *
 * <example name="po-modal-basic" title="PO Modal Basic">
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.html"> </file>
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-labs" title="PO Modal Labs">
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.html"> </file>
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-fruits-salad" title="PO Modal - Fruits Salad">
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
class PoModalComponent extends PoModalBaseComponent {
    poActiveOverlayService;
    modalContent;
    modalContainer;
    modalFooter;
    firstElement;
    focusFunction;
    focusableElements = 'input, select, textarea, button:not([disabled]), a';
    id = uuid();
    sourceElement;
    constructor(poActiveOverlayService, poLanguageService) {
        super(poLanguageService);
        this.poActiveOverlayService = poActiveOverlayService;
    }
    close(xClosed = false) {
        this.poActiveOverlayService.activeOverlay.pop();
        super.close(xClosed);
        this.removeEventListeners();
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    }
    closeModalOnEscapeKey(event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    }
    getSecondaryActionButtonDanger() {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'true' : 'false';
    }
    onClickOut(event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    }
    open() {
        this.sourceElement = document.activeElement;
        super.open();
        this.handleFocus();
    }
    handleFocus() {
        this.poActiveOverlayService.activeOverlay.push(this.id);
        setTimeout(() => {
            if (this.modalContent) {
                this.initFocus();
                document.addEventListener('focus', this.focusFunction, true);
            }
        });
    }
    initFocus() {
        this.focusFunction = (event) => {
            const modalElement = this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) &&
                this.poActiveOverlayService.activeOverlay[this.poActiveOverlayService.activeOverlay.length - 1] === this.id) {
                event.stopPropagation();
                this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            const firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] || this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    }
    removeEventListeners() {
        document.removeEventListener('focus', this.focusFunction, true);
    }
    setFirstElement() {
        this.firstElement =
            this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    }
    static ɵfac = function PoModalComponent_Factory(t) { return new (t || PoModalComponent)(i0.ɵɵdirectiveInject(PoActiveOverlayService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoModalComponent, selectors: [["po-modal"]], contentQueries: function PoModalComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoModalFooterComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalFooter = _t.first);
        } }, viewQuery: function PoModalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$13, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$t, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalContent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalContainer = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3$8, decls: 1, vars: 1, consts: [["class", "po-modal", "tabindex", "0", 3, "keydown.esc", 4, "ngIf"], ["tabindex", "0", 1, "po-modal", 3, "keydown.esc"], ["modalContainer", ""], [1, "po-modal-overlay", 3, "mousedown"], [1, "po-modal-container", "po-pb-2", "po-pt-2"], [1, "po-modal-vertical-align"], ["tabindex", "-1"], ["modalContent", ""], [1, "po-modal-header"], [1, "po-modal-title", "po-text-ellipsis"], [3, "p-icon", 4, "ngIf"], [1, "po-text-ellipsis"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 3, "p-aria-label", "p-click", 4, "ngIf"], [1, "po-modal-body"], [4, "ngIf", "ngIfElse"], ["defaultModalFooterTemplate", ""], [3, "p-icon"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 3, "p-aria-label", "p-click"], [1, "po-modal-footer-basic"], ["p-kind", "secondary", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click", 4, "ngIf"], ["p-kind", "primary", 1, "po-button-modal-first-action", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click"], ["p-kind", "secondary", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click"]], template: function PoModalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef(_c2$e);
            i0.ɵɵtemplate(0, PoModalComponent_div_0_Template, 18, 8, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.isHidden);
        } }, dependencies: [i1.NgIf, PoButtonComponent, PoIconComponent, PoModalFooterComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalComponent, [{
        type: Component,
        args: [{ selector: 'po-modal', template: "<div #modalContainer *ngIf=\"!isHidden\" class=\"po-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\">\n  <div class=\"po-modal-overlay\" (mousedown)=\"onClickOut($event)\"></div>\n  <div class=\"po-modal-container po-pb-2 po-pt-2\">\n    <div class=\"po-modal-vertical-align\">\n      <div #modalContent class=\"po-modal-content po-modal-{{ size }}\" tabindex=\"-1\">\n        <div class=\"po-modal-header\">\n          <div class=\"po-modal-title po-text-ellipsis\">\n            <po-icon *ngIf=\"icon\" [p-icon]=\"icon\"></po-icon>\n            <div class=\"po-text-ellipsis\">\n              {{ title }}\n            </div>\n          </div>\n          <po-button\n            *ngIf=\"!hideClose\"\n            [p-aria-label]=\"literals.close\"\n            p-icon=\"ICON_CLOSE\"\n            (p-click)=\"close(true)\"\n            p-kind=\"tertiary\"\n          >\n          </po-button>\n        </div>\n\n        <div class=\"po-modal-body\">\n          <ng-content></ng-content>\n        </div>\n\n        <ng-container *ngIf=\"modalFooter; else defaultModalFooterTemplate\">\n          <ng-content select=\"po-modal-footer\"></ng-content>\n        </ng-container>\n\n        <ng-template #defaultModalFooterTemplate>\n          <po-modal-footer>\n            <div class=\"po-modal-footer-basic\">\n              <po-button\n                *ngIf=\"secondaryAction\"\n                [p-danger]=\"getSecondaryActionButtonDanger()\"\n                [p-disabled]=\"secondaryAction.disabled\"\n                [p-label]=\"secondaryAction.label\"\n                [p-loading]=\"secondaryAction.loading\"\n                p-kind=\"secondary\"\n                (p-click)=\"secondaryAction.action()\"\n              >\n              </po-button>\n\n              <po-button\n                class=\"po-button-modal-first-action\"\n                [p-danger]=\"primaryAction.danger\"\n                [p-disabled]=\"primaryAction.disabled\"\n                [p-label]=\"primaryAction.label\"\n                [p-loading]=\"primaryAction.loading\"\n                p-kind=\"primary\"\n                (p-click)=\"primaryAction.action()\"\n              >\n              </po-button>\n            </div>\n          </po-modal-footer>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: PoActiveOverlayService }, { type: PoLanguageService }], { modalContent: [{
            type: ViewChild,
            args: ['modalContent', { read: ElementRef }]
        }], modalContainer: [{
            type: ViewChild,
            args: ['modalContainer', { read: ElementRef }]
        }], modalFooter: [{
            type: ContentChild,
            args: [PoModalFooterComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoModalComponent, { className: "PoModalComponent", filePath: "lib/components/po-modal/po-modal.component.ts", lineNumber: 35 }); })();

/**
 * @description
 * Módulo do componente po-modal
 */
class PoModalModule {
    static ɵfac = function PoModalModule_Factory(t) { return new (t || PoModalModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoModalModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoButtonModule, PoIconModule],
                declarations: [PoModalComponent, PoModalFooterComponent],
                exports: [PoModalComponent, PoModalFooterComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoModalModule, { declarations: [PoModalComponent, PoModalFooterComponent], imports: [CommonModule, PoButtonModule, PoIconModule], exports: [PoModalComponent, PoModalFooterComponent] }); })();

function PoProgressBarComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 2);
    i0.ɵɵelement(1, "div", 3)(2, "div", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵattribute("aria-valuenow", ctx_r0.value);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("left", "-" + (100 - ctx_r0.value) + "%");
} }
function PoProgressBarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵelement(1, "div", 6);
    i0.ɵɵelementEnd();
} }
class PoProgressBarComponent {
    indeterminate;
    value;
    get valueScale() {
        return `${this.value / 100}`;
    }
    static ɵfac = function PoProgressBarComponent_Factory(t) { return new (t || PoProgressBarComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoProgressBarComponent, selectors: [["po-progress-bar"]], inputs: { indeterminate: [i0.ɵɵInputFlags.None, "p-indeterminate", "indeterminate"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, decls: 2, vars: 2, consts: [["role", "progressbar", "aria-valuemin", "0", "aria-valuemax", "100", "aria-live", "polite", "class", "po-progress-bar-default", 4, "ngIf"], ["class", "po-progress-bar-indeterminate-track", 4, "ngIf"], ["role", "progressbar", "aria-valuemin", "0", "aria-valuemax", "100", "aria-live", "polite", 1, "po-progress-bar-default"], [1, "po-progress-bar-element", "po-progress-bar-primary"], [1, "po-progress-bar-element", "po-progress-bar-secondary"], [1, "po-progress-bar-indeterminate-track"], [1, "po-progress-bar-indeterminate-track-bar"]], template: function PoProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoProgressBarComponent_div_0_Template, 3, 3, "div", 0)(1, PoProgressBarComponent_div_1_Template, 2, 0, "div", 1);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.indeterminate);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.indeterminate);
        } }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressBarComponent, [{
        type: Component,
        args: [{ selector: 'po-progress-bar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  *ngIf=\"!indeterminate\"\n  role=\"progressbar\"\n  [attr.aria-valuenow]=\"value\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-live=\"polite\"\n  class=\"po-progress-bar-default\"\n>\n  <div class=\"po-progress-bar-element po-progress-bar-primary\"></div>\n  <div class=\"po-progress-bar-element po-progress-bar-secondary\" [style.left]=\"'-' + (100 - value) + '%'\"></div>\n</div>\n\n<div *ngIf=\"indeterminate\" class=\"po-progress-bar-indeterminate-track\">\n  <div class=\"po-progress-bar-indeterminate-track-bar\"></div>\n</div>\n" }]
    }], null, { indeterminate: [{
            type: Input,
            args: ['p-indeterminate']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoProgressBarComponent, { className: "PoProgressBarComponent", filePath: "lib/components/po-progress/po-progress-bar/po-progress-bar.component.ts", lineNumber: 8 }); })();

/**
 * @usedBy PoProgressComponent
 *
 * @description
 *
 * *Enum* `PoProgressStatus` para os status de barra de progresso.
 */
var PoProgressStatus;
(function (PoProgressStatus) {
    /** Define o status `default` para a barra de progresso. */
    PoProgressStatus["Default"] = "default";
    /** Define o status de `error` para a barra de progresso. */
    PoProgressStatus["Error"] = "error";
    /** Define o status de `success` para a barra de progresso. */
    PoProgressStatus["Success"] = "success";
})(PoProgressStatus || (PoProgressStatus = {}));

/**
 * @usedBy PoProgressComponent
 *
 * @description
 *
 * *Enum* `PoProgressSize` para o tamanho da altura da barra de progresso.
 */
var PoProgressSize;
(function (PoProgressSize) {
    PoProgressSize["medium"] = "medium";
    PoProgressSize["large"] = "large";
})(PoProgressSize || (PoProgressSize = {}));

const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                  |
 * | **Error**                              |                                                       |                                                 |
 * | `--text-color-error`                   | Cor do texto no estado error                          | `var(--color-feedback-negative-dark)`           |
 * | `--color-icon-error`                   | Cor do ícone no estado error                          | `var(--color-feedback-negative-dark)`           |
 * | **po-progress-bar**                    |                                                       |                                                 |
 * | `--background-color-tray`              | Cor do background                                     | `var(--color-brand-01-lightest)`                |
 * | `--background-color-indicator`         | Cor do background do indicador                        | `var(--color-action-default)`                   |
 *
 */
class PoProgressBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     */
    info;
    /**
     * @optional
     *
     * @description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     */
    infoIcon;
    /**
     * @optional
     *
     * @description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * @default `PoProgressStatus.Default`
     */
    status = PoProgressStatus.Default;
    /**
     * @optional
     *
     * @description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     */
    text;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     */
    cancel = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     */
    retry = new EventEmitter();
    _indeterminate;
    _value = 0;
    _size = 'large';
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição do tamanho da altura da barra de progresso.
     *
     * Valores válidos:
     *  - `medium`: tamanho médio
     *  - `large`: tamanho grande
     *
     * @default `large`
     */
    set size(value) {
        this._size = PoProgressSize[value] ? PoProgressSize[value] : PoProgressSize.large;
    }
    get size() {
        return this._size;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a exibição da porcentagem atual da barra de progresso.
     *
     * @default `false`
     */
    showPercentage = false;
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
    static ɵfac = function PoProgressBaseComponent_Factory(t) { return new (t || PoProgressBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoProgressBaseComponent, inputs: { info: [i0.ɵɵInputFlags.None, "p-info", "info"], infoIcon: [i0.ɵɵInputFlags.None, "p-info-icon", "infoIcon"], status: [i0.ɵɵInputFlags.None, "p-status", "status"], text: [i0.ɵɵInputFlags.None, "p-text", "text"], indeterminate: [i0.ɵɵInputFlags.None, "p-indeterminate", "indeterminate"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], showPercentage: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-percentage", "showPercentage", convertToBoolean] }, outputs: { cancel: "p-cancel", retry: "p-retry" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressBaseComponent, [{
        type: Directive
    }], null, { info: [{
            type: Input,
            args: ['p-info']
        }], infoIcon: [{
            type: Input,
            args: ['p-info-icon']
        }], status: [{
            type: Input,
            args: ['p-status']
        }], text: [{
            type: Input,
            args: ['p-text']
        }], cancel: [{
            type: Output,
            args: ['p-cancel']
        }], retry: [{
            type: Output,
            args: ['p-retry']
        }], indeterminate: [{
            type: Input,
            args: ['p-indeterminate']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], showPercentage: [{
            type: Input,
            args: [{ alias: 'p-show-percentage', transform: convertToBoolean }]
        }] }); })();

const poProgressLiterals = {
    en: {
        cancel: 'Cancel',
        retry: 'Retry'
    },
    es: {
        cancel: 'Cancelar',
        retry: 'Procesar de nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        retry: 'Tentar Novamente'
    },
    ru: {
        cancel: 'Отмена',
        retry: 'Повторить попытку'
    }
};

function PoProgressComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵelement(1, "po-label", 13);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-label", ctx_r0.text);
} }
function PoProgressComponent_po_icon_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 14);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-progress-info-icon-error", ctx_r1.status === "error");
    i0.ɵɵproperty("p-icon", ctx_r1.infoIcon);
} }
function PoProgressComponent_po_icon_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 15);
} }
function PoProgressComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 16);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-progress-info-text-error", ctx_r3.status === "error");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r3.info);
} }
function PoProgressComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1("", ctx_r4.value, "%");
} }
function PoProgressComponent_po_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 17);
    i0.ɵɵlistener("p-click", function PoProgressComponent_po_button_10_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.emitRetry()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-aria-label", ctx_r5.literals.retry);
} }
function PoProgressComponent_po_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 18);
    i0.ɵɵlistener("p-click", function PoProgressComponent_po_button_11_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.emitCancellation()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-aria-label", ctx_r6.literals.cancel)("p-danger", true);
} }
/**
 * @docsExtends PoProgressBaseComponent
 *
 * @example
 * <example name="po-progress-basic" title="PO Progress Basic">
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.html"> </file>
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-labs" title="PO Progress Labs">
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.html"> </file>
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-publication" title="PO Progress - Publication">
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.html"> </file>
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.ts"> </file>
 * </example>
 */
class PoProgressComponent extends PoProgressBaseComponent {
    language;
    literals;
    get isAllowCancel() {
        return !!this.cancel.observers.length && this.status !== PoProgressStatus.Success;
    }
    get isAllowInfoError() {
        return !!(!this.infoIcon && this.info && this.status === PoProgressStatus.Error);
    }
    get isAllowRetry() {
        return !!this.retry.observers.length && this.status === PoProgressStatus.Error;
    }
    get statusClass() {
        if (this.status === PoProgressStatus.Success) {
            return 'po-progress-success';
        }
        if (this.status === PoProgressStatus.Error) {
            return 'po-progress-error';
        }
        return 'po-progress-default';
    }
    poLanguageService = inject(PoLanguageService);
    ngOnInit() {
        this.language = this.poLanguageService.getShortLanguage();
        this.literals = {
            ...poProgressLiterals[this.language]
        };
    }
    emitCancellation() {
        this.cancel.emit(this.status);
    }
    emitRetry() {
        this.retry.emit();
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoProgressComponent_BaseFactory; return function PoProgressComponent_Factory(t) { return (ɵPoProgressComponent_BaseFactory || (ɵPoProgressComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoProgressComponent)))(t || PoProgressComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoProgressComponent, selectors: [["po-progress"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 12, vars: 13, consts: [[1, "po-progress", 3, "ngClass"], ["class", "po-progress-description", 4, "ngIf"], [3, "p-indeterminate", "p-value"], [1, "po-progress-info"], [1, "po-progress-info-left"], [3, "p-icon", "po-progress-info-icon-error", 4, "ngIf"], ["p-icon", "ICON_EXCLAMATION", "class", "po-progress-info-icon-error", 4, "ngIf"], ["class", "po-progress-info-text", 3, "po-progress-info-text-error", 4, "ngIf"], [1, "po-progress-info-right"], [4, "ngIf"], ["p-icon", "ICON_REFRESH", "p-kind", "tertiary", 3, "p-aria-label", "p-click", 4, "ngIf"], ["p-icon", "ICON_CLOSE", "p-kind", "secondary", 3, "p-aria-label", "p-danger", "p-click", 4, "ngIf"], [1, "po-progress-description"], [3, "p-label"], [3, "p-icon"], ["p-icon", "ICON_EXCLAMATION", 1, "po-progress-info-icon-error"], [1, "po-progress-info-text"], ["p-icon", "ICON_REFRESH", "p-kind", "tertiary", 3, "p-aria-label", "p-click"], ["p-icon", "ICON_CLOSE", "p-kind", "secondary", 3, "p-aria-label", "p-danger", "p-click"]], template: function PoProgressComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoProgressComponent_div_1_Template, 2, 1, "div", 1);
            i0.ɵɵelement(2, "po-progress-bar", 2);
            i0.ɵɵelementStart(3, "div", 3)(4, "div", 4);
            i0.ɵɵtemplate(5, PoProgressComponent_po_icon_5_Template, 1, 3, "po-icon", 5)(6, PoProgressComponent_po_icon_6_Template, 1, 0, "po-icon", 6)(7, PoProgressComponent_span_7_Template, 2, 3, "span", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 8);
            i0.ɵɵtemplate(9, PoProgressComponent_span_9_Template, 2, 1, "span", 9)(10, PoProgressComponent_po_button_10_Template, 1, 1, "po-button", 10)(11, PoProgressComponent_po_button_11_Template, 1, 2, "po-button", 11);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", ctx.statusClass);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.text);
            i0.ɵɵadvance();
            i0.ɵɵclassMapInterpolate1("po-progress-bar po-progress-bar-", ctx.size, "");
            i0.ɵɵproperty("p-indeterminate", ctx.indeterminate)("p-value", ctx.value);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.infoIcon);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isAllowInfoError);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.info);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.showPercentage && !ctx.indeterminate);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isAllowRetry);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isAllowCancel);
        } }, dependencies: [i1.NgClass, i1.NgIf, PoButtonComponent, PoIconComponent, PoLabelComponent, PoProgressBarComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressComponent, [{
        type: Component,
        args: [{ selector: 'po-progress', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-progress\" [ngClass]=\"statusClass\">\n  <div *ngIf=\"text\" class=\"po-progress-description\">\n    <po-label [p-label]=\"text\"></po-label>\n  </div>\n\n  <po-progress-bar\n    class=\"po-progress-bar po-progress-bar-{{ size }}\"\n    [p-indeterminate]=\"indeterminate\"\n    [p-value]=\"value\"\n  >\n  </po-progress-bar>\n\n  <div class=\"po-progress-info\">\n    <div class=\"po-progress-info-left\">\n      <po-icon *ngIf=\"infoIcon\" [p-icon]=\"infoIcon\" [class.po-progress-info-icon-error]=\"status === 'error'\"></po-icon>\n      <po-icon *ngIf=\"isAllowInfoError\" p-icon=\"ICON_EXCLAMATION\" class=\"po-progress-info-icon-error\"></po-icon>\n      <span *ngIf=\"info\" class=\"po-progress-info-text\" [class.po-progress-info-text-error]=\"status === 'error'\">{{\n        info\n      }}</span>\n    </div>\n    <div class=\"po-progress-info-right\">\n      <span *ngIf=\"showPercentage && !indeterminate\">{{ value }}%</span>\n      <po-button\n        *ngIf=\"isAllowRetry\"\n        p-icon=\"ICON_REFRESH\"\n        (p-click)=\"emitRetry()\"\n        [p-aria-label]=\"literals.retry\"\n        p-kind=\"tertiary\"\n      ></po-button>\n\n      <po-button\n        *ngIf=\"isAllowCancel\"\n        p-icon=\"ICON_CLOSE\"\n        (p-click)=\"emitCancellation()\"\n        p-kind=\"secondary\"\n        [p-aria-label]=\"literals.cancel\"\n        [p-danger]=\"true\"\n      ></po-button>\n    </div>\n  </div>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoProgressComponent, { className: "PoProgressComponent", filePath: "lib/components/po-progress/po-progress.component.ts", lineNumber: 32 }); })();

/**
 * @description
 *
 * Módulo do componente `po-progress`.
 */
class PoProgressModule {
    static ɵfac = function PoProgressModule_Factory(t) { return new (t || PoProgressModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoProgressModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoIconModule, PoLabelModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoButtonModule, PoIconModule, PoLabelModule],
                exports: [PoProgressComponent],
                declarations: [PoProgressBarComponent, PoProgressComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoProgressModule, { declarations: [PoProgressBarComponent, PoProgressComponent], imports: [CommonModule, PoButtonModule, PoIconModule, PoLabelModule], exports: [PoProgressComponent] }); })();

/**
 * @description
 *
 * Módulo do serviço `po-active-overlay`.
 */
class PoActiveOverlayModule {
    static ɵfac = function PoActiveOverlayModule_Factory(t) { return new (t || PoActiveOverlayModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoActiveOverlayModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoActiveOverlayService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoActiveOverlayModule, [{
        type: NgModule,
        args: [{
                providers: [PoActiveOverlayService],
                bootstrap: []
            }]
    }], null, null); })();

class PoColorPaletteService {
    getColor(value) {
        return Object.values(PoColorPaletteEnum).includes(value.color)
            ? value.color
            : this.getColorFromType(value.type || value.color);
    }
    getColorFromType(type) {
        switch (type) {
            case 'danger':
                return PoColorPaletteEnum.Color07;
            case 'success':
                return PoColorPaletteEnum.Color11;
            case 'warning':
                return PoColorPaletteEnum.Color08;
            default:
                return PoColorPaletteEnum.Color01;
        }
    }
    static ɵfac = function PoColorPaletteService_Factory(t) { return new (t || PoColorPaletteService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorPaletteService, factory: PoColorPaletteService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorPaletteService, [{
        type: Injectable
    }], null, null); })();

/**
 * @description
 *
 * Módulo do serviço `po-color-palette`.
 */
class PoColorPaletteModule {
    static ɵfac = function PoColorPaletteModule_Factory(t) { return new (t || PoColorPaletteModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoColorPaletteModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoColorPaletteService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorPaletteModule, [{
        type: NgModule,
        args: [{
                providers: [PoColorPaletteService],
                bootstrap: []
            }]
    }], null, null); })();

class PoComponentInjectorService {
    componentResolver;
    applicationRef;
    injector;
    constructor(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    createComponentInApplication(component) {
        const componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        const domElem = componentRef.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    }
    // Destrói o componente e remove do ApplicationRef
    destroyComponentInApplication(componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    }
    static ɵfac = function PoComponentInjectorService_Factory(t) { return new (t || PoComponentInjectorService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoComponentInjectorService, factory: PoComponentInjectorService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentInjectorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }], null); })();

class PoComponentInjectorModule {
    static ɵfac = function PoComponentInjectorModule_Factory(t) { return new (t || PoComponentInjectorModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoComponentInjectorModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoComponentInjectorService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentInjectorModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [],
                exports: [],
                providers: [PoComponentInjectorService],
                bootstrap: []
            }]
    }], null, null); })();

/**
 * @description
 *
 * Módulo do serviço po-control-position.
 */
class PoControlPositionModule {
    static ɵfac = function PoControlPositionModule_Factory(t) { return new (t || PoControlPositionModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoControlPositionModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoControlPositionService] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoControlPositionModule, [{
        type: NgModule,
        args: [{
                providers: [PoControlPositionService]
            }]
    }], null, null); })();

/**
 * @docsPrivate
 *
 * @usedBy PoDialogService
 *
 * @description
 * Enums para as ações do componente po-dialog-base.service.
 */
var PoDialogType;
(function (PoDialogType) {
    // Enum para alert
    PoDialogType[PoDialogType["Alert"] = 0] = "Alert";
    // Enum para confirm
    PoDialogType[PoDialogType["Confirm"] = 1] = "Confirm";
})(PoDialogType || (PoDialogType = {}));

const poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
const poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
class PoDialogComponent {
    // ViewChild para o uso do po-modal.component
    poModal;
    // Title do poModal
    title;
    // Message do poModal
    message;
    // Objeto primary do poModal
    primaryAction = { label: 'ok', action: () => { } };
    // Objeto secondary do poModal
    secondaryAction;
    // Callback executado ao fechar o poModal
    closeAction;
    // Literais usadas nos botão de alerta do poModal
    literalsAlert;
    // Literais usadas nos botões de confirmação do poModal
    literalsConfirm;
    // Atributo para armazenar a referencia do componente criado via serviço.
    componentRef;
    closeSubscription;
    language;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.closeSubscription = this.poModal.onXClosed.subscribe(close => this.close(true));
    }
    // Fecha o poModal
    close(xClosed = false) {
        if (xClosed && this.closeAction) {
            this.closeAction();
        }
        this.poModal.close();
        this.destroy();
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o poModal
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction, closeAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                }
            };
        }
        this.closeAction = closeAction;
    }
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel, dialogOptions.close);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    }
    setDialogLiterals(dialogOptions, dialogType) {
        const alertLiterals = poDialogAlertLiteralsDefault;
        const confirmLiterals = poDialogConfirmLiteralsDefault;
        const literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = { ...alertLiterals[poLocaleDefault], ...alertLiterals[this.language], ...literals };
        }
        else {
            this.literalsConfirm = {
                ...confirmLiterals[poLocaleDefault],
                ...confirmLiterals[this.language],
                ...literals
            };
        }
    }
    static ɵfac = function PoDialogComponent_Factory(t) { return new (t || PoDialogComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDialogComponent, selectors: [["ng-component"]], viewQuery: function PoDialogComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
        } }, decls: 2, vars: 4, consts: [[3, "p-title", "p-primary-action", "p-secondary-action"], [3, "innerHtml"]], template: function PoDialogComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0);
            i0.ɵɵelement(1, "div", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-title", ctx.title)("p-primary-action", ctx.primaryAction)("p-secondary-action", ctx.secondaryAction);
            i0.ɵɵadvance();
            i0.ɵɵproperty("innerHtml", ctx.message, i0.ɵɵsanitizeHtml);
        } }, dependencies: [PoModalComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogComponent, [{
        type: Component,
        args: [{ template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  <div [innerHtml]=\"message\"></div>\n</po-modal>\n" }]
    }], () => [{ type: PoLanguageService }], { poModal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDialogComponent, { className: "PoDialogComponent", filePath: "lib/services/po-dialog/po-dialog.component.ts", lineNumber: 41 }); })();

/**
 * @description
 *
 * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 */
class PoDialogBaseService {
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    confirm(confirmOptions) {
        this.openDialog(PoDialogType.Confirm, confirmOptions);
    }
    /** Exibe um diálogo de alerta. */
    alert(alertOptions) {
        this.openDialog(PoDialogType.Alert, alertOptions);
    }
}

/**
 * @docsExtends PoDialogBaseService
 *
 * @example
 *
 * <example name="po-dialog-basic" title="PO Dialog Basic">
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-labs" title="PO Dialog Labs">
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-cancel-credit-card" title="PO Dialog - Cancel Credit Card">
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
class PoDialogService extends PoDialogBaseService {
    poComponentInjector;
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    openDialog(dialogType, dialogOptions) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    }
    static ɵfac = function PoDialogService_Factory(t) { return new (t || PoDialogService)(i0.ɵɵinject(PoComponentInjectorService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDialogService, factory: PoDialogService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogService, [{
        type: Injectable
    }], () => [{ type: PoComponentInjectorService }], null); })();

class PoDialogModule {
    static ɵfac = function PoDialogModule_Factory(t) { return new (t || PoDialogModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDialogModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoDialogService], imports: [PoModalModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogModule, [{
        type: NgModule,
        args: [{
                declarations: [PoDialogComponent],
                imports: [PoModalModule],
                exports: [PoDialogComponent],
                providers: [PoDialogService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDialogModule, { declarations: [PoDialogComponent], imports: [PoModalModule], exports: [PoDialogComponent] }); })();

/**
 * @description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
class PoI18nBasePipe {
    transform(value, args) {
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        for (const arg of args) {
            value = value.replace(/(\{\w*\})+/, arg);
        }
        return value;
    }
}

/**
 * @docsExtends PoI18nBasePipe
 *
 * @example
 * <example name='po-i18n-pipe-labs' title='PO i18n Pipe Labs' >
 *  <file name='sample-po-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-po-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-po-i18n-pipe.component.html'> </file>
 *  <file name='sample-po-i18n-pipe.component.ts'> </file>
 * </example>
 */
class PoI18nPipe extends PoI18nBasePipe {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoI18nPipe_BaseFactory; return function PoI18nPipe_Factory(t) { return (ɵPoI18nPipe_BaseFactory || (ɵPoI18nPipe_BaseFactory = i0.ɵɵgetInheritedFactory(PoI18nPipe)))(t || PoI18nPipe); }; })();
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "poI18n", type: PoI18nPipe, pure: true });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nPipe, [{
        type: Pipe,
        args: [{
                name: 'poI18n'
            }]
    }], null, null); })();

const poToasterLiterals = {
    en: {
        close: 'Close'
    },
    es: {
        close: 'Cerrar'
    },
    pt: {
        close: 'Fechar'
    },
    ru: {
        close: 'близко'
    }
};

/**
 * @docsPrivate
 *
 * Enums para a orientação da notificação, do componente po-toaster-base.component.
 */
var PoToasterOrientation;
(function (PoToasterOrientation) {
    /** Orientção do componente fica no rodapé */
    PoToasterOrientation[PoToasterOrientation["Bottom"] = 0] = "Bottom";
    /** Orientção do componente fica no topo */
    PoToasterOrientation[PoToasterOrientation["Top"] = 1] = "Top";
})(PoToasterOrientation || (PoToasterOrientation = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-toaster foi construído para exibir notificações para o usuário.
 */
class PoToasterBaseComponent {
    /** Disponibiliza uma ação para a notificação. */
    action;
    /** Permite alterar o label do botão quando houver uma ação definida. */
    actionLabel;
    /** Mensagem a ser exibida na notificação. */
    message;
    /** Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página. */
    orientation = PoToasterOrientation.Bottom;
    /** ComponentRef */
    componentRef;
    /** Posição para notificação aparecer na tela. */
    position;
    /** Tipo de notificação. */
    type;
}

/**
 * @docsPrivate
 *
 * Enums para os tipos de notificação, do componente po-toaster-base.component.
 */
var PoToasterType;
(function (PoToasterType) {
    /** Enum para informações do tipo "Erro" */
    PoToasterType[PoToasterType["Error"] = 0] = "Error";
    /** Enum para informações do tipo "Informação" */
    PoToasterType[PoToasterType["Information"] = 1] = "Information";
    /** Enum para informações do tipo "Sucesso" */
    PoToasterType[PoToasterType["Success"] = 2] = "Success";
    /** Enum para informações do tipo "Atenção" */
    PoToasterType[PoToasterType["Warning"] = 3] = "Warning";
})(PoToasterType || (PoToasterType = {}));

const _c0$12 = ["toaster"];
const _c1$s = ["buttonClose"];
function PoToasterComponent_po_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 11);
    i0.ɵɵlistener("p-click", function PoToasterComponent_po_button_8_Template_po_button_p_click_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.poToasterAction($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-label", ctx_r1.actionLabel);
} }
const SPACE_BETWEEN_TOASTERS = 8;
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
class PoToasterComponent extends PoToasterBaseComponent {
    changeDetector;
    renderer;
    /* Componente toaster */
    toaster;
    buttonClose;
    alive = true;
    language;
    literals;
    /* Ícone do Toaster */
    icon;
    /* Margem do Toaster referênte à sua orientação e posição*/
    margin = 0;
    /* Observable para monitorar o Close to Toaster */
    observableOnClose = new Subject();
    /* Posição do Toaster*/
    toasterPosition = 'po-toaster-bottom';
    /* Tipo do Toaster */
    toasterType;
    constructor(poLanguageService, changeDetector, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.language = poLanguageService.getShortLanguage();
        this.literals = {
            ...poToasterLiterals[this.language]
        };
    }
    ngOnDestroy() {
        this.alive = false;
    }
    ngAfterViewInit() {
        setTimeout(() => this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-visible'));
    }
    /* Muda a posição do Toaster na tela*/
    changePosition(position) {
        setTimeout(() => {
            this.margin = SPACE_BETWEEN_TOASTERS;
            for (let i = 0; i < position; i++) {
                this.margin += this.returnHeightToaster(i) + SPACE_BETWEEN_TOASTERS;
            }
            if (this.orientation === PoToasterOrientation.Top) {
                this.toaster.nativeElement.style.top = this.margin + 'px';
            }
            else {
                this.toaster.nativeElement.style.bottom = this.margin + 'px';
            }
        });
    }
    /* Fecha o componente Toaster */
    close() {
        this.observableOnClose.next(true);
    }
    setFadeOut() {
        this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
        this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
    }
    /* Configura o Toaster com os atributos passados para ele */
    configToaster(poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel;
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        if (this.type === PoToasterType.Error) {
            this.toaster.nativeElement.setAttribute('role', 'alert');
        }
        else if (this.action && this.actionLabel) {
            this.toaster.nativeElement.setAttribute('role', 'alertdialog');
        }
        else {
            this.toaster.nativeElement.setAttribute('role', 'status');
        }
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'ICON_WARNING';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'ICON_INFO';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'ICON_OK';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'ICON_WARNING';
                break;
            }
        }
        this.buttonClose.buttonElement.nativeElement.setAttribute('aria-label', this.literals.close);
        this.changeDetector.detectChanges();
    }
    getIcon() {
        return this.icon;
    }
    getToasterPosition() {
        return this.toasterPosition;
    }
    getToasterType() {
        return this.toasterType;
    }
    onButtonClose(event) {
        if (this.action && !this.actionLabel) {
            this.poToasterAction(event);
        }
        else {
            this.close();
        }
    }
    /* Chama a função passada pelo atributo `action` */
    poToasterAction(event) {
        this.action(this);
    }
    returnHeightToaster(position) {
        if (this.orientation === PoToasterOrientation.Top) {
            return document.querySelectorAll('.po-toaster-top')[position].offsetHeight;
        }
        return document.querySelectorAll('.po-toaster-bottom')[position].offsetHeight;
    }
    static ɵfac = function PoToasterComponent_Factory(t) { return new (t || PoToasterComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToasterComponent, selectors: [["po-toaster"]], viewQuery: function PoToasterComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$12, 5);
            i0.ɵɵviewQuery(_c1$s, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toaster = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonClose = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 7, consts: [["toaster", ""], [1, "po-toaster-icon"], [3, "p-icon"], [1, "po-toaster-actions"], [1, "po-toaster-message"], [1, "po-toaster-action"], ["p-kind", "tertiary", 3, "p-label", "p-click", 4, "ngIf"], [1, "po-toaster-close"], [1, "po-toaster-divider"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 1, "po-toaster-button-close", 3, "p-click"], ["buttonClose", ""], ["p-kind", "tertiary", 3, "p-label", "p-click"]], template: function PoToasterComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", null, 0)(2, "div", 1);
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵtext(6);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(7, "div", 5);
            i0.ɵɵtemplate(8, PoToasterComponent_po_button_8_Template, 1, 1, "po-button", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(9, "div", 7);
            i0.ɵɵelement(10, "div", 8);
            i0.ɵɵelementStart(11, "po-button", 9, 10);
            i0.ɵɵlistener("p-click", function PoToasterComponent_Template_po_button_p_click_11_listener($event) { return ctx.onButtonClose($event); });
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate2("po-toaster ", ctx.getToasterType(), " ", ctx.getToasterPosition(), "");
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-icon", ctx.getIcon());
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.message);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.action && ctx.actionLabel);
        } }, dependencies: [i1.NgIf, PoButtonComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToasterComponent, [{
        type: Component,
        args: [{ selector: 'po-toaster', template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }}\">\n  <div class=\"po-toaster-icon\">\n    <po-icon [p-icon]=\"getIcon()\"></po-icon>\n  </div>\n\n  <div class=\"po-toaster-actions\">\n    <div class=\"po-toaster-message\">{{ message }}</div>\n    <div class=\"po-toaster-action\">\n      <po-button\n        *ngIf=\"action && actionLabel\"\n        (p-click)=\"poToasterAction($event)\"\n        [p-label]=\"actionLabel\"\n        p-kind=\"tertiary\"\n      ></po-button>\n    </div>\n  </div>\n\n  <div class=\"po-toaster-close\">\n    <div class=\"po-toaster-divider\"></div>\n    <po-button\n      #buttonClose\n      class=\"po-toaster-button-close\"\n      (p-click)=\"onButtonClose($event)\"\n      p-icon=\"ICON_CLOSE\"\n      p-kind=\"tertiary\"\n    ></po-button>\n  </div>\n</div>\n" }]
    }], () => [{ type: PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { toaster: [{
            type: ViewChild,
            args: ['toaster']
        }], buttonClose: [{
            type: ViewChild,
            args: ['buttonClose']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToasterComponent, { className: "PoToasterComponent", filePath: "lib/services/po-notification/po-toaster/po-toaster.component.ts", lineNumber: 33 }); })();

class PoNotificationModule {
    static ɵfac = function PoNotificationModule_Factory(t) { return new (t || PoNotificationModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNotificationModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationModule, [{
        type: NgModule,
        args: [{
                declarations: [PoToasterComponent],
                imports: [CommonModule, PoButtonModule, PoIconModule],
                exports: [],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNotificationModule, { declarations: [PoToasterComponent], imports: [CommonModule, PoButtonModule, PoIconModule] }); })();

/**
 * Enum para definir os tipos de tema suportados pelo serviço de temas.
 *
 * @usedBy PoThemeService
 *
 * @example
 *
 * Em um serviço de tema, você pode usar este enum para alternar entre os tipos de temas suportados.
 *
 * ```
 * import { PoThemeTypeEnum } from '@po-ui/theme';
 *
 * // Definindo o tipo de tema para light
 * themeService.setTheme(...theme, PoThemeTypeEnum.light);
 *
 * // Definindo o tipo de tema para dark
 * themeService.setTheme(...theme, PoThemeTypeEnum.dark);
 * ```
 */
var PoThemeTypeEnum;
(function (PoThemeTypeEnum) {
    /** Define o tema como claro. */
    PoThemeTypeEnum[PoThemeTypeEnum["light"] = 0] = "light";
    /** Define o tema como escuro. */
    PoThemeTypeEnum[PoThemeTypeEnum["dark"] = 1] = "dark";
})(PoThemeTypeEnum || (PoThemeTypeEnum = {}));

/**
 * Define as cores de ação padrão para temas claros.
 */
const poThemeDefaultActions = {
    /** Cor padrão. */
    default: 'var(--color-brand-01-base)',
    /** Cor ao passar o mouse. */
    hover: 'var(--color-brand-01-dark)',
    /** Cor quando pressionado. */
    pressed: 'var(--color-brand-01-darker)',
    /** Cor quando desabilitado. */
    disabled: 'var(--color-neutral-light-30)',
    /** Cor ao focar. */
    focus: 'var(--color-brand-01-darkest)'
};
/**
 * Define as cores neutras padrão para temas claros.
 */
const poThemeDefaultNeutrals = {
    /** Tons de cinza claro. */
    light: {
        '00': '#ffffff',
        '05': '#fbfbfb',
        '10': '#eceeee',
        '20': '#dadedf',
        '30': '#b6bdbf'
    },
    /** Tons de cinza intermediários. */
    mid: {
        '40': '#9da7a9',
        '60': '#6e7c7f'
    },
    /** Tons de cinza escuro. */
    dark: {
        '70': '#4a5c60',
        '80': '#2c3739',
        '90': '#1d2426',
        '95': '#0b0e0e'
    }
};
/**
 * Define as cores de feedback padrão para temas claros.
 */
const poThemeDefaultFeedback = {
    /** Cores para feedback negativo. */
    negative: {
        lightest: '#f6e6e5',
        lighter: '#e3aeab',
        light: '#d58581',
        base: '#be3e37',
        dark: '#9b2d27',
        darker: '#72211d',
        darkest: '#4a1512'
    },
    /** Cores para feedback informativo. */
    info: {
        lightest: '#e3e9f7',
        lighter: '#b0c1e8',
        light: '#7996d7',
        base: '#23489f',
        dark: '#173782',
        darker: '#0f2557',
        darkest: '#081536'
    },
    /** Cores para feedback positivo. */
    positive: {
        lightest: '#def7ed',
        lighter: '#7ecead',
        light: '#41b483',
        base: '#107048',
        dark: '#0f5236',
        darker: '#083a25',
        darkest: '#002415'
    },
    /** Cores para feedback de aviso. */
    warning: {
        lightest: '#fcf6e3',
        lighter: '#f7dd97',
        light: '#f1cd6a',
        base: '#efba2a',
        dark: '#d8a20e',
        darker: '#705200',
        darkest: '#473400'
    }
};
const poThemeDefaultBrands = {
    '01': {
        lightest: '#f2eaf6',
        lighter: '#d9c2e5',
        light: '#bd94d1',
        base: '#753399',
        dark: '#5b1c7d',
        darker: '#400e58',
        darkest: '#260538'
    },
    '02': {
        base: '#b92f72'
    },
    '03': {
        base: '#ffd464'
    }
};
/**
 * Define estilos específicos por componente e onRoot para temas claros.
 */
const poThemeDefaultLightValues = {
    perComponent: {},
    onRoot: {
        /* WIDGET */
        '--color-widget-color-action-active': 'var(--color-primary-dark-20)',
        '--color-widget-color-action-hover': 'var(--color-primary-dark-20)',
        '--color-widget-color-action': 'var(--color-primary)',
        '--color-widget-color-default': 'var(--color-neutral-dark-70)',
        '--color-widget-color-title-action': 'var(--color-primary)',
        '--color-widget-color-widget-primary': 'var(--color-neutral-dark-90)',
        /* CALENDAR */
        '--color-calendar-arrow': 'var(--color-primary)',
        '--color-calendar-title': 'var(--color-primary)',
        '--color-calendar-text-box-background-active': 'var(--color-neutral-dark-90)',
        '--color-calendar-background-color-border-today': 'var(--color-primary)',
        '--color-calendar-color-box-foreground': 'var(--color-neutral-dark-70)',
        '--color-calendar-color-box-foreground-selected': 'var(--color-neutral-dark-90)',
        '--color-calendar-color-box-foreground-pressed': 'var(--color-neutral-dark-90)',
        '--color-calendar-color-box-foreground-range': 'var(--color-primary)',
        '--color-calendar-color-box-foreground-today': 'var(--color-primary)',
        /* TOOLBAR */
        '--color-toolbar-color-default': 'var(--color-primary)',
        '--color-toolbar-color-title': 'var(--color-action-default)',
        /* CALENDAR */
        '--color-calendar-background-color-box-background-range': 'var(--color-primary-light-80)'
    }
};

/**
 * Tokens de tema padrão para temas claros.
 */
const poThemeDefaultLight = {
    color: {
        brand: poThemeDefaultBrands,
        action: poThemeDefaultActions,
        neutral: poThemeDefaultNeutrals,
        feedback: poThemeDefaultFeedback
    },
    perComponent: {
        ...poThemeDefaultLightValues.perComponent
    },
    onRoot: {
        ...poThemeDefaultLightValues.onRoot
    }
};
/**
 * Tema padrão.
 */
const poThemeDefault = {
    name: 'default',
    type: {
        light: poThemeDefaultLight
    },
    active: PoThemeTypeEnum.light
};

/**
 * @description
 *
 * O `PoThemeService` possibilita a personalização das cores do tema padrão do `PO-UI`, permitindo a alteração dos valores das variáveis de estilo usadas no CSS padrão.
 *
 * > Para saber mais sobre como customizar as cores do tema padrão verifique o item [Customizando cores do tema padrão](https://po-ui.io/guides/colors-customization) na aba `Guias`.
 *
 * > Obs.: Não está documentado aqui e não indicamos a customização das cores de 'feedback' por motivos de acessibilidade e usabilidade.
 */
class PoThemeService {
    window;
    document;
    renderer;
    theme = poThemeDefault;
    constructor(window, document, rendererFactory) {
        this.window = window;
        this.document = document;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * Define o tema a ser aplicado no componente, de acordo com o tipo de tema especificado.
     *
     * Este método define o tema a ser aplicado no componente com base no objeto `theme` fornecido e no tipo de tema especificado.
     * Ele atualiza as propriedades do componente para refletir o tema selecionado, como cores, estilos e comportamentos.
     *
     * @param {PoTheme} theme - Objeto contendo as definições de tema a serem aplicadas no componente.
     * @param {PoThemeTypeEnum} [themeType=PoThemeTypeEnum.light] - (Opcional) Tipo de tema a ser aplicado, podendo ser 'light' (claro) ou 'dark' (escuro). Por padrão, o tema claro é aplicado.
     */
    setTheme(theme, themeType = PoThemeTypeEnum.light) {
        // Change theme name, remove special characteres and number, replace space with dash
        theme.name = theme.name
            .toLowerCase()
            .replace(/[^a-zA-Z ]/g, '')
            .replace(/\s+/g, '-');
        theme.active = themeType;
        const _themeType = theme.type[PoThemeTypeEnum[themeType]];
        if (!_themeType) {
            return;
        }
        const colorStyles = _themeType.color ? this.generateThemeStyles(_themeType.color) : '';
        const perComponentStyles = _themeType.perComponent ? this.generatePerComponentStyles(_themeType.perComponent) : '';
        const onRootStyles = _themeType.onRoot ? this.generateAdditionalStyles(_themeType.onRoot) : '';
        const additionalStyles = this.generateAdditionalStyles(_themeType);
        const combinedStyles = `
      .${theme.name}-${PoThemeTypeEnum[themeType]}:root {
        ${colorStyles}
        ${perComponentStyles}
        ${onRootStyles}
        ${additionalStyles}
      }`;
        this.applyThemeStyles(combinedStyles);
        this.changeThemeType(theme);
    }
    /**
     * @docsPrivate
     *
     * Gera estilos adicionais com base nos tokens de tema fornecidos, excluindo os tokens de cor.
     * @param theme Os tokens de tema contendo os estilos adicionais a serem gerados.
     * @returns Uma string contendo os estilos adicionais formatados.
     */
    generateAdditionalStyles(theme) {
        return Object.entries(theme)
            .filter(([key]) => !['color', 'perComponent', 'onRoot'].includes(key))
            .map(([key, value]) => `${key}: ${value};`)
            .join(' ');
    }
    /**
     * @docsPrivate
     *
     * Aplica os estilos de tema ao documento.
     * @param styleCss Os estilos CSS a serem aplicados.
     */
    applyThemeStyles(styleCss) {
        const styleElement = this.createStyleElement(styleCss);
        const existingStyleElement = document.head.querySelector('#pouiTheme');
        if (existingStyleElement) {
            this.renderer.removeChild(document.head, existingStyleElement);
        }
        this.renderer.appendChild(document.head, styleElement);
    }
    changeThemeType(theme) {
        this.cleanThemeActive();
        this.setThemeActive(theme);
        document.getElementsByTagName('html')[0].classList.add(...[`${theme.name}-${PoThemeTypeEnum[theme.active]}`]);
    }
    /**
     * Persiste e define o tema do aplicativo com base nos dados armazenados.
     *
     * Este método recupera os dados do tema armazenados e os aplica ao aplicativo.
     *
     * @returns {PoTheme} Recupera o tema armazenado.
     */
    persistThemeActive() {
        const _theme = this.getThemeActive();
        this.setTheme(_theme, _theme.active);
        return _theme;
    }
    /**
     * Altera o tipo do tema armazenado e aplica os novos estilos ao documento.
     *
     * Este método altera o tipo do tema armazenado ativo (light/dark)
     *
     * @param {PoThemeTypeEnum} themeType O tipo de tema a ser aplicado, light ou dark.
     */
    changeCurrentThemeType(type) {
        const _theme = this.getThemeActive();
        _theme.active = type;
        this.changeThemeType(_theme);
    }
    /**
     * Método remove o tema armazenado e limpa todos os estilos de tema
     * aplicados ao documento.
     */
    cleanThemeActive() {
        const _theme = this.getThemeActive();
        document.getElementsByTagName('html')[0].classList.remove(`${_theme.name}-${PoThemeTypeEnum[_theme.active]}`);
        localStorage.removeItem('totvs-theme');
    }
    /**
     * @docsPrivate
     *
     * Este método define um dados do tema e o armazena.
     * @param theme Os tokens de tema contendo os estilos adicionais a serem gerados.
     */
    setThemeActive(theme) {
        if (theme) {
            localStorage.setItem('totvs-theme', JSON.stringify(theme));
            this.theme = theme;
        }
    }
    /**
     * Retorna o tema ativo como um observable.
     * @returns {PoTheme} Tema ativo.
     */
    getThemeActive() {
        try {
            const themeData = JSON.parse(localStorage.getItem('totvs-theme'));
            if (themeData && JSON.stringify(themeData) !== JSON.stringify(this.theme)) {
                this.theme = themeData;
            }
        }
        catch (error) {
            console.error('Erro ao obter o tema do armazenamento local:', error);
        }
        return this.theme;
    }
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens de cores fornecidos.
     * @param themeColor Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    createStyleElement(css) {
        const styleElement = this.renderer.createElement('style');
        styleElement.id = 'pouiTheme';
        this.renderer.appendChild(styleElement, this.renderer.createText(css));
        return styleElement;
    }
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens de cores fornecidos.
     * @param themeColor Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    generateThemeStyles(themeColor) {
        const selectBgIconStyle = this.getSelectBgIconsStyle(themeColor);
        return [
            Object.entries(themeColor)
                .flatMap(([type, values]) => Object.entries(values).flatMap(([tonality, tonalityValues]) => {
                if (type === 'action') {
                    return [`--color-${type}-${tonality}: ${tonalityValues};`];
                }
                else {
                    return Object.entries(tonalityValues).map(([level, colorValue]) => `--color-${type}-${tonality}-${level}: ${colorValue};`);
                }
            }))
                .join(''),
            selectBgIconStyle
        ].join('');
    }
    /**
     * @docsPrivate
     *
     * Gera estilos CSS com base nos tokens per Component fornecidos.
     * @param themePerComponent Os tokens de cor a serem usados para gerar os estilos.
     * @returns Uma string contendo os estilos CSS gerados.
     */
    generatePerComponentStyles(themePerComponent) {
        return Object.entries(themePerComponent)
            .flatMap(([type, values]) => Object.entries(values).flatMap(([level, colorValue]) => [`${type} {${level}: ${colorValue};};`]))
            .join('');
    }
    /**
     * Define o tema atual como o tema "PoUI Padrão".
     *
     * @param {PoThemeTypeEnum} type O tipo de Tema a ser aplicado, light / dark.
     */
    setDefaultTheme(type) {
        this.setTheme(poThemeDefault, type);
    }
    /**
     * @docsPrivate
     *
     * Retorna o estilo CSS para o fundo dos ícones do componente po-select, com base nas cores do tema.
     *
     * @param {PoThemeColor} themeColor - Objeto contendo as cores do tema.
     * @returns {string} - Estilo CSS para o fundo dos ícones do po-select.
     */
    getSelectBgIconsStyle(themeColor) {
        let selectBgIcon = '';
        if (themeColor?.brand?.['01']?.dark) {
            selectBgIcon += `po-select { --background-image: url(${this.getSelectBgIcon(themeColor.brand['01'].dark)}); };`;
        }
        if (themeColor?.feedback?.negative?.base)
            selectBgIcon += `po-select.ng-dirty.ng-invalid select { --background-image: url(${this.getSelectBgIcon(themeColor.feedback.negative.base)}); };`;
        if (themeColor?.neutral?.light?.['30'])
            selectBgIcon += `select:disabled { --background-image: url(${this.getSelectBgIcon(themeColor.neutral.light['30'])}); };`;
        return selectBgIcon;
    }
    /**
     * @docsPrivate
     *
     * Retorna a imagem SVG utilizada como fundo do po-select.
     *
     * @param {string} color Cor da Imagem - Utilizada no atributo 'fill'.
     * @returns {string} Imagem SVG utilizada no po-select.
     */
    getSelectBgIcon(color) {
        let svg = `"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' `;
        svg = svg.concat(`xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' `);
        svg = svg.concat(`d='M18.707 8.29301C18.316 7.90201 17.684 7.90201 17.293 8.29301L12 13.586L6.70701 `);
        svg = svg.concat(`8.29301C6.31601 7.90201 5.68401 7.90201 5.29301 8.29301C4.90201 8.68401 4.90201 `);
        svg = svg.concat(`9.31601 5.29301 9.70701L11.293 15.707C11.488 15.902 11.744 16 12 16C12.256 16 12.512 `);
        svg = svg.concat(`15.902 12.707 15.707L18.707 9.70701C19.098 9.31601 19.098 8.68401 18.707 8.29301Z' `);
        svg = svg.concat(`fill='${color.replace('#', '%23')}'/%3E%3C/svg%3E%0A");`);
        return svg;
    }
    static ɵfac = function PoThemeService_Factory(t) { return new (t || PoThemeService)(i0.ɵɵinject('Window'), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.RendererFactory2)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoThemeService, factory: PoThemeService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoThemeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: Window, decorators: [{
                type: Inject,
                args: ['Window']
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i0.RendererFactory2 }], null); })();

/**
 * Módulo responsável por fornecer serviços relacionados ao tema PO.
 */
class PoThemeModule {
    static ɵfac = function PoThemeModule_Factory(t) { return new (t || PoThemeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoThemeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
            PoThemeService,
            // Fornecer o objeto 'Window' para uso no serviço
            { provide: 'Window', useValue: window }
        ] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoThemeModule, [{
        type: NgModule,
        args: [{
                providers: [
                    PoThemeService,
                    // Fornecer o objeto 'Window' para uso no serviço
                    { provide: 'Window', useValue: window }
                ],
                bootstrap: []
            }]
    }], null, null); })();

class PoServicesModule {
    static ɵfac = function PoServicesModule_Factory(t) { return new (t || PoServicesModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoServicesModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoActiveOverlayModule,
            PoColorPaletteModule,
            PoComponentInjectorModule,
            PoControlPositionModule,
            PoDateTimeModule,
            PoDialogModule,
            PoLanguageModule,
            PoNotificationModule,
            PoThemeModule, PoActiveOverlayModule,
            PoColorPaletteModule,
            PoComponentInjectorModule,
            PoControlPositionModule,
            PoDateTimeModule,
            PoDialogModule,
            PoNotificationModule,
            PoThemeModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoServicesModule, [{
        type: NgModule,
        args: [{
                declarations: [PoI18nPipe],
                imports: [
                    PoActiveOverlayModule,
                    PoColorPaletteModule,
                    PoComponentInjectorModule,
                    PoControlPositionModule,
                    PoDateTimeModule,
                    PoDialogModule,
                    PoLanguageModule,
                    PoNotificationModule,
                    PoThemeModule
                ],
                exports: [
                    PoActiveOverlayModule,
                    PoColorPaletteModule,
                    PoComponentInjectorModule,
                    PoControlPositionModule,
                    PoDateTimeModule,
                    PoDialogModule,
                    PoI18nPipe,
                    PoNotificationModule,
                    PoThemeModule
                ],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoServicesModule, { declarations: [PoI18nPipe], imports: [PoActiveOverlayModule,
        PoColorPaletteModule,
        PoComponentInjectorModule,
        PoControlPositionModule,
        PoDateTimeModule,
        PoDialogModule,
        PoLanguageModule,
        PoNotificationModule,
        PoThemeModule], exports: [PoActiveOverlayModule,
        PoColorPaletteModule,
        PoComponentInjectorModule,
        PoControlPositionModule,
        PoDateTimeModule,
        PoDialogModule,
        PoI18nPipe,
        PoNotificationModule,
        PoThemeModule] }); })();

const PO_POPOVER_DEFAULT_POSITION = 'right';
const PO_POPOVER_DEFAULT_TRIGGER = 'click';
const PO_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * @description
 *
 * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**po-tooltip**](https://po-ui.io/documentation/po-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://po-ui.io/documentation/po-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
class PoPopoverBaseComponent {
    /**
     * @description
     *
     * ElementRef do componente de origem responsável por abrir o popover.
     * Para utilizar o po-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <po-button
     *   p-label="Open Popover">
     * </po-button>
     *
     * <po-popover
     *   [p-target]="poButton"
     *   [p-title]="PO Popover">
     * </po-popover>
     * ```
     *
     * Também deve-se criar um ViewChild para cada popover, passando como referência o elemento do
     * HTML que irá disparar o evento. Exemplo:
     *
     * ```
     * @ViewChild(PoButtonComponent, {read: ElementRef}) poButton: PoButtonComponent;
     * ```
     *
     * Pode-se tambem informar diretamente o HTMLElement, para não ter que utilizar o ViewChild.
     * Para utilizar o po-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <button #target>
     *   Abrir popover
     * </button>
     *
     * <po-popover
     *     [p-target]="target"
     *     p-trigger="click" >
     * </po-popover>
     * ```
     *
     *
     *
     */
    target;
    /** Título do popover. */
    title;
    /** Evento disparado ao fechar o popover. */
    closePopover = new EventEmitter();
    // Controla se o popover fica oculto ou visível, por padrão é oculto.
    isHidden = true;
    clickoutListener;
    mouseEnterListener;
    mouseLeaveListener;
    resizeListener;
    _hideArrow = false;
    _position = PO_POPOVER_DEFAULT_POSITION;
    _trigger = PO_POPOVER_DEFAULT_TRIGGER;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a seta do componente *popover*.
     *
     * @default `false`
     */
    set hideArrow(value) {
        this._hideArrow = convertToBoolean(value);
    }
    get hideArrow() {
        return this._hideArrow;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popover no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popover acima do componente alvo.
     * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
     *
     *
     * @default right
     */
    set position(value) {
        this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
    }
    get position() {
        return this._position;
    }
    /**
     * @description
     *
     * Define o evento que abrirá o po-popover.
     *
     * Valores válidos:
     *  - `click`: Abre ao clicar no componente alvo.
     *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
     *
     * @default click
     * @optional
     */
    set trigger(value) {
        this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
    }
    get trigger() {
        return this._trigger;
    }
    static ɵfac = function PoPopoverBaseComponent_Factory(t) { return new (t || PoPopoverBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPopoverBaseComponent, inputs: { target: [i0.ɵɵInputFlags.None, "p-target", "target"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], hideArrow: [i0.ɵɵInputFlags.None, "p-hide-arrow", "hideArrow"], position: [i0.ɵɵInputFlags.None, "p-position", "position"], trigger: [i0.ɵɵInputFlags.None, "p-trigger", "trigger"] }, outputs: { closePopover: "p-close" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverBaseComponent, [{
        type: Directive
    }], null, { target: [{
            type: Input,
            args: ['p-target']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], closePopover: [{
            type: Output,
            args: ['p-close']
        }], hideArrow: [{
            type: Input,
            args: ['p-hide-arrow']
        }], position: [{
            type: Input,
            args: ['p-position']
        }], trigger: [{
            type: Input,
            args: ['p-trigger']
        }] }); })();

const _c0$11 = ["popoverElement"];
function PoPopoverComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate1("po-popover-arrow po-arrow-", ctx_r1.arrowDirection, "");
} }
function PoPopoverComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r2.title);
} }
const _c1$r = ["*"];
/**
 *
 * @docsExtends PoPopoverBaseComponent
 *
 * @example
 *
 * <example name="po-popover-basic" title="PO Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="PO Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
class PoPopoverComponent extends PoPopoverBaseComponent {
    renderer;
    poControlPosition;
    popoverElement;
    arrowDirection = 'left';
    timeoutResize;
    targetElement;
    eventListenerFunction;
    constructor(renderer, poControlPosition) {
        super();
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
    }
    ngAfterViewInit() {
        this.targetElement = this.target instanceof ElementRef ? this.target.nativeElement : this.target;
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    close() {
        this.isHidden = true;
        this.closePopover.emit();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.setPopoverPosition();
        }, 200);
    }
    open() {
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(() => {
            this.setElementsControlPosition();
            this.setPopoverPosition();
            this.setOpacity(1);
        });
    }
    setOpacity(value) {
        this.popoverElement.nativeElement.style.opacity = value;
    }
    setPopoverPosition() {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    setRendererListenInit() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            if (!this.isHidden) {
                this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.targetElement, 'mouseenter', (event) => {
                this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.targetElement, 'mouseleave', (event) => {
                this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
                this.togglePopup(event);
            });
        }
    }
    togglePopup(event) {
        if (!this.isHidden &&
            !this.popoverElement.nativeElement.contains(event.target) &&
            !this.targetElement.contains(event.target)) {
            this.close();
        }
        else if (this.targetElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    initEventListenerFunction() {
        this.eventListenerFunction = () => {
            this.setPopoverPosition();
        };
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    setElementsControlPosition() {
        const popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    }
    static ɵfac = function PoPopoverComponent_Factory(t) { return new (t || PoPopoverComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoControlPositionService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPopoverComponent, selectors: [["po-popover"]], viewQuery: function PoPopoverComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$11, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popoverElement = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$r, decls: 6, vars: 3, consts: [[1, "po-popover", 3, "hidden"], ["popoverElement", ""], [3, "class", 4, "ngIf"], [1, "po-popover-content"], ["class", "po-popover-title", 4, "ngIf"], [1, "po-popover-title"]], template: function PoPopoverComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoPopoverComponent_div_2_Template, 1, 3, "div", 2);
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoPopoverComponent_span_4_Template, 2, 1, "span", 4);
            i0.ɵɵprojection(5);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("hidden", ctx.isHidden);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hideArrow);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.title);
        } }, dependencies: [i1.NgIf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverComponent, [{
        type: Component,
        args: [{ selector: 'po-popover', providers: [PoControlPositionService], template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: PoControlPositionService }], { popoverElement: [{
            type: ViewChild,
            args: ['popoverElement', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPopoverComponent, { className: "PoPopoverComponent", filePath: "lib/components/po-popover/po-popover.component.ts", lineNumber: 41 }); })();

/**
 * @description
 * Módulo do componente po-popover.
 */
class PoPopoverModule {
    static ɵfac = function PoPopoverModule_Factory(t) { return new (t || PoPopoverModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPopoverModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PoPopoverComponent],
                exports: [PoPopoverComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPopoverModule, { declarations: [PoPopoverComponent], imports: [CommonModule], exports: [PoPopoverComponent] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
 */
class PoTimePipe {
    transform(time, format) {
        const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            const formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    }
    addDotMiliseconds(miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    }
    formatValue(time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            const hour = time.substring(0, 2);
            const minutes = time.substring(3, 5);
            const seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace(`.${formatMiliseconds}`, miliseconds);
            return format;
        }
        else {
            return time;
        }
    }
    getFormatMiliseconds(amountOfF) {
        let formatMiliseconds = '';
        for (let i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    }
    static ɵfac = function PoTimePipe_Factory(t) { return new (t || PoTimePipe)(); };
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "po_time", type: PoTimePipe, pure: true });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTimePipe, [{
        type: Pipe,
        args: [{
                name: 'po_time'
            }]
    }], null, null); })();

/**
 * @description
 *
 * Módulo do pipe `po-time`.
 */
class PoTimeModule {
    static ɵfac = function PoTimeModule_Factory(t) { return new (t || PoTimeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTimeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTimeModule, [{
        type: NgModule,
        args: [{
                declarations: [PoTimePipe],
                imports: [],
                exports: [PoTimePipe],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTimeModule, { declarations: [PoTimePipe], exports: [PoTimePipe] }); })();

/**
 * @description
 *
 * O componente `po-page-slide` é utilizado para incluir conteúdos secundários
 * adicionando controles e navegações adicionais, mas mantendo o usuário na
 * página principal.
 *
 * Este componente é ativado a partir do método `#open()` e pode ser  encerrado
 * através do botão que encontra-se no cabeçalho do mesmo ou através do método
 * `#close()`.
 *
 * > Para o correto funcionamento do componente `po-page-slide`, deve ser
 * > importado o módulo `BrowserAnimationsModule` no módulo principal da sua
 * > aplicação.
 */
class PoPageSlideBaseComponent {
    /**
     * @description
     *
     * Título da página.
     */
    title;
    /**
     * @description
     *
     * Subtítulo da página.
     */
    subtitle;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão de encerramento da página.
     *
     * Esta opção só é possível se a propriedade `p-click-out` estiver habilitada.
     *
     * @default `false`
     */
    hideClose = false;
    /**
     * @optional
     *
     * @description
     *
     * Define se permite o encerramento da página ao clicar fora da mesma.
     *
     * @default `false`
     */
    clickOut = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite a expansão dinâmica da largura do `po-page-slide` quando `p-size` for `auto` (automático).
     * Propriedade necessária para correto funcionamento da `po-table` dentro do `po-page-slide`
     *
     * @default `false`
     */
    flexibleWidth = false;
    /**
     * @optional
     *
     * @description
     * Evento executado ao fechar o page slide.
     */
    closePageSlide = new EventEmitter();
    // Controla se a página está ou não oculta, por padrão é oculto.
    hidden = true;
    _size = 'md';
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho da página.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra-grande)
     *  - `auto` (automático)
     *
     * > Todas as opções de tamanho, exceto `auto`, possuem uma largura máxima de **768px**.
     *
     * @default `md`
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Ativa a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public openPage() {
     *   this.pageSlide.open();
     * }
     * ```
     */
    open() {
        // Evita com que a página seja aberta sem que seja possível fechá-la.
        if (this.hideClose && !this.clickOut) {
            this.hideClose = false;
        }
        this.hidden = false;
    }
    /**
     * Encerra a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public closePage() {
     *   this.pageSlide.close();
     * }
     * ```
     */
    close() {
        this.hidden = true;
        this.closePageSlide.emit();
    }
    static ɵfac = function PoPageSlideBaseComponent_Factory(t) { return new (t || PoPageSlideBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageSlideBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"], hideClose: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-close", "hideClose", convertToBoolean], clickOut: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-click-out", "clickOut", convertToBoolean], flexibleWidth: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-flexible-width", "flexibleWidth", convertToBoolean], size: [i0.ɵɵInputFlags.None, "p-size", "size"] }, outputs: { closePageSlide: "p-close" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageSlideBaseComponent, [{
        type: Directive
    }], null, { title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }], hideClose: [{
            type: Input,
            args: [{ alias: 'p-hide-close', transform: convertToBoolean }]
        }], clickOut: [{
            type: Input,
            args: [{ alias: 'p-click-out', transform: convertToBoolean }]
        }], flexibleWidth: [{
            type: Input,
            args: [{ alias: 'p-flexible-width', transform: convertToBoolean }]
        }], closePageSlide: [{
            type: Output,
            args: ['p-close']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();

const _c0$10 = ["pageContent"];
function PoPageSlideComponent_div_0_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r2.subtitle);
} }
function PoPageSlideComponent_div_0_po_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 12);
    i0.ɵɵlistener("p-click", function PoPageSlideComponent_div_0_po_button_10_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r4.close()); });
    i0.ɵɵelementEnd();
} }
const _c1$q = a0 => ({ "width": a0 });
function PoPageSlideComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    i0.ɵɵlistener("mousedown", function PoPageSlideComponent_div_0_Template_div_mousedown_1_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onClickOut($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "div", 3)(3, "div", 4, 5)(5, "div", 6)(6, "div", 7)(7, "span");
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, PoPageSlideComponent_div_0_div_9_Template, 2, 1, "div", 8);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(10, PoPageSlideComponent_div_0_po_button_10_Template, 1, 0, "po-button", 9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "div", 10);
    i0.ɵɵprojection(12);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@fade", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassMapInterpolate1("po-page-slide-container po-page-slide-right po-page-slide-", ctx_r0.size, "");
    i0.ɵɵproperty("@slide", undefined)("ngStyle", i0.ɵɵpureFunction1(9, _c1$q, ctx_r0.flexibleWidth ? "" : ctx_r0.size === "auto" ? "auto" : ""));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r0.title);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.subtitle);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r0.hideClose);
} }
const _c2$d = ["*"];
/**
 * @docsExtends PoPageSlideBaseComponent
 *
 * @example
 *
 * <example name="po-page-slide-basic" title="PO Page Slide Basic">
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.html"> </file>
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-labs" title="PO Page Slide Labs">
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.html"> </file>
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-configuration" title="PO Page Slide - Configuration">
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.html"> </file>
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.ts"> </file>
 * </example>
 */
class PoPageSlideComponent extends PoPageSlideBaseComponent {
    poActiveOverlayService;
    _pageContent;
    firstElement;
    id = uuid();
    loadingCompleted = new ReplaySubject();
    sourceElement;
    focusEvent;
    set pageContent(pageContent) {
        if (pageContent) {
            this._pageContent = pageContent;
            this.loadingCompleted.next();
        }
    }
    get pageContent() {
        return this._pageContent;
    }
    constructor(poActiveOverlayService) {
        super();
        this.poActiveOverlayService = poActiveOverlayService;
    }
    open() {
        this.sourceElement = document.activeElement;
        super.open();
        this.loadingCompleted.pipe(take(1)).pipe(delay(0)).subscribe(this.handleFocus.bind(this));
    }
    close() {
        this.poActiveOverlayService.activeOverlay.pop();
        super.close();
        this.removeEventListeners();
        this.sourceElement.focus();
    }
    onClickOut(event) {
        if (this.clickOut && !this.pageContent.nativeElement.contains(event.target)) {
            this.close();
        }
    }
    handleFocus() {
        this.poActiveOverlayService.activeOverlay.push(this.id);
        this.loadFirstElement();
        this.initFocus();
        document.addEventListener('focus', this.focusEvent, true);
    }
    initFocus() {
        // O foco não pode sair da página.
        this.focusEvent = (event) => {
            if (!this.pageContent.nativeElement.contains(event.target) &&
                this.poActiveOverlayService.activeOverlay[this.poActiveOverlayService.activeOverlay.length - 1] === this.id) {
                event.stopPropagation();
                this.firstElement.focus();
            }
        };
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            const elements = getFocusableElements(this.pageContent.nativeElement);
            const element = elements[0] || this.pageContent.nativeElement;
            element.focus();
        }
    }
    loadFirstElement() {
        this.firstElement = getFocusableElements(this.pageContent.nativeElement)[0] || this.pageContent.nativeElement;
    }
    removeEventListeners() {
        document.removeEventListener('focus', this.focusEvent, true);
        this.loadingCompleted.complete();
    }
    static ɵfac = function PoPageSlideComponent_Factory(t) { return new (t || PoPageSlideComponent)(i0.ɵɵdirectiveInject(PoActiveOverlayService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageSlideComponent, selectors: [["po-page-slide"]], viewQuery: function PoPageSlideComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$10, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageContent = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2$d, decls: 1, vars: 1, consts: [["class", "po-page-slide", "tabindex", "0", 4, "ngIf"], ["tabindex", "0", 1, "po-page-slide"], [1, "po-page-slide-overlay", 3, "mousedown"], [3, "ngStyle"], ["tabindex", "-1", 1, "po-page-slide-content"], ["pageContent", ""], [1, "po-page-slide-header"], [1, "po-page-slide-title"], ["class", "po-page-slide-subtitle", 4, "ngIf"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 3, "p-click", 4, "ngIf"], [1, "po-page-slide-body"], [1, "po-page-slide-subtitle"], ["p-icon", "ICON_CLOSE", "p-kind", "tertiary", 3, "p-click"]], template: function PoPageSlideComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoPageSlideComponent_div_0_Template, 13, 11, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.hidden);
        } }, dependencies: [i1.NgIf, i1.NgStyle, PoButtonComponent], encapsulation: 2, data: { animation: [
                trigger('fade', [
                    transition(':enter', [
                        style({ opacity: 0 }),
                        group([animate('150ms', style({ opacity: 1 })), query('@slide', animateChild())])
                    ]),
                    transition(':leave', group([query('@slide', animateChild()), animate('150ms', style({ opacity: 0 }))]))
                ]),
                trigger('slide', [
                    transition(':enter', [
                        style({ transform: 'translateX(50px)' }),
                        animate('691ms ease-in-out', style({ transform: 'none' }))
                    ]),
                    transition(':leave', [animate('150ms', style({ transform: 'translateX(50px)' }))])
                ])
            ] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageSlideComponent, [{
        type: Component,
        args: [{ selector: 'po-page-slide', providers: [], animations: [
                    trigger('fade', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            group([animate('150ms', style({ opacity: 1 })), query('@slide', animateChild())])
                        ]),
                        transition(':leave', group([query('@slide', animateChild()), animate('150ms', style({ opacity: 0 }))]))
                    ]),
                    trigger('slide', [
                        transition(':enter', [
                            style({ transform: 'translateX(50px)' }),
                            animate('691ms ease-in-out', style({ transform: 'none' }))
                        ]),
                        transition(':leave', [animate('150ms', style({ transform: 'translateX(50px)' }))])
                    ])
                ], template: "<div class=\"po-page-slide\" tabindex=\"0\" *ngIf=\"!hidden\" [@fade]>\n  <div class=\"po-page-slide-overlay\" (mousedown)=\"onClickOut($event)\"></div>\n  <div\n    class=\"po-page-slide-container po-page-slide-right po-page-slide-{{ size }}\"\n    [@slide]\n    [ngStyle]=\"{ 'width': flexibleWidth ? '' : size === 'auto' ? 'auto' : '' }\"\n  >\n    <div class=\"po-page-slide-content\" tabindex=\"-1\" #pageContent>\n      <div class=\"po-page-slide-header\">\n        <div class=\"po-page-slide-title\">\n          <span>{{ title }}</span>\n          <div class=\"po-page-slide-subtitle\" *ngIf=\"subtitle\">{{ subtitle }}</div>\n        </div>\n        <po-button *ngIf=\"!hideClose\" p-icon=\"ICON_CLOSE\" p-kind=\"tertiary\" (p-click)=\"close()\"> </po-button>\n      </div>\n      <div class=\"po-page-slide-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: PoActiveOverlayService }], { pageContent: [{
            type: ViewChild,
            args: ['pageContent', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageSlideComponent, { className: "PoPageSlideComponent", filePath: "lib/components/po-page/po-page-slide/po-page-slide.component.ts", lineNumber: 52 }); })();

class PoPageSlideModule {
    static ɵfac = function PoPageSlideModule_Factory(t) { return new (t || PoPageSlideModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPageSlideModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoButtonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageSlideModule, [{
        type: NgModule,
        args: [{
                declarations: [PoPageSlideComponent],
                exports: [PoPageSlideComponent],
                imports: [CommonModule, FormsModule, PoButtonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPageSlideModule, { declarations: [PoPageSlideComponent], imports: [CommonModule, FormsModule, PoButtonModule], exports: [PoPageSlideComponent] }); })();

const _c0$$ = (a0, a1) => ({ "po-clickable": a0, "po-table-icon-disabled": a1 });
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir um ícone na tabela.
 */
class PoTableIconComponent {
    /** Define se o ícone é clicável. */
    clickable;
    /** Cor do ícone. */
    color;
    /** Desabilitado. */
    disabled;
    /** Classe css do ícone. */
    icon;
    /** Texto do tooltip. */
    iconTooltip;
    /** Output click. */
    click = new EventEmitter();
    tooltip;
    get allowTooltip() {
        return !this.disabled && this.iconTooltip;
    }
    onClick(event) {
        if (this.clickable) {
            this.click.emit(event);
        }
    }
    tooltipMouseEnter() {
        if (this.allowTooltip) {
            this.tooltip = this.iconTooltip;
        }
    }
    tooltipMouseLeave() {
        this.tooltip = undefined;
    }
    static ɵfac = function PoTableIconComponent_Factory(t) { return new (t || PoTableIconComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableIconComponent, selectors: [["po-table-icon"]], inputs: { clickable: [i0.ɵɵInputFlags.None, "p-clickable", "clickable"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], iconTooltip: [i0.ɵɵInputFlags.None, "p-icon-tooltip", "iconTooltip"] }, outputs: { click: "p-click" }, decls: 1, vars: 10, consts: [[3, "ngClass", "p-icon", "p-tooltip", "p-append-in-body", "click", "mouseenter", "mouseleave"]], template: function PoTableIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-icon", 0);
            i0.ɵɵlistener("click", function PoTableIconComponent_Template_po_icon_click_0_listener($event) { return ctx.onClick($event); })("mouseenter", function PoTableIconComponent_Template_po_icon_mouseenter_0_listener() { return ctx.tooltipMouseEnter(); })("mouseleave", function PoTableIconComponent_Template_po_icon_mouseleave_0_listener() { return ctx.tooltipMouseLeave(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-table-icon-content ", ctx.disabled ? "" : ctx.color, "");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(7, _c0$$, ctx.clickable, ctx.disabled))("p-icon", ctx.icon)("p-tooltip", ctx.tooltip)("p-append-in-body", true);
        } }, dependencies: [i1.NgClass, PoTooltipDirective, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableIconComponent, [{
        type: Component,
        args: [{ selector: 'po-table-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-icon\n  class=\"po-table-icon-content {{ disabled ? '' : color }}\"\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\n  [p-icon]=\"icon\"\n  [p-tooltip]=\"tooltip\"\n  [p-append-in-body]=\"true\"\n  (click)=\"onClick($event)\"\n  (mouseenter)=\"tooltipMouseEnter()\"\n  (mouseleave)=\"tooltipMouseLeave()\"\n></po-icon>\n" }]
    }], null, { clickable: [{
            type: Input,
            args: ['p-clickable']
        }], color: [{
            type: Input,
            args: ['p-color']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], iconTooltip: [{
            type: Input,
            args: ['p-icon-tooltip']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableIconComponent, { className: "PoTableIconComponent", filePath: "lib/components/po-table/po-table-icon/po-table-icon.component.ts", lineNumber: 15 }); })();

function PoTableColumnIconComponent_po_table_icon_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-icon", 1);
    i0.ɵɵlistener("p-click", function PoTableColumnIconComponent_po_table_icon_0_Template_po_table_icon_p_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const column_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.click(column_r1, $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-clickable", ctx_r0.isClickable(column_r1))("p-color", ctx_r0.getColor(column_r1))("p-disabled", ctx_r0.isDisabled(column_r1))("p-icon", ctx_r0.getIcon(column_r1))("p-icon-tooltip", column_r1.tooltip);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
class PoTableColumnIconComponent {
    /** Definição da coluna que utiliza os icones. */
    column;
    /** Dados da linha da tabela. */
    row;
    _icons = [];
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon, event) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon));
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
    static ɵfac = function PoTableColumnIconComponent_Factory(t) { return new (t || PoTableColumnIconComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnIconComponent, selectors: [["po-table-column-icon"]], inputs: { column: [i0.ɵɵInputFlags.None, "p-column", "column"], row: [i0.ɵɵInputFlags.None, "p-row", "row"], icons: [i0.ɵɵInputFlags.None, "p-icons", "icons"] }, decls: 1, vars: 2, consts: [[3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click"]], template: function PoTableColumnIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableColumnIconComponent_po_table_icon_0_Template, 1, 5, "po-table-icon", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.icons)("ngForTrackBy", ctx.trackByFunction);
        } }, dependencies: [i1.NgForOf, PoTableIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnIconComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n" }]
    }], null, { column: [{
            type: Input,
            args: ['p-column']
        }], row: [{
            type: Input,
            args: ['p-row']
        }], icons: [{
            type: Input,
            args: ['p-icons']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableColumnIconComponent, { className: "PoTableColumnIconComponent", filePath: "lib/components/po-table/po-table-column-icon/po-table-column-icon.component.ts", lineNumber: 18 }); })();

function PoTableColumnLabelComponent_po_tag_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tag", 1);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-color", ctx_r0.value == null ? null : ctx_r0.value.color)("p-value", ctx_r0.value == null ? null : ctx_r0.value.label)("p-text-color", ctx_r0.value == null ? null : ctx_r0.value.textColor)("p-icon", ctx_r0.value == null ? null : ctx_r0.value.icon)("p-type", ctx_r0.value == null ? null : ctx_r0.value.type);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação da representação da legenda, em formato de texto .
 */
class PoTableColumnLabelComponent {
    value;
    ngOnInit() {
        this.checkValueHasLabel();
    }
    checkValueHasLabel() {
        return this.value?.label?.trim() ? true : false;
    }
    static ɵfac = function PoTableColumnLabelComponent_Factory(t) { return new (t || PoTableColumnLabelComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnLabelComponent, selectors: [["po-table-column-label"]], inputs: { value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, decls: 1, vars: 1, consts: [[3, "p-color", "p-value", "p-text-color", "p-icon", "p-type", 4, "ngIf"], [3, "p-color", "p-value", "p-text-color", "p-icon", "p-type"]], template: function PoTableColumnLabelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableColumnLabelComponent_po_tag_0_Template, 1, 5, "po-tag", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.checkValueHasLabel());
        } }, dependencies: [i1.NgIf, PoTagComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnLabelComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-tag\n  *ngIf=\"checkValueHasLabel()\"\n  [p-color]=\"value?.color\"\n  [p-value]=\"value?.label\"\n  [p-text-color]=\"value?.textColor\"\n  [p-icon]=\"value?.icon\"\n  [p-type]=\"value?.type\"\n>\n</po-tag>\n" }]
    }], null, { value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableColumnLabelComponent, { className: "PoTableColumnLabelComponent", filePath: "lib/components/po-table/po-table-column-label/po-table-column-label.component.ts", lineNumber: 18 }); })();

function PoTableColumnLinkComponent_po_link_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-link", 4);
    i0.ɵɵlistener("p-action", function PoTableColumnLinkComponent_po_link_2_Template_po_link_p_action_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.action == null ? null : ctx_r3.action(ctx_r3.value, ctx_r3.row)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-label", ctx_r0.value)("p-open-new-tab", ctx_r0.openNewTab);
} }
function PoTableColumnLinkComponent_po_link_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-link", 5);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-label", ctx_r1.value)("p-open-new-tab", ctx_r1.openNewTab)("p-url", ctx_r1.link);
} }
function PoTableColumnLinkComponent_po_link_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-link", 5);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-label", ctx_r2.value)("p-open-new-tab", ctx_r2.openNewTab)("p-url", ctx_r2.link);
} }
const _c0$_ = a0 => ({ "po-table-link-disabled": a0 });
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir link nas colunas.
 */
class PoTableColumnLinkComponent {
    action;
    disabled;
    link;
    openNewTab = false;
    row;
    value;
    get type() {
        if (this.action) {
            return 'action';
        }
        return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
    }
    static ɵfac = function PoTableColumnLinkComponent_Factory(t) { return new (t || PoTableColumnLinkComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnLinkComponent, selectors: [["po-table-column-link"]], inputs: { action: [i0.ɵɵInputFlags.None, "p-action", "action"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], link: [i0.ɵɵInputFlags.None, "p-link", "link"], openNewTab: [i0.ɵɵInputFlags.None, "p-open-new-tab", "openNewTab"], row: [i0.ɵɵInputFlags.None, "p-row", "row"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, decls: 5, vars: 7, consts: [[1, "po-table-link", 3, "ngClass"], [3, "ngSwitch"], [3, "p-label", "p-open-new-tab", "p-action", 4, "ngSwitchCase"], [3, "p-label", "p-open-new-tab", "p-url", 4, "ngSwitchCase"], [3, "p-label", "p-open-new-tab", "p-action"], [3, "p-label", "p-open-new-tab", "p-url"]], template: function PoTableColumnLinkComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelementContainerStart(1, 1);
            i0.ɵɵtemplate(2, PoTableColumnLinkComponent_po_link_2_Template, 1, 2, "po-link", 2)(3, PoTableColumnLinkComponent_po_link_3_Template, 1, 3, "po-link", 3)(4, PoTableColumnLinkComponent_po_link_4_Template, 1, 3, "po-link", 3);
            i0.ɵɵelementContainerEnd();
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c0$_, ctx.disabled));
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "action");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
        } }, dependencies: [i1.NgClass, i1.NgSwitch, i1.NgSwitchCase, PoLinkComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnLinkComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-link', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-table-link\" [ngClass]=\"{ 'po-table-link-disabled': disabled }\">\n  <ng-container [ngSwitch]=\"type\">\n    <po-link\n      *ngSwitchCase=\"'action'\"\n      [p-label]=\"value\"\n      [p-open-new-tab]=\"openNewTab\"\n      (p-action)=\"action?.(value, row)\"\n    ></po-link>\n    <po-link *ngSwitchCase=\"'externalLink'\" [p-label]=\"value\" [p-open-new-tab]=\"openNewTab\" [p-url]=\"link\"></po-link>\n    <po-link *ngSwitchCase=\"'internalLink'\" [p-label]=\"value\" [p-open-new-tab]=\"openNewTab\" [p-url]=\"link\"></po-link>\n  </ng-container>\n</div>\n" }]
    }], null, { action: [{
            type: Input,
            args: ['p-action']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], link: [{
            type: Input,
            args: ['p-link']
        }], openNewTab: [{
            type: Input,
            args: ['p-open-new-tab']
        }], row: [{
            type: Input,
            args: ['p-row']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableColumnLinkComponent, { className: "PoTableColumnLinkComponent", filePath: "lib/components/po-table/po-table-column-link/po-table-column-link.component.ts", lineNumber: 17 }); })();

/**
 * @usedBy PoSwitchComponent
 *
 * @description
 *
 * Enum para posicionar o label do valor do po-switch.
 */
var PoSwitchLabelPosition;
(function (PoSwitchLabelPosition) {
    /** Posiciona o label do lado esquerdo do switch. */
    PoSwitchLabelPosition[PoSwitchLabelPosition["Right"] = 0] = "Right";
    /** Posiciona o label do lado direito do switch. */
    PoSwitchLabelPosition[PoSwitchLabelPosition["Left"] = 1] = "Left";
})(PoSwitchLabelPosition || (PoSwitchLabelPosition = {}));

const _c0$Z = ["switchContainer"];
function PoSwitchComponent_po_icon_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 10);
} }
function PoSwitchComponent_po_label_8_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-label", 11);
    i0.ɵɵlistener("click", function PoSwitchComponent_po_label_8_Template_po_label_click_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.eventClick()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r2.disabled)("p-label", ctx_r2.value === true ? ctx_r2.labelOn : ctx_r2.labelOff);
} }
/**
 * @docsExtends PoFieldModel
 *
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou desligar o switch utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-switch`, use `labels` diretos, curtos e intuitivos.
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Quando em foco, o switch é ativado usando a tecla de Espaço. [W3C WAI-ARIA 3.5 Switch - Keyboard Interaction](https://www.w3.org/WAI/ARIA/apg/patterns/switch/#keyboard-interaction-19)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Unchecked**                          |                                                       |                                                 |
 * | `--color-unchecked`                    | Cor principal no estado desmarcado                    | `var(--color-neutral-light-00)`                 |
 * | `--border-color`                       | Cor da borda                                          | `var(--color-neutral-dark-70)`                  |
 * | `--track-unchecked`                    | Cor principal da faixa no estado desmarcado           | `var(--color-neutral-light-20)`                 |
 * | **Checked**                            |                                                       |                                                 |
 * | `--color-checked`                      | Cor principal no estado selecionado                   | `var(--color-action-default)`                   |
 * | `--track-checked`                      | Cor da faixa no estado selecionado                    | `var(--color-brand-01-light)`                   |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-unchecked-hover`              | Cor principal no estado hover desmarcado              | `var(--color-action-pressed)`                   |
 * | `--color-checked-hover`                | Cor principal no estado hover marcado                 | `var(--color-action-pressed)`                   |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-unchecked-disabled`           | Cor principal do disabled no estado desmarcado        | `var(--color-neutral-light-20)`                 |
 * | `--color-checked-disabled`             | Cor principal do disabled no estado marcado           | `var(--color-action-disabled)`                  |
 *
 *
 * @example
 *
 * <example name="po-switch-basic" title="PO Switch Basic">
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-labs" title="PO Switch Labs">
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order" title="PO Switch - Order Summary">
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order-reactive-form" title="PO Switch - Order Summary Reactive Form">
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
 * </example>
 */
class PoSwitchComponent extends PoFieldModel {
    changeDetector;
    switchContainer;
    id = `po-switch[${uuid()}]`;
    // Parâmetro interno, não documentar
    value = false;
    _labelOff = 'false';
    _labelOn = 'true';
    _labelPosition = PoSwitchLabelPosition.Right;
    _formatModel = false;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o `model` receberá o valor formatado pelas propriedades `p-label-on` e `p-label-off` ou
     * apenas o valor puro (sem formatação).
     *
     * > Por padrão será atribuído `false`.
     * @default `false`
     */
    set formatModel(format) {
        this._formatModel = format || false;
    }
    get formatModel() {
        return this._formatModel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Posição de exibição do rótulo que fica ao lado do switch.
     *
     * > Por padrão exibe à direita.
     */
    set labelPosition(position) {
        this._labelPosition = position in PoSwitchLabelPosition ? parseInt(position, 10) : PoSwitchLabelPosition.Right;
    }
    get labelPosition() {
        return this._labelPosition;
    }
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * @default `false`
     */
    set labelOff(label) {
        this._labelOff = label || 'false';
    }
    get labelOff() {
        return this._labelOff;
    }
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * @default `true`
     */
    set labelOn(label) {
        this._labelOn = label || 'true';
    }
    get labelOn() {
        return this._labelOn;
    }
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.switchContainer.nativeElement.focus();
        }
    }
    onBlur() {
        this.onTouched?.();
    }
    getLabelPosition() {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left:
                return 'left';
            case PoSwitchLabelPosition.Right:
                return 'right';
            default:
                return 'right';
        }
    }
    onKeyDown(event) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            event.preventDefault();
            this.eventClick();
        }
    }
    changeValue(value) {
        if (this.value !== value) {
            this.value = value;
            if (this.formatModel) {
                if (this.value) {
                    this.updateModel(this.labelOn);
                }
                else {
                    this.updateModel(this.labelOff);
                }
            }
            else {
                this.updateModel(value);
            }
            this.emitChange(this.value);
        }
    }
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.value);
        }
    }
    onWriteValue(value) {
        if (value !== this.value) {
            if (this.formatModel && !!value) {
                this.value = value.toLowerCase() === this.labelOn.toLowerCase();
            }
            else {
                this.value = !!value;
            }
            this.changeDetector.markForCheck();
        }
    }
    static ɵfac = function PoSwitchComponent_Factory(t) { return new (t || PoSwitchComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSwitchComponent, selectors: [["po-switch"]], viewQuery: function PoSwitchComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$Z, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.switchContainer = _t.first);
        } }, inputs: { value: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-value", "value", convertToBoolean], formatModel: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-format-model", "formatModel", convertToBoolean], labelPosition: [i0.ɵɵInputFlags.None, "p-label-position", "labelPosition"], labelOff: [i0.ɵɵInputFlags.None, "p-label-off", "labelOff"], labelOn: [i0.ɵɵInputFlags.None, "p-label-on", "labelOn"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoSwitchComponent),
                    multi: true
                }
            ]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 14, consts: [[3, "p-disabled", "p-id", "p-label"], [1, "po-field-container-content"], [1, "po-switch"], ["role", "switch", 1, "po-switch-container", 3, "id", "tabindex", "blur", "click", "keydown"], ["switchContainer", ""], [1, "po-switch-track"], [1, "po-switch-toggle"], ["class", "po-switch-icon", "p-icon", "ICON_OK", 4, "ngIf"], ["class", "po-switch-label", 3, "p-disabled", "p-label", "click", 4, "ngIf"], [3, "p-help", "p-disabled"], ["p-icon", "ICON_OK", 1, "po-switch-icon"], [1, "po-switch-label", 3, "p-disabled", "p-label", "click"]], template: function PoSwitchComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3, 4);
            i0.ɵɵlistener("blur", function PoSwitchComponent_Template_div_blur_3_listener() { return ctx.onBlur(); })("click", function PoSwitchComponent_Template_div_click_3_listener() { return ctx.eventClick(); })("keydown", function PoSwitchComponent_Template_div_keydown_3_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementStart(5, "div", 5)(6, "div", 6);
            i0.ɵɵtemplate(7, PoSwitchComponent_po_icon_7_Template, 1, 0, "po-icon", 7);
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(8, PoSwitchComponent_po_label_8_Template, 1, 2, "po-label", 8);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(9, "po-field-container-bottom", 9);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label);
            i0.ɵɵadvance();
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance();
            i0.ɵɵattribute("data-label-position", ctx.getLabelPosition());
            i0.ɵɵadvance();
            i0.ɵɵproperty("id", ctx.id)("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("aria-checked", ctx.value)("aria-disabled", ctx.disabled);
            i0.ɵɵadvance(3);
            i0.ɵɵattribute("aria-label", ctx.value === true ? ctx.labelOn : ctx.labelOff);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.value === true);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.label);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgIf, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoLabelComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSwitchComponent, [{
        type: Component,
        args: [{ selector: 'po-switch', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSwitchComponent),
                        multi: true
                    }
                ], template: "<po-field-container [p-disabled]=\"disabled\" [p-id]=\"id\" [p-label]=\"label\">\n  <div class=\"po-field-container-content\" [attr.name]=\"name\">\n    <div class=\"po-switch\" [attr.data-label-position]=\"getLabelPosition()\">\n      <div\n        #switchContainer\n        class=\"po-switch-container\"\n        role=\"switch\"\n        [attr.aria-checked]=\"value\"\n        [attr.aria-disabled]=\"disabled\"\n        [id]=\"id\"\n        [tabindex]=\"disabled ? -1 : 0\"\n        (blur)=\"onBlur()\"\n        (click)=\"eventClick()\"\n        (keydown)=\"onKeyDown($event)\"\n      >\n        <div class=\"po-switch-track\">\n          <div class=\"po-switch-toggle\" [attr.aria-label]=\"value === true ? labelOn : labelOff\">\n            <po-icon *ngIf=\"value === true\" class=\"po-switch-icon\" p-icon=\"ICON_OK\"></po-icon>\n          </div>\n        </div>\n      </div>\n\n      <po-label\n        *ngIf=\"label\"\n        class=\"po-switch-label\"\n        [p-disabled]=\"disabled\"\n        [p-label]=\"value === true ? labelOn : labelOff\"\n        (click)=\"eventClick()\"\n      >\n      </po-label>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { switchContainer: [{
            type: ViewChild,
            args: ['switchContainer', { static: true }]
        }], value: [{
            type: Input,
            args: [{ alias: 'p-value', transform: convertToBoolean }]
        }], formatModel: [{
            type: Input,
            args: [{ alias: 'p-format-model', transform: convertToBoolean }]
        }], labelPosition: [{
            type: Input,
            args: ['p-label-position']
        }], labelOff: [{
            type: Input,
            args: ['p-label-off']
        }], labelOn: [{
            type: Input,
            args: ['p-label-on']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSwitchComponent, { className: "PoSwitchComponent", filePath: "lib/components/po-field/po-switch/po-switch.component.ts", lineNumber: 105 }); })();

function PoTableListManagerComponent_section_0_ng_container_3_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0$Y = a0 => ({ $implicit: a0 });
function PoTableListManagerComponent_section_0_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "li", 8);
    i0.ɵɵtemplate(2, PoTableListManagerComponent_section_0_ng_container_3_ng_container_1_ng_container_2_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    const _r3 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-checkbox-group-item-disabled", option_r9.disabled || ctx_r10.disabled);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(4, _c0$Y, option_r9));
} }
function PoTableListManagerComponent_section_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoTableListManagerComponent_section_0_ng_container_3_ng_container_1_Template, 3, 6, "ng-container", 7);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r9 = ctx.$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r8.isFixed(option_r9));
} }
function PoTableListManagerComponent_section_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "section", 1)(1, "p", 2);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, PoTableListManagerComponent_section_0_ng_container_3_Template, 2, 1, "ng-container", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r0.literals.fixedColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r0.checkboxGroupOptionsView)("ngForTrackBy", ctx_r0.trackByFn);
} }
function PoTableListManagerComponent_ng_container_4_ng_container_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableListManagerComponent_ng_container_4_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoTableListManagerComponent_ng_container_4_ng_container_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r13 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵnextContext();
    const _r3 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c0$Y, option_r13));
} }
function PoTableListManagerComponent_ng_container_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "li", 8);
    i0.ɵɵtemplate(2, PoTableListManagerComponent_ng_container_4_ng_container_1_ng_container_2_Template, 2, 4, "ng-container", 7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r13 = i0.ɵɵnextContext().$implicit;
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-checkbox-group-item-disabled", option_r13.disabled || ctx_r14.disabled);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r14.isFixed(option_r13));
} }
function PoTableListManagerComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoTableListManagerComponent_ng_container_4_ng_container_1_Template, 3, 3, "ng-container", 7);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r13 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r1.isFixed(option_r13));
} }
function PoTableListManagerComponent_ng_template_5_po_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 18);
    i0.ɵɵlistener("p-click", function PoTableListManagerComponent_ng_template_5_po_button_6_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r23); const option_r19 = i0.ɵɵnextContext().$implicit; const ctx_r21 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r21.emitFixed(option_r19)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r19 = i0.ɵɵnextContext().$implicit;
    const ctx_r20 = i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(10);
    const _r5 = i0.ɵɵreference(8);
    i0.ɵɵproperty("p-icon", ctx_r20.isFixed(option_r19) ? _r7 : _r5)("p-disabled", !option_r19.visible || ctx_r20.checksIfHasFiveFixed(option_r19));
} }
function PoTableListManagerComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 10)(1, "div", 11)(2, "po-switch", 12);
    i0.ɵɵlistener("p-change", function PoTableListManagerComponent_ng_template_5_Template_po_switch_p_change_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r26); const option_r19 = restoredCtx.$implicit; const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.clickSwitch(option_r19)); })("keydown", function PoTableListManagerComponent_ng_template_5_Template_po_switch_keydown_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r26); const option_r19 = restoredCtx.$implicit; const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.onKeyDown($event, option_r19)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "span", 13);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 14);
    i0.ɵɵtemplate(6, PoTableListManagerComponent_ng_template_5_po_button_6_Template, 1, 2, "po-button", 15);
    i0.ɵɵelementStart(7, "po-button", 16);
    i0.ɵɵlistener("p-click", function PoTableListManagerComponent_ng_template_5_Template_po_button_p_click_7_listener() { const restoredCtx = i0.ɵɵrestoreView(_r26); const option_r19 = restoredCtx.$implicit; const ctx_r28 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r28.emitChangePosition(option_r19, "up")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "po-button", 17);
    i0.ɵɵlistener("p-click", function PoTableListManagerComponent_ng_template_5_Template_po_button_p_click_8_listener() { const restoredCtx = i0.ɵɵrestoreView(_r26); const option_r19 = restoredCtx.$implicit; const ctx_r29 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r29.emitChangePosition(option_r19, "down")); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const option_r19 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-disabled", option_r19.disabled || ctx_r2.disabled || ctx_r2.isFixed(option_r19))("p-value", ctx_r2.checkedOptions[option_r19.value]);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", option_r19.label, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.hideActionFixedColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-tooltip", ctx_r2.literals.up)("p-disabled", ctx_r2.verifyArrowDisabled(option_r19, "up") || ctx_r2.isFixed(option_r19));
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-tooltip", ctx_r2.literals.down)("p-disabled", ctx_r2.verifyArrowDisabled(option_r19, "down") || ctx_r2.isFixed(option_r19));
} }
function PoTableListManagerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 19)(1, "g", 20);
    i0.ɵɵelement(2, "path", 21);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "defs")(4, "clipPath", 22);
    i0.ɵɵelement(5, "rect", 23);
    i0.ɵɵelementEnd()()();
} }
function PoTableListManagerComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 19)(1, "g", 24);
    i0.ɵɵelement(2, "path", 25);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "defs")(4, "clipPath", 26);
    i0.ɵɵelement(5, "rect", 27);
    i0.ɵɵelementEnd()()();
} }
const poTableListManagerLiterals = {
    en: {
        up: 'up',
        down: 'down',
        otherColumns: 'Other columns',
        fixedColumns: 'Fixed'
    },
    es: {
        up: 'arriba',
        down: 'abajo',
        otherColumns: 'Otras columnas',
        fixedColumns: 'Fijado'
    },
    pt: {
        up: 'acima',
        down: 'abaixo',
        otherColumns: 'Outras colunas',
        fixedColumns: 'Fixo'
    },
    ru: {
        up: 'вверх',
        down: 'вниз',
        otherColumns: 'Другие столбцы',
        fixedColumns: 'зафиксированный'
    }
};
class PoTableListManagerComponent extends PoCheckboxGroupComponent {
    changePosition = new EventEmitter();
    changeColumnFixed = new EventEmitter();
    columnsManager;
    hideActionFixedColumns = false;
    literals;
    constructor(languageService, changeDetector) {
        super(changeDetector);
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTableListManagerLiterals[poLocaleDefault],
            ...poTableListManagerLiterals[language]
        };
    }
    emitChangePosition(option, direction) {
        if (!this.isFixed(option)) {
            const infoPosition = { option, direction };
            const hasDisabled = this.verifyArrowDisabled(option, direction);
            if (!hasDisabled) {
                this.changePosition.emit(infoPosition);
            }
        }
    }
    verifyArrowDisabled(option, direction) {
        const index = this.columnsManager.findIndex(el => el.property === option.value);
        const existsDetail = this.columnsManager.some(function (el) {
            return el.property === 'detail';
        });
        const valueSubtraction = existsDetail ? 2 : 1;
        if (index === 0 && direction === 'up') {
            return true;
        }
        if (index !== 0 && direction === 'up' && this.columnsManager[index - 1].fixed) {
            return true;
        }
        if (index === this.columnsManager.length - valueSubtraction && direction === 'down') {
            return true;
        }
        return false;
    }
    emitFixed(option) {
        if (option.visible) {
            const index = this.columnsManager.findIndex(el => el.property === option.value);
            if (this.columnsManager[index].fixed === null ||
                this.columnsManager[index].fixed === undefined ||
                this.columnsManager[index].fixed === false) {
                this.columnsManager[index].fixed = true;
                option.fixed = true;
            }
            else {
                this.columnsManager[index].fixed = false;
                option.fixed = false;
            }
            this.changeColumnFixed.emit(option);
        }
    }
    isFixed(option) {
        const index = this.columnsManager.findIndex(el => el.property === option.value);
        if (this.columnsManager[index].fixed === true) {
            return true;
        }
        return false;
    }
    existedFixedItem() {
        return this.columnsManager.some(option => option['fixed'] === true);
    }
    checksIfHasFiveFixed(option) {
        const isMoreThanFive = this.columnsManager.filter(item => item.fixed === true).length > 4;
        const isNotFixed = !this.isFixed(option);
        return isMoreThanFive && isNotFixed;
    }
    clickSwitch(option) {
        this.checkOption(option);
    }
    static ɵfac = function PoTableListManagerComponent_Factory(t) { return new (t || PoTableListManagerComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableListManagerComponent, selectors: [["po-table-list-manager"]], inputs: { columnsManager: [i0.ɵɵInputFlags.None, "p-columns-manager", "columnsManager"], hideActionFixedColumns: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-action-fixed-columns", "hideActionFixedColumns", convertToBoolean] }, outputs: { changePosition: "p-change-position", changeColumnFixed: "p-change-fixed" }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoTableListManagerComponent),
                    multi: true
                }
            ]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature], decls: 11, vars: 4, consts: [["class", "po-table-list-manager-section", 4, "ngIf"], [1, "po-table-list-manager-section"], [1, "po-table-list-manager-title-group-items"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["listItemsManagerDefault", ""], ["templateIconNotFixed", ""], ["templateIconFixed", ""], [4, "ngIf"], [1, "po-table-list-manager-container"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-table-list-manager-item"], [1, "po-table-list-manager-item-switch"], ["name", "switch", "p-label-off", " ", "p-label-on", " ", 3, "p-disabled", "p-value", "p-change", "keydown"], [1, "po-table-list-manager-item-text"], [1, "po-table-list-manager-item-buttons"], [3, "p-icon", "p-disabled", "p-click", 4, "ngIf"], ["p-tooltip-position", "left", "p-icon", "ICON_ARROW_UP", 3, "p-tooltip", "p-disabled", "p-click"], ["p-tooltip-position", "top", "p-icon", "ICON_ARROW_DOWN", 3, "p-tooltip", "p-disabled", "p-click"], [3, "p-icon", "p-disabled", "p-click"], ["xmlns", "http://www.w3.org/2000/svg", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none"], ["clip-path", "url(#clip0_12562_15948)"], ["d", "M13.7143 5.71429V10C13.7143 10.96 14.0314 11.8514 14.5714 12.5714H9.42857C9.98571 11.8343 10.2857 10.9429 10.2857 10V5.71429H13.7143ZM16.2857 4H7.71429C7.24286 4 6.85714 4.38571 6.85714 4.85714C6.85714 5.32857 7.24286 5.71429 7.71429 5.71429H8.57143V10C8.57143 11.4229 7.42286 12.5714 6 12.5714V14.2857H11.1171V20.2857L11.9743 21.1429L12.8314 20.2857V14.2857H18V12.5714C16.5771 12.5714 15.4286 11.4229 15.4286 10V5.71429H16.2857C16.7571 5.71429 17.1429 5.32857 17.1429 4.85714C17.1429 4.38571 16.7571 4 16.2857 4Z", "fill", "black"], ["id", "clip0_12562_15948"], ["width", "24", "height", "24", "fill", "white"], ["clip-path", "url(#clip0_12562_17487)"], ["d", "M16.2857 4H7.71429C7.24286 4 6.85714 4.38571 6.85714 4.85714C6.85714 5.32857 7.24286 5.71429 7.71429 5.71429H8.57143V10C8.57143 11.4229 7.42286 12.5714 6 12.5714V14.2857H11.1171V20.2857L11.9743 21.1429L12.8314 20.2857V14.2857H18V12.5714C16.5771 12.5714 15.4286 11.4229 15.4286 10V5.71429H16.2857C16.7571 5.71429 17.1429 5.32857 17.1429 4.85714C17.1429 4.38571 16.7571 4 16.2857 4Z", "fill", "#B4B4C0"], ["id", "clip0_12562_17487"], ["width", "24", "height", "24", "fill", "black"]], template: function PoTableListManagerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableListManagerComponent_section_0_Template, 4, 3, "section", 0);
            i0.ɵɵelementStart(1, "section", 1)(2, "p", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoTableListManagerComponent_ng_container_4_Template, 2, 1, "ng-container", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoTableListManagerComponent_ng_template_5_Template, 9, 8, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor)(7, PoTableListManagerComponent_ng_template_7_Template, 6, 0, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor)(9, PoTableListManagerComponent_ng_template_9_Template, 6, 0, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.existedFixedItem());
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals.otherColumns);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.checkboxGroupOptionsView)("ngForTrackBy", ctx.trackByFn);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoButtonComponent, PoTooltipDirective, PoSwitchComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableListManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-table-list-manager', providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoTableListManagerComponent),
                        multi: true
                    }
                ], template: "<section class=\"po-table-list-manager-section\" *ngIf=\"existedFixedItem()\">\n  <p class=\"po-table-list-manager-title-group-items\">{{ literals.fixedColumns }}</p>\n  <ng-container *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\">\n    <ng-container *ngIf=\"isFixed(option)\">\n      <li class=\"po-table-list-manager-container\" [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n        <ng-container *ngTemplateOutlet=\"listItemsManagerDefault; context: { $implicit: option }\"></ng-container>\n      </li>\n    </ng-container>\n  </ng-container>\n</section>\n\n<section class=\"po-table-list-manager-section\">\n  <p class=\"po-table-list-manager-title-group-items\">{{ literals.otherColumns }}</p>\n  <ng-container *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\">\n    <ng-container *ngIf=\"!isFixed(option)\">\n      <li class=\"po-table-list-manager-container\" [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n        <ng-container *ngIf=\"!isFixed(option)\">\n          <ng-container *ngTemplateOutlet=\"listItemsManagerDefault; context: { $implicit: option }\"></ng-container>\n        </ng-container>\n      </li>\n    </ng-container>\n  </ng-container>\n</section>\n\n<ng-template #listItemsManagerDefault let-option>\n  <div class=\"po-table-list-manager-item\">\n    <div class=\"po-table-list-manager-item-switch\">\n      <po-switch\n        name=\"switch\"\n        (p-change)=\"clickSwitch(option)\"\n        (keydown)=\"onKeyDown($event, option)\"\n        [p-disabled]=\"option.disabled || disabled || isFixed(option)\"\n        [p-value]=\"checkedOptions[option.value]\"\n        p-label-off=\" \"\n        p-label-on=\" \"\n      >\n      </po-switch>\n      <span class=\"po-table-list-manager-item-text\">\n        {{ option.label }}\n      </span>\n    </div>\n\n    <div class=\"po-table-list-manager-item-buttons\">\n      <po-button\n        *ngIf=\"!hideActionFixedColumns\"\n        [p-icon]=\"isFixed(option) ? templateIconFixed : templateIconNotFixed\"\n        (p-click)=\"emitFixed(option)\"\n        [p-disabled]=\"!option.visible || checksIfHasFiveFixed(option)\"\n      >\n      </po-button>\n\n      <po-button\n        [p-tooltip]=\"literals.up\"\n        p-tooltip-position=\"left\"\n        p-icon=\"ICON_ARROW_UP\"\n        [p-disabled]=\"verifyArrowDisabled(option, 'up') || isFixed(option)\"\n        (p-click)=\"emitChangePosition(option, 'up')\"\n      >\n      </po-button>\n\n      <po-button\n        [p-tooltip]=\"literals.down\"\n        p-tooltip-position=\"top\"\n        p-icon=\"ICON_ARROW_DOWN\"\n        [p-disabled]=\"verifyArrowDisabled(option, 'down') || isFixed(option)\"\n        (p-click)=\"emitChangePosition(option, 'down')\"\n      >\n      </po-button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #templateIconNotFixed>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n    <g clip-path=\"url(#clip0_12562_15948)\">\n      <path\n        d=\"M13.7143 5.71429V10C13.7143 10.96 14.0314 11.8514 14.5714 12.5714H9.42857C9.98571 11.8343 10.2857 10.9429 10.2857 10V5.71429H13.7143ZM16.2857 4H7.71429C7.24286 4 6.85714 4.38571 6.85714 4.85714C6.85714 5.32857 7.24286 5.71429 7.71429 5.71429H8.57143V10C8.57143 11.4229 7.42286 12.5714 6 12.5714V14.2857H11.1171V20.2857L11.9743 21.1429L12.8314 20.2857V14.2857H18V12.5714C16.5771 12.5714 15.4286 11.4229 15.4286 10V5.71429H16.2857C16.7571 5.71429 17.1429 5.32857 17.1429 4.85714C17.1429 4.38571 16.7571 4 16.2857 4Z\"\n        fill=\"black\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_12562_15948\">\n        <rect width=\"24\" height=\"24\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</ng-template>\n\n<ng-template #templateIconFixed>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n    <g clip-path=\"url(#clip0_12562_17487)\">\n      <path\n        d=\"M16.2857 4H7.71429C7.24286 4 6.85714 4.38571 6.85714 4.85714C6.85714 5.32857 7.24286 5.71429 7.71429 5.71429H8.57143V10C8.57143 11.4229 7.42286 12.5714 6 12.5714V14.2857H11.1171V20.2857L11.9743 21.1429L12.8314 20.2857V14.2857H18V12.5714C16.5771 12.5714 15.4286 11.4229 15.4286 10V5.71429H16.2857C16.7571 5.71429 17.1429 5.32857 17.1429 4.85714C17.1429 4.38571 16.7571 4 16.2857 4Z\"\n        fill=\"#B4B4C0\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_12562_17487\">\n        <rect width=\"24\" height=\"24\" fill=\"black\" />\n      </clipPath>\n    </defs>\n  </svg>\n</ng-template>\n" }]
    }], () => [{ type: PoLanguageService }, { type: i0.ChangeDetectorRef }], { changePosition: [{
            type: Output,
            args: ['p-change-position']
        }], changeColumnFixed: [{
            type: Output,
            args: ['p-change-fixed']
        }], columnsManager: [{
            type: Input,
            args: ['p-columns-manager']
        }], hideActionFixedColumns: [{
            type: Input,
            args: [{ alias: 'p-hide-action-fixed-columns', transform: convertToBoolean }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableListManagerComponent, { className: "PoTableListManagerComponent", filePath: "lib/components/po-table/po-table-list-manager/po-table-list-manager.component.ts", lineNumber: 50 }); })();

const _c0$X = ["pageSlideColumnsManager"];
const PoTableColumnManagerMaxColumnsDefault = 99999;
const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
class PoTableColumnManagerComponent {
    renderer;
    popover;
    pageSlideColumnsManager;
    columns = [];
    target;
    colunsDefault;
    lastVisibleColumnsSelected = [];
    visibleColumnsChange = new EventEmitter();
    // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
    // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
    changeVisibleColumns = new EventEmitter();
    initialColumns = new EventEmitter();
    hideActionFixedColumns = false;
    literals;
    columnsOptions = [];
    visibleColumns = [];
    columnUpdate;
    _maxColumns = PoTableColumnManagerMaxColumnsDefault;
    defaultColumns = [];
    resizeListener;
    restoreDefaultEvent;
    lastEmittedValue;
    minColumns = 1;
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    constructor(renderer, languageService) {
        this.renderer = renderer;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTableColumnManagerLiteralsDefault[poLocaleDefault],
            ...poTableColumnManagerLiteralsDefault[language]
        };
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target, lastVisibleColumnsSelected } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
        if (lastVisibleColumnsSelected?.currentValue) {
            this.pageSlideColumnsManager.open();
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        this.defaultColumns = this.removePropertyFixed(this.defaultColumns);
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.initialColumns.emit(this.getVisibleColumns(this.colunsDefault));
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    changePosition({ option, direction }) {
        const indexColumn = this.columns.findIndex(el => el.property === option.value);
        const newColumn = [...this.columns];
        this.changePositionColumn(newColumn, indexColumn, direction);
        this.columns = newColumn;
        this.visibleColumnsChange.emit(this.columns);
    }
    emitColumnFixed(option) {
        const newColumn = [...this.columns];
        if (option) {
            newColumn.forEach(itemColumn => {
                if (itemColumn.property === option.value) {
                    itemColumn.fixed = option.fixed;
                }
            });
            const amountOfFixed = newColumn.filter(itemFixed => itemFixed.fixed === true).length;
            const indexColumn = newColumn.findIndex(el => el.property === option.value);
            const item = newColumn.splice(indexColumn, 1)[0];
            if (option.fixed) {
                newColumn.splice(amountOfFixed - 1, 0, item);
            }
            if (option.fixed === false) {
                newColumn.splice(amountOfFixed, 0, item);
            }
            this.columns = [...newColumn];
        }
        this.visibleColumnsChange.emit(newColumn);
    }
    changePositionColumn(array, index, direction) {
        if (direction === 'up') {
            array.splice(index, 0, array.splice(index - 1, 1)[0]);
        }
        if (direction === 'down') {
            array.splice(index, 0, array.splice(index + 1, 1)[0]);
        }
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (newColumns.length >= 1 && this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
        // Desabilita ultimo checkbox ativo
        if (newColumns.length === 1) {
            const columnsOptions = this.mapTableColumnsToCheckboxOptions(this.columnUpdate);
            this.columnsOptions = this.disabledLastColumn(columnsOptions);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.visibleColumnsChange.emit(this.defaultColumns);
        }
        this.restoreDefaultEvent = false;
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice();
        const secondSort = two.slice();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => ({
            ...column,
            disabled: this.isDisableColumn(column.value)
        }));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => ({
            ...column,
            visible: visibleColumns.includes(column.property) || column.type === 'detail'
        }));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property),
                    visible: column.visible
                });
            }
        });
        return columnsOptions;
    }
    disabledLastColumn(columns) {
        return columns.map(column => ({
            ...column,
            disabled: column.type !== 'detail' && column.visible ? true : false
        }));
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        this.columnUpdate = columns.currentValue;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
    removePropertyFixed(arr) {
        return arr.map(obj => {
            if (obj.hasOwnProperty('fixed')) {
                obj.fixed = false;
            }
            return obj;
        });
    }
    static ɵfac = function PoTableColumnManagerComponent_Factory(t) { return new (t || PoTableColumnManagerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnManagerComponent, selectors: [["po-table-column-manager"]], viewQuery: function PoTableColumnManagerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPopoverComponent, 5);
            i0.ɵɵviewQuery(_c0$X, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageSlideColumnsManager = _t.first);
        } }, inputs: { columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], target: [i0.ɵɵInputFlags.None, "p-target", "target"], colunsDefault: [i0.ɵɵInputFlags.None, "p-columns-default", "colunsDefault"], lastVisibleColumnsSelected: [i0.ɵɵInputFlags.None, "p-last-visible-columns-selected", "lastVisibleColumnsSelected"], hideActionFixedColumns: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-action-fixed-columns", "hideActionFixedColumns", convertToBoolean], maxColumns: [i0.ɵɵInputFlags.None, "p-max-columns", "maxColumns"] }, outputs: { visibleColumnsChange: "p-visible-columns-change", changeVisibleColumns: "p-change-visible-columns", initialColumns: "p-initial-columns" }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 7, consts: [["p-size", "auto", 3, "p-title", "p-click-out", "p-close"], ["pageSlideColumnsManager", ""], [1, "po-table-column-manager-body"], ["name", "visibleColumns", "p-columns", "1", 3, "ngModel", "p-options", "p-hide-action-fixed-columns", "p-columns-manager", "ngModelChange", "p-change", "p-change-position", "p-change-fixed"], [1, "po-table-column-manager-footer"], ["p-kind", "tertiary", 1, "po-table-column-manager-footer-restore", 3, "p-label", "p-click"]], template: function PoTableColumnManagerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-page-slide", 0, 1);
            i0.ɵɵlistener("p-close", function PoTableColumnManagerComponent_Template_po_page_slide_p_close_0_listener() { return ctx.checkChanges([], true); });
            i0.ɵɵelementStart(2, "div")(3, "div", 2)(4, "po-table-list-manager", 3);
            i0.ɵɵtwoWayListener("ngModelChange", function PoTableColumnManagerComponent_Template_po_table_list_manager_ngModelChange_4_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.visibleColumns, $event) || (ctx.visibleColumns = $event); return $event; });
            i0.ɵɵlistener("p-change", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_4_listener($event) { return ctx.checkChanges($event, false); })("p-change-position", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_position_4_listener($event) { return ctx.changePosition($event); })("p-change-fixed", function PoTableColumnManagerComponent_Template_po_table_list_manager_p_change_fixed_4_listener($event) { return ctx.emitColumnFixed($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(5, "div", 4)(6, "po-button", 5);
            i0.ɵɵlistener("p-click", function PoTableColumnManagerComponent_Template_po_button_p_click_6_listener() { return ctx.restore(); });
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            i0.ɵɵproperty("p-title", ctx.literals.columnsManager)("p-click-out", true);
            i0.ɵɵadvance(4);
            i0.ɵɵtwoWayProperty("ngModel", ctx.visibleColumns);
            i0.ɵɵproperty("p-options", ctx.columnsOptions)("p-hide-action-fixed-columns", ctx.hideActionFixedColumns)("p-columns-manager", ctx.columns);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-label", ctx.literals.restoreDefault);
        } }, dependencies: [i2$1.NgControlStatus, i2$1.NgModel, PoButtonComponent, PoPageSlideComponent, PoTableListManagerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-manager', template: "<po-page-slide\n  #pageSlideColumnsManager\n  p-size=\"auto\"\n  [p-title]=\"literals.columnsManager\"\n  [p-click-out]=\"true\"\n  (p-close)=\"checkChanges([], true)\"\n>\n  <div>\n    <div class=\"po-table-column-manager-body\">\n      <po-table-list-manager\n        name=\"visibleColumns\"\n        [(ngModel)]=\"visibleColumns\"\n        p-columns=\"1\"\n        [p-options]=\"columnsOptions\"\n        [p-hide-action-fixed-columns]=\"hideActionFixedColumns\"\n        (p-change)=\"checkChanges($event, false)\"\n        (p-change-position)=\"changePosition($event)\"\n        (p-change-fixed)=\"emitColumnFixed($event)\"\n        [p-columns-manager]=\"columns\"\n      >\n      </po-table-list-manager>\n    </div>\n\n    <div class=\"po-table-column-manager-footer\">\n      <po-button\n        class=\"po-table-column-manager-footer-restore\"\n        p-kind=\"tertiary\"\n        [p-label]=\"literals.restoreDefault\"\n        (p-click)=\"restore()\"\n      >\n      </po-button>\n    </div>\n  </div>\n</po-page-slide>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: PoLanguageService }], { popover: [{
            type: ViewChild,
            args: [PoPopoverComponent]
        }], pageSlideColumnsManager: [{
            type: ViewChild,
            args: ['pageSlideColumnsManager']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], colunsDefault: [{
            type: Input,
            args: ['p-columns-default']
        }], lastVisibleColumnsSelected: [{
            type: Input,
            args: ['p-last-visible-columns-selected']
        }], visibleColumnsChange: [{
            type: Output,
            args: ['p-visible-columns-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], initialColumns: [{
            type: Output,
            args: ['p-initial-columns']
        }], hideActionFixedColumns: [{
            type: Input,
            args: [{ alias: 'p-hide-action-fixed-columns', transform: convertToBoolean }]
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableColumnManagerComponent, { className: "PoTableColumnManagerComponent", filePath: "lib/components/po-table/po-table-column-manager/po-table-column-manager.component.ts", lineNumber: 50 }); })();

/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto `PoNotification` que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 9 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * Notificações com ação ou notificações de `erro` permanecerão em tela até o usuário fecha-lá ou clicar na ação.
 *
 * O serviço possui um limite de até 5 notificações por vez, a partir do sexto a primeira notificação será removida dando lugar a nova.
 *
 */
class PoNotificationBaseService {
    // Array responsável por guardar a instância de po-toaster's superiores.
    stackTop = [];
    // Array responsável por guardar a instância de po-toaster's inferiores.
    stackBottom = [];
    // Duração da notificação ativa.
    defaultDuration = 9000;
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    success(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    }
    /**
     * Emite uma notificação de atenção.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    warning(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    }
    /**
     * Emite uma notificação de erro.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    error(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    }
    /**
     * Emite uma notificação de informação.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    information(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    }
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 9 segundos.
     *
     * @param {number} defaultDuration Duração em milisegundos
     */
    setDefaultDuration(defaultDuration) {
        this.defaultDuration = defaultDuration;
    }
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
     */
    buildToaster(notification, type) {
        let index = 0;
        let orientation;
        if (notification.orientation === undefined ||
            notification.orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        const toaster = {
            componentRef: undefined,
            message: notification.message || notification,
            type: type,
            orientation: orientation,
            action: notification.action,
            actionLabel: notification.actionLabel,
            position: index,
            duration: notification.duration || this.defaultDuration
        };
        if (notification.action) {
            toaster.action = (param) => {
                notification.action();
                this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    }
}

const PoNotificationMaxLength = 5;
const PoNotificationFadeTime = 200;
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
class PoNotificationService extends PoNotificationBaseService {
    poComponentInjector;
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        const stack = toaster.orientation === PoToasterOrientation.Top ? this.stackTop : this.stackBottom;
        stack.push(componentRef);
        this.verifyLimitToaster(stack);
        this.observableOnClose(componentRef);
        if (!((toaster.action && toaster.actionLabel) || toaster.type === PoToasterType.Error)) {
            timer(toaster.duration)
                .pipe(takeWhile(() => componentRef.instance.alive))
                .subscribe(() => {
                this.destroyToaster(componentRef);
            });
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        toaster.instance.setFadeOut();
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        setTimeout(() => {
            this.poComponentInjector.destroyComponentInApplication(toaster);
            for (let count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        }, PoNotificationFadeTime);
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
    verifyLimitToaster(stack) {
        if (stack.length > PoNotificationMaxLength) {
            this.destroyToaster(stack[0]);
        }
    }
    static ɵfac = function PoNotificationService_Factory(t) { return new (t || PoNotificationService)(i0.ɵɵinject(PoComponentInjectorService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoNotificationService, factory: PoNotificationService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: PoComponentInjectorService }], null); })();

/**
 * @usedBy PoTableRowTemplateDirective
 *
 * @description
 * Define a posição da arrow que expande o * row template* na tabela, será exibida na esquerda ou direita.
 */
var PoTableRowTemplateArrowDirection;
(function (PoTableRowTemplateArrowDirection) {
    /** Posiciona a *arrow* na esquerda. (Padrão) */
    PoTableRowTemplateArrowDirection["Left"] = "LEFT";
    /** Posiciona a *arrow* na direita */
    PoTableRowTemplateArrowDirection["Right"] = "RIGHT";
})(PoTableRowTemplateArrowDirection || (PoTableRowTemplateArrowDirection = {}));

/**
 * @usedBy PoSearchComponent
 *
 * @description
 *
 * Define o tipo de busca usado no po-search.
 */
var PoSearchFilterMode;
(function (PoSearchFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. */
    PoSearchFilterMode[PoSearchFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoSearchFilterMode[PoSearchFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoSearchFilterMode[PoSearchFilterMode["endsWith"] = 2] = "endsWith";
})(PoSearchFilterMode || (PoSearchFilterMode = {}));

/**
 * @usedBy PoTableComponent
 *
 * @description
 * Tipos de ordenação das colunas da tabela.
 */
var PoTableColumnSortType;
(function (PoTableColumnSortType) {
    /** Ordenação ascendente */
    PoTableColumnSortType["Ascending"] = "ascending";
    /** Ordenação descendente */
    PoTableColumnSortType["Descending"] = "descending";
})(PoTableColumnSortType || (PoTableColumnSortType = {}));

/**
 * @usedBy PoTableComponent
 *
 * @description
 * Tipos de espaçamento das colunas da tabela.
 */
var PoTableColumnSpacing;
(function (PoTableColumnSpacing) {
    /** Espaçamento pequeno */
    PoTableColumnSpacing["Small"] = "small";
    /** Espaçamento médio */
    PoTableColumnSpacing["Medium"] = "medium";
    /** Espaçamento grande */
    PoTableColumnSpacing["Large"] = "large";
})(PoTableColumnSpacing || (PoTableColumnSpacing = {}));

class PoTableService {
    http;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    url;
    urlDelete;
    constructor(http) {
        this.http = http;
    }
    getFilteredItems(filteredParams) {
        const params = this.validateParams(filteredParams);
        return this.http.get(this.url, { headers: this.headers, params });
    }
    deleteItem(paramDelete, paramResponse) {
        const params = {
            [paramDelete]: paramResponse
        };
        return this.http.delete(this.urlDelete, { headers: this.headers, params });
    }
    setUrl(url, method) {
        if (method === 'GET') {
            this.url = url;
        }
        else {
            this.urlDelete = url;
        }
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime$1(100));
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
    static ɵfac = function PoTableService_Factory(t) { return new (t || PoTableService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTableService, factory: PoTableService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1$2.HttpClient }], null); })();

const poTableContainer = ['border', 'shadow'];
const poTableContainerDefault = 'border';
const poTableParamDeleteApi = 'id';
const poTableLiteralsDefault = {
    en: {
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noItem: 'No selected item',
        oneItem: '1 selected item',
        multipleItems: 'selected items',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager',
        bodyDelete: 'Do you really want to delete this item?',
        cancel: 'Cancel',
        delete: 'Delete',
        deleteSuccessful: 'Items removed successfully',
        deleteApiError: 'An unexpected error occurred, please try again later'
    },
    es: {
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noItem: 'Ningún elemento seleccionado',
        oneItem: '1 elemento seleccionado',
        multipleItems: 'elementos seleccionados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna',
        bodyDelete: '¿Realmente desea eliminar este elemento?',
        cancel: 'Cancelar',
        delete: 'Borrar',
        deleteSuccessful: 'Elementos eliminados con éxito',
        deleteApiError: 'Ocurrió un error inesperado, inténtalo de nuevo más tarde'
    },
    pt: {
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        noItem: 'Nenhum item selecionado',
        oneItem: '1 item selecionado',
        multipleItems: 'itens selecionados',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas',
        bodyDelete: 'Deseja realmente excluir esse item?',
        cancel: 'Cancelar',
        delete: 'Excluir',
        deleteSuccessful: 'Itens removidos com sucesso',
        deleteApiError: 'Ocorreu um erro inesperado, tente novamente mais tarde!'
    },
    ru: {
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noItem: 'Нет выбранного элемента',
        oneItem: '1 элемент выбран',
        multipleItems: 'выбранные элементы',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'Загрузка',
        loadMoreData: 'Загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок',
        bodyDelete: 'Вы действительно хотите удалить этот элемент?',
        cancel: 'Отмена',
        delete: 'Удалить',
        deleteSuccessful: 'Элементы успешно удалены',
        deleteApiError: 'Произошла непредвиденная ошибка, повторите попытку позже'
    }
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)
 * e [`p-table-cell-template`](/documentation/po-table-cell-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--background-color`                   | Cor de background                                     | `var(--color-neutral-light-00)`                   |
 * | `--color`                              | Cor principal da table                                | `var(--color-neutral-dark-95)`                    |
 * | `--background-striped-color`           | Cor do background quando striped                      | `var(--color-neutral-light-05)`                   |
 * | `--color-line`                         | Cor das linhas                                        | `var(--color-neutral-mid-40)`                     |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-color-hover`             | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                   |
 * | **Focused**                            |                                                       |                                                   |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-mid-40)`                     |
 * | **Headline**                           |                                                       |                                                   |
 * | `--background-color-headline` &nbsp;   | Cor do cabeçalho                                      | `var(--color-neutral-light-10)`                   |
 * | `--font-weight-headline`               | Peso da fonte do cabeçalho                            | `var(--font-weight-bold)`                         |
 * | **Selected**                           |                                                       |                                                   |
 * | `--background-color-selected`&nbsp;    | Cor de background no estado de selecionado            | `var(--color-brand-01-lightest)`                  |
 * | **Actived**                            |                                                       |                                                   |
 * | `--color-actived`                      | Cor do texto no estado de selecionado                 | `var(--color-neutral-dark-90)`                    |
 * | `--background-color-actived`           | Cor de background no estado de selecionado            | `var(--color-brand-01-light)`                     |
 *
 */
class PoTableBaseComponent {
    poDate;
    poTableService;
    /**
     * @optional
     *
     * @description
     *
     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
     *
     * @default `false`
     */
    hideColumnsManager = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite que as ações em lote, responsável por excluir e exibir a quantidade de itens, sejam escondidas.
     *
     * @default `true`
     */
    hideBatchActions = true;
    /**
     * @optional
     *
     * @description
     *
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     *
     * @default `false`
     */
    textWrap = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite que as ações para fixar uma coluna da tabela sejam escondidas.
     *
     * @default `false`
     */
    set hideActionFixedColumns(hide) {
        if (hide) {
            this.columns = this.removePropertyFixed(this.columns);
        }
        this._hideActionFixedColumns = hide;
    }
    get hideActionFixedColumns() {
        return this._hideActionFixedColumns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite que o campo de pesquisa seja escondido.
     *
     * @default `true`
     */
    hideTableSearch = true;
    /**
     * @optional
     *
     * @description
     *
     * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.
     *
     * @default `false`
     */
    autoCollapse = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite que seja adicionado o estado de carregamento no botão "Carregar mais resultados".
     *
     * @default `false`
     */
    loadingShowMore = false;
    /**
     * @optional
     *
     * @description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * @default `false`
     */
    sort = false;
    /**
     * @description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * @default `false`
     */
    showMoreDisabled = false;
    /**
     * @description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * @default `false`
     */
    striped = false;
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * @default `false`
     */
    hideSelectAll = false;
    /**
     * @description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     */
    singleSelect = false;
    /**
     * @description
     *
     * Permite selecionar um item da tabela clicando na linha.
     *
     * > Caso haja necessidade de selecionar o item apenas via radio ou checkbox, deve-se definir esta propriedade como `false`.
     *
     * @default `true`
     */
    selectableEntireLine = true;
    /**
     * @optional
     *
     * @description
     *
     * Define que a coluna de ações ficará no lado direito da tabela.
     *
     * @default `false`
     */
    actionRight = false;
    /**
     * @optional
     *
     * @description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     */
    maxColumns;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoSearchFilterMode
     * > Obs: A pesquisa é realizada exclusivamente nos dados locais, ou seja, aqueles que foram
     * > renderizados na tabela.
     *
     * @default `startsWith`
     */
    filterType = PoSearchFilterMode.startsWith;
    /**
     * @optional
     *
     * @description
     * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     */
    allSelected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     */
    allUnselected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado ao colapsar uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado ao expandir uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado após o método de exclusão ser finalizado.
     *
     * ```
     *<po-table
     *  (p-delete-items)="items = $event"
     * >
     *</po-table>
     * ```
     *
     *
     * > Como parâmetro o componente envia a lista atualizada, sem os itens excluídos.
     */
    eventDelete = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado ao selecionar uma linha do `po-table`.
     */
    selected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    showMore = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento executado ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    sortBy = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento executado ao desmarcar a seleção de uma linha do `po-table`.
     */
    unselected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao fechar o page slide do gerenciador de colunas após alterar as colunas visíveis.
     *
     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    changeVisibleColumns = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
     *
     * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    columnRestoreManager = new EventEmitter();
    allColumnsWidthPixels;
    columnMasterDetail;
    hasMainColumns = false;
    mainColumns = [];
    selectAll = false;
    sortedColumn = { property: null, ascending: true };
    subtitleColumns = [];
    page = 1;
    pageSize = 10;
    hasService = false;
    initialColumns;
    showBatchActions = false;
    itemsSelected = [];
    paramsFilter;
    filteredItems = [];
    initialized = false;
    fixedLayout = false;
    initialVisibleColumns = false;
    _spacing = PoTableColumnSpacing.Medium;
    _filteredColumns;
    _actions = [];
    _columns = [];
    _container;
    _paramDelete = poTableParamDeleteApi;
    _height;
    _hideDetail = false;
    _items;
    _literals;
    _loading = false;
    _selectable;
    language = poLocaleDefault;
    _serviceApi;
    _serviceDeleteApi;
    poTableServiceSubscription;
    sortStore;
    _infiniteScrollDistance = 100;
    _infiniteScroll = false;
    _draggable = false;
    _hideActionFixedColumns = false;
    constructor(poDate, languageService, poTableService) {
        this.poDate = poDate;
        this.poTableService = poTableService;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items) {
        if (this.height) {
            this._items = Array.isArray(items) ? [...items] : [];
        }
        else {
            this._items = Array.isArray(items) ? items : [];
        }
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems) {
            this.selectAll = false;
        }
        else if (!this.hasColumns) {
            this.columns = this.getDefaultColumns(items[0]);
        }
        this.filteredItems = this.height ? [...this.items] : this.items;
        // timeout necessário para os itens serem refletidos na tabela
        setTimeout(() => this.checkInfiniteScroll());
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns) {
        const hasColumnsWithVisible = columns?.find(column => column.visible === true);
        if (this.initialColumns === undefined) {
            this.initialColumns = columns;
        }
        this._columns = columns || [];
        if (hasColumnsWithVisible && !this.initialVisibleColumns) {
            this.initialVisibleColumns = true;
        }
        if (this._columns.length) {
            this.setColumnLink();
        }
        else if (this.hasItems) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
        this.onChangeColumns();
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value) {
        this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
    }
    get container() {
        return this._container;
    }
    /**
     * @optional
     *
     * @description
     *
     * Adiciona o parâmetro a ser enviado para a requisição de DELETE.
     *
     * É necessário a utilização da propriedade `p-service-delete` em conjunto.
     *
     * @default `id`
     */
    set paramDeleteApi(value) {
        this._paramDelete = value && typeof value === 'string' ? value : poTableParamDeleteApi;
    }
    get paramDeleteApi() {
        return this._paramDelete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     *
     * Ao utilizar essa propriedade será inserido o `virtual-scroll` na tabela melhorando a performance.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
    }
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noColumns: 'Nenhuma definição de colunas',
     *    noData: 'Nenhum dado encontrado',
     *    noVisibleColumn: 'Nenhuma coluna visível',
     *    noItem: 'Nenhum item selecionado',
     *    oneItem: '1 item selecionado',
     *    multipleItems: 'itens selecionados',
     *    loadingData: 'Carregando',
     *    loadMoreData: 'Carregar mais resultados',
     *    seeCompleteSubtitle: 'Ver legenda completa',
     *    completeSubtitle: 'Legenda completa',
     *    columnsManager: 'Gerenciador de colunas',
     *    bodyDelete: 'Deseja realmente excluir esse item?',
     *    cancel: 'Cancelar',
     *    delete: 'Excluir',
     *    deleteSuccessful: 'Itens removidos com sucesso',
     *    deleteApiError: 'Ocorreu um erro inesperado, tente novamente mais tarde!',
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poTableLiteralsDefault[poLocaleDefault],
                ...poTableLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poTableLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poTableLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia a interação do usuário com os dados da _table_.
     *
     * @default `false`
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions) {
        this._actions = actions;
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value) {
        this._selectable = value === '' ? true : convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão "Carregar Mais" deixará de ser exibido. Ao chegar no fim da tabela
     * executará a função `p-show-more`.
     *
     * **Regras de utilização:**
     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.
     *
     * @default `false`
     */
    set infiniteScroll(value) {
        this._infiniteScroll = convertToBoolean(value && this.height > 0);
    }
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor
     * que 0, o valor padrão será 100%
     *
     * **Exemplos:**
     *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.
     */
    set infiniteScrollDistance(value) {
        this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
    }
    get infiniteScrollDistance() {
        return this._infiniteScrollDistance;
    }
    /**
     * @optional
     *
     * @description
     *
     * URL da API responsável por retornar os registros.
     *
     * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:
     *
     * ```
     * url + ?page=1&pageSize=10
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=10&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=10&order=name
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).
     */
    set serviceApi(service) {
        this._serviceApi = service;
        this.setService(this.serviceApi, 'GET');
        this.hasService = !!service;
        this.showMoreDisabled = !this.hasService;
        this.page = 1;
        this.initializeData();
    }
    get serviceApi() {
        return this._serviceApi;
    }
    /**
     * @optional
     *
     * @description
     *
     * URL da API responsável por excluir os registros.
     *
     * Ao selecionar o botão de excluir itens, essa url será executada utilizando o parâmetro enviado na propriedade `p-param-delete-api`.
     * Caso ela não seja utilizada, o parâmetro padrão a ser enviado será `id`.
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).
     */
    set serviceDeleteApi(service) {
        this._serviceDeleteApi = service;
        this.setService(this.serviceDeleteApi, 'DELETE');
    }
    get serviceDeleteApi() {
        return this._serviceDeleteApi;
    }
    /**
     * @optional
     *
     * @description
     *
     * Responsável por aplicar espaçamento nas colunas.
     *
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     *
     * @default `medium`
     */
    set spacing(value) {
        if (value === 'small' || value === 'medium' || value === 'large') {
            this._spacing = value;
        }
        else {
            this._spacing = PoTableColumnSpacing.Medium;
        }
    }
    get spacing() {
        return this._spacing;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define as colunas que serão filtradas no campo de pesquisa.
     * Aceita um array de strings, representando as colunas específicas que serão consideradas na filtragem.
     *
     */
    set filteredColumns(values) {
        this._filteredColumns = values;
    }
    get filteredColumns() {
        return this._filteredColumns;
    }
    get hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    get nameColumnDetail() {
        return this.columnMasterDetail ? this.columnMasterDetail.property : null;
    }
    get validColumns() {
        const typesValid = [
            'string',
            'number',
            'boolean',
            'date',
            'time',
            'dateTime',
            'currency',
            'subtitle',
            'link',
            'label',
            'icon',
            'cellTemplate',
            'columnTemplate'
        ];
        return this.columns.filter(col => !col.type || typesValid.includes(col.type));
    }
    get visibleActions() {
        return (this.actions !== undefined && this.actions && this.actions.filter(action => action && action.visible !== false));
    }
    getFilteredColumns() {
        this.filteredColumns = this.columns
            .filter(column => column.visible !== false)
            .map(column => column.property || column.label);
    }
    get sortType() {
        return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo drag and drop para as colunas da tabela.
     *
     * @default `false`
     */
    set draggable(draggable) {
        this._draggable = draggable || false;
    }
    get draggable() {
        return this._draggable;
    }
    ngOnDestroy() {
        this.poTableServiceSubscription?.unsubscribe();
    }
    ngOnChanges(changes) {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
        if (changes.height) {
            this.calculateHeightTableContainer(this.height);
        }
        if ((changes.height || changes.items) && this.initialized) {
            this.changeHeaderWidth();
        }
        this.changeSizeLoading();
    }
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, [...this.items]);
            this.setSelectedList();
        }
    }
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
        this.setSelectedList();
    }
    hasSelectableRow() {
        return this.selectable && this.selectableEntireLine;
    }
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    setSelectedList() {
        this.itemsSelected = [];
        this.items.forEach(item => {
            if (item.$selected) {
                this.itemsSelected.push(item);
            }
        });
    }
    getClassColor(row, column) {
        return column.color ? `po-text-${this.getColumnColor(row, column)}` : '';
    }
    toggleDetail(row) {
        const rowShowDetail = row.$showDetail;
        if (this.autoCollapse) {
            this.collapseAllItems(this.items);
        }
        this.setShowDetail(row, !rowShowDetail);
        this.emitExpandEvents(row);
    }
    toggleRowAction(row) {
        const toggleShowAction = row.$showAction;
        this.items.forEach(item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    }
    sortColumn(column) {
        if (!this.sort || column.type === 'detail' || column.sortable === false) {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column, type: this.sortType });
        if (this.hasService && this.sort) {
            this.sortStore = { column, type: this.sortType };
        }
        this.sortedColumn.property = column;
    }
    onShowMore() {
        const sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        if (this.hasService) {
            this.page++;
            this.loading = true;
            this.loadingShowMore = true;
            this.poTableServiceSubscription = this.getFilteredItems().subscribe(data => {
                this.items = [...this.items, ...data.items];
                this.showMoreDisabled = !data.hasNext;
                this.loading = false;
                this.loadingShowMore = false;
            });
        }
        this.showMore.emit(sort);
    }
    getFilteredItems(queryParams) {
        const filteredParams = this.getFilteredParams(queryParams);
        return this.poTableService.getFilteredItems(filteredParams);
    }
    setTableResponseProperties(data) {
        this.items = data.items || [];
        this.showMoreDisabled = !data.hasNext;
        this.loading = false;
    }
    initializeData(params) {
        if (this.hasService) {
            this.loading = true;
            this.paramsFilter = params;
            this.getFilteredItems(params).subscribe(data => {
                this.setTableResponseProperties(data);
            });
        }
    }
    sortArray(column, ascending, item) {
        let itemsList;
        if (item) {
            itemsList = this.height ? [...item] : item;
        }
        else {
            itemsList = this.height ? [...this.filteredItems] : this.filteredItems;
        }
        itemsList.sort((leftSide, rightSide) => sortValues(leftSide[column.property], rightSide[column.property], ascending));
        this.filteredItems = itemsList;
    }
    getDefaultColumns(item) {
        const keys = Object.keys(item);
        return keys
            .filter(key => typeof item[key] !== 'object')
            .map(key => ({ label: capitalizeFirstLetter(key), property: key }));
    }
    setShowDetail(rowIdentifier, isShowDetail) {
        const isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
        const row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
        row.$showDetail = isShowDetail;
    }
    collapseAllItems(items) {
        for (const item of items) {
            if (item.$showDetail) {
                this.setShowDetail(item, false);
                this.emitExpandEvents(item);
            }
        }
    }
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    emitExpandEvents(row) {
        row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
    }
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    getColumnColor(row, column) {
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    getColumnMasterDetail() {
        return this.columns.find(col => col.type === 'detail');
    }
    // Colunas que são inseridas no <head> da tabela
    getMainColumns() {
        return this.validColumns.filter(col => col.visible !== false);
    }
    // Retorna as colunas com status
    getSubtitleColumns() {
        return this.columns.filter(col => col.type === 'subtitle');
    }
    isEverySelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    onChangeColumns() {
        this.setMainColumns();
        this.setColumnMasterDetail();
        this.setSubtitleColumns();
        this.getFilteredColumns();
    }
    setColumnLink() {
        this.columns.forEach(column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    }
    setColumnMasterDetail() {
        this.columnMasterDetail = this.getColumnMasterDetail();
    }
    setMainColumns() {
        this.mainColumns = this.getMainColumns();
        this.hasMainColumns = !!this.mainColumns.length;
        this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
    }
    setSubtitleColumns() {
        this.subtitleColumns = this.getSubtitleColumns();
    }
    unselectOtherRows(rows, row) {
        rows.forEach(item => {
            if (item !== row) {
                item.$selected = false;
            }
        });
    }
    verifyWidthColumnsPixels() {
        return this.hasMainColumns ? this.mainColumns.every(column => column.width && column.width.includes('px')) : false;
    }
    setService(service, method) {
        if (service && isTypeof(service, 'string')) {
            this.poTableService.setUrl(service, method);
        }
    }
    getFilteredParams(queryParams) {
        const { page, pageSize, sortStore } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sortStore);
        const params = { page, pageSize, order, ...queryParams };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
    removePropertyFixed(arr) {
        return arr.map(obj => {
            if (obj.hasOwnProperty('fixed')) {
                obj.fixed = false;
            }
            return obj;
        });
    }
    static ɵfac = function PoTableBaseComponent_Factory(t) { return new (t || PoTableBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(PoTableService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableBaseComponent, inputs: { hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], hideBatchActions: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-batch-actions", "hideBatchActions", convertToBoolean], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], hideActionFixedColumns: [i0.ɵɵInputFlags.None, "p-hide-action-fixed-columns", "hideActionFixedColumns"], hideTableSearch: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-table-search", "hideTableSearch", convertToBoolean], autoCollapse: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-collapse", "autoCollapse", convertToBoolean], loadingShowMore: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-loading-show-more", "loadingShowMore", convertToBoolean], sort: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-sort", "sort", convertToBoolean], showMoreDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-more-disabled", "showMoreDisabled", convertToBoolean], striped: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-striped", "striped", convertToBoolean], hideSelectAll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-select-all", "hideSelectAll", convertToBoolean], singleSelect: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-single-select", "singleSelect", convertToBoolean], selectableEntireLine: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-selectable-entire-line", "selectableEntireLine", convertToBoolean], actionRight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-actions-right", "actionRight", convertToBoolean], maxColumns: [i0.ɵɵInputFlags.None, "p-max-columns", "maxColumns"], filterType: [i0.ɵɵInputFlags.None, "p-filter-type", "filterType"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], container: [i0.ɵɵInputFlags.None, "p-container", "container"], paramDeleteApi: [i0.ɵɵInputFlags.None, "p-param-delete-api", "paramDeleteApi"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], hideDetail: [i0.ɵɵInputFlags.None, "p-hide-detail", "hideDetail"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], loading: [i0.ɵɵInputFlags.None, "p-loading", "loading"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], selectable: [i0.ɵɵInputFlags.None, "p-selectable", "selectable"], infiniteScroll: [i0.ɵɵInputFlags.None, "p-infinite-scroll", "infiniteScroll"], infiniteScrollDistance: [i0.ɵɵInputFlags.None, "p-infinite-scroll-distance", "infiniteScrollDistance"], serviceApi: [i0.ɵɵInputFlags.None, "p-service-api", "serviceApi"], serviceDeleteApi: [i0.ɵɵInputFlags.None, "p-service-delete", "serviceDeleteApi"], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], filteredColumns: [i0.ɵɵInputFlags.None, "p-filtered-columns", "filteredColumns"], draggable: [i0.ɵɵInputFlags.None, "p-draggable", "draggable"] }, outputs: { allSelected: "p-all-selected", allUnselected: "p-all-unselected", collapsed: "p-collapsed", expanded: "p-expanded", eventDelete: "p-delete-items", selected: "p-selected", showMore: "p-show-more", sortBy: "p-sort-by", unselected: "p-unselected", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableBaseComponent, [{
        type: Directive
    }], () => [{ type: PoDateService }, { type: PoLanguageService }, { type: PoTableService }], { hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], hideBatchActions: [{
            type: Input,
            args: [{ alias: 'p-hide-batch-actions', transform: convertToBoolean }]
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], hideActionFixedColumns: [{
            type: Input,
            args: ['p-hide-action-fixed-columns']
        }], hideTableSearch: [{
            type: Input,
            args: [{ alias: 'p-hide-table-search', transform: convertToBoolean }]
        }], autoCollapse: [{
            type: Input,
            args: [{ alias: 'p-auto-collapse', transform: convertToBoolean }]
        }], loadingShowMore: [{
            type: Input,
            args: [{ alias: 'p-loading-show-more', transform: convertToBoolean }]
        }], sort: [{
            type: Input,
            args: [{ alias: 'p-sort', transform: convertToBoolean }]
        }], showMoreDisabled: [{
            type: Input,
            args: [{ alias: 'p-show-more-disabled', transform: convertToBoolean }]
        }], striped: [{
            type: Input,
            args: [{ alias: 'p-striped', transform: convertToBoolean }]
        }], hideSelectAll: [{
            type: Input,
            args: [{ alias: 'p-hide-select-all', transform: convertToBoolean }]
        }], singleSelect: [{
            type: Input,
            args: [{ alias: 'p-single-select', transform: convertToBoolean }]
        }], selectableEntireLine: [{
            type: Input,
            args: [{ alias: 'p-selectable-entire-line', transform: convertToBoolean }]
        }], actionRight: [{
            type: Input,
            args: [{ alias: 'p-actions-right', transform: convertToBoolean }]
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }], filterType: [{
            type: Input,
            args: ['p-filter-type']
        }], allSelected: [{
            type: Output,
            args: ['p-all-selected']
        }], allUnselected: [{
            type: Output,
            args: ['p-all-unselected']
        }], collapsed: [{
            type: Output,
            args: ['p-collapsed']
        }], expanded: [{
            type: Output,
            args: ['p-expanded']
        }], eventDelete: [{
            type: Output,
            args: ['p-delete-items']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], showMore: [{
            type: Output,
            args: ['p-show-more']
        }], sortBy: [{
            type: Output,
            args: ['p-sort-by']
        }], unselected: [{
            type: Output,
            args: ['p-unselected']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], container: [{
            type: Input,
            args: ['p-container']
        }], paramDeleteApi: [{
            type: Input,
            args: ['p-param-delete-api']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], hideDetail: [{
            type: Input,
            args: ['p-hide-detail']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], selectable: [{
            type: Input,
            args: ['p-selectable']
        }], infiniteScroll: [{
            type: Input,
            args: ['p-infinite-scroll']
        }], infiniteScrollDistance: [{
            type: Input,
            args: ['p-infinite-scroll-distance']
        }], serviceApi: [{
            type: Input,
            args: ['p-service-api']
        }], serviceDeleteApi: [{
            type: Input,
            args: ['p-service-delete']
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], filteredColumns: [{
            type: Input,
            args: ['p-filtered-columns']
        }], draggable: [{
            type: Input,
            args: ['p-draggable']
        }] }); })();

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se apenas adicionar a diretiva **p-table-cell-template** à tag `ng-template`.
 *
 * Retorno:
 *  - `column`: conteúdo da coluna corrente.
 *  - `row`: conteúdo da linha corrente
 *
 * Modo de uso:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-cell-template let-column="column" let-row="row">
 *      <div *ngIf="column.property === 'status' && row.status === 'CANCELED'">
 *        <h1 [style.background]="'red'">CANCELADA</h1>
 *        <span (click)="onClick()"><small>clique aqui</small></span>
 *      </div>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'FINISHED'" [style.background]="'green'">FINALIZADA</h1>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'OPENED'" [style.background]="'orange'">ABERTA</h1>
 *      <h1 *ngIf="column.property === 'status2'">Conteúdo do status 2</h1>
 *      <h1 *ngIf="column.property === 'status3'">Conteúdo do status 3</h1>
 *    </ng-template>
 * ...
 * ```
 * > No exemplo acima, o usuário tem como retorno `row` e a `column` corrente, neste caso ele tem total liberdade para manipular os objetos.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```
 * ...
 * export class AppComponent {
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED',
 *      status2: '',
 *      status3: ''
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED',
 *      status2: '',
 *      status3: ''
 *      }];
 *
 *    columns = [
 *       { property: 'code', label: 'ID' },
 *       { property: 'product', label: 'PRODUTO' },
 *       { property: 'status', label: 'STATUS', type: 'cellTemplate' },
 *       { property: 'status2', label: 'STATUS 2', type: 'cellTemplate' },
 *       { property: 'status3', label: 'STATUS 3', type: 'cellTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `cellTemplate`
 */
class PoTableCellTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do cell template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoTableCellTemplateDirective_Factory(t) { return new (t || PoTableCellTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableCellTemplateDirective, selectors: [["", "p-table-cell-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-cell-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
 * será adicionado o conteúdo do template.
 *
 * Retorno:
 *  - value: valor referente ao conteúdo da linha corrente.
 *
 * Modo de uso:
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
 *     <span [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
 * sendo que `value` refere-se ao conteúdo da linha.
 *
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
 *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
 *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
 * definir o template exato para adicionar a uma específica célula.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```typescript
 * ...
 * export class AppComponent {
 *
 *    targetProperty= 'status';
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED'
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED'
 *    }];
 *
 *    columns = [
 *      { property: 'code', label: 'ID' },
 *      { property: 'product', label: 'PRODUTO' },
 *      { property: 'status', label: 'STATUS', type: 'columnTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `columnTemplate`
 */
class PoTableColumnTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Variável responsável por armazenar a property da coluna da tabela que será adicionado o template.
     *
     * Caso não seja informada esta propriedade, serão apresentados normalmente os dados da coluna.
     */
    targetProperty;
    // Necessário manter templateRef para o funcionamento do column template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoTableColumnTemplateDirective_Factory(t) { return new (t || PoTableColumnTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableColumnTemplateDirective, selectors: [["", "p-table-column-template", ""]], inputs: { targetProperty: [i0.ɵɵInputFlags.None, "p-property", "targetProperty"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-column-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { targetProperty: [{
            type: Input,
            args: ['p-property']
        }] }); })();

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
class PoTableRowTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * @default `true`
     */
    poTableRowTemplateShow;
    _tableRowTemplateArrowDirection = PoTableRowTemplateArrowDirection.Left;
    /**
     * @optional
     *
     * @description
     *
     * Propriedade responsável por informar a posição do colapse que abrirá os detalhes da linha.
     *
     * @default `'LEFT'`
     */
    set tableRowTemplateArrowDirection(value) {
        value = value?.toUpperCase();
        this._tableRowTemplateArrowDirection = Object.values(PoTableRowTemplateArrowDirection).includes(value)
            ? value
            : PoTableRowTemplateArrowDirection.Left;
    }
    get tableRowTemplateArrowDirection() {
        return this._tableRowTemplateArrowDirection;
    }
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoTableRowTemplateDirective_Factory(t) { return new (t || PoTableRowTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableRowTemplateDirective, selectors: [["", "p-table-row-template", ""]], inputs: { poTableRowTemplateShow: [i0.ɵɵInputFlags.None, "p-table-row-template-show", "poTableRowTemplateShow"], tableRowTemplateArrowDirection: [i0.ɵɵInputFlags.None, "p-table-row-template-arrow-direction", "tableRowTemplateArrowDirection"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableRowTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-row-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { poTableRowTemplateShow: [{
            type: Input,
            args: ['p-table-row-template-show']
        }], tableRowTemplateArrowDirection: [{
            type: Input,
            args: ['p-table-row-template-arrow-direction']
        }] }); })();

const _c0$W = ["noColumnsHeader"];
const _c1$p = ["popup"];
const _c2$c = ["tableFooter"];
const _c3$7 = ["tableWrapper"];
const _c4$3 = ["tableTemplate"];
const _c5 = ["tableVirtualScroll"];
const _c6 = ["columnManager"];
const _c7 = ["columnBatchActions"];
const _c8 = ["columnActionLeft"];
const _c9 = ["filterInput"];
const _c10 = ["poSearchInput"];
const _c11 = ["columnManagerTarget"];
const _c12 = ["columnManagerTargetFixed"];
const _c13 = ["actionsIconElement"];
const _c14 = ["actionsElement"];
function PoTableComponent_div_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r29 = i0.ɵɵnextContext(2);
    i0.ɵɵtextInterpolate(ctx_r29.literals.noItem);
} }
function PoTableComponent_div_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r30 = i0.ɵɵnextContext(2);
    i0.ɵɵtextInterpolate(ctx_r30.literals.oneItem);
} }
function PoTableComponent_div_1_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r31 = i0.ɵɵnextContext(2);
    i0.ɵɵtextInterpolate2("", ctx_r31.itemsSelected.length, " ", ctx_r31.literals.multipleItems, "");
} }
function PoTableComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r33 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 22, 23)(2, "div", 24)(3, "strong");
    i0.ɵɵtemplate(4, PoTableComponent_div_1_ng_template_4_Template, 1, 1, "ng-template", 25)(5, PoTableComponent_div_1_ng_template_5_Template, 1, 1, "ng-template", 26)(6, PoTableComponent_div_1_ng_template_6_Template, 1, 2, "ng-template", 27);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(7, "div", 28)(8, "po-button", 29);
    i0.ɵɵlistener("p-click", function PoTableComponent_div_1_Template_po_button_p_click_8_listener() { i0.ɵɵrestoreView(_r33); i0.ɵɵnextContext(); const _r27 = i0.ɵɵreference(30); return i0.ɵɵresetView(_r27.open()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngPlural", ctx_r0.itemsSelected.length);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("p-danger", true)("p-disabled", ctx_r0.itemsSelected.length > 1 && ctx_r0.serviceDeleteApi !== undefined)("p-label", ctx_r0.literals.delete);
} }
function PoTableComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 30, 31)(2, "po-button", 32, 33);
    i0.ɵɵlistener("p-click", function PoTableComponent_div_2_Template_po_button_p_click_2_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.onOpenColumnManager()); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-aria-label", ctx_r1.literals.columnsManager)("p-tooltip", ctx_r1.literals.columnsManager);
} }
function PoTableComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 34)(1, "po-search", 35);
    i0.ɵɵlistener("p-filtered-items-change", function PoTableComponent_div_3_Template_po_search_p_filtered_items_change_1_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r38.onFilteredItemsChange($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-items", ctx_r2.items)("p-filter-keys", ctx_r2.filteredColumns)("p-filter-type", ctx_r2.filterType);
} }
function PoTableComponent_po_container_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_po_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-container", 36);
    i0.ɵɵtemplate(1, PoTableComponent_po_container_4_ng_container_1_Template, 1, 0, "ng-container", 37);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function PoTableComponent_ng_template_5_po_loading_overlay_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-loading-overlay", 45);
} if (rf & 2) {
    const ctx_r41 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-text", ctx_r41.literals.loadingData)("p-size", ctx_r41.sizeLoading);
} }
function PoTableComponent_ng_template_5_div_5_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_5_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 46)(1, "div", 47, 48);
    i0.ɵɵtemplate(3, PoTableComponent_ng_template_5_div_5_ng_container_3_Template, 1, 0, "ng-container", 37);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r43 = i0.ɵɵnextContext(2);
    const _r10 = i0.ɵɵreference(11);
    i0.ɵɵstyleProp("height", ctx_r43.heightTableContainer, "px");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r10);
} }
function PoTableComponent_ng_template_5_div_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_5_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_5_div_6_ng_container_1_Template, 1, 0, "ng-container", 37);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r8 = i0.ɵɵreference(9);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
function PoTableComponent_ng_template_5_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "po-table-subtitle-footer", 51);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r50 = ctx.$implicit;
    const ctx_r49 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-literals", ctx_r49.literals)("p-subtitles", column_r50.subtitles);
} }
function PoTableComponent_ng_template_5_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 49);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_5_div_7_ng_container_1_Template, 2, 2, "ng-container", 50);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r45.subtitleColumns)("ngForTrackBy", ctx_r45.trackBy);
} }
function PoTableComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_5_po_loading_overlay_1_Template, 1, 2, "po-loading-overlay", 38);
    i0.ɵɵelementStart(2, "div", 39)(3, "div", 40, 41);
    i0.ɵɵtemplate(5, PoTableComponent_ng_template_5_div_5_Template, 4, 3, "div", 42)(6, PoTableComponent_ng_template_5_div_6_Template, 2, 1, "div", 43);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(7, PoTableComponent_ng_template_5_div_7_Template, 2, 2, "div", 44);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-table-container-sticky", ctx_r4.loading);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r4.loading);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("opacity", ctx_r4.tableOpacity);
    i0.ɵɵclassProp("po-table-header-fixed-columns-pixels", ctx_r4.allColumnsWidthPixels);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r4.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r4.hasFooter);
} }
function PoTableComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r53 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 52, 53)(2, "po-button", 54);
    i0.ɵɵlistener("p-click", function PoTableComponent_div_7_Template_po_button_p_click_2_listener() { i0.ɵɵrestoreView(_r53); const ctx_r52 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r52.onShowMore()); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-invisible", ctx_r6.showMore.observers.length === 0 && !ctx_r6.hasService);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-disabled", ctx_r6.showMoreDisabled)("p-label", ctx_r6.literals.loadMoreData)("p-loading", ctx_r6.loadingShowMore);
} }
function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r69 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox", 68);
    i0.ɵɵlistener("p-change", function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r68.selectAllRows()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-checkboxValue", ctx_r67.selectAll === null ? "mixed" : ctx_r67.selectAll);
} }
function PoTableComponent_ng_template_8_th_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 66)(1, "div");
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template, 1, 1, "po-checkbox", 67);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r54 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("pointer-events", ctx_r54.hideSelectAll ? "none" : "auto");
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r54.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r54.hideSelectAll);
} }
function PoTableComponent_ng_template_8_th_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 69);
} }
function PoTableComponent_ng_template_8_th_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", null, 70);
} if (rf & 2) {
    const ctx_r56 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-table-header-master-detail", !ctx_r56.isSingleAction)("po-table-header-single-action", ctx_r56.isSingleAction);
} }
function PoTableComponent_ng_template_8_th_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_8_th_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 71, 72);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_th_6_ng_container_2_Template, 1, 0, "ng-container", 61);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r57 = i0.ɵɵnextContext(2);
    const _r21 = i0.ɵɵreference(23);
    const _r23 = i0.ɵɵreference(25);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r57.height)("ngIfThen", _r21)("ngIfElse", _r23);
} }
function PoTableComponent_ng_template_8_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_8_ng_template_8_th_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 77);
    i0.ɵɵelement(2, "circle", 78)(3, "circle", 79)(4, "circle", 80)(5, "circle", 81)(6, "circle", 82)(7, "circle", 83);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function PoTableComponent_ng_template_8_ng_template_8_th_0_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c15 = a0 => ({ "po-table-header-sorted": a0 });
const _c16 = a0 => ({ $implicit: a0 });
function PoTableComponent_ng_template_8_ng_template_8_th_0_Template(rf, ctx) { if (rf & 1) {
    const _r79 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 74);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_template_8_th_0_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r79); const column_r74 = restoredCtx.$implicit; const ctx_r78 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r78.sortColumn(column_r74)); });
    i0.ɵɵpipe(1, "lowercase");
    i0.ɵɵpipe(2, "titlecase");
    i0.ɵɵelementStart(3, "div", 75);
    i0.ɵɵtemplate(4, PoTableComponent_ng_template_8_ng_template_8_th_0_ng_container_4_Template, 8, 0, "ng-container", 43)(5, PoTableComponent_ng_template_8_ng_template_8_th_0_ng_container_5_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r74 = ctx.$implicit;
    const ctx_r73 = i0.ɵɵnextContext(3);
    const _r19 = i0.ɵɵreference(21);
    i0.ɵɵstyleProp("width", column_r74.width)("max-width", column_r74.width)("min-width", column_r74.width);
    i0.ɵɵclassProp("po-clickable", ctx_r73.sort && column_r74.sortable !== false || ctx_r73.hasService)("po-table-header-subtitle", column_r74.type === "subtitle")("po-table-column-drag-box", ctx_r73.isDraggable);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(29, _c15, ctx_r73.sort && ctx_r73.JSON.stringify(ctx_r73.sortedColumn == null ? null : ctx_r73.sortedColumn.property) === ctx_r73.JSON.stringify(column_r74) && (ctx_r73.sortedColumn.ascending || !ctx_r73.sortedColumn.ascending)))("cdkDragDisabled", column_r74.fixed ? "true" : "false")("pFrozenColumn", column_r74.fixed);
    i0.ɵɵattribute("data-po-table-column-name", i0.ɵɵpipeBind1(1, 25, column_r74.label || i0.ɵɵpipeBind1(2, 27, column_r74.property)));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r73.height)("po-table-header-flex-right", column_r74.type === "currency" || column_r74.type === "number")("po-table-header-flex-center", column_r74.type === "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r73.isDraggable && !column_r74.fixed);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r19)("ngTemplateOutletContext", i0.ɵɵpureFunction1(31, _c16, column_r74));
} }
function PoTableComponent_ng_template_8_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_template_8_th_0_Template, 6, 33, "th", 73);
} if (rf & 2) {
    const ctx_r59 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngForOf", ctx_r59.mainColumns)("ngForTrackBy", ctx_r59.trackBy);
} }
function PoTableComponent_ng_template_8_ng_template_10_th_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_8_ng_template_10_th_0_Template(rf, ctx) { if (rf & 1) {
    const _r85 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 85);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_template_10_th_0_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r85); const column_r81 = restoredCtx.$implicit; const ctx_r84 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r84.sortColumn(column_r81)); });
    i0.ɵɵpipe(1, "lowercase");
    i0.ɵɵpipe(2, "titlecase");
    i0.ɵɵelementStart(3, "div", 75);
    i0.ɵɵtemplate(4, PoTableComponent_ng_template_8_ng_template_10_th_0_ng_container_4_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r81 = ctx.$implicit;
    const ctx_r80 = i0.ɵɵnextContext(3);
    const _r19 = i0.ɵɵreference(21);
    i0.ɵɵstyleProp("width", column_r81.width)("max-width", column_r81.width)("min-width", column_r81.width);
    i0.ɵɵclassProp("po-clickable", ctx_r80.sort && column_r81.sortable !== false || ctx_r80.hasService)("po-table-header-subtitle", column_r81.type === "subtitle");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(25, _c15, ctx_r80.sort && ctx_r80.JSON.stringify(ctx_r80.sortedColumn == null ? null : ctx_r80.sortedColumn.property) === ctx_r80.JSON.stringify(column_r81) && (ctx_r80.sortedColumn.ascending || !ctx_r80.sortedColumn.ascending)))("pFrozenColumn", column_r81.fixed);
    i0.ɵɵattribute("data-po-table-column-name", i0.ɵɵpipeBind1(1, 21, column_r81.label || i0.ɵɵpipeBind1(2, 23, column_r81.property)));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r80.height)("po-table-header-flex-right", column_r81.type === "currency" || column_r81.type === "number")("po-table-header-flex-center", column_r81.type === "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r19)("ngTemplateOutletContext", i0.ɵɵpureFunction1(27, _c16, column_r81));
} }
function PoTableComponent_ng_template_8_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_template_10_th_0_Template, 5, 29, "th", 84);
} if (rf & 2) {
    const ctx_r61 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngForOf", ctx_r61.mainColumns)("ngForTrackBy", ctx_r61.trackBy);
} }
function PoTableComponent_ng_template_8_th_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 69);
} }
function PoTableComponent_ng_template_8_th_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th");
} if (rf & 2) {
    const ctx_r64 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-table-header-single-action", ctx_r64.isSingleAction)("po-table-header-actions", !ctx_r64.isSingleAction);
} }
function PoTableComponent_ng_template_8_tbody_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 86)(1, "tr", 87)(2, "td", 88)(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r65 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("colSpan", ctx_r65.columnCount);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r65.literals.noData, " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 66);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_2_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r89 = i0.ɵɵnextContext(3);
    const _r15 = i0.ɵɵreference(17);
    const _r17 = i0.ɵɵreference(19);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r89.singleSelect ? _r15 : _r17)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, row_r87));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_3_ng_template_1_Template(rf, ctx) { }
const _c17 = (a0, a1) => ({ row: a0, rowIndex: a1 });
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_3_Template(rf, ctx) { if (rf & 1) {
    const _r103 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_3_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r103); const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r101 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r101.toggleDetail(row_r87)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_3_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r104 = i0.ɵɵnextContext();
    const row_r87 = ctx_r104.$implicit;
    const rowIndex_r88 = ctx_r104.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_4_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_container_15_tbody_1_4_ng_template_0_Template, 0, 0, "ng-template", 95);
} if (rf & 2) {
    const ctx_r106 = i0.ɵɵnextContext();
    const row_r87 = ctx_r106.$implicit;
    const rowIndex_r88 = ctx_r106.index;
    i0.ɵɵnextContext(3);
    const _r25 = i0.ɵɵreference(27);
    i0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_5_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_5_Template(rf, ctx) { if (rf & 1) {
    const _r110 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_5_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r110); const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r108 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r108.toggleDetail(row_r87)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_5_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r111 = i0.ɵɵnextContext();
    const row_r87 = ctx_r111.$implicit;
    const rowIndex_r88 = ctx_r111.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_2_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r114 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r114.getTemplate(column_r112))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, ctx_r114.getCellData(row_r87, column_r112)));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c18 = (a0, a1) => ({ row: a0, column: a1 });
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_3_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r115 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r115.tableCellTemplate == null ? null : ctx_r115.tableCellTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c18, row_r87, column_r112));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r116 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r116.getBooleanLabel(ctx_r116.getCellData(row_r87, column_r112), column_r112), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r117 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 1, ctx_r117.getCellData(row_r87, column_r112), column_r112.format, "symbol", "1.2-2"), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r118 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r118.getCellData(row_r87, column_r112), column_r112.format || "dd/MM/yyyy"), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "po_time");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r119 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r119.getCellData(row_r87, column_r112), column_r112.format || "HH:mm:ss.ffffff"), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r120 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r120.getCellData(row_r87, column_r112), column_r112.format || "dd/MM/yyyy HH:mm:ss"), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r121 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r121.formatNumber(ctx_r121.getCellData(row_r87, column_r112), column_r112.format), " ");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_po_table_column_link_10_Template(rf, ctx) { if (rf & 1) {
    const _r147 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-column-link", 102);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_po_table_column_link_10_Template_po_table_column_link_click_0_listener($event) { i0.ɵɵrestoreView(_r147); const column_r112 = i0.ɵɵnextContext().$implicit; const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r145 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r145.onClickLink($event, row_r87, column_r112)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r122 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-action", column_r112.action)("p-disabled", ctx_r122.checkDisabled(row_r87, column_r112))("p-link", row_r87[column_r112.link])("p-row", row_r87)("p-value", ctx_r122.getCellData(row_r87, column_r112));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_po_table_column_icon_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-table-column-icon", 103);
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r123 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-column", column_r112)("p-icons", ctx_r123.getColumnIcons(row_r87, column_r112))("p-row", row_r87);
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "po-table-subtitle-circle", 104);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r124 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-subtitle", ctx_r124.getSubtitleColumn(row_r87, column_r112));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "po-table-column-label", 105);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r125 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-value", ctx_r125.getColumnLabel(row_r87, column_r112));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r112 = i0.ɵɵnextContext().$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r126 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r126.getCellData(row_r87, column_r112));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_Template(rf, ctx) { if (rf & 1) {
    const _r160 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 96);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r160); const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r159 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r159.hasSelectableRow() ? ctx_r159.selectRow(row_r87) : "javascript:;"); });
    i0.ɵɵelementStart(1, "div", 97);
    i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_Template_div_mouseenter_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r160); const column_r112 = restoredCtx.$implicit; const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r162 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r162.tooltipMouseEnter($event, column_r112, row_r87)); })("mouseleave", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_Template_div_mouseleave_1_listener() { i0.ɵɵrestoreView(_r160); const ctx_r164 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r164.tooltipMouseLeave()); });
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_2_Template, 2, 4, "span", 98)(3, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_3_Template, 2, 5, "span", 98)(4, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_4_Template, 2, 1, "span", 98)(5, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_5_Template, 3, 6, "span", 98)(6, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_6_Template, 3, 4, "span", 98)(7, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_7_Template, 3, 4, "span", 98)(8, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_8_Template, 3, 4, "span", 98)(9, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_9_Template, 2, 1, "span", 98)(10, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_po_table_column_link_10_Template, 1, 5, "po-table-column-link", 99)(11, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_po_table_column_icon_11_Template, 1, 3, "po-table-column-icon", 100)(12, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_12_Template, 2, 1, "span", 98)(13, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_13_Template, 2, 1, "span", 98)(14, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_span_14_Template, 2, 1, "span", 101);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r112 = ctx.$implicit;
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r93 = i0.ɵɵnextContext(3);
    i0.ɵɵstyleProp("width", column_r112.width)("max-width", column_r112.width)("min-width", column_r112.width);
    i0.ɵɵclassProp("po-table-column", column_r112.type !== "icon")("po-table-column-right", column_r112.type === "currency" || column_r112.type === "number")("po-table-column-center", column_r112.type === "subtitle")("po-table-column-icons", column_r112.type === "icon");
    i0.ɵɵproperty("pFrozenColumn", column_r112.fixed)("ngClass", ctx_r93.getClassColor(row_r87, column_r112));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitch", column_r112.type)("p-tooltip", ctx_r93.tooltipText)("p-append-in-body", true);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "columnTemplate");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "cellTemplate");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "boolean");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "currency");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "date");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "time");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "dateTime");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "number");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "link");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "icon");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "label");
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_7_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_7_Template(rf, ctx) { if (rf & 1) {
    const _r169 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_7_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r169); const row_r87 = i0.ɵɵnextContext().$implicit; const ctx_r167 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r167.toggleDetail(row_r87)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_7_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r170 = i0.ɵɵnextContext();
    const row_r87 = ctx_r170.$implicit;
    const rowIndex_r88 = ctx_r170.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_8_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_container_15_tbody_1_8_ng_template_0_Template, 0, 0, "ng-template", 95);
} if (rf & 2) {
    const ctx_r172 = i0.ɵɵnextContext();
    const row_r87 = ctx_r172.$implicit;
    const rowIndex_r88 = ctx_r172.index;
    i0.ɵɵnextContext(3);
    const _r25 = i0.ɵɵreference(27);
    i0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_9_ng_template_2_Template(rf, ctx) { }
const _c19 = (a0, a1) => ({ $implicit: a0, rowIndex: a1 });
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 106);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_9_ng_template_2_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r174 = i0.ɵɵnextContext();
    const row_r87 = ctx_r174.$implicit;
    const rowIndex_r88 = ctx_r174.index;
    const ctx_r96 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("colSpan", ctx_r96.columnCountForMasterDetail);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r96.tableRowTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c19, row_r87, rowIndex_r88));
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_10_Template(rf, ctx) { if (rf & 1) {
    const _r176 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr")(1, "td", 107)(2, "po-table-detail", 108);
    i0.ɵɵlistener("p-select-row", function PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_10_Template_po_table_detail_p_select_row_2_listener($event) { i0.ɵɵrestoreView(_r176); const ctx_r175 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r175.selectDetailRow($event)); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const row_r87 = i0.ɵɵnextContext().$implicit;
    const ctx_r97 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("colSpan", ctx_r97.columnCountForMasterDetail);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-selectable", ctx_r97.selectable && !ctx_r97.detailHideSelect)("p-detail", ctx_r97.columnMasterDetail.detail)("p-items", row_r87[ctx_r97.nameColumnDetail]);
} }
function PoTableComponent_ng_template_8_ng_container_15_tbody_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 86)(1, "tr", 90);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_2_Template, 2, 4, "td", 91)(3, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_3_Template, 2, 5, "td", 92)(4, PoTableComponent_ng_template_8_ng_container_15_tbody_1_4_Template, 1, 5, null, 43)(5, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_5_Template, 2, 5, "td", 92)(6, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_6_Template, 15, 31, "td", 93)(7, PoTableComponent_ng_template_8_ng_container_15_tbody_1_td_7_Template, 2, 5, "td", 92)(8, PoTableComponent_ng_template_8_ng_container_15_tbody_1_8_Template, 1, 5, null, 43);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_9_Template, 3, 6, "tr", 43)(10, PoTableComponent_ng_template_8_ng_container_15_tbody_1_tr_10_Template, 3, 4, "tr", 43);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r87 = ctx.$implicit;
    const rowIndex_r88 = ctx.index;
    const ctx_r86 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-row-active", row_r87.$selected || row_r87.$selected === null && ctx_r86.selectable);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.selectable);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.columnMasterDetail && !ctx_r86.hideDetail && !ctx_r86.hasRowTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r86.actionRight && (ctx_r86.visibleActions.length > 1 || ctx_r86.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.hasRowTemplate && !ctx_r86.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r86.mainColumns)("ngForTrackBy", ctx_r86.trackBy);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.actionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.hasMainColumns && ctx_r86.hasRowTemplate && row_r87.$showDetail && ctx_r86.isShowRowTemplate(row_r87, rowIndex_r88));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r86.hasMainColumns && ctx_r86.isShowMasterDetail(row_r87));
} }
function PoTableComponent_ng_template_8_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_15_tbody_1_Template, 11, 12, "tbody", 89);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r66 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r66.filteredItems)("ngForTrackBy", ctx_r66.trackBy);
} }
const _c20 = (a0, a1, a2, a3, a4) => ({ "po-table-interactive": a0, "po-table-selectable": a1, "po-table-striped": a2, "po-table-data-fixed-columns": a3, "po-table-text-wrap-enabled": a4 });
const _c21 = (a0, a1) => ({ "no-hover": a0, "po-table-column-drag": a1 });
function PoTableComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r179 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "table", 55)(1, "thead")(2, "tr", 56);
    i0.ɵɵlistener("cdkDropListDropped", function PoTableComponent_ng_template_8_Template_tr_cdkDropListDropped_2_listener($event) { i0.ɵɵrestoreView(_r179); const ctx_r178 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r178.drop($event)); });
    i0.ɵɵtemplate(3, PoTableComponent_ng_template_8_th_3_Template, 3, 5, "th", 57)(4, PoTableComponent_ng_template_8_th_4_Template, 1, 0, "th", 58)(5, PoTableComponent_ng_template_8_th_5_Template, 2, 4, "th", 59)(6, PoTableComponent_ng_template_8_th_6_Template, 3, 3, "th", 60)(7, PoTableComponent_ng_template_8_ng_container_7_Template, 1, 0, "ng-container", 61)(8, PoTableComponent_ng_template_8_ng_template_8_Template, 1, 2, "ng-template", null, 62, i0.ɵɵtemplateRefExtractor)(10, PoTableComponent_ng_template_8_ng_template_10_Template, 1, 2, "ng-template", null, 63, i0.ɵɵtemplateRefExtractor)(12, PoTableComponent_ng_template_8_th_12_Template, 1, 0, "th", 58)(13, PoTableComponent_ng_template_8_th_13_Template, 1, 4, "th", 64);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(14, PoTableComponent_ng_template_8_tbody_14_Template, 5, 2, "tbody", 65)(15, PoTableComponent_ng_template_8_ng_container_15_Template, 2, 2, "ng-container", 43);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r60 = i0.ɵɵreference(9);
    const _r62 = i0.ɵɵreference(11);
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(16, _c20, ctx_r7.selectable || ctx_r7.sort, ctx_r7.selectable, ctx_r7.striped, ctx_r7.applyFixedColumns(), ctx_r7.textWrap));
    i0.ɵɵattribute("p-spacing", ctx_r7.spacing);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("po-table-header", !ctx_r7.height);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(22, _c21, ctx_r7.hideSelectAll, ctx_r7.isDraggable));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.hasSelectableColumn);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", (ctx_r7.hasMasterDetailColumn || ctx_r7.hasRowTemplate) && !ctx_r7.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r7.actionRight && (ctx_r7.visibleActions.length > 1 || ctx_r7.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r7.hasMainColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.isDraggable || ctx_r7.hasSomeFixed())("ngIfThen", _r60)("ngIfElse", _r62);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r7.hasRowTemplateWithArrowDirectionRight && (ctx_r7.hasVisibleActions || ctx_r7.hideColumnsManager));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.hasVisibleActions && ctx_r7.actionRight && (ctx_r7.visibleActions.length > 1 || ctx_r7.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r7.hasItems || !ctx_r7.hasMainColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.hasMainColumns);
} }
function PoTableComponent_ng_template_10_th_5_po_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r196 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox", 68);
    i0.ɵɵlistener("p-change", function PoTableComponent_ng_template_10_th_5_po_checkbox_2_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r196); const ctx_r195 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r195.selectAllRows()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r194 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-checkboxValue", ctx_r194.selectAll === null ? "mixed" : ctx_r194.selectAll);
} }
function PoTableComponent_ng_template_10_th_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 66)(1, "div");
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_10_th_5_po_checkbox_2_Template, 1, 1, "po-checkbox", 67);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r181 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("pointer-events", ctx_r181.hideSelectAll ? "none" : "auto");
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r181.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r181.hideSelectAll);
} }
function PoTableComponent_ng_template_10_th_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 69);
} }
function PoTableComponent_ng_template_10_th_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", null, 70);
} if (rf & 2) {
    const ctx_r183 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-table-header-master-detail", !ctx_r183.isSingleAction)("po-table-header-single-action", ctx_r183.isSingleAction);
} }
function PoTableComponent_ng_template_10_th_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_th_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 71, 72);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_10_th_8_ng_container_2_Template, 1, 0, "ng-container", 61);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r184 = i0.ɵɵnextContext(2);
    const _r21 = i0.ɵɵreference(23);
    const _r23 = i0.ɵɵreference(25);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r184.height)("ngIfThen", _r21)("ngIfElse", _r23);
} }
function PoTableComponent_ng_template_10_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_ng_template_10_th_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 77);
    i0.ɵɵelement(2, "circle", 78)(3, "circle", 79)(4, "circle", 80)(5, "circle", 81)(6, "circle", 82)(7, "circle", 83);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function PoTableComponent_ng_template_10_ng_template_10_th_0_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c22 = a0 => ({ "width": a0 });
function PoTableComponent_ng_template_10_ng_template_10_th_0_Template(rf, ctx) { if (rf & 1) {
    const _r206 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 116);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_template_10_th_0_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r206); const column_r201 = restoredCtx.$implicit; const ctx_r205 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r205.sortColumn(column_r201)); });
    i0.ɵɵpipe(1, "lowercase");
    i0.ɵɵpipe(2, "titlecase");
    i0.ɵɵelementStart(3, "div", 75);
    i0.ɵɵtemplate(4, PoTableComponent_ng_template_10_ng_template_10_th_0_ng_container_4_Template, 8, 0, "ng-container", 43)(5, PoTableComponent_ng_template_10_ng_template_10_th_0_ng_container_5_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r201 = ctx.$implicit;
    const ctx_r200 = i0.ɵɵnextContext(3);
    const _r19 = i0.ɵɵreference(21);
    i0.ɵɵstyleProp("width", column_r201.width)("max-width", column_r201.width)("min-width", column_r201.width);
    i0.ɵɵclassProp("po-clickable", ctx_r200.sort && column_r201.sortable !== false || ctx_r200.hasService)("po-table-header-subtitle", column_r201.type === "subtitle")("po-table-column-drag-box", ctx_r200.isDraggable);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(30, _c15, ctx_r200.sort && ctx_r200.JSON.stringify(ctx_r200.sortedColumn == null ? null : ctx_r200.sortedColumn.property) === ctx_r200.JSON.stringify(column_r201) && (ctx_r200.sortedColumn.ascending || !ctx_r200.sortedColumn.ascending)))("ngStyle", i0.ɵɵpureFunction1(32, _c22, !ctx_r200.hasItems ? "100%" : ctx_r200.applyFixedColumns() ? column_r201.width : "auto"))("cdkDragDisabled", column_r201.fixed ? "true" : "false")("pFrozenColumn", column_r201.fixed);
    i0.ɵɵattribute("data-po-table-column-name", i0.ɵɵpipeBind1(1, 26, column_r201.label || i0.ɵɵpipeBind1(2, 28, column_r201.property)));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r200.height)("po-table-header-flex-right", column_r201.type === "currency" || column_r201.type === "number")("po-table-header-flex-center", column_r201.type === "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r200.isDraggable && !column_r201.fixed);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r19)("ngTemplateOutletContext", i0.ɵɵpureFunction1(34, _c16, column_r201));
} }
function PoTableComponent_ng_template_10_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_10_ng_template_10_th_0_Template, 6, 36, "th", 115);
} if (rf & 2) {
    const ctx_r186 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngForOf", ctx_r186.mainColumns)("ngForTrackBy", ctx_r186.trackBy);
} }
function PoTableComponent_ng_template_10_ng_template_12_th_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_ng_template_12_th_0_Template(rf, ctx) { if (rf & 1) {
    const _r212 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 118);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_template_12_th_0_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r212); const column_r208 = restoredCtx.$implicit; const ctx_r211 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r211.sortColumn(column_r208)); });
    i0.ɵɵpipe(1, "lowercase");
    i0.ɵɵpipe(2, "titlecase");
    i0.ɵɵelementStart(3, "div", 75);
    i0.ɵɵtemplate(4, PoTableComponent_ng_template_10_ng_template_12_th_0_ng_container_4_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r208 = ctx.$implicit;
    const ctx_r207 = i0.ɵɵnextContext(3);
    const _r19 = i0.ɵɵreference(21);
    i0.ɵɵstyleProp("width", column_r208.width)("max-width", column_r208.width)("min-width", column_r208.width);
    i0.ɵɵclassProp("po-clickable", ctx_r207.sort && column_r208.sortable !== false || ctx_r207.hasService)("po-table-header-subtitle", column_r208.type === "subtitle");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c15, ctx_r207.sort && ctx_r207.JSON.stringify(ctx_r207.sortedColumn == null ? null : ctx_r207.sortedColumn.property) === ctx_r207.JSON.stringify(column_r208) && (ctx_r207.sortedColumn.ascending || !ctx_r207.sortedColumn.ascending)))("ngStyle", i0.ɵɵpureFunction1(28, _c22, !ctx_r207.hasItems ? "100%" : ctx_r207.applyFixedColumns() ? column_r208.width : "auto"))("pFrozenColumn", column_r208.fixed);
    i0.ɵɵattribute("data-po-table-column-name", i0.ɵɵpipeBind1(1, 22, column_r208.label || i0.ɵɵpipeBind1(2, 24, column_r208.property)));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r207.height)("po-table-header-flex-right", column_r208.type === "currency" || column_r208.type === "number")("po-table-header-flex-center", column_r208.type === "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r19)("ngTemplateOutletContext", i0.ɵɵpureFunction1(30, _c16, column_r208));
} }
function PoTableComponent_ng_template_10_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_10_ng_template_12_th_0_Template, 5, 32, "th", 117);
} if (rf & 2) {
    const ctx_r188 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngForOf", ctx_r188.mainColumns)("ngForTrackBy", ctx_r188.trackBy);
} }
function PoTableComponent_ng_template_10_th_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 69);
} }
function PoTableComponent_ng_template_10_th_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th");
} if (rf & 2) {
    const ctx_r191 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-table-header-single-action", ctx_r191.isSingleAction)("po-table-header-actions", !ctx_r191.isSingleAction);
} }
function PoTableComponent_ng_template_10_tbody_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 86)(1, "tr", 87)(2, "td", 88)(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r192 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("colSpan", ctx_r192.columnCount);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r192.literals.noData, " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 66);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_2_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r216 = i0.ɵɵnextContext(3);
    const _r15 = i0.ɵɵreference(17);
    const _r17 = i0.ɵɵreference(19);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r216.singleSelect ? _r15 : _r17)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, row_r214));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_3_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_3_Template(rf, ctx) { if (rf & 1) {
    const _r230 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_3_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r230); const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r228 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r228.toggleDetail(row_r214)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_3_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r231 = i0.ɵɵnextContext();
    const row_r214 = ctx_r231.$implicit;
    const rowIndex_r215 = ctx_r231.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_4_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_10_ng_container_17_tbody_1_4_ng_template_0_Template, 0, 0, "ng-template", 95);
} if (rf & 2) {
    const ctx_r233 = i0.ɵɵnextContext();
    const row_r214 = ctx_r233.$implicit;
    const rowIndex_r215 = ctx_r233.index;
    i0.ɵɵnextContext(3);
    const _r25 = i0.ɵɵreference(27);
    i0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_5_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_5_Template(rf, ctx) { if (rf & 1) {
    const _r237 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_5_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r237); const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r235 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r235.toggleDetail(row_r214)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_5_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r238 = i0.ɵɵnextContext();
    const row_r214 = ctx_r238.$implicit;
    const rowIndex_r215 = ctx_r238.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_2_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r241 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r241.getTemplate(column_r239))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, ctx_r241.getCellData(row_r214, column_r239)));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_3_ng_container_1_Template, 1, 0, "ng-container", 76);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r242 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r242.tableCellTemplate == null ? null : ctx_r242.tableCellTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c18, row_r214, column_r239));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r243 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r243.getBooleanLabel(ctx_r243.getCellData(row_r214, column_r239), column_r239), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r244 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 1, ctx_r244.getCellData(row_r214, column_r239), column_r239.format, "symbol", "1.2-2"), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r245 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r245.getCellData(row_r214, column_r239), column_r239.format || "dd/MM/yyyy"), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "po_time");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r246 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r246.getCellData(row_r214, column_r239), column_r239.format || "HH:mm:ss.ffffff"), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r247 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r247.getCellData(row_r214, column_r239), column_r239.format || "dd/MM/yyyy HH:mm:ss"), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r248 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r248.formatNumber(ctx_r248.getCellData(row_r214, column_r239), column_r239.format), " ");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_po_table_column_link_10_Template(rf, ctx) { if (rf & 1) {
    const _r274 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-column-link", 102);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_po_table_column_link_10_Template_po_table_column_link_click_0_listener($event) { i0.ɵɵrestoreView(_r274); const column_r239 = i0.ɵɵnextContext().$implicit; const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r272 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r272.onClickLink($event, row_r214, column_r239)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r249 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-action", column_r239.action)("p-disabled", ctx_r249.checkDisabled(row_r214, column_r239))("p-link", row_r214[column_r239.link])("p-row", row_r214)("p-value", ctx_r249.getCellData(row_r214, column_r239));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_po_table_column_icon_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-table-column-icon", 103);
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r250 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-column", column_r239)("p-icons", ctx_r250.getColumnIcons(row_r214, column_r239))("p-row", row_r214);
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "po-table-subtitle-circle", 104);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r251 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-subtitle", ctx_r251.getSubtitleColumn(row_r214, column_r239));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "po-table-column-label", 105);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r252 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-value", ctx_r252.getColumnLabel(row_r214, column_r239));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r239 = i0.ɵɵnextContext().$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r253 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r253.getCellData(row_r214, column_r239));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_Template(rf, ctx) { if (rf & 1) {
    const _r287 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 121);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r287); const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r286 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r286.hasSelectableRow() ? ctx_r286.selectRow(row_r214) : "javascript:;"); });
    i0.ɵɵelementStart(1, "div", 97);
    i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_Template_div_mouseenter_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r287); const column_r239 = restoredCtx.$implicit; const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r289 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r289.tooltipMouseEnter($event, column_r239, row_r214)); })("mouseleave", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_Template_div_mouseleave_1_listener() { i0.ɵɵrestoreView(_r287); const ctx_r291 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r291.tooltipMouseLeave()); });
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_2_Template, 2, 4, "span", 98)(3, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_3_Template, 2, 5, "span", 98)(4, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_4_Template, 2, 1, "span", 98)(5, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_5_Template, 3, 6, "span", 98)(6, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_6_Template, 3, 4, "span", 98)(7, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_7_Template, 3, 4, "span", 98)(8, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_8_Template, 3, 4, "span", 98)(9, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_9_Template, 2, 1, "span", 98)(10, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_po_table_column_link_10_Template, 1, 5, "po-table-column-link", 99)(11, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_po_table_column_icon_11_Template, 1, 3, "po-table-column-icon", 100)(12, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_12_Template, 2, 1, "span", 98)(13, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_13_Template, 2, 1, "span", 98)(14, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_span_14_Template, 2, 1, "span", 101);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const column_r239 = ctx.$implicit;
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r220 = i0.ɵɵnextContext(3);
    i0.ɵɵstyleProp("width", column_r239.width)("max-width", column_r239.width)("min-width", column_r239.width);
    i0.ɵɵclassProp("po-table-column", column_r239.type !== "icon")("po-table-column-right", column_r239.type === "currency" || column_r239.type === "number")("po-table-column-center", column_r239.type === "subtitle")("po-table-column-icons", column_r239.type === "icon");
    i0.ɵɵproperty("ngClass", ctx_r220.getClassColor(row_r214, column_r239))("pFrozenColumn", column_r239.fixed);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitch", column_r239.type)("p-tooltip", ctx_r220.tooltipText)("p-append-in-body", true);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "columnTemplate");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "cellTemplate");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "boolean");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "currency");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "date");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "time");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "dateTime");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "number");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "link");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "icon");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "subtitle");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "label");
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_7_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_7_Template(rf, ctx) { if (rf & 1) {
    const _r296 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 94);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_7_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r296); const row_r214 = i0.ɵɵnextContext().$implicit; const ctx_r294 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r294.toggleDetail(row_r214)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_7_ng_template_1_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r297 = i0.ɵɵnextContext();
    const row_r214 = ctx_r297.$implicit;
    const rowIndex_r215 = ctx_r297.index;
    i0.ɵɵnextContext(3);
    const _r13 = i0.ɵɵreference(15);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_8_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_10_ng_container_17_tbody_1_8_ng_template_0_Template, 0, 0, "ng-template", 95);
} if (rf & 2) {
    const ctx_r299 = i0.ɵɵnextContext();
    const row_r214 = ctx_r299.$implicit;
    const rowIndex_r215 = ctx_r299.index;
    i0.ɵɵnextContext(3);
    const _r25 = i0.ɵɵreference(27);
    i0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_9_ng_template_2_Template(rf, ctx) { }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 106);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_9_ng_template_2_Template, 0, 0, "ng-template", 95);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r301 = i0.ɵɵnextContext();
    const row_r214 = ctx_r301.$implicit;
    const rowIndex_r215 = ctx_r301.index;
    const ctx_r223 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("colSpan", ctx_r223.columnCountForMasterDetail);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r223.tableRowTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c19, row_r214, rowIndex_r215));
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_10_Template(rf, ctx) { if (rf & 1) {
    const _r303 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr")(1, "td", 107)(2, "po-table-detail", 108);
    i0.ɵɵlistener("p-select-row", function PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_10_Template_po_table_detail_p_select_row_2_listener($event) { i0.ɵɵrestoreView(_r303); const ctx_r302 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r302.selectDetailRow($event)); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const row_r214 = i0.ɵɵnextContext().$implicit;
    const ctx_r224 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("colSpan", ctx_r224.columnCountForMasterDetail);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-selectable", ctx_r224.selectable && !ctx_r224.detailHideSelect)("p-detail", ctx_r224.columnMasterDetail.detail)("p-items", row_r214[ctx_r224.nameColumnDetail]);
} }
function PoTableComponent_ng_template_10_ng_container_17_tbody_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 86)(1, "tr", 90);
    i0.ɵɵtemplate(2, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_2_Template, 2, 4, "td", 91)(3, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_3_Template, 2, 5, "td", 92)(4, PoTableComponent_ng_template_10_ng_container_17_tbody_1_4_Template, 1, 5, null, 43)(5, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_5_Template, 2, 5, "td", 92)(6, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_6_Template, 15, 31, "td", 120)(7, PoTableComponent_ng_template_10_ng_container_17_tbody_1_td_7_Template, 2, 5, "td", 92)(8, PoTableComponent_ng_template_10_ng_container_17_tbody_1_8_Template, 1, 5, null, 43);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_9_Template, 3, 6, "tr", 43)(10, PoTableComponent_ng_template_10_ng_container_17_tbody_1_tr_10_Template, 3, 4, "tr", 43);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r214 = ctx.$implicit;
    const rowIndex_r215 = ctx.index;
    const ctx_r213 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-row-active", row_r214.$selected || row_r214.$selected === null && ctx_r213.selectable);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.selectable);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.columnMasterDetail && !ctx_r213.hideDetail && !ctx_r213.hasRowTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r213.actionRight && (ctx_r213.visibleActions.length > 1 || ctx_r213.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.hasRowTemplate && !ctx_r213.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r213.mainColumns)("ngForTrackBy", ctx_r213.trackBy);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.actionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.hasMainColumns && ctx_r213.hasRowTemplate && row_r214.$showDetail && ctx_r213.isShowRowTemplate(row_r214, rowIndex_r215));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r213.hasMainColumns && ctx_r213.isShowMasterDetail(row_r214));
} }
function PoTableComponent_ng_template_10_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_10_ng_container_17_tbody_1_Template, 11, 12, "tbody", 119);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r193 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("cdkVirtualForOf", ctx_r193.filteredItems)("cdkVirtualForTrackBy", ctx_r193.trackBy);
} }
function PoTableComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r306 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 109, 110)(2, "table", 55)(3, "thead", 111)(4, "tr", 112);
    i0.ɵɵlistener("cdkDropListDropped", function PoTableComponent_ng_template_10_Template_tr_cdkDropListDropped_4_listener($event) { i0.ɵɵrestoreView(_r306); const ctx_r305 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r305.drop($event)); });
    i0.ɵɵtemplate(5, PoTableComponent_ng_template_10_th_5_Template, 3, 5, "th", 57)(6, PoTableComponent_ng_template_10_th_6_Template, 1, 0, "th", 58)(7, PoTableComponent_ng_template_10_th_7_Template, 2, 4, "th", 59)(8, PoTableComponent_ng_template_10_th_8_Template, 3, 3, "th", 60)(9, PoTableComponent_ng_template_10_ng_container_9_Template, 1, 0, "ng-container", 61)(10, PoTableComponent_ng_template_10_ng_template_10_Template, 1, 2, "ng-template", null, 113, i0.ɵɵtemplateRefExtractor)(12, PoTableComponent_ng_template_10_ng_template_12_Template, 1, 2, "ng-template", null, 114, i0.ɵɵtemplateRefExtractor)(14, PoTableComponent_ng_template_10_th_14_Template, 1, 0, "th", 58)(15, PoTableComponent_ng_template_10_th_15_Template, 1, 4, "th", 64);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(16, PoTableComponent_ng_template_10_tbody_16_Template, 5, 2, "tbody", 65)(17, PoTableComponent_ng_template_10_ng_container_17_Template, 2, 2, "ng-container", 43);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const _r187 = i0.ɵɵreference(11);
    const _r189 = i0.ɵɵreference(13);
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("height", ctx_r9.heightTableContainer, "px");
    i0.ɵɵproperty("itemSize", ctx_r9.itemSize)("minBufferPx", ctx_r9.heightTableContainer < 100 ? 100 : ctx_r9.heightTableContainer)("maxBufferPx", ctx_r9.heightTableContainer < 200 ? 200 : ctx_r9.heightTableContainer);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(22, _c20, ctx_r9.selectable || ctx_r9.sort, ctx_r9.selectable, ctx_r9.striped, ctx_r9.applyFixedColumns(), ctx_r9.textWrap));
    i0.ɵɵattribute("p-spacing", ctx_r9.spacing);
    i0.ɵɵadvance();
    i0.ɵɵstyleProp("top", ctx_r9.inverseOfTranslation);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-header", !ctx_r9.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r9.hasSelectableColumn);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", (ctx_r9.hasMasterDetailColumn || ctx_r9.hasRowTemplate) && !ctx_r9.hasRowTemplateWithArrowDirectionRight);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r9.actionRight && (ctx_r9.visibleActions.length > 1 || ctx_r9.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r9.hasMainColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r9.isDraggable || ctx_r9.hasSomeFixed())("ngIfThen", _r187)("ngIfElse", _r189);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r9.hasRowTemplateWithArrowDirectionRight && (ctx_r9.hasVisibleActions || ctx_r9.hideColumnsManager));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r9.hasVisibleActions && ctx_r9.actionRight && (ctx_r9.visibleActions.length > 1 || ctx_r9.isSingleAction));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r9.hasItems || !ctx_r9.hasMainColumns);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r9.hasMainColumns);
} }
function PoTableComponent_ng_template_14_po_icon_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 123);
} if (rf & 2) {
    const row_r307 = i0.ɵɵnextContext().row;
    i0.ɵɵproperty("p-icon", row_r307.$showDetail ? "ICON_ARROW_UP" : "ICON_ARROW_DOWN");
} }
function PoTableComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_14_po_icon_0_Template, 1, 1, "po-icon", 122);
} if (rf & 2) {
    const row_r307 = ctx.row;
    const rowIndex_r308 = ctx.rowIndex;
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r12.containsMasterDetail(row_r307) && !ctx_r12.hasRowTemplate || ctx_r12.isShowRowTemplate(row_r307, rowIndex_r308) && ctx_r12.hasRowTemplate);
} }
function PoTableComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    const _r313 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-radio", 124);
    i0.ɵɵlistener("p-change-selected", function PoTableComponent_ng_template_16_Template_po_radio_p_change_selected_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r313); const row_r311 = restoredCtx.$implicit; const ctx_r312 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r312.selectRow(row_r311)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r311 = ctx.$implicit;
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵproperty("name", ctx_r14.idRadio)("p-checked", row_r311.$selected);
} }
function PoTableComponent_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    const _r316 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox", 125);
    i0.ɵɵlistener("p-change", function PoTableComponent_ng_template_18_Template_po_checkbox_p_change_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r316); const row_r314 = restoredCtx.$implicit; const ctx_r315 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r315.selectable ? ctx_r315.selectRow(row_r314) : "javascript:;"); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r314 = ctx.$implicit;
    i0.ɵɵproperty("p-checkboxValue", row_r314.$selected);
} }
function PoTableComponent_ng_template_20_span_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 129);
    i0.ɵɵelement(2, "path", 130);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function PoTableComponent_ng_template_20_span_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 129);
    i0.ɵɵelement(2, "path", 131);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function PoTableComponent_ng_template_20_span_4_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 129);
    i0.ɵɵelement(2, "path", 132);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function PoTableComponent_ng_template_20_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_20_span_4_ng_container_1_Template, 3, 0, "ng-container", 43)(2, PoTableComponent_ng_template_20_span_4_ng_container_2_Template, 3, 0, "ng-container", 43)(3, PoTableComponent_ng_template_20_span_4_ng_container_3_Template, 3, 0, "ng-container", 43);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r317 = i0.ɵɵnextContext().$implicit;
    const ctx_r319 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-table-header-icon-unselected", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) !== ctx_r319.JSON.stringify(column_r317))("po-table-header-icon-descending", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) === ctx_r319.JSON.stringify(column_r317) && ctx_r319.sortedColumn.ascending)("po-table-header-icon-ascending", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) === ctx_r319.JSON.stringify(column_r317) && !ctx_r319.sortedColumn.ascending);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) !== ctx_r319.JSON.stringify(column_r317));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) === ctx_r319.JSON.stringify(column_r317) && ctx_r319.sortedColumn.ascending);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r319.JSON.stringify(ctx_r319.sortedColumn == null ? null : ctx_r319.sortedColumn.property) === ctx_r319.JSON.stringify(column_r317) && !ctx_r319.sortedColumn.ascending);
} }
function PoTableComponent_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    const _r325 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 126, 127);
    i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_20_Template_span_mouseenter_0_listener($event) { i0.ɵɵrestoreView(_r325); const ctx_r324 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r324.tooltipMouseEnter($event)); })("mouseleave", function PoTableComponent_ng_template_20_Template_span_mouseleave_0_listener() { i0.ɵɵrestoreView(_r325); const ctx_r326 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r326.tooltipMouseLeave()); });
    i0.ɵɵtext(2);
    i0.ɵɵpipe(3, "titlecase");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(4, PoTableComponent_ng_template_20_span_4_Template, 4, 9, "span", 128);
} if (rf & 2) {
    const column_r317 = ctx.$implicit;
    const ctx_r18 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-tooltip", ctx_r18.tooltipText)("p-append-in-body", true);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", column_r317.label || i0.ɵɵpipeBind1(3, 4, column_r317.property), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r18.sort && column_r317.sortable !== false);
} }
function PoTableComponent_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 133);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("width", ctx_r20.headerWidth, "px");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r20.hasValidColumns ? ctx_r20.literals.noVisibleColumn : ctx_r20.literals.noColumns, " ");
} }
function PoTableComponent_ng_template_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate1(" ", ctx_r22.hasValidColumns ? ctx_r22.literals.noVisibleColumn : ctx_r22.literals.noColumns, "\n");
} }
function PoTableComponent_ng_template_26_td_0_div_1_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 140);
} if (rf & 2) {
    const ctx_r332 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("p-icon", ctx_r332.firstAction.icon);
} }
function PoTableComponent_ng_template_26_td_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r335 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 138);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_26_td_0_div_1_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r335); const row_r327 = i0.ɵɵnextContext(2).row; const ctx_r333 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r333.executeTableAction(row_r327, ctx_r333.firstAction)); });
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_26_td_0_div_1_po_icon_1_Template, 1, 1, "po-icon", 139);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r327 = i0.ɵɵnextContext(2).row;
    const ctx_r331 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-table-action-disabled", ctx_r331.firstAction.disabled ? ctx_r331.validateTableAction(row_r327, ctx_r331.firstAction) : false);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r331.firstAction.icon);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r331.firstAction.label, " ");
} }
function PoTableComponent_ng_template_26_td_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 136);
    i0.ɵɵtemplate(1, PoTableComponent_ng_template_26_td_0_div_1_Template, 3, 4, "div", 137);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r329 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("width", ctx_r329.height && ctx_r329.actionRight ? ctx_r329.getWidthColumnManager() : "", "px")("max-width", ctx_r329.height && !ctx_r329.actionRight ? ctx_r329.getColumnWidthActionsLeft() : "", "px")("width", ctx_r329.height && !ctx_r329.actionRight ? ctx_r329.getColumnWidthActionsLeft() : "", "px");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r329.firstAction.visible !== false);
} }
function PoTableComponent_ng_template_26_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r340 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 141)(1, "div", 142, 143);
    i0.ɵɵlistener("click", function PoTableComponent_ng_template_26_td_1_Template_div_click_1_listener() { i0.ɵɵrestoreView(_r340); const _r337 = i0.ɵɵreference(2); const row_r327 = i0.ɵɵnextContext().row; const ctx_r338 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r338.togglePopup(row_r327, _r337)); });
    i0.ɵɵelement(3, "po-icon", 144);
    i0.ɵɵelementEnd()();
} }
function PoTableComponent_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTableComponent_ng_template_26_td_0_Template, 2, 7, "td", 134)(1, PoTableComponent_ng_template_26_td_1_Template, 4, 0, "td", 135);
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r24.isSingleAction);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r24.visibleActions.length > 1);
} }
function PoTableComponent_po_table_column_manager_28_Template(rf, ctx) { if (rf & 1) {
    const _r342 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-column-manager", 145);
    i0.ɵɵlistener("p-visible-columns-change", function PoTableComponent_po_table_column_manager_28_Template_po_table_column_manager_p_visible_columns_change_0_listener($event) { i0.ɵɵrestoreView(_r342); const ctx_r341 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r341.onVisibleColumnsChange($event)); })("p-change-visible-columns", function PoTableComponent_po_table_column_manager_28_Template_po_table_column_manager_p_change_visible_columns_0_listener($event) { i0.ɵɵrestoreView(_r342); const ctx_r343 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r343.onChangeVisibleColumns($event)); })("p-initial-columns", function PoTableComponent_po_table_column_manager_28_Template_po_table_column_manager_p_initial_columns_0_listener($event) { i0.ɵɵrestoreView(_r342); const ctx_r344 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r344.onColumnRestoreManager($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-columns", ctx_r26.columns)("p-max-columns", ctx_r26.maxColumns)("p-target", ctx_r26.columnManagerTarget)("p-last-visible-columns-selected", ctx_r26.lastVisibleColumnsSelected)("p-hide-action-fixed-columns", ctx_r26.hideActionFixedColumns)("p-columns-default", ctx_r26.initialColumns);
} }
/**
 * @docsExtends PoTableBaseComponent
 *
 * @example
 *
 * <example name="po-table-basic" title="PO Table Basic">
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="po-table-labs" title="PO Table Labs">
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-with-api" title="PO Table using API">
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.ts"> </file>
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.html"> </file>
 * </example>
 *
 * <example name="po-table-transport" title="PO Table - Transport">
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-airfare" title="PO Table - Airfare">
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-components" title="PO Table - Po Field Components">
 *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.enum.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.css"> </file>
 * </example>
 *
 * <example name="po-table-heroes" title="PO Table - Heroes">
 *  <file name="sample-po-table-heroes/sample-po-table-heroes.component.ts"> </file>
 *  <file name="sample-po-table-heroes/sample-po-table-heroes.component.html"> </file>
 *  <file name="sample-po-table-heroes/sample-po-table-heroes.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-draggable" title="PO Table Drag and Drop">
 *  <file name="sample-po-table-draggable/sample-po-table-draggable.component.html"> </file>
 *  <file name="sample-po-table-draggable/sample-po-table-draggable.component.ts"> </file>
 * </example>
 */
class PoTableComponent extends PoTableBaseComponent {
    changeDetector;
    decimalPipe;
    router;
    defaultService;
    tableRowTemplate;
    tableCellTemplate;
    tableColumnTemplates;
    noColumnsHeader;
    poPopupComponent;
    modalDelete;
    tableFooterElement;
    tableWrapperElement;
    tableTemplate;
    tableVirtualScroll;
    columnManager;
    columnBatchActions;
    columnActionLeft;
    actionsIconElement;
    actionsElement;
    filterInput;
    poSearchInput;
    viewPort;
    poNotification = inject(PoNotificationService);
    heightTableContainer;
    heightTableVirtual;
    popupTarget;
    tableOpacity = 0;
    tooltipText;
    itemSize = 48;
    lastVisibleColumnsSelected;
    tagColor;
    idRadio;
    inputFieldValue = '';
    JSON;
    newOrderColumns;
    sizeLoading = 'sm';
    headerWidth;
    close = {
        action: () => {
            this.modalDelete.close();
        },
        label: this.literals.cancel,
        danger: true
    };
    confirm = {
        action: () => {
            this.deleteItems();
        },
        label: this.literals.delete
    };
    _columnManagerTarget;
    _columnManagerTargetFixed;
    differ;
    footerHeight;
    headerHeight;
    timeoutResize;
    visibleElement = false;
    scrollEvent$;
    subscriptionScrollEvent;
    subscriptionService = new Subscription();
    clickListener;
    resizeListener;
    set columnManagerTarget(value) {
        this._columnManagerTarget = value;
        this.changeDetector.detectChanges();
    }
    get columnManagerTarget() {
        return this._columnManagerTarget;
    }
    set columnManagerTargetFixed(value) {
        this._columnManagerTargetFixed = value;
        this.changeDetector.detectChanges();
    }
    get columnManagerTargetFixed() {
        return this._columnManagerTargetFixed;
    }
    constructor(poDate, differs, renderer, poLanguageService, changeDetector, decimalPipe, router, defaultService) {
        super(poDate, poLanguageService, defaultService);
        this.changeDetector = changeDetector;
        this.decimalPipe = decimalPipe;
        this.router = router;
        this.defaultService = defaultService;
        this.JSON = JSON;
        this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        this.clickListener = renderer.listen('document', 'click', () => { });
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    get hasRowTemplateWithArrowDirectionRight() {
        return this.tableRowTemplate?.tableRowTemplateArrowDirection === PoTableRowTemplateArrowDirection.Right;
    }
    get columnCount() {
        const columnCount = this.mainColumns.length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.selectable ? 1 : 0) +
            (!this.hideDetail && this.columnMasterDetail !== undefined ? 1 : 0);
        return columnCount || 1;
    }
    get columnCountForMasterDetail() {
        // caso tiver ações será utilizado a sua coluna para exibir o columnManager
        return this.mainColumns.length + 1 + (this.actions.length > 0 ? 1 : 0) + (this.selectable ? 1 : 0);
    }
    get detailHideSelect() {
        const masterDetail = this.columnMasterDetail;
        return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
    }
    get hasVisibleActions() {
        return !!this.visibleActions.length;
    }
    get firstAction() {
        return this.visibleActions && this.visibleActions[0];
    }
    get hasFooter() {
        return this.hasItems && this.hasVisibleSubtitleColumns;
    }
    get hasMasterDetailColumn() {
        return (this.hasMainColumns && this.hasItems && !this.hideDetail && !!(this.columnMasterDetail || this.hasRowTemplate));
    }
    get hasRowTemplate() {
        return !!this.tableRowTemplate;
    }
    get hasSelectableColumn() {
        return this.selectable && this.hasItems && this.hasMainColumns;
    }
    get hasValidColumns() {
        return !!this.validColumns.length;
    }
    get hasVisibleSubtitleColumns() {
        return this.subtitleColumns.some(column => column.visible !== false);
    }
    get isSingleAction() {
        return this.visibleActions.length === 1;
    }
    get isDraggable() {
        return this.draggable;
    }
    get inverseOfTranslation() {
        if (!this.viewPort || !this.viewPort['_renderedContentOffset']) {
            return '-0px';
        }
        const offset = this.viewPort['_renderedContentOffset'];
        return `-${offset}px`;
    }
    ngOnInit() {
        this.idRadio = `po-radio-${uuid()}`;
    }
    changeHeaderWidth() {
        if (this.noColumnsHeader) {
            this.headerWidth = this.noColumnsHeader?.nativeElement.offsetWidth;
        }
        this.changeDetector.detectChanges();
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.changeHeaderWidth();
        this.changeSizeLoading();
        this.applyFixedColumns();
    }
    showMoreInfiniteScroll({ target }) {
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (!this.showMoreDisabled && scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.onShowMore();
        }
    }
    ngDoCheck() {
        this.applyFixedColumns();
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (this.tableWrapperElement?.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.checkInfiniteScroll();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        this.subscriptionService?.unsubscribe();
    }
    /**
     * Método responsável por realizar busca no serviço de dados podendo informar filtros e com o retorno, atualiza a tabela.
     *
     * Caso não seja informado parâmetro, nada será adicionado ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10
     * ```
     * > Obs: os parâmetros `page` e `pageSize` sempre serão chamados independente de ser enviados outros parâmetros.
     *
     * Caso sejam informados os parâmetros `{ name: 'JOHN', age: '23' }`, todos serão adicionados ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10&name=JOHN&age=23
     * ```
     *
     * @param { { key: value } } queryParams Formato do objeto a ser enviado.
     * > Pode ser utilizada qualquer string como key, e qualquer string ou number como value.
     */
    applyFilters(queryParams) {
        this.page = 1;
        this.initializeData(queryParams);
    }
    /**
     * Verifica se columns possuem a propriedade width.
     */
    applyFixedColumns() {
        return !this.columns.some(column => !column.width);
    }
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex) {
        this.setShowDetail(rowIndex, false);
    }
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex) {
        this.setShowDetail(rowIndex, true);
    }
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows() {
        return this.items.filter(item => item.$selected);
    }
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows() {
        return this.items.filter(item => !item.$selected);
    }
    /**
     * Desmarca as linhas que estão selecionadas.
     */
    unselectRows() {
        const columnDetail = this.nameColumnDetail;
        this.items.forEach(item => {
            const detailItems = columnDetail ? item[columnDetail] : null;
            if (Array.isArray(detailItems)) {
                detailItems.forEach(detailItem => {
                    detailItem.$selected = false;
                });
            }
            item.$selected = false;
        });
        this.selectAll = false;
    }
    checkDisabled(row, column) {
        return column.disabled ? column.disabled(row) : false;
    }
    containsMasterDetail(row) {
        return row[this.nameColumnDetail] && row[this.nameColumnDetail].length;
    }
    executeTableAction(row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            tableAction.action(row);
            this.toggleRowAction(row);
        }
    }
    /**
     * Desmarca uma linha que está selecionada.
     */
    unselectRowItem(itemfn) {
        this.toggleSelect(itemfn, false);
        if (this.items.every(item => !item.$selected)) {
            this.selectAll = false;
        }
        else {
            this.selectAll = null;
        }
    }
    /**
     * Seleciona uma linha do 'po-table'.
     */
    selectRowItem(itemfn) {
        this.toggleSelect(itemfn, true);
        if (this.items.every(item => item.$selected)) {
            this.selectAll = true;
        }
        else {
            this.selectAll = null;
        }
    }
    /**
     * Método responsável pela exclusão de itens em lote.
     * Caso a tabela esteja executando a propriedade `p-service-delete`, será necessário excluir 1 item por vez.
     *
     * Ao utilizar `p-service-delete` mas sem a propriedade `p-service-api`, será responsabilidade do usuário o tratamento
     * após a requisição DELETE ser executada.
     *
     * Caso a tabela utilize `p-height` e esteja sem serviço, é necessário a reatribuição dos itens utilizando o evento `(p-delete-items)`, por exemplo:
     *
     * ```
     *<po-table
     *  (p-delete-items)="items = $event"
     * >
     *</po-table>
     * ```
     */
    deleteItems() {
        const newItems = [...this.items];
        const newItemsFiltered = [...newItems].filter(item => !item.$selected);
        if (!this.serviceDeleteApi) {
            this.deleteItemsLocal(newItems, newItemsFiltered);
        }
        else {
            this.deleteItemsService(newItemsFiltered);
        }
    }
    formatNumber(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getCellData(row, column) {
        const arrayProperty = column.property.split('.');
        if (arrayProperty.length > 1) {
            const nestedProperties = arrayProperty;
            let value = row;
            for (const property of nestedProperties) {
                value = value[property] || value[property] === 0 ? value[property] : '';
            }
            return value;
        }
        else {
            return row[column.property];
        }
    }
    getBooleanLabel(rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    }
    getColumnIcons(row, column) {
        const rowIcons = this.getCellData(row, column);
        if (column.icons) {
            if (Array.isArray(rowIcons)) {
                return this.mergeCustomIcons(rowIcons, column.icons);
            }
            else {
                return this.findCustomIcon(rowIcons, column);
            }
        }
        return rowIcons;
    }
    getColumnLabel(row, columnLabel) {
        return columnLabel.labels.find(labelItem => this.getCellData(row, columnLabel) === labelItem.value);
    }
    getSubtitleColumn(row, subtitleColumn) {
        return subtitleColumn.subtitles.find(subtitleItem => this.getCellData(row, subtitleColumn) === subtitleItem.value);
    }
    isShowMasterDetail(row) {
        return (!this.hideDetail &&
            this.nameColumnDetail &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate);
    }
    isShowRowTemplate(row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
            return this.tableRowTemplate.poTableRowTemplateShow(row, index);
        }
        return true;
    }
    onClickLink(event, row, column) {
        if (!this.checkDisabled(row, column)) {
            event.stopPropagation();
        }
    }
    onChangeVisibleColumns(columns) {
        this.changeVisibleColumns.emit(columns);
    }
    onColumnRestoreManager(value) {
        this.columnRestoreManager.emit(value);
    }
    onVisibleColumnsChange(columns) {
        this.columns = columns;
        this.changeDetector.detectChanges();
    }
    tooltipMouseEnter(event, column, row) {
        this.tooltipText = undefined;
        if (event.target.offsetWidth < event.target.scrollWidth && event.target.innerText.trim()) {
            return (this.tooltipText = event.target.innerText);
        }
        if (column) {
            this.checkingIfColumnHasTooltip(column, row);
        }
    }
    tooltipMouseLeave() {
        this.tooltipText = undefined;
    }
    togglePopup(row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(row);
    }
    trackBy(index) {
        return index;
    }
    validateTableAction(row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled(row);
        }
        else {
            return tableAction.disabled;
        }
    }
    onOpenColumnManager() {
        this.lastVisibleColumnsSelected = [...this.columns];
    }
    onFilteredItemsChange(items) {
        if (this.sortedColumn.property) {
            this.sortArray(this.sortedColumn.property, this.sortedColumn.ascending, items);
        }
        else {
            this.filteredItems = items;
        }
    }
    /**
     * Método que remove um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será removido.
     * > Ao remover o item, a linha que o representa será excluída da tabela.
     */
    removeItem(item) {
        if (item instanceof Object) {
            this.items = this.items.filter(filterItem => filterItem !== item);
        }
        else if (typeof item === 'number') {
            const index = item;
            this.items.splice(index, 1);
        }
    }
    /**
     * Método que atualiza um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será atualizado.
     * @param { { key: value } } updatedItem Item que foi atualizado.
     * > Ao atualizar o item, a informação será alterada na tabela.
     */
    updateItem(item, updatedItem) {
        if (typeof item === 'number') {
            this.items.splice(item, 1, updatedItem);
        }
        else {
            const index = this.items.findIndex(indexItem => indexItem === item);
            this.items.splice(index, 1, updatedItem);
        }
    }
    drop(event) {
        if (!this.mainColumns[event.currentIndex].fixed) {
            moveItemInArray(this.mainColumns, event.previousIndex, event.currentIndex);
            if (this.hideColumnsManager === false) {
                this.newOrderColumns = this.mainColumns;
                const detail = this.columns.filter(item => item.property === 'detail')[0];
                if (detail !== undefined) {
                    this.newOrderColumns.push(detail);
                }
                this.columns.map((item, index) => {
                    if (!item.visible) {
                        this.newOrderColumns.splice(index, 0, item);
                    }
                });
                this.columns = this.newOrderColumns;
                this.onVisibleColumnsChange(this.newOrderColumns);
            }
        }
    }
    getTemplate(column) {
        const template = this.tableColumnTemplates.find(tableColumnTemplate => tableColumnTemplate.targetProperty === column.property);
        if (!template) {
            console.warn(`Não foi possível encontrar o template para a coluna: ${column.property}, por gentileza informe a propriedade [p-property]`);
            return null;
        }
        return template.templateRef;
    }
    getWidthColumnManager() {
        return this.columnManager?.nativeElement.offsetWidth;
    }
    getColumnWidthActionsLeft() {
        return this.columnActionLeft?.nativeElement.offsetWidth;
    }
    hasSomeFixed() {
        return this.columns.some(item => item.fixed === true);
    }
    calculateHeightTableContainer(height) {
        const value = parseFloat(height);
        this.heightTableContainer = value ? value - this.getHeightTableFooter() : undefined;
        this.heightTableVirtual = this.heightTableContainer ? this.heightTableContainer - this.itemSize : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    }
    verifyCalculateHeightTableContainer() {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            this.calculateHeightTableContainer(this.height);
        }
    }
    checkInfiniteScroll() {
        if (this.hasInfiniteScroll()) {
            if (this.tableVirtualScroll.nativeElement.scrollHeight >= this.height) {
                this.includeInfiniteScroll();
            }
            else {
                this.infiniteScroll = false;
            }
        }
        this.changeDetector.detectChanges();
    }
    changesAfterDelete(newItemsFiltered) {
        this.selectAll = false;
        this.setSelectedList();
        this.modalDelete.close();
        this.poNotification.success(this.literals.deleteSuccessful);
        this.eventDelete.emit(newItemsFiltered);
    }
    changeSizeLoading() {
        const tableHeight = this.tableWrapperElement?.nativeElement?.offsetHeight;
        if (tableHeight <= 150) {
            this.sizeLoading = 'sm';
        }
        else if (tableHeight > 150 && tableHeight < 260) {
            this.sizeLoading = 'md';
        }
        else {
            this.sizeLoading = 'lg';
        }
    }
    checkChangesItems() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns && this.hasItems) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    }
    checkingIfColumnHasTooltip(column, row) {
        if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
            return (this.tooltipText = column.tooltip);
        }
        if (column.type === 'label') {
            const columnLabel = this.getColumnLabel(row, column);
            return (this.tooltipText = columnLabel?.tooltip);
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            // show the table
            this.setTableOpacity(1);
        });
    }
    deleteItemsLocal(newItems, newItemsFiltered) {
        if (this.height) {
            this.items = newItemsFiltered;
        }
        else {
            let index = this.items.length - 1;
            newItems
                .slice()
                .reverse()
                .forEach(item => {
                if (item.$selected) {
                    this.removeItem(index);
                }
                index--;
            });
        }
        this.changesAfterDelete(newItemsFiltered);
        this.onFilteredItemsChange(newItemsFiltered);
    }
    deleteItemsService(newItemsFiltered) {
        this.subscriptionService.add(this.defaultService.deleteItem(this.paramDeleteApi, this.itemsSelected[0][this.paramDeleteApi]).subscribe({
            next: value => {
                if (this.hasService) {
                    const filteredParams = {
                        ...this.paramsFilter,
                        pageSize: newItemsFiltered.length + 1,
                        page: 1
                    };
                    this.loading = true;
                    this.subscriptionService.add(this.defaultService.getFilteredItems(filteredParams).subscribe(items => {
                        this.setTableResponseProperties(items);
                    }));
                }
                this.items = newItemsFiltered;
                this.changesAfterDelete(newItemsFiltered);
            },
            error: error => {
                this.poNotification.error(this.literals.deleteApiError);
                this.modalDelete.close();
                this.eventDelete.emit(this.items);
            }
        }));
    }
    findCustomIcon(rowIcons, column) {
        const customIcon = column.icons.find(icon => rowIcons === icon.value);
        return customIcon ? [customIcon] : undefined;
    }
    getHeightTableFooter() {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    }
    hasInfiniteScroll() {
        return (this.infiniteScroll &&
            this.hasItems &&
            !this.subscriptionScrollEvent &&
            this.height &&
            this.tableVirtualScroll.nativeElement.scrollHeight);
    }
    includeInfiniteScroll() {
        this.scrollEvent$ = this.defaultService.scrollListener(this.tableVirtualScroll.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => this.showMoreInfiniteScroll(event));
        this.changeDetector.detectChanges();
    }
    mergeCustomIcons(rowIcons, customIcons) {
        const mergedIcons = [];
        rowIcons.forEach(columnValue => {
            const foundCustomIcon = customIcons.find(customIcon => columnValue === customIcon.icon || columnValue === customIcon.value);
            foundCustomIcon ? mergedIcons.push(foundCustomIcon) : mergedIcons.push(columnValue);
        });
        return mergedIcons;
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.subscriptionScrollEvent) {
            this.subscriptionScrollEvent.unsubscribe();
        }
    }
    setTableOpacity(value) {
        this.tableOpacity = value;
    }
    verifyChangeHeightInFooter() {
        return this.footerHeight !== this.getHeightTableFooter();
    }
    toggleSelect(compare, selectValue) {
        if (typeof compare !== 'function') {
            this.items.forEach(item => {
                if (item === compare) {
                    item.$selected = selectValue;
                }
            });
        }
        else {
            this.items.forEach(item => {
                if (compare(item)) {
                    item.$selected = selectValue;
                }
            });
        }
    }
    static ɵfac = function PoTableComponent_Factory(t) { return new (t || PoTableComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoTableService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableComponent, selectors: [["po-table"]], contentQueries: function PoTableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoTableRowTemplateDirective, 7);
            i0.ɵɵcontentQuery(dirIndex, PoTableCellTemplateDirective, 5);
            i0.ɵɵcontentQuery(dirIndex, PoTableColumnTemplateDirective, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableRowTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableCellTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableColumnTemplates = _t);
        } }, viewQuery: function PoTableComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$W, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$p, 5);
            i0.ɵɵviewQuery(PoModalComponent, 7);
            i0.ɵɵviewQuery(_c2$c, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$7, 5, ElementRef);
            i0.ɵɵviewQuery(_c4$3, 5, ElementRef);
            i0.ɵɵviewQuery(_c5, 5, ElementRef);
            i0.ɵɵviewQuery(_c6, 5, ElementRef);
            i0.ɵɵviewQuery(_c7, 5, ElementRef);
            i0.ɵɵviewQuery(_c8, 5, ElementRef);
            i0.ɵɵviewQuery(_c9, 5);
            i0.ɵɵviewQuery(_c10, 7, ElementRef);
            i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);
            i0.ɵɵviewQuery(_c11, 5);
            i0.ɵɵviewQuery(_c12, 5);
            i0.ɵɵviewQuery(_c13, 5, ElementRef);
            i0.ɵɵviewQuery(_c14, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noColumnsHeader = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPopupComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalDelete = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableFooterElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableWrapperElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableVirtualScroll = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManager = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnBatchActions = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnActionLeft = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poSearchInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManagerTarget = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManagerTargetFixed = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionsIconElement = _t);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionsElement = _t);
        } }, features: [i0.ɵɵProvidersFeature([PoDateService]), i0.ɵɵInheritDefinitionFeature], decls: 33, vars: 14, consts: [[1, "po-table-actions"], ["class", "po-table-actions-batch-actions", 4, "ngIf"], ["class", "po-table-actions-column-manager", 4, "ngIf"], ["class", "po-table-search", 4, "ngIf"], ["p-no-padding", "", 4, "ngIf", "ngIfElse"], ["tableContainerTemplate", ""], ["class", "po-row po-table-footer-show-more", 3, "po-invisible", 4, "ngIf"], ["tableTemplate", ""], ["tableVirtualScrollTemplate", ""], [3, "p-actions", "p-target"], ["popup", ""], ["poTableColumnDetail", ""], ["inputRadio", ""], ["inputCheckbox", ""], ["contentHeaderTemplate", ""], ["noColumnsWithHeight", ""], ["noColumnsWithoutHeight", ""], ["ActionsColumnTemplate", ""], [3, "p-columns", "p-max-columns", "p-target", "p-last-visible-columns-selected", "p-hide-action-fixed-columns", "p-columns-default", "p-visible-columns-change", "p-change-visible-columns", "p-initial-columns", 4, "ngIf"], [3, "p-title", "p-primary-action", "p-secondary-action", "p-click-out"], ["modalDelete", ""], [1, "po-font-text-large"], [1, "po-table-actions-batch-actions"], ["columnBatchActions", ""], [1, "po-table-actions-batch-actions__label", 3, "ngPlural"], ["ngPluralCase", "=0"], ["ngPluralCase", "=1"], ["ngPluralCase", "other"], [1, "po-table-actions-batch-actions__buttons"], ["p-icon", "ICON_DELETE", 3, "p-danger", "p-disabled", "p-label", "p-click"], [1, "po-table-actions-column-manager"], ["columnManager", ""], ["p-icon", "ICON_SETTINGS", "p-kind", "tertiary", "p-tooltip-position", "left", 3, "p-aria-label", "p-tooltip", "p-click"], ["columnManagerTarget", ""], [1, "po-table-search"], [3, "p-items", "p-filter-keys", "p-filter-type", "p-filtered-items-change"], ["p-no-padding", ""], [4, "ngTemplateOutlet"], [3, "p-text", "p-size", 4, "ngIf"], [1, "po-table-main-container"], [1, "po-table-wrapper"], ["tableWrapper", ""], ["class", "po-table-container", 3, "height", 4, "ngIf"], [4, "ngIf"], ["class", "po-table-footer", 4, "ngIf"], [3, "p-text", "p-size"], [1, "po-table-container"], [1, "po-table-container-fixed-inner"], ["poTableTbody", ""], [1, "po-table-footer"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-literals", "p-subtitles"], [1, "po-row", "po-table-footer-show-more"], ["tableFooter", ""], [1, "po-offset-xl-4", "po-offset-lg-4", "po-offset-md-3", "po-lg-4", "po-md-6", 3, "p-disabled", "p-label", "p-loading", "p-click"], [1, "po-table", 3, "ngClass"], ["cdkDropList", "", "cdkDropListOrientation", "horizontal", 3, "ngClass", "cdkDropListDropped"], ["class", "po-table-column-selectable", 3, "pointer-events", 4, "ngIf"], ["class", "po-table-header-column po-table-header-master-detail", 4, "ngIf"], [3, "po-table-header-master-detail", "po-table-header-single-action", 4, "ngIf"], ["class", "po-table-header-column po-text-center", 4, "ngIf"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["tableDefaultThDragDrop", ""], ["tableDefaultThDefault", ""], [3, "po-table-header-single-action", "po-table-header-actions", 4, "ngIf"], ["class", "po-table-group-row", 4, "ngIf"], [1, "po-table-column-selectable"], ["name", "selectAll", 3, "p-checkboxValue", "p-change", 4, "ngIf"], ["name", "selectAll", 3, "p-checkboxValue", "p-change"], [1, "po-table-header-column", "po-table-header-master-detail"], ["columnActionLeft", ""], [1, "po-table-header-column", "po-text-center"], ["noColumnsHeader", ""], ["class", "po-table-header-ellipsis p-element po-frozen-column", "cdkDrag", "", "cdkDragLockAxis", "x", 3, "width", "max-width", "min-width", "po-clickable", "ngClass", "po-table-header-subtitle", "po-table-column-drag-box", "cdkDragDisabled", "pFrozenColumn", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["cdkDrag", "", "cdkDragLockAxis", "x", 1, "po-table-header-ellipsis", "p-element", "po-frozen-column", 3, "ngClass", "cdkDragDisabled", "pFrozenColumn", "click"], [1, "po-table-header-flex"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["cdkDragHandle", "", "width", "16", "height", "16", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["cx", "9", "cy", "6", "r", "2", "fill", "black"], ["cx", "15", "cy", "6", "r", "2", "fill", "black"], ["cx", "9", "cy", "12", "r", "2", "fill", "black"], ["cx", "15", "cy", "12", "r", "2", "fill", "black"], ["cx", "9", "cy", "18", "r", "2", "fill", "black"], ["cx", "15", "cy", "18", "r", "2", "fill", "black"], ["class", "po-table-header-ellipsis p-element po-frozen-column", 3, "width", "max-width", "min-width", "po-clickable", "ngClass", "po-table-header-subtitle", "pFrozenColumn", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-table-header-ellipsis", "p-element", "po-frozen-column", 3, "ngClass", "pFrozenColumn", "click"], [1, "po-table-group-row"], [1, "po-table-row", "po-table-row-no-data"], [1, "po-table-no-data", "po-text-center", 3, "colSpan"], ["class", "po-table-group-row", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-table-row"], ["class", "po-table-column-selectable", 4, "ngIf"], ["class", "po-table-column-detail-toggle", 3, "click", 4, "ngIf"], ["class", "p-element po-frozen-column", 3, "width", "max-width", "min-width", "po-table-column", "po-table-column-right", "po-table-column-center", "po-table-column-icons", "pFrozenColumn", "ngClass", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-table-column-detail-toggle", 3, "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "p-element", "po-frozen-column", 3, "pFrozenColumn", "ngClass", "click"], [1, "po-table-column-cell", "po-table-body-ellipsis", "notranslate", 3, "ngSwitch", "p-tooltip", "p-append-in-body", "mouseenter", "mouseleave"], [4, "ngSwitchCase"], [3, "p-action", "p-disabled", "p-link", "p-row", "p-value", "click", 4, "ngSwitchCase"], [3, "p-column", "p-icons", "p-row", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "p-action", "p-disabled", "p-link", "p-row", "p-value", "click"], [3, "p-column", "p-icons", "p-row"], [3, "p-subtitle"], [3, "p-value"], [1, "po-table-row-template-container", 3, "colSpan"], [1, "po-table-column-detail", 3, "colSpan"], [3, "p-selectable", "p-detail", "p-items", "p-select-row"], [3, "itemSize", "minBufferPx", "maxBufferPx"], ["tableVirtualScroll", ""], [1, "po-table-header-sticky"], ["cdkDropList", "", "cdkDropListOrientation", "horizontal", 3, "cdkDropListDropped"], ["tableVirtualScrollThDragDrop", ""], ["tableVirtualScrollThDefault", ""], ["class", "po-table-header-ellipsis p-element po-frozen-column", "cdkDrag", "", "cdkDragLockAxis", "x", 3, "width", "max-width", "min-width", "po-clickable", "ngClass", "ngStyle", "po-table-header-subtitle", "po-table-column-drag-box", "cdkDragDisabled", "pFrozenColumn", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["cdkDrag", "", "cdkDragLockAxis", "x", 1, "po-table-header-ellipsis", "p-element", "po-frozen-column", 3, "ngClass", "ngStyle", "cdkDragDisabled", "pFrozenColumn", "click"], ["class", "po-table-header-ellipsis p-element po-frozen-column example-box", 3, "width", "max-width", "min-width", "po-clickable", "ngClass", "ngStyle", "po-table-header-subtitle", "pFrozenColumn", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-table-header-ellipsis", "p-element", "po-frozen-column", "example-box", 3, "ngClass", "ngStyle", "pFrozenColumn", "click"], ["class", "po-table-group-row", 4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], ["class", "p-element po-frozen-column", 3, "width", "max-width", "min-width", "po-table-column", "po-table-column-right", "po-table-column-center", "po-table-column-icons", "ngClass", "pFrozenColumn", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "p-element", "po-frozen-column", 3, "ngClass", "pFrozenColumn", "click"], ["class", "po-clickable", 3, "p-icon", 4, "ngIf"], [1, "po-clickable", 3, "p-icon"], [3, "name", "p-checked", "p-change-selected"], ["name", "checkbox", 3, "p-checkboxValue", "p-change"], [1, "po-table-header-ellipsis", 3, "p-tooltip", "p-append-in-body", "mouseenter", "mouseleave"], ["columnHeader", ""], [3, "po-table-header-icon-unselected", "po-table-header-icon-descending", "po-table-header-icon-ascending", 4, "ngIf"], ["width", "16", "height", "16", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M18.2929 15.2929L17 16.5858L17 10C17 9.44772 16.5523 9 16 9C15.4477 9 15 9.44772 15 10L15 16.5858L13.7071 15.2929C13.3166 14.9024 12.6834 14.9024 12.2929 15.2929C11.9024 15.6834 11.9024 16.3166 12.2929 16.7071L15.2929 19.7071C15.6834 20.0976 16.3166 20.0976 16.7071 19.7071L19.7071 16.7071C20.0976 16.3166 20.0976 15.6834 19.7071 15.2929C19.3166 14.9024 18.6834 14.9024 18.2929 15.2929ZM5.70716 8.7071L7.00006 7.4142L7.00003 14C7.00002 14.5523 7.44774 15 8.00002 15C8.55231 15 9.00002 14.5523 9.00003 14L9.00006 7.41418L10.2929 8.70707C10.6835 9.09759 11.3166 9.09758 11.7072 8.70706C12.0977 8.31653 12.0977 7.68336 11.7072 7.29284L8.70718 4.29286C8.31665 3.90234 7.68349 3.90235 7.29296 4.29287L4.29295 7.29289C3.90242 7.68342 3.90242 8.31658 4.29294 8.70711C4.68347 9.09763 5.31663 9.09762 5.70716 8.7071Z", "fill", "#1D1D30"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M11 9.41421L9.70711 10.7071C9.31658 11.0976 8.68342 11.0976 8.29289 10.7071C7.90237 10.3166 7.90237 9.68342 8.29289 9.29289L11.2929 6.29289C11.6834 5.90237 12.3166 5.90237 12.7071 6.29289L15.7071 9.29289C16.0976 9.68342 16.0976 10.3166 15.7071 10.7071C15.3166 11.0976 14.6834 11.0976 14.2929 10.7071L13 9.41421V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V9.41421Z", "fill", "black"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M9.70711 13.2929L11 14.5858V7C11 6.44772 11.4477 6 12 6C12.5523 6 13 6.44772 13 7V14.5858L14.2929 13.2929C14.6834 12.9024 15.3166 12.9024 15.7071 13.2929C16.0976 13.6834 16.0976 14.3166 15.7071 14.7071L12.7071 17.7071C12.3166 18.0976 11.6834 18.0976 11.2929 17.7071L8.29289 14.7071C7.90237 14.3166 7.90237 13.6834 8.29289 13.2929C8.68342 12.9024 9.31658 12.9024 9.70711 13.2929Z", "fill", "black"], [1, "po-table-header-fixed-inner"], ["class", "po-table-column po-table-column-single-action", 3, "width", "max-width", 4, "ngIf"], ["class", "po-table-column-actions", 4, "ngIf"], [1, "po-table-column", "po-table-column-single-action"], ["class", "po-table-single-action po-clickable", 3, "po-table-action-disabled", "click", 4, "ngIf"], [1, "po-table-single-action", "po-clickable", 3, "click"], ["class", "po-table-single-action-content", 3, "p-icon", 4, "ngIf"], [1, "po-table-single-action-content", 3, "p-icon"], [1, "po-table-column-actions"], [1, "po-clickable", 3, "click"], ["popupTarget", ""], ["p-icon", "ICON_MORE"], [3, "p-columns", "p-max-columns", "p-target", "p-last-visible-columns-selected", "p-hide-action-fixed-columns", "p-columns-default", "p-visible-columns-change", "p-change-visible-columns", "p-initial-columns"]], template: function PoTableComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTableComponent_div_1_Template, 9, 4, "div", 1)(2, PoTableComponent_div_2_Template, 4, 2, "div", 2)(3, PoTableComponent_div_3_Template, 2, 3, "div", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoTableComponent_po_container_4_Template, 2, 1, "po-container", 4)(5, PoTableComponent_ng_template_5_Template, 8, 10, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor)(7, PoTableComponent_div_7_Template, 3, 5, "div", 6)(8, PoTableComponent_ng_template_8_Template, 16, 25, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor)(10, PoTableComponent_ng_template_10_Template, 18, 28, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelement(12, "po-popup", 9, 10);
            i0.ɵɵtemplate(14, PoTableComponent_ng_template_14_Template, 1, 1, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor)(16, PoTableComponent_ng_template_16_Template, 1, 2, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor)(18, PoTableComponent_ng_template_18_Template, 1, 1, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor)(20, PoTableComponent_ng_template_20_Template, 5, 6, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor)(22, PoTableComponent_ng_template_22_Template, 2, 3, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor)(24, PoTableComponent_ng_template_24_Template, 1, 1, "ng-template", null, 16, i0.ɵɵtemplateRefExtractor)(26, PoTableComponent_ng_template_26_Template, 2, 2, "ng-template", null, 17, i0.ɵɵtemplateRefExtractor)(28, PoTableComponent_po_table_column_manager_28_Template, 1, 6, "po-table-column-manager", 18);
            i0.ɵɵelementStart(29, "po-modal", 19, 20)(31, "p", 21);
            i0.ɵɵtext(32);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            const _r5 = i0.ɵɵreference(6);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasValidColumns && ctx.itemsSelected.length > 0 && !ctx.hideBatchActions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasValidColumns && !ctx.hideColumnsManager);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideTableSearch && ctx.hasValidColumns);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.container)("ngIfElse", _r5);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !ctx.infiniteScroll);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", ctx.popupTarget);
            i0.ɵɵadvance(16);
            i0.ɵɵproperty("ngIf", !ctx.hideColumnsManager);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-title", ctx.literals.delete)("p-primary-action", ctx.confirm)("p-secondary-action", ctx.close)("p-click-out", true);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals.bodyDelete);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableComponent, [{
        type: Component,
        args: [{ selector: 'po-table', providers: [PoDateService], template: "<div class=\"po-table-actions\">\n  <div\n    #columnBatchActions\n    *ngIf=\"hasValidColumns && itemsSelected.length > 0 && !hideBatchActions\"\n    class=\"po-table-actions-batch-actions\"\n  >\n    <div [ngPlural]=\"itemsSelected.length\" class=\"po-table-actions-batch-actions__label\">\n      <strong>\n        <ng-template ngPluralCase=\"=0\">{{ literals.noItem }}</ng-template>\n        <ng-template ngPluralCase=\"=1\">{{ literals.oneItem }}</ng-template>\n        <ng-template ngPluralCase=\"other\">{{ itemsSelected.length }} {{ literals.multipleItems }}</ng-template>\n      </strong>\n    </div>\n\n    <div class=\"po-table-actions-batch-actions__buttons\">\n      <po-button\n        p-icon=\"ICON_DELETE\"\n        [p-danger]=\"true\"\n        [p-disabled]=\"itemsSelected.length > 1 && serviceDeleteApi !== undefined\"\n        [p-label]=\"literals.delete\"\n        (p-click)=\"modalDelete.open()\"\n      ></po-button>\n    </div>\n  </div>\n\n  <div #columnManager *ngIf=\"hasValidColumns && !hideColumnsManager\" class=\"po-table-actions-column-manager\">\n    <po-button\n      #columnManagerTarget\n      p-icon=\"ICON_SETTINGS\"\n      p-kind=\"tertiary\"\n      p-tooltip-position=\"left\"\n      [p-aria-label]=\"literals.columnsManager\"\n      [p-tooltip]=\"literals.columnsManager\"\n      (p-click)=\"onOpenColumnManager()\"\n    ></po-button>\n  </div>\n\n  <div *ngIf=\"!hideTableSearch && hasValidColumns\" class=\"po-table-search\">\n    <po-search\n      [p-items]=\"items\"\n      [p-filter-keys]=\"filteredColumns\"\n      [p-filter-type]=\"filterType\"\n      (p-filtered-items-change)=\"onFilteredItemsChange($event)\"\n    >\n    </po-search>\n  </div>\n</div>\n<po-container *ngIf=\"container; else tableContainerTemplate\" p-no-padding>\n  <ng-container *ngTemplateOutlet=\"tableContainerTemplate\"></ng-container>\n</po-container>\n\n<ng-template #tableContainerTemplate>\n  <div [class.po-table-container-sticky]=\"loading\">\n    <po-loading-overlay *ngIf=\"loading\" [p-text]=\"literals.loadingData\" [p-size]=\"sizeLoading\"></po-loading-overlay>\n    <div class=\"po-table-main-container\">\n      <div\n        #tableWrapper\n        class=\"po-table-wrapper\"\n        [class.po-table-header-fixed-columns-pixels]=\"allColumnsWidthPixels\"\n        [style.opacity]=\"tableOpacity\"\n      >\n        <div *ngIf=\"height\" class=\"po-table-container\" [style.height.px]=\"heightTableContainer\">\n          <div #poTableTbody class=\"po-table-container-fixed-inner\">\n            <ng-container *ngTemplateOutlet=\"tableVirtualScrollTemplate\"></ng-container>\n          </div>\n        </div>\n\n        <div *ngIf=\"!height\">\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\n    <ng-container *ngFor=\"let column of subtitleColumns; trackBy: trackBy\">\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"> </po-table-subtitle-footer>\n    </ng-container>\n  </div>\n</ng-template>\n\n<!-- Show More Button -->\n<div\n  *ngIf=\"!infiniteScroll\"\n  class=\"po-row po-table-footer-show-more\"\n  [class.po-invisible]=\"showMore.observers.length === 0 && !hasService\"\n  #tableFooter\n>\n  <po-button\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    [p-loading]=\"loadingShowMore\"\n    (p-click)=\"onShowMore()\"\n  >\n  </po-button>\n</div>\n\n<!-- Table default-->\n<ng-template #tableTemplate>\n  <table\n    class=\"po-table\"\n    [ngClass]=\"{\n      'po-table-interactive': selectable || sort,\n      'po-table-selectable': selectable,\n      'po-table-striped': striped,\n      'po-table-data-fixed-columns': applyFixedColumns(),\n      'po-table-text-wrap-enabled': textWrap\n    }\"\n    [attr.p-spacing]=\"spacing\"\n  >\n    <thead>\n      <tr\n        [ngClass]=\"{ 'no-hover': hideSelectAll, 'po-table-column-drag': this.isDraggable }\"\n        [class.po-table-header]=\"!height\"\n        cdkDropList\n        cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"drop($event)\"\n      >\n        <th\n          *ngIf=\"hasSelectableColumn\"\n          [style.pointer-events]=\"hideSelectAll ? 'none' : 'auto'\"\n          class=\"po-table-column-selectable\"\n        >\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <po-checkbox\n              name=\"selectAll\"\n              *ngIf=\"!hideSelectAll\"\n              (p-change)=\"selectAllRows()\"\n              [p-checkboxValue]=\"selectAll === null ? 'mixed' : selectAll\"\n            ></po-checkbox>\n          </div>\n        </th>\n\n        <th\n          *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <!-- Coluna criada para caso as a\u00E7\u00F5es fiquem no lado esquerdo -->\n        <th\n          #columnActionLeft\n          *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n          [class.po-table-header-master-detail]=\"!isSingleAction\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n        ></th>\n\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n        </th>\n\n        <ng-container\n          *ngIf=\"this.isDraggable || hasSomeFixed(); then tableDefaultThDragDrop; else tableDefaultThDefault\"\n        >\n        </ng-container>\n        <ng-template #tableDefaultThDragDrop>\n          <th\n            *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n            class=\"po-table-header-ellipsis p-element po-frozen-column\"\n            [style.width]=\"column.width\"\n            [style.max-width]=\"column.width\"\n            [style.min-width]=\"column.width\"\n            [attr.data-po-table-column-name]=\"column.label || (column.property | titlecase) | lowercase\"\n            [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n            [ngClass]=\"{\n              'po-table-header-sorted':\n                sort &&\n                JSON.stringify(sortedColumn?.property) === JSON.stringify(column) &&\n                (sortedColumn.ascending || !sortedColumn.ascending)\n            }\"\n            [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n            [class.po-table-column-drag-box]=\"this.isDraggable\"\n            (click)=\"sortColumn(column)\"\n            cdkDrag\n            cdkDragLockAxis=\"x\"\n            [cdkDragDisabled]=\"column.fixed ? 'true' : 'false'\"\n            [pFrozenColumn]=\"column.fixed\"\n          >\n            <div\n              class=\"po-table-header-flex\"\n              [class.po-table-header-fixed-inner]=\"height\"\n              [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n              [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n            >\n              <ng-container *ngIf=\"this.isDraggable && !column.fixed\">\n                <svg\n                  cdkDragHandle\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <circle cx=\"9\" cy=\"6\" r=\"2\" fill=\"black\" />\n                  <circle cx=\"15\" cy=\"6\" r=\"2\" fill=\"black\" />\n                  <circle cx=\"9\" cy=\"12\" r=\"2\" fill=\"black\" />\n                  <circle cx=\"15\" cy=\"12\" r=\"2\" fill=\"black\" />\n                  <circle cx=\"9\" cy=\"18\" r=\"2\" fill=\"black\" />\n                  <circle cx=\"15\" cy=\"18\" r=\"2\" fill=\"black\" />\n                </svg>\n              </ng-container>\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n            </div>\n          </th>\n        </ng-template>\n        <ng-template #tableDefaultThDefault>\n          <th\n            *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n            class=\"po-table-header-ellipsis p-element po-frozen-column\"\n            [style.width]=\"column.width\"\n            [style.max-width]=\"column.width\"\n            [style.min-width]=\"column.width\"\n            [attr.data-po-table-column-name]=\"column.label || (column.property | titlecase) | lowercase\"\n            [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n            [ngClass]=\"{\n              'po-table-header-sorted':\n                sort &&\n                JSON.stringify(sortedColumn?.property) === JSON.stringify(column) &&\n                (sortedColumn.ascending || !sortedColumn.ascending)\n            }\"\n            [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n            (click)=\"sortColumn(column)\"\n            [pFrozenColumn]=\"column.fixed\"\n          >\n            <div\n              class=\"po-table-header-flex\"\n              [class.po-table-header-fixed-inner]=\"height\"\n              [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n              [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n            >\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n            </div>\n          </th>\n        </ng-template>\n\n        <th\n          *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <th\n          *ngIf=\"hasVisibleActions && actionRight && (visibleActions.length > 1 || isSingleAction)\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n          [class.po-table-header-actions]=\"!isSingleAction\"\n        ></th>\n      </tr>\n    </thead>\n\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\n      <tr class=\"po-table-row po-table-row-no-data\">\n        <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\n          <span> {{ literals.noData }} </span>\n        </td>\n      </tr>\n    </tbody>\n\n    <ng-container *ngIf=\"hasMainColumns\">\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of filteredItems; let rowIndex = index; trackBy: trackBy\">\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\">\n          <td *ngIf=\"selectable\" class=\"po-table-column-selectable\">\n            <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\n            </ng-container>\n          </td>\n\n          <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\n          <td\n            *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <!-- Coluna com as a\u00E7\u00F5es na esquerda (padr\u00E3o)-->\n          <ng-template\n            *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n            [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n            [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n          >\n          </ng-template>\n\n          <!-- Valida se a origem do detail \u00E9 pela diretiva -->\n          <td\n            *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <td\n            *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\n            [style.width]=\"column.width\"\n            [style.max-width]=\"column.width\"\n            [style.min-width]=\"column.width\"\n            [class.po-table-column]=\"column.type !== 'icon'\"\n            [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\n            [pFrozenColumn]=\"column.fixed\"\n            class=\"p-element po-frozen-column\"\n            [ngClass]=\"getClassColor(row, column)\"\n            (click)=\"hasSelectableRow() ? selectRow(row) : 'javascript:;'\"\n          >\n            <div\n              class=\"po-table-column-cell po-table-body-ellipsis notranslate\"\n              [ngSwitch]=\"column.type\"\n              [p-tooltip]=\"tooltipText\"\n              [p-append-in-body]=\"true\"\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n              (mouseleave)=\"tooltipMouseLeave()\"\n            >\n              <span *ngSwitchCase=\"'columnTemplate'\">\n                <ng-container *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: getCellData(row, column) }\">\n                </ng-container>\n              </span>\n\n              <span *ngSwitchCase=\"'cellTemplate'\">\n                <ng-container *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\">\n                </ng-container>\n              </span>\n\n              <span *ngSwitchCase=\"'boolean'\">\n                {{ getBooleanLabel(getCellData(row, column), column) }}\n              </span>\n\n              <span *ngSwitchCase=\"'currency'\">\n                {{ getCellData(row, column) | currency: column.format : 'symbol' : '1.2-2' }}\n              </span>\n\n              <span *ngSwitchCase=\"'date'\">\n                {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy' }}\n              </span>\n\n              <span *ngSwitchCase=\"'time'\">\n                {{ getCellData(row, column) | po_time: column.format || 'HH:mm:ss.ffffff' }}\n              </span>\n\n              <span *ngSwitchCase=\"'dateTime'\">\n                {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\n              </span>\n\n              <span *ngSwitchCase=\"'number'\">\n                {{ formatNumber(getCellData(row, column), column.format) }}\n              </span>\n\n              <po-table-column-link\n                *ngSwitchCase=\"'link'\"\n                [p-action]=\"column.action\"\n                [p-disabled]=\"checkDisabled(row, column)\"\n                [p-link]=\"row[column.link]\"\n                [p-row]=\"row\"\n                [p-value]=\"getCellData(row, column)\"\n                (click)=\"onClickLink($event, row, column)\"\n              >\n              </po-table-column-link>\n\n              <po-table-column-icon\n                *ngSwitchCase=\"'icon'\"\n                [p-column]=\"column\"\n                [p-icons]=\"getColumnIcons(row, column)\"\n                [p-row]=\"row\"\n              >\n              </po-table-column-icon>\n\n              <span *ngSwitchCase=\"'subtitle'\">\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n              </span>\n              <span *ngSwitchCase=\"'label'\">\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"> </po-table-column-label>\n              </span>\n              <span *ngSwitchDefault>{{ getCellData(row, column) }}</span>\n            </div>\n          </td>\n\n          <td\n            *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <!-- Coluna de a\u00E7oes na direita -->\n          <ng-template\n            *ngIf=\"actionRight\"\n            [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n            [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n          >\n          </ng-template>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\n            <ng-template\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\n            <po-table-detail\n              [p-selectable]=\"selectable && !detailHideSelect\"\n              [p-detail]=\"columnMasterDetail.detail\"\n              [p-items]=\"row[nameColumnDetail]\"\n              (p-select-row)=\"selectDetailRow($event)\"\n            >\n            </po-table-detail>\n          </td>\n        </tr>\n      </tbody>\n    </ng-container>\n  </table>\n</ng-template>\n\n<!-- Table with virtual scroll -->\n<ng-template #tableVirtualScrollTemplate>\n  <cdk-virtual-scroll-viewport\n    #tableVirtualScroll\n    [itemSize]=\"itemSize\"\n    [style.height.px]=\"heightTableContainer\"\n    [minBufferPx]=\"heightTableContainer < 100 ? 100 : heightTableContainer\"\n    [maxBufferPx]=\"heightTableContainer < 200 ? 200 : heightTableContainer\"\n  >\n    <table\n      class=\"po-table\"\n      [ngClass]=\"{\n        'po-table-interactive': selectable || sort,\n        'po-table-selectable': selectable,\n        'po-table-striped': striped,\n        'po-table-data-fixed-columns': applyFixedColumns(),\n        'po-table-text-wrap-enabled': textWrap\n      }\"\n      [attr.p-spacing]=\"spacing\"\n    >\n      <thead class=\"po-table-header-sticky\" [style.top]=\"inverseOfTranslation\">\n        <tr\n          [class.po-table-header]=\"!height\"\n          cdkDropList\n          cdkDropListOrientation=\"horizontal\"\n          (cdkDropListDropped)=\"drop($event)\"\n        >\n          <th\n            *ngIf=\"hasSelectableColumn\"\n            [style.pointer-events]=\"hideSelectAll ? 'none' : 'auto'\"\n            class=\"po-table-column-selectable\"\n          >\n            <div [class.po-table-header-fixed-inner]=\"height\">\n              <po-checkbox\n                name=\"selectAll\"\n                *ngIf=\"!hideSelectAll\"\n                (p-change)=\"selectAllRows()\"\n                [p-checkboxValue]=\"selectAll === null ? 'mixed' : selectAll\"\n              ></po-checkbox>\n            </div>\n          </th>\n\n          <th\n            *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-header-column po-table-header-master-detail\"\n          ></th>\n\n          <!-- Coluna criada para caso as a\u00E7\u00F5es fiquem no lado esquerdo -->\n          <th\n            #columnActionLeft\n            *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n            [class.po-table-header-master-detail]=\"!isSingleAction\"\n            [class.po-table-header-single-action]=\"isSingleAction\"\n          ></th>\n\n          <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\n            <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n          </th>\n\n          <ng-container\n            *ngIf=\"\n              this.isDraggable || hasSomeFixed();\n              then tableVirtualScrollThDragDrop;\n              else tableVirtualScrollThDefault\n            \"\n          >\n          </ng-container>\n          <ng-template #tableVirtualScrollThDragDrop>\n            <th\n              *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n              class=\"po-table-header-ellipsis p-element po-frozen-column\"\n              [style.width]=\"column.width\"\n              [style.max-width]=\"column.width\"\n              [style.min-width]=\"column.width\"\n              [attr.data-po-table-column-name]=\"column.label || (column.property | titlecase) | lowercase\"\n              [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n              [ngClass]=\"{\n                'po-table-header-sorted':\n                  sort &&\n                  JSON.stringify(sortedColumn?.property) === JSON.stringify(column) &&\n                  (sortedColumn.ascending || !sortedColumn.ascending)\n              }\"\n              [ngStyle]=\"{ 'width': !hasItems ? '100%' : applyFixedColumns() ? column.width : 'auto' }\"\n              [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n              [class.po-table-column-drag-box]=\"this.isDraggable\"\n              (click)=\"sortColumn(column)\"\n              cdkDrag\n              cdkDragLockAxis=\"x\"\n              [cdkDragDisabled]=\"column.fixed ? 'true' : 'false'\"\n              [pFrozenColumn]=\"column.fixed\"\n            >\n              <div\n                class=\"po-table-header-flex\"\n                [class.po-table-header-fixed-inner]=\"height\"\n                [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n                [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n              >\n                <ng-container *ngIf=\"this.isDraggable && !column.fixed\">\n                  <svg\n                    cdkDragHandle\n                    width=\"16\"\n                    height=\"16\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <circle cx=\"9\" cy=\"6\" r=\"2\" fill=\"black\" />\n                    <circle cx=\"15\" cy=\"6\" r=\"2\" fill=\"black\" />\n                    <circle cx=\"9\" cy=\"12\" r=\"2\" fill=\"black\" />\n                    <circle cx=\"15\" cy=\"12\" r=\"2\" fill=\"black\" />\n                    <circle cx=\"9\" cy=\"18\" r=\"2\" fill=\"black\" />\n                    <circle cx=\"15\" cy=\"18\" r=\"2\" fill=\"black\" />\n                  </svg>\n                </ng-container>\n                <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n              </div>\n            </th>\n          </ng-template>\n          <ng-template #tableVirtualScrollThDefault>\n            <th\n              *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n              class=\"po-table-header-ellipsis p-element po-frozen-column example-box\"\n              [style.width]=\"column.width\"\n              [style.max-width]=\"column.width\"\n              [style.min-width]=\"column.width\"\n              [attr.data-po-table-column-name]=\"column.label || (column.property | titlecase) | lowercase\"\n              [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n              [ngClass]=\"{\n                'po-table-header-sorted':\n                  sort &&\n                  JSON.stringify(sortedColumn?.property) === JSON.stringify(column) &&\n                  (sortedColumn.ascending || !sortedColumn.ascending)\n              }\"\n              [ngStyle]=\"{ 'width': !hasItems ? '100%' : applyFixedColumns() ? column.width : 'auto' }\"\n              [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n              (click)=\"sortColumn(column)\"\n              [pFrozenColumn]=\"column.fixed\"\n            >\n              <div\n                class=\"po-table-header-flex\"\n                [class.po-table-header-fixed-inner]=\"height\"\n                [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n                [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n              >\n                <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n              </div>\n            </th>\n          </ng-template>\n\n          <th\n            *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\n            class=\"po-table-header-column po-table-header-master-detail\"\n          ></th>\n\n          <th\n            *ngIf=\"hasVisibleActions && actionRight && (visibleActions.length > 1 || isSingleAction)\"\n            [class.po-table-header-single-action]=\"isSingleAction\"\n            [class.po-table-header-actions]=\"!isSingleAction\"\n          ></th>\n        </tr>\n      </thead>\n\n      <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\n        <tr class=\"po-table-row po-table-row-no-data\">\n          <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\n            <span> {{ literals.noData }} </span>\n          </td>\n        </tr>\n      </tbody>\n\n      <ng-container *ngIf=\"hasMainColumns\">\n        <tbody\n          class=\"po-table-group-row\"\n          *cdkVirtualFor=\"let row of filteredItems; let rowIndex = index; trackBy: trackBy\"\n        >\n          <tr\n            class=\"po-table-row\"\n            [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\"\n          >\n            <td *ngIf=\"selectable\" class=\"po-table-column-selectable\">\n              <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\n              </ng-container>\n            </td>\n\n            <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\n            <td\n              *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <!-- Coluna com as a\u00E7\u00F5es na esquerda (padr\u00E3o)-->\n            <ng-template\n              *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n              [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n\n            <!-- Valida se a origem do detail \u00E9 pela diretiva -->\n            <td\n              *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <td\n              *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\n              [style.width]=\"column.width\"\n              [style.max-width]=\"column.width\"\n              [style.min-width]=\"column.width\"\n              [class.po-table-column]=\"column.type !== 'icon'\"\n              [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\n              [class.po-table-column-center]=\"column.type === 'subtitle'\"\n              [class.po-table-column-icons]=\"column.type === 'icon'\"\n              [ngClass]=\"getClassColor(row, column)\"\n              [pFrozenColumn]=\"column.fixed\"\n              class=\"p-element po-frozen-column\"\n              (click)=\"hasSelectableRow() ? selectRow(row) : 'javascript:;'\"\n            >\n              <div\n                class=\"po-table-column-cell po-table-body-ellipsis notranslate\"\n                [ngSwitch]=\"column.type\"\n                [p-tooltip]=\"tooltipText\"\n                [p-append-in-body]=\"true\"\n                (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n                (mouseleave)=\"tooltipMouseLeave()\"\n              >\n                <span *ngSwitchCase=\"'columnTemplate'\">\n                  <ng-container\n                    *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: getCellData(row, column) }\"\n                  >\n                  </ng-container>\n                </span>\n\n                <span *ngSwitchCase=\"'cellTemplate'\">\n                  <ng-container\n                    *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\"\n                  >\n                  </ng-container>\n                </span>\n\n                <span *ngSwitchCase=\"'boolean'\">\n                  {{ getBooleanLabel(getCellData(row, column), column) }}\n                </span>\n\n                <span *ngSwitchCase=\"'currency'\">\n                  {{ getCellData(row, column) | currency: column.format : 'symbol' : '1.2-2' }}\n                </span>\n\n                <span *ngSwitchCase=\"'date'\">\n                  {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy' }}\n                </span>\n\n                <span *ngSwitchCase=\"'time'\">\n                  {{ getCellData(row, column) | po_time: column.format || 'HH:mm:ss.ffffff' }}\n                </span>\n\n                <span *ngSwitchCase=\"'dateTime'\">\n                  {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\n                </span>\n\n                <span *ngSwitchCase=\"'number'\">\n                  {{ formatNumber(getCellData(row, column), column.format) }}\n                </span>\n\n                <po-table-column-link\n                  *ngSwitchCase=\"'link'\"\n                  [p-action]=\"column.action\"\n                  [p-disabled]=\"checkDisabled(row, column)\"\n                  [p-link]=\"row[column.link]\"\n                  [p-row]=\"row\"\n                  [p-value]=\"getCellData(row, column)\"\n                  (click)=\"onClickLink($event, row, column)\"\n                >\n                </po-table-column-link>\n\n                <po-table-column-icon\n                  *ngSwitchCase=\"'icon'\"\n                  [p-column]=\"column\"\n                  [p-icons]=\"getColumnIcons(row, column)\"\n                  [p-row]=\"row\"\n                >\n                </po-table-column-icon>\n\n                <span *ngSwitchCase=\"'subtitle'\">\n                  <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n                </span>\n                <span *ngSwitchCase=\"'label'\">\n                  <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"> </po-table-column-label>\n                </span>\n                <span *ngSwitchDefault>{{ getCellData(row, column) }}</span>\n              </div>\n            </td>\n\n            <td\n              *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <!-- Coluna de a\u00E7oes na direita -->\n            <ng-template\n              *ngIf=\"actionRight\"\n              [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </tr>\n\n          <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n            <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\n              <ng-template\n                [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n                [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n          </tr>\n\n          <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n            <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\n              <po-table-detail\n                [p-selectable]=\"selectable && !detailHideSelect\"\n                [p-detail]=\"columnMasterDetail.detail\"\n                [p-items]=\"row[nameColumnDetail]\"\n                (p-select-row)=\"selectDetailRow($event)\"\n              >\n              </po-table-detail>\n            </td>\n          </tr>\n        </tbody>\n      </ng-container>\n    </table>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n\n<ng-template #poTableColumnDetail let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <po-icon\n    *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || (isShowRowTemplate(row, rowIndex) && hasRowTemplate)\"\n    [p-icon]=\"row.$showDetail ? 'ICON_ARROW_UP' : 'ICON_ARROW_DOWN'\"\n    class=\"po-clickable\"\n  >\n  </po-icon>\n</ng-template>\n\n<ng-template #inputRadio let-row>\n  <po-radio [name]=\"idRadio\" [p-checked]=\"row.$selected\" (p-change-selected)=\"selectRow(row)\"></po-radio>\n</ng-template>\n\n<ng-template #inputCheckbox let-row>\n  <po-checkbox\n    name=\"checkbox\"\n    (p-change)=\"selectable ? selectRow(row) : 'javascript:;'\"\n    [p-checkboxValue]=\"row.$selected\"\n  ></po-checkbox>\n</ng-template>\n\n<ng-template #contentHeaderTemplate let-column>\n  <span\n    #columnHeader\n    class=\"po-table-header-ellipsis\"\n    [p-tooltip]=\"tooltipText\"\n    [p-append-in-body]=\"true\"\n    (mouseenter)=\"tooltipMouseEnter($event)\"\n    (mouseleave)=\"tooltipMouseLeave()\"\n  >\n    {{ column.label || (column.property | titlecase) }}\n  </span>\n\n  <span\n    *ngIf=\"sort && column.sortable !== false\"\n    [class.po-table-header-icon-unselected]=\"JSON.stringify(sortedColumn?.property) !== JSON.stringify(column)\"\n    [class.po-table-header-icon-descending]=\"\n      JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && sortedColumn.ascending\n    \"\n    [class.po-table-header-icon-ascending]=\"\n      JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && !sortedColumn.ascending\n    \"\n  >\n    <ng-container *ngIf=\"JSON.stringify(sortedColumn?.property) !== JSON.stringify(column)\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M18.2929 15.2929L17 16.5858L17 10C17 9.44772 16.5523 9 16 9C15.4477 9 15 9.44772 15 10L15 16.5858L13.7071 15.2929C13.3166 14.9024 12.6834 14.9024 12.2929 15.2929C11.9024 15.6834 11.9024 16.3166 12.2929 16.7071L15.2929 19.7071C15.6834 20.0976 16.3166 20.0976 16.7071 19.7071L19.7071 16.7071C20.0976 16.3166 20.0976 15.6834 19.7071 15.2929C19.3166 14.9024 18.6834 14.9024 18.2929 15.2929ZM5.70716 8.7071L7.00006 7.4142L7.00003 14C7.00002 14.5523 7.44774 15 8.00002 15C8.55231 15 9.00002 14.5523 9.00003 14L9.00006 7.41418L10.2929 8.70707C10.6835 9.09759 11.3166 9.09758 11.7072 8.70706C12.0977 8.31653 12.0977 7.68336 11.7072 7.29284L8.70718 4.29286C8.31665 3.90234 7.68349 3.90235 7.29296 4.29287L4.29295 7.29289C3.90242 7.68342 3.90242 8.31658 4.29294 8.70711C4.68347 9.09763 5.31663 9.09762 5.70716 8.7071Z\"\n          fill=\"#1D1D30\"\n        />\n      </svg>\n    </ng-container>\n\n    <ng-container *ngIf=\"JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && sortedColumn.ascending\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M11 9.41421L9.70711 10.7071C9.31658 11.0976 8.68342 11.0976 8.29289 10.7071C7.90237 10.3166 7.90237 9.68342 8.29289 9.29289L11.2929 6.29289C11.6834 5.90237 12.3166 5.90237 12.7071 6.29289L15.7071 9.29289C16.0976 9.68342 16.0976 10.3166 15.7071 10.7071C15.3166 11.0976 14.6834 11.0976 14.2929 10.7071L13 9.41421V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V9.41421Z\"\n          fill=\"black\"\n        />\n      </svg>\n    </ng-container>\n\n    <ng-container *ngIf=\"JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && !sortedColumn.ascending\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M9.70711 13.2929L11 14.5858V7C11 6.44772 11.4477 6 12 6C12.5523 6 13 6.44772 13 7V14.5858L14.2929 13.2929C14.6834 12.9024 15.3166 12.9024 15.7071 13.2929C16.0976 13.6834 16.0976 14.3166 15.7071 14.7071L12.7071 17.7071C12.3166 18.0976 11.6834 18.0976 11.2929 17.7071L8.29289 14.7071C7.90237 14.3166 7.90237 13.6834 8.29289 13.2929C8.68342 12.9024 9.31658 12.9024 9.70711 13.2929Z\"\n          fill=\"black\"\n        />\n      </svg>\n    </ng-container>\n  </span>\n</ng-template>\n\n<ng-template #noColumnsWithHeight>\n  <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"headerWidth\">\n    {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n  </div>\n</ng-template>\n\n<ng-template #noColumnsWithoutHeight>\n  {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n</ng-template>\n\n<!-- Template de a\u00E7\u00F5es -->\n<ng-template #ActionsColumnTemplate let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <td\n    *ngIf=\"isSingleAction\"\n    class=\"po-table-column po-table-column-single-action\"\n    [style.width.px]=\"height && actionRight ? getWidthColumnManager() : ''\"\n    [style.max-width.px]=\"height && !actionRight ? getColumnWidthActionsLeft() : ''\"\n    [style.width.px]=\"height && !actionRight ? getColumnWidthActionsLeft() : ''\"\n  >\n    <div\n      *ngIf=\"firstAction.visible !== false\"\n      class=\"po-table-single-action po-clickable\"\n      [class.po-table-action-disabled]=\"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\n      (click)=\"executeTableAction(row, firstAction)\"\n    >\n      <po-icon *ngIf=\"firstAction.icon\" class=\"po-table-single-action-content\" [p-icon]=\"firstAction.icon\"></po-icon>\n      {{ firstAction.label }}\n    </div>\n  </td>\n\n  <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\n    <div #popupTarget class=\"po-clickable\" (click)=\"togglePopup(row, popupTarget)\">\n      <po-icon p-icon=\"ICON_MORE\"></po-icon>\n    </div>\n  </td>\n</ng-template>\n\n<po-table-column-manager\n  *ngIf=\"!hideColumnsManager\"\n  [p-columns]=\"columns\"\n  [p-max-columns]=\"maxColumns\"\n  [p-target]=\"columnManagerTarget\"\n  [p-last-visible-columns-selected]=\"lastVisibleColumnsSelected\"\n  [p-hide-action-fixed-columns]=\"hideActionFixedColumns\"\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\"\n  (p-change-visible-columns)=\"onChangeVisibleColumns($event)\"\n  [p-columns-default]=\"initialColumns\"\n  (p-initial-columns)=\"onColumnRestoreManager($event)\"\n>\n</po-table-column-manager>\n\n<po-modal\n  #modalDelete\n  [p-title]=\"literals.delete\"\n  [p-primary-action]=\"confirm\"\n  [p-secondary-action]=\"close\"\n  [p-click-out]=\"true\"\n>\n  <p class=\"po-font-text-large\">{{ literals.bodyDelete }}</p>\n</po-modal>\n" }]
    }], () => [{ type: PoDateService }, { type: i0.IterableDiffers }, { type: i0.Renderer2 }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i1.DecimalPipe }, { type: i2.Router }, { type: PoTableService }], { tableRowTemplate: [{
            type: ContentChild,
            args: [PoTableRowTemplateDirective, { static: true }]
        }], tableCellTemplate: [{
            type: ContentChild,
            args: [PoTableCellTemplateDirective]
        }], tableColumnTemplates: [{
            type: ContentChildren,
            args: [PoTableColumnTemplateDirective]
        }], noColumnsHeader: [{
            type: ViewChild,
            args: ['noColumnsHeader', { read: ElementRef }]
        }], poPopupComponent: [{
            type: ViewChild,
            args: ['popup']
        }], modalDelete: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }], tableFooterElement: [{
            type: ViewChild,
            args: ['tableFooter', { read: ElementRef, static: false }]
        }], tableWrapperElement: [{
            type: ViewChild,
            args: ['tableWrapper', { read: ElementRef, static: false }]
        }], tableTemplate: [{
            type: ViewChild,
            args: ['tableTemplate', { read: ElementRef, static: false }]
        }], tableVirtualScroll: [{
            type: ViewChild,
            args: ['tableVirtualScroll', { read: ElementRef, static: false }]
        }], columnManager: [{
            type: ViewChild,
            args: ['columnManager', { read: ElementRef, static: false }]
        }], columnBatchActions: [{
            type: ViewChild,
            args: ['columnBatchActions', { read: ElementRef, static: false }]
        }], columnActionLeft: [{
            type: ViewChild,
            args: ['columnActionLeft', { read: ElementRef, static: false }]
        }], actionsIconElement: [{
            type: ViewChildren,
            args: ['actionsIconElement', { read: ElementRef }]
        }], actionsElement: [{
            type: ViewChildren,
            args: ['actionsElement', { read: ElementRef }]
        }], filterInput: [{
            type: ViewChild,
            args: ['filterInput']
        }], poSearchInput: [{
            type: ViewChild,
            args: ['poSearchInput', { read: ElementRef, static: true }]
        }], viewPort: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { static: false }]
        }], columnManagerTarget: [{
            type: ViewChild,
            args: ['columnManagerTarget']
        }], columnManagerTargetFixed: [{
            type: ViewChild,
            args: ['columnManagerTargetFixed']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableComponent, { className: "PoTableComponent", filePath: "lib/components/po-table/po-table.component.ts", lineNumber: 105 }); })();

function PoTableDetailComponent_thead_1_th_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 6);
} }
function PoTableDetailComponent_thead_1_th_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 7)(1, "div", 8);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const detail_r4 = ctx.$implicit;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-table-header-flex-right", detail_r4.type === "currency" || detail_r4.type === "number");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r3.getColumnTitleLabel(detail_r4), " ");
} }
function PoTableDetailComponent_thead_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "thead")(1, "tr");
    i0.ɵɵtemplate(2, PoTableDetailComponent_thead_1_th_2_Template, 1, 0, "th", 3);
    i0.ɵɵelement(3, "th", 4);
    i0.ɵɵtemplate(4, PoTableDetailComponent_thead_1_th_4_Template, 3, 3, "th", 5);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.isSelectable);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.detail.columns);
} }
function PoTableDetailComponent_tr_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "td", 13);
    i0.ɵɵelementStart(2, "td", 14)(3, "po-checkbox", 15);
    i0.ɵɵlistener("click", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_click_3_listener() { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onSelectRow(item_r5)); })("p-change", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_p_change_3_listener() { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onSelectRow(item_r5)); });
    i0.ɵɵtwoWayListener("ngModelChange", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; i0.ɵɵtwoWayBindingSet(item_r5.$selected, $event) || (item_r5.$selected = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r5 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(3);
    i0.ɵɵtwoWayProperty("ngModel", item_r5.$selected);
} }
function PoTableDetailComponent_tr_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 16);
} }
function PoTableDetailComponent_tr_3_td_4_strong_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r19.getColumnTitleLabel(detail_r18), ": ");
} }
function PoTableDetailComponent_tr_3_td_4_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r20 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(2, 1, ctx_r20.getDetailData(item_r5, detail_r18), detail_r18.format, "symbol", "1.2-2"));
} }
function PoTableDetailComponent_tr_3_td_4_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r21 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, ctx_r21.getDetailData(item_r5, detail_r18), detail_r18.format || "dd/MM/yyyy"));
} }
function PoTableDetailComponent_tr_3_td_4_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "po_time");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r22 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, ctx_r22.getDetailData(item_r5, detail_r18), detail_r18.format || "HH:mm:ss.ffffff"));
} }
function PoTableDetailComponent_tr_3_td_4_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r23 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r23.getDetailData(item_r5, detail_r18), detail_r18.format || "dd/MM/yyyy HH:mm:ss"), " ");
} }
function PoTableDetailComponent_tr_3_td_4_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r24 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r24.formatNumberDetail(ctx_r24.getDetailData(item_r5, detail_r18), detail_r18.format));
} }
function PoTableDetailComponent_tr_3_td_4_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = i0.ɵɵnextContext().$implicit;
    const item_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r25 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r25.getDetailData(item_r5, detail_r18));
} }
function PoTableDetailComponent_tr_3_td_4_Template(rf, ctx) { if (rf & 1) {
    const _r40 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 17);
    i0.ɵɵlistener("click", function PoTableDetailComponent_tr_3_td_4_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r40); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r39.isSelectable ? ctx_r39.onSelectRow(item_r5) : "javascript:;"); });
    i0.ɵɵtemplate(1, PoTableDetailComponent_tr_3_td_4_strong_1_Template, 2, 1, "strong", 1);
    i0.ɵɵelementContainerStart(2, 18);
    i0.ɵɵtemplate(3, PoTableDetailComponent_tr_3_td_4_span_3_Template, 3, 6, "span", 19)(4, PoTableDetailComponent_tr_3_td_4_span_4_Template, 3, 4, "span", 19)(5, PoTableDetailComponent_tr_3_td_4_span_5_Template, 3, 4, "span", 19)(6, PoTableDetailComponent_tr_3_td_4_span_6_Template, 3, 4, "span", 19)(7, PoTableDetailComponent_tr_3_td_4_span_7_Template, 2, 1, "span", 19)(8, PoTableDetailComponent_tr_3_td_4_span_8_Template, 2, 1, "span", 20);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r18 = ctx.$implicit;
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-table-column-right", ctx_r9.typeHeaderTop && (detail_r18.type === "currency" || detail_r18.type === "number"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r9.typeHeaderInline);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitch", detail_r18.type);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "currency");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "date");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "time");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "dateTime");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "number");
} }
function PoTableDetailComponent_tr_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 9);
    i0.ɵɵtemplate(1, PoTableDetailComponent_tr_3_ng_container_1_Template, 4, 1, "ng-container", 10)(2, PoTableDetailComponent_tr_3_ng_template_2_Template, 1, 0, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor)(4, PoTableDetailComponent_tr_3_td_4_Template, 9, 9, "td", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const _r8 = i0.ɵɵreference(3);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-table-row-active", item_r5.$selected && ctx_r1.isSelectable);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.isSelectable)("ngIfElse", _r8);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r1.detailColumns);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
class PoTableDetailComponent {
    decimalPipe;
    /**
     * Lista de itens do _detail_ da tabela.
     */
    items;
    /**
     * Define se a tabela possui a opção de `selectable` habilitada.
     */
    isSelectable = false;
    /**
     * @optional
     *
     * @description
     *
     * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
     */
    selectRow = new EventEmitter();
    _detail;
    /**
     * Configuração da linha de detalhes.
     */
    set detail(value) {
        this._detail = this.returnPoTableDetailObject(value);
    }
    get detail() {
        return this._detail;
    }
    constructor(decimalPipe) {
        this.decimalPipe = decimalPipe;
    }
    get detailColumns() {
        return this.detail?.columns || [];
    }
    get typeHeaderInline() {
        return (this.detail && !this.detail['typeHeader']) || this.detail['typeHeader'] === 'inline';
    }
    get typeHeaderTop() {
        return this.detail && this.detail['typeHeader'] === 'top';
    }
    formatNumberDetail(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getColumnTitleLabel(detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    }
    getDetailData(item, detail) {
        const arrayProperty = detail.property.split('.');
        if (arrayProperty.length > 1) {
            const nestedProperties = arrayProperty;
            let value = item;
            for (const property of nestedProperties) {
                value = value[property] || value[property] === 0 ? value[property] : '';
            }
            return value;
        }
        else {
            return item[detail.property];
        }
    }
    onSelectRow(item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    }
    returnPoTableDetailObject(value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach(column => (column.property = column.property || column.column));
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    }
    static ɵfac = function PoTableDetailComponent_Factory(t) { return new (t || PoTableDetailComponent)(i0.ɵɵdirectiveInject(i1.DecimalPipe)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableDetailComponent, selectors: [["po-table-detail"]], inputs: { items: [i0.ɵɵInputFlags.None, "p-items", "items"], isSelectable: [i0.ɵɵInputFlags.None, "p-selectable", "isSelectable"], detail: [i0.ɵɵInputFlags.None, "p-detail", "detail"] }, outputs: { selectRow: "p-select-row" }, decls: 4, vars: 2, consts: [[1, "po-table-master-detail"], [4, "ngIf"], ["class", "po-table-detail-row", 3, "po-table-row-active", 4, "ngFor", "ngForOf"], ["class", "po-table-header po-table-column-selectable", 4, "ngIf"], [1, "po-table-header", "po-table-header-column", "po-table-header-master-detail"], ["class", "po-table-header po-table-header-ellipsis", 4, "ngFor", "ngForOf"], [1, "po-table-header", "po-table-column-selectable"], [1, "po-table-header", "po-table-header-ellipsis"], [1, "po-table-header-flex"], [1, "po-table-detail-row"], [4, "ngIf", "ngIfElse"], ["masterDetailSpace", ""], ["class", "po-table-column-master-detail po-table-master-detail-label", 3, "po-table-column-right", "click", 4, "ngFor", "ngForOf"], [1, "po-table-column-master-detail-space-checkbox"], [1, "po-table-column", "po-table-column-selectable"], ["name", "checkbox", 3, "ngModel", "click", "p-change", "ngModelChange"], [1, "po-table-column-master-detail-space"], [1, "po-table-column-master-detail", "po-table-master-detail-label", 3, "click"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"]], template: function PoTableDetailComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "table", 0);
            i0.ɵɵtemplate(1, PoTableDetailComponent_thead_1_Template, 5, 2, "thead", 1);
            i0.ɵɵelementStart(2, "tbody");
            i0.ɵɵtemplate(3, PoTableDetailComponent_tr_3_Template, 5, 5, "tr", 2);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.typeHeaderTop);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.items);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2$1.NgControlStatus, i2$1.NgModel, PoCheckboxComponent, i1.CurrencyPipe, i1.DatePipe, PoTimePipe], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableDetailComponent, [{
        type: Component,
        args: [{ selector: 'po-table-detail', template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-selectable\" *ngIf=\"isSelectable\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        <div\n          class=\"po-table-header-flex\"\n          [class.po-table-header-flex-right]=\"detail.type === 'currency' || detail.type === 'number'\"\n        >\n          {{ getColumnTitleLabel(detail) }}\n        </div>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr\n      class=\"po-table-detail-row\"\n      [class.po-table-row-active]=\"item.$selected && isSelectable\"\n      *ngFor=\"let item of items\"\n    >\n      <ng-container *ngIf=\"isSelectable; else masterDetailSpace\">\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-selectable\">\n          <po-checkbox\n            name=\"checkbox\"\n            (click)=\"onSelectRow(item)\"\n            (p-change)=\"onSelectRow(item)\"\n            [(ngModel)]=\"item.$selected\"\n          ></po-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td\n        class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"isSelectable ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\"\n        [class.po-table-column-right]=\"typeHeaderTop && (detail.type === 'currency' || detail.type === 'number')\"\n      >\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{\n            getDetailData(item, detail) | currency: detail.format : 'symbol' : '1.2-2'\n          }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ getDetailData(item, detail) | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{\n            getDetailData(item, detail) | po_time: detail.format || 'HH:mm:ss.ffffff'\n          }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">\n            {{ getDetailData(item, detail) | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}\n          </span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(getDetailData(item, detail), detail.format) }}</span>\n          <span *ngSwitchDefault>{{ getDetailData(item, detail) }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n" }]
    }], () => [{ type: i1.DecimalPipe }], { items: [{
            type: Input,
            args: ['p-items']
        }], isSelectable: [{
            type: Input,
            args: ['p-selectable']
        }], selectRow: [{
            type: Output,
            args: ['p-select-row']
        }], detail: [{
            type: Input,
            args: ['p-detail']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableDetailComponent, { className: "PoTableDetailComponent", filePath: "lib/components/po-table/po-table-detail/po-table-detail.component.ts", lineNumber: 20 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação da representação da legenda, em formato de círculo.
 */
class PoTableSubtitleCircleComponent {
    poColorPaletteService;
    /** Esconde a tooltip. */
    hideTitle = false;
    _subtitle;
    /** Objeto com os dados da legenda. */
    set subtitle(subtitle) {
        if (subtitle) {
            subtitle.color = this.poColorPaletteService.getColor(subtitle);
        }
        this._subtitle = subtitle;
    }
    get subtitle() {
        return this._subtitle;
    }
    constructor(poColorPaletteService) {
        this.poColorPaletteService = poColorPaletteService;
    }
    static ɵfac = function PoTableSubtitleCircleComponent_Factory(t) { return new (t || PoTableSubtitleCircleComponent)(i0.ɵɵdirectiveInject(PoColorPaletteService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableSubtitleCircleComponent, selectors: [["po-table-subtitle-circle"]], inputs: { hideTitle: [i0.ɵɵInputFlags.None, "p-hide-title", "hideTitle"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] }, decls: 2, vars: 5, consts: [[3, "title"]], template: function PoTableSubtitleCircleComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "span", 0);
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-table-subtitle-circle po-", ctx.subtitle == null ? null : ctx.subtitle.color, "");
            i0.ɵɵproperty("title", ctx.hideTitle ? "" : ctx.subtitle == null ? null : ctx.subtitle.label);
            i0.ɵɵadvance();
            i0.ɵɵtextInterpolate1(" ", ctx.subtitle == null ? null : ctx.subtitle.content, "\n");
        } }, encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableSubtitleCircleComponent, [{
        type: Component,
        args: [{ selector: 'po-table-subtitle-circle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<span [title]=\"hideTitle ? '' : subtitle?.label\" class=\"po-table-subtitle-circle po-{{ subtitle?.color }}\">\n  {{ subtitle?.content }}\n</span>\n" }]
    }], () => [{ type: PoColorPaletteService }], { hideTitle: [{
            type: Input,
            args: ['p-hide-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableSubtitleCircleComponent, { className: "PoTableSubtitleCircleComponent", filePath: "lib/components/po-table/po-table-subtitle-circle/po-table-subtitle-circle.component.ts", lineNumber: 18 }); })();

function PoTableShowSubtitleComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵelement(1, "po-table-subtitle-circle", 7);
    i0.ɵɵelementStart(2, "span", 8);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const subtitle_r2 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-subtitle", subtitle_r2);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(subtitle_r2.label);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um botão e modal para visualização de todas as legendas.
 */
class PoTableShowSubtitleComponent {
    /** Objeto com os dados da legenda. */
    subtitles;
    /** Propriedade que recebe as literais definidas no `po-table`. */
    literals;
    static ɵfac = function PoTableShowSubtitleComponent_Factory(t) { return new (t || PoTableShowSubtitleComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableShowSubtitleComponent, selectors: [["po-table-show-subtitle"]], inputs: { subtitles: [i0.ɵɵInputFlags.None, "p-subtitles", "subtitles"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"] }, decls: 7, vars: 3, consts: [[1, "po-table-footer-show-subtitle", 3, "click"], [1, "po-table-footer-show-subtitle-container"], [1, "po-table-show-subtitle"], ["p-size", "sm", 3, "p-title"], ["modal", ""], ["class", "po-table-subtitle-footer-modal po-row", 4, "ngFor", "ngForOf"], [1, "po-table-subtitle-footer-modal", "po-row"], ["p-hide-title", "true", 3, "p-subtitle"], [1, "po-table-subtitle-text"]], template: function PoTableShowSubtitleComponent_Template(rf, ctx) { if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoTableShowSubtitleComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r0.open()); });
            i0.ɵɵelementStart(1, "div", 1)(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(4, "po-modal", 3, 4);
            i0.ɵɵtemplate(6, PoTableShowSubtitleComponent_div_6_Template, 4, 2, "div", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals.seeCompleteSubtitle);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-title", ctx.literals.completeSubtitle);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.subtitles);
        } }, dependencies: [i1.NgForOf, PoModalComponent, PoTableSubtitleCircleComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableShowSubtitleComponent, [{
        type: Component,
        args: [{ selector: 'po-table-show-subtitle', template: "<div class=\"po-table-footer-show-subtitle\" (click)=\"modal.open()\">\n  <div class=\"po-table-footer-show-subtitle-container\">\n    <span class=\"po-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\n  </div>\n</div>\n\n<po-modal #modal p-size=\"sm\" [p-title]=\"literals.completeSubtitle\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer-modal po-row\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n</po-modal>\n" }]
    }], null, { subtitles: [{
            type: Input,
            args: ['p-subtitles']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableShowSubtitleComponent, { className: "PoTableShowSubtitleComponent", filePath: "lib/components/po-table/po-table-show-subtitle/po-table-show-subtitle.component.ts", lineNumber: 16 }); })();

function PoTableSubtitleFooterComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵelement(1, "po-table-subtitle-circle", 4);
    i0.ɵɵelementStart(2, "span", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const subtitle_r2 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-subtitle", subtitle_r2);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(subtitle_r2.label);
} }
function PoTableSubtitleFooterComponent_po_table_show_subtitle_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-table-show-subtitle", 6);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-literals", ctx_r1.literals)("p-subtitles", ctx_r1.subtitles);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um conjunto de legendas.
 */
class PoTableSubtitleFooterComponent {
    element;
    renderer;
    /** Propriedade que recebe as literais definidas no `po-table`. */
    literals;
    /** Propriedade que recebe as legendas definidas no `PoTableSubtitleCircleComponent`. */
    subtitles;
    showSubtitle;
    resizeListener;
    isVisible;
    timeoutResize;
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        this.initializeResizeListener();
        this.debounceResize();
    }
    ngDoCheck() {
        if (!this.isVisible && this.getContainerSize() > 0) {
            this.toggleShowCompleteSubtitle();
            this.isVisible = true;
        }
    }
    ngOnDestroy() {
        this.removeResizeListener();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.toggleShowCompleteSubtitle();
        });
    }
    getContainerSize() {
        return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
    }
    getItemsSize() {
        const items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
        return Array.from(items)
            .map(item => item['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeResizeListener() {
        this.resizeListener();
    }
    toggleShowCompleteSubtitle() {
        const containerSize = this.getContainerSize();
        const itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    }
    static ɵfac = function PoTableSubtitleFooterComponent_Factory(t) { return new (t || PoTableSubtitleFooterComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableSubtitleFooterComponent, selectors: [["po-table-subtitle-footer"]], inputs: { literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], subtitles: [i0.ɵɵInputFlags.None, "p-subtitles", "subtitles"] }, decls: 3, vars: 2, consts: [[1, "po-table-subtitle-footer-container"], ["class", "po-table-subtitle-footer", 4, "ngFor", "ngForOf"], [3, "p-literals", "p-subtitles", 4, "ngIf"], [1, "po-table-subtitle-footer"], ["p-hide-title", "true", 3, "p-subtitle"], [1, "po-table-subtitle-text"], [3, "p-literals", "p-subtitles"]], template: function PoTableSubtitleFooterComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTableSubtitleFooterComponent_div_1_Template, 4, 2, "div", 1)(2, PoTableSubtitleFooterComponent_po_table_show_subtitle_2_Template, 1, 2, "po-table-show-subtitle", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.subtitles);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showSubtitle);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoTableShowSubtitleComponent, PoTableSubtitleCircleComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableSubtitleFooterComponent, [{
        type: Component,
        args: [{ selector: 'po-table-subtitle-footer', template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\" [p-literals]=\"literals\" [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], { literals: [{
            type: Input,
            args: ['p-literals']
        }], subtitles: [{
            type: Input,
            args: ['p-subtitles']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTableSubtitleFooterComponent, { className: "PoTableSubtitleFooterComponent", filePath: "lib/components/po-table/po-table-subtitle-footer/po-table-subtitle-footer.component.ts", lineNumber: 16 }); })();

class PoSwitchModule {
    static ɵfac = function PoSwitchModule_Factory(t) { return new (t || PoSwitchModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoSwitchModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoLabelModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [PoSwitchComponent],
                exports: [PoSwitchComponent],
                imports: [CommonModule, FormsModule, PoFieldContainerModule, PoLabelModule, PoIconModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoSwitchModule, { declarations: [PoSwitchComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoLabelModule, PoIconModule], exports: [PoSwitchComponent] }); })();

class PoTableColumnFrozenDirective {
    el;
    renderer;
    _frozen = true;
    get frozen() {
        return this._frozen;
    }
    set frozen(val) {
        this._frozen = val;
        if (!val) {
            this.renderer.removeClass(this.el.nativeElement, 'po-table-column-fixed');
        }
        else {
            this.updateStickyPosition();
        }
    }
    alignFrozen = 'left';
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.updateStickyPosition();
        }, 300);
    }
    ngOnChanges(changes) {
        if (changes.frozen.previousValue && !changes.frozen.currentValue) {
            setTimeout(() => {
                this.resizeColumns();
            }, 100);
        }
    }
    /* istanbul ignore next */
    updateStickyPosition() {
        if (this._frozen) {
            if (this.alignFrozen === 'right') {
                let right = 0;
                const next = this.el.nativeElement.nextElementSibling;
                if (next) {
                    right = this.getOuterWidth(next) + (parseFloat(next.style.right) || 0);
                }
                this.el.nativeElement.style.right = right + 'px';
            }
            else {
                let left = 0;
                const prev = this.el.nativeElement.previousElementSibling;
                if (prev &&
                    !prev.classList.contains('po-table-column-selectable') &&
                    !prev.classList.contains('po-table-column-actions') &&
                    !prev.classList.contains('po-table-column-detail-toggle') &&
                    !prev.classList.contains('po-table-header-master-detail')) {
                    left = this.getOuterWidth(prev) + (parseFloat(prev.style.left) || 0);
                }
                this.el.nativeElement.style.left = left - 1 + 'px';
                this.renderer.addClass(this.el.nativeElement, 'po-table-column-fixed');
            }
            const filterRow = this.el.nativeElement.parentElement.nextElementSibling;
            if (filterRow) {
                const index = this.index(this.el.nativeElement);
                if (filterRow.children && filterRow.children[index]) {
                    filterRow.children[index].style.left = this.el.nativeElement.style.left;
                    filterRow.children[index].style.right = this.el.nativeElement.style.right;
                }
            }
        }
    }
    /* istanbul ignore next */
    resizeColumns() {
        const currentElement = this.el.nativeElement;
        const prevElements = [];
        let prevElement = currentElement.previousElementSibling;
        // Encontra todos os elementos anteriores com a classe 'po-table-column-fixed'
        while (prevElement && prevElement.classList.contains('po-table-column-fixed')) {
            prevElements.push(prevElement);
            prevElement = prevElement.previousElementSibling;
        }
        // Verifica se há elementos suficientes para ajustar os widths
        if (prevElements.length >= 2) {
            let leftAccumulator = 0;
            // Calcula o novo 'left' para cada elemento anterior e aplica
            for (let i = prevElements.length - 1; i >= 0; i--) {
                const prevWidth = this.getOuterWidth(prevElements[i], true);
                prevElements[i].style.left = leftAccumulator - 1 + 'px';
                leftAccumulator += prevWidth;
            }
        }
    }
    getOuterWidth(el, margin) {
        let width = el.offsetWidth;
        if (margin) {
            const style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width - 1;
    }
    index(element) {
        const children = element.parentNode.childNodes;
        let num = 0;
        for (let i = 0; i < children.length; i++) {
            if (children[i] === element) {
                return num;
            }
            if (children[i].nodeType === 1) {
                num++;
            }
        }
        return -1;
    }
    static ɵfac = function PoTableColumnFrozenDirective_Factory(t) { return new (t || PoTableColumnFrozenDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableColumnFrozenDirective, selectors: [["", "pFrozenColumn", ""]], hostAttrs: [1, "p-element"], hostVars: 2, hostBindings: function PoTableColumnFrozenDirective_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵclassProp("po-frozen-column", ctx.frozen);
        } }, inputs: { frozen: [i0.ɵɵInputFlags.None, "pFrozenColumn", "frozen"], alignFrozen: "alignFrozen" }, features: [i0.ɵɵNgOnChangesFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnFrozenDirective, [{
        type: Directive,
        args: [{
                selector: '[pFrozenColumn]',
                host: {
                    class: 'p-element',
                    '[class.po-frozen-column]': 'frozen'
                }
            }]
    }], () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], { frozen: [{
            type: Input,
            args: ['pFrozenColumn']
        }], alignFrozen: [{
            type: Input
        }] }); })();

/**
 * @usedBy PoComboComponent
 *
 * @description
 *
 * Define o tipo de busca usado no po-combo.
 */
var PoComboFilterMode;
(function (PoComboFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
    PoComboFilterMode[PoComboFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoComboFilterMode[PoComboFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoComboFilterMode[PoComboFilterMode["endsWith"] = 2] = "endsWith";
})(PoComboFilterMode || (PoComboFilterMode = {}));

/**
 * @usedBy PoComboComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
 * dentro da *tag* `po-combo`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <ng-template p-combo-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-combo>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <div *p-combo-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-combo>
 * ...
 *
 * ```
 * Para o caso de personalização de opções com agrupamentos, deve-se seguir a mesma orientação acima. Porém, cabe ao desenvolvedor
 * a responsabilidade de estilização dos elementos da lista, tais como título e links dos grupos. Abaixo há um exemplo de aplicação:
 *
 * ```
 * ...
 * <ng-template p-combo-option-template let-option>
 *   <ng-container *ngIf="option.options; then optionsGroupTitle; else optionsGroupList"></ng-container>
 *   <ng-template #optionsGroupTitle>
 *     <p class="po-combo-item-title" [innerHtml]="option.label"></p>
 *   </ng-template>
 *   <ng-template #optionsGroupList>
 *     <div class="po-combo-item">
 *       <div class="po-row">
 *         <po-avatar class="po-md-1" p-size="sm"></po-avatar>
 *         <div class="po-md-11" [innerHtml]="option.label"></div>
 *       </div>
 *     </div>
 *   </ng-template>
 * </ng-template>
 * ...
 *
 * ```
 */
class PoComboOptionTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoComboOptionTemplateDirective_Factory(t) { return new (t || PoComboOptionTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoComboOptionTemplateDirective, selectors: [["", "p-combo-option-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboOptionTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-combo-option-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();

const poComboLiteralsDefault = {
    en: {
        noData: 'No data found',
        chooseOption: 'Choose an option',
        clear: 'Clear'
    },
    es: {
        noData: 'Datos no encontrados',
        chooseOption: 'Elija una opción',
        clear: 'limpia'
    },
    pt: {
        noData: 'Nenhum dado encontrado',
        chooseOption: 'Escolha uma opção',
        clear: 'Apagar'
    },
    ru: {
        noData: 'Данные не найдены',
        chooseOption: 'Выберите опцию',
        clear: 'чистый'
    }
};

const PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
const PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
const PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 *
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                    |
 * | `--text-color-placeholder`             | Cor do texto no placeholder                           | `var(--color-neutral-light-30)`                   |
 * | `--color`                              | Cor principal do Combo                                | `var(--color-neutral-dark-70)`                    |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                   |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-width-lg)`                          |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                  |
 * | **Focused**                            |                                                       |                                                   |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                     |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Error**                              |                                                       |                                                   |
 * | `--color-error`                        | Cor principal no estado de erro                       | `var(--color-feedback-negative-base)`             |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-light-30)`                   |
 * | `--background-disabled`                | Cor de background no estado disabled                  | `var(--color-neutral-light-20)`                   |
 * | **Suggestion**                         |                                                       |                                                   |
 * | `--text-color-suggestion`              | Cor do texto no estado suggestion                     | `var(--color-neutral-mid-60)`                     |
 * | `--background-suggestion`              | Cor do background no estado suggestion                | `var(--color-brand-01-lightest)`                  |
 *
 */
class PoComboBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Label no componente. */
    label;
    /** Texto de apoio para o campo. */
    help;
    /** Nome do componente. */
    name;
    /**
     * @optional
     *
     * @description
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
     * itens no componente.
     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.
     *
     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
     * `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     * Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     * ```
     * url + ?filter=Peter
     * ```
     *
     * Se for definida a propriedade `p-filter-params`, a mesma também será concatenada. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     */
    filterService;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro ativa a funcionalidade de scroll infinito para o combo, Ao chegar ao fim da tabela executará nova busca dos dados conforme paginação.
     *
     * @default `false`
     */
    set infiniteScroll(value) {
        this._infiniteScroll = convertToBoolean(value);
    }
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o percentual necessário para disparar o evento `show-more`, que é responsável por carregar mais dados no combo. Caso o valor seja maior que 100 ou menor que 0, o valor padrão será 100%.
     *
     * **Exemplos**
     * - p-infinite-scroll-distance = 80: Quando atingir 80% do scroll do combo, o `show-more` será disparado.
     */
    set infiniteScrollDistance(value) {
        this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
    }
    get infiniteScrollDistance() {
        return this._infiniteScrollDistance;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-combo p-icon="po-icon-user" p-label="PO combo"></po-combo>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-combo p-icon="fa fa-podcast" p-label="PO combo"></po-combo>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-combo [p-icon]="template" p-label="combo template ionic"></po-combo>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /** Se verdadeiro, o campo receberá um botão para ser limpo. */
    clean;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.
     *
     * @default `false`
     */
    emitObjectValue = false;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, desabilitará a busca de um item via TAB.
     *
     * @default `false`
     */
    disabledTabFilter = false;
    /**
     * @optional
     *
     * @description
     *
     * Define que o filtro no primeiro clique será removido.
     *
     * > Caso o combo tenha um valor padrão de inicialização, o primeiro clique
     * no componente retornará todos os itens da lista e não apenas o item inicialiazado.
     *
     * @default `false`
     */
    removeInitialFilter = false;
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.
     *
     * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-combo ... [ngModel]="comboModel" (ngModelChange)="comboModel = $event"> </po-combo>
     * ```
     *
     */
    ngModelChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informada uma função que será disparada quando houver alterações no Search input. A função receberá como argumento o input modificado.
     *
     */
    inputChange = new EventEmitter();
    cacheOptions = [];
    defaultService;
    firstInWriteValue = true;
    isFirstFilter = true;
    isFiltering = false;
    keyupSubscribe;
    onModelChange;
    previousSearchValue = '';
    selectedOption;
    selectedValue;
    selectedView;
    service;
    visibleOptions = [];
    page = 1;
    pageSize = 10;
    loading = false;
    dynamicLabel = 'label';
    dynamicValue = 'value';
    shouldApplyFocus = false;
    cacheStaticOptions = [];
    comboOptionsList = [];
    onModelTouched = null;
    _changeOnEnter = false;
    _debounceTime = 400;
    _disabled = false;
    _disabledInitFilter = false;
    _fieldLabel = 'label';
    _fieldValue = 'value';
    _filterMinlength = 0;
    _filterMode = PoComboFilterMode.startsWith;
    _filterParams;
    _literals;
    _options = [];
    _placeholder = '';
    _required = false;
    _sort = false;
    language;
    _infiniteScrollDistance = 100;
    _infiniteScroll = false;
    // utilizado para fazer o controle de atualizar o model.
    // não deve forçar a atualização se o gatilho for o writeValue para não deixar o campo dirty.
    fromWriteValue = false;
    validatorChange;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    set placeholder(value) {
        this._placeholder = value || this.literals.chooseOption;
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`p-filter-service`).
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    set disabledInitFilter(value) {
        this._disabledInitFilter = convertToBoolean(value);
    }
    get disabledInitFilter() {
        return this._disabledInitFilter;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `value`
     */
    set fieldValue(value) {
        if (!this.service && !this.filterService) {
            this.dynamicValue = value;
        }
        this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        if (!this.service && !this.filterService) {
            this.dynamicLabel = value;
        }
        this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    set filterMinlength(value) {
        const parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
        this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
    }
    get filterMinlength() {
        return this._filterMinlength;
    }
    /**
     * @optional
     *
     * @description
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.selectedValue);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @optional
     *
     * @description
     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    set changeOnEnter(changeOnEnter) {
        this._changeOnEnter = convertToBoolean(changeOnEnter);
    }
    get changeOnEnter() {
        return this._changeOnEnter;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel(this.selectedValue);
    }
    get disabled() {
        return this._disabled;
    }
    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
    set sort(sort) {
        this._sort = convertToBoolean(sort);
        this.comboListDefinitions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * Nesta propriedade define a lista de opções do `po-combo`.
     *
     * > A lista pode ser definida utilizando um array com o valor representando o `value` e o `label` das seguintes formas:
     *
     * ```
     * <po-combo name="combo" p-label="PO Combo" [p-options]="[{value: 1, label: 'One'}, {value: 2, label: 'two'}]"> </po-combo>
     * ```
     *
     * ```
     * <po-combo name="combo" p-label="PO Combo" [p-options]="[{name: 'Roger', age: 28}, {name: 'Anne', age: 35}]" p-field-label="name" p-field-value="age"> </po-combo>
     * ```
     *
     * - Aconselha-se utilizar valores distintos no `label` e `value` dos itens.
     */
    set options(options) {
        this._options = Array.isArray(options) ? options : [];
        this.comboListDefinitions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoComboFilterMode ? filterMode : PoComboFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoComboFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoComboFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoComboFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
     *
     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
     */
    set filterParams(filterParams) {
        this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
    }
    get filterParams() {
        return this._filterParams;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-combo
     *   [p-literals]="customLiterals">
     * </po-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poComboLiteralsDefault[poLocaleDefault],
                ...poComboLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poComboLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poComboLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o componente irá guardar o valor do model para evitar requisições repetidas.
     *
     * > Caso o valor seja `false`, o componente fará uma nova requisição mesmo que o valor procurado seja o mesmo do model.
     *
     * @default `true`
     */
    cache = true;
    /**
     * @optional
     *
     * @description
     *
     * Define que o dropdown do combo será incluido no body da página e não suspenso com a caixa de texto do componente.
     * Opção necessária para o caso de uso do componente em páginas que necessitam renderizar o combo fora do conteúdo principal.
     *
     * > Obs: O uso dessa propriedade pode acarretar na perda sequencial da tabulação da página
     *
     * @default `false`
     */
    appendBox = false;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    get isOptionGroupList() {
        return this._options.length && this._options[0].hasOwnProperty('options');
    }
    ngOnInit() {
        this.dynamicValue = this.checkIfService('value');
        this.dynamicLabel = this.checkIfService('label');
        this.updateComboList();
    }
    onInitService() {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    }
    setService(service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties(service, this.fieldLabel, this.fieldValue);
            }
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoComboFilterMode.contains:
                return this.contains(search, option);
            case PoComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option[this.dynamicLabel].toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option[this.dynamicLabel].toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option[this.dynamicLabel].toLowerCase().endsWith(search.toLowerCase());
    }
    getOptionFromValue(value, options) {
        return options ? options.find((option) => this.isEqual(option[this.dynamicValue], value)) : null;
    }
    getOptionFromLabel(label, options) {
        if (options) {
            return options.find((option) => option[this.dynamicLabel].toString().toLowerCase() === label.toString().toLowerCase());
        }
        else {
            return null;
        }
    }
    updateSelectedValue(option, isUpdateModel = true) {
        const optionLabel = (option && option[this.dynamicLabel]) || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            const optionValue = option?.[this.dynamicValue] !== undefined ? option[this.dynamicValue] : undefined;
            this.updateModel(optionValue);
        }
    }
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    searchForLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            let addedOptionsGroupTitle = false;
            let optionsGroupTitle;
            options.forEach(option => {
                if ('options' in option) {
                    addedOptionsGroupTitle = false;
                    return (optionsGroupTitle = option);
                }
                if (option[this.dynamicLabel] && (this.compareMethod(search, option, filterMode) || this.service)) {
                    if (this.isOptionGroupList && !addedOptionsGroupTitle) {
                        newOptions.push(optionsGroupTitle);
                        addedOptionsGroupTitle = true;
                    }
                    newOptions.push(option);
                }
            });
            this.selectedView = newOptions[this.isOptionGroupList ? 1 : 0];
            this.updateComboList(newOptions);
        }
        else {
            this.updateComboList();
        }
    }
    updateComboList(options) {
        const copyOptions = options || [...this.comboOptionsList];
        let newOptions;
        if (this.removeInitialFilter) {
            newOptions = copyOptions;
        }
        else {
            newOptions = !options && !this.infiniteScroll && this.selectedValue ? [{ ...this.selectedOption }] : copyOptions;
        }
        this.visibleOptions = newOptions;
        if (!this.selectedView && this.visibleOptions.length) {
            this.selectedView = copyOptions.find(option => option[this.dynamicValue] !== undefined);
        }
    }
    getNextOption(value, options, reverse = false) {
        const optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
        let optionFound = null;
        let found = false;
        for (const option of optionsList) {
            if (option[this.dynamicValue] && !optionFound) {
                optionFound = option;
            }
            if (option[this.dynamicValue] && found) {
                return option;
            }
            if (this.isEqual(option[this.dynamicValue], value)) {
                found = true;
            }
        }
        return optionFound;
    }
    getIndexSelectedView() {
        for (let i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    }
    compareObjects(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
    verifyValidOption() {
        const inputValue = this.getInputValue();
        const optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        if (optionFound && optionFound[this.dynamicValue] !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound[this.dynamicLabel];
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption[this.dynamicLabel] !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption[this.dynamicLabel];
            return;
        }
        else if (inputValue && !optionFound) {
            const isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption[this.dynamicLabel] !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    }
    // Recebe as alterações do model
    writeValue(value) {
        this.fromWriteValue = true;
        if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
            const option = this.getOptionFromValue(value, this.comboOptionsList);
            this.updateSelectedValue(option);
            this.updateComboList();
            this.removeInitialFilter = false;
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        else {
            this.updateSelectedValue(null);
            this.updateComboList();
            this.updateHasNext();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    clear(value) {
        this.callModelChange(value);
        this.updateSelectedValue(null);
        this.updateComboList();
        this.initInputObservable();
        this.updateHasNext();
        if (this.service || this.filterService) {
            this.keyupSubscribe.unsubscribe();
        }
    }
    configAfterSetFilterService(service) {
        if (service) {
            this.comboOptionsList = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.comboOptionsList = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    }
    unsubscribeKeyupObservable() {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    comboListDefinitions() {
        this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
        this.cacheStaticOptions = this.comboOptionsList;
        this.updateComboList();
    }
    checkIfService(dynamicValue) {
        if ((this.service || this.filterService) && dynamicValue === 'label') {
            return PO_COMBO_FIELD_LABEL_DEFAULT;
        }
        if ((this.service || this.filterService) && dynamicValue === 'value') {
            return PO_COMBO_FIELD_VALUE_DEFAULT;
        }
        if (!this.service && dynamicValue === 'label') {
            return this.fieldLabel;
        }
        if (!this.service && dynamicValue === 'value') {
            return this.fieldValue;
        }
    }
    compareOptions(dynamicLabel) {
        return function (optionA, optionB) {
            const labelA = optionA[dynamicLabel].toString().toLowerCase();
            const labelB = optionB[dynamicLabel].toString().toLowerCase();
            return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
        };
    }
    hasDuplicatedOption(options, currentOption, accumulatedGroupOptions) {
        if (accumulatedGroupOptions) {
            return accumulatedGroupOptions.some(option => option[this.dynamicLabel] === currentOption);
        }
        else {
            return options.some(option => option[this.dynamicValue] === currentOption);
        }
    }
    listingComboOptions(comboOptions) {
        const comboOptionsList = comboOptions.concat();
        const verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
        this.sortOptions(verifiedComboOptionsList);
        if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
            return this.verifyComboOptionsGroup(verifiedComboOptionsList);
        }
        return verifiedComboOptionsList;
    }
    sortOptions(comboOptionsList) {
        if (comboOptionsList.length > 0 && this.sort) {
            return comboOptionsList.sort(this.compareOptions(this.dynamicLabel));
        }
    }
    validateValue(currentOption, verifyingOptionsGroup = false) {
        const { options } = currentOption;
        if (this.isOptionGroupList) {
            return ((validValue(currentOption[this.dynamicLabel]) && options && options.length > 0) ||
                (verifyingOptionsGroup === true && validValue(currentOption[this.dynamicValue])));
        }
        return validValue(currentOption[this.dynamicValue]) && !options;
    }
    verifyComboOptions(comboOptions, verifyingOptionsGroup = false, accumulatedGroupOptions) {
        return comboOptions.reduce((accumulatedOptions, currentOption) => {
            if (!this.verifyIfHasLabel(currentOption) ||
                this.hasDuplicatedOption(accumulatedOptions, currentOption[this.dynamicValue] || currentOption[this.dynamicLabel], accumulatedGroupOptions) ||
                !this.validateValue(currentOption, verifyingOptionsGroup)) {
                return accumulatedOptions;
            }
            accumulatedOptions.push(currentOption);
            return accumulatedOptions;
        }, []);
    }
    verifyComboOptionsGroup(comboOptionsList) {
        return comboOptionsList.reduce((accumulatedGroupOptions, currentOption) => {
            const { options } = currentOption;
            const verifiedComboOptionsGroupList = this.verifyComboOptions(options, true, accumulatedGroupOptions);
            if (verifiedComboOptionsGroupList.length > 0) {
                this.sortOptions(verifiedComboOptionsGroupList);
                accumulatedGroupOptions.push({ label: currentOption[this.dynamicLabel], options: true }, ...verifiedComboOptionsGroupList);
            }
            return accumulatedGroupOptions;
        }, []);
    }
    verifyIfHasLabel(currentOption = {}) {
        const { options } = currentOption;
        if ((this.isOptionGroupList && options && !currentOption[this.dynamicLabel]) ||
            (!currentOption[this.dynamicLabel] && !currentOption[this.dynamicValue]) ||
            (!this.isOptionGroupList && options)) {
            return false;
        }
        if (!currentOption[this.dynamicLabel]) {
            currentOption[this.dynamicLabel] = currentOption[this.dynamicValue].toString();
            return true;
        }
        return true;
    }
    updateInternalVariables(option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    }
    updateModel(value) {
        if (value !== this.selectedValue) {
            if (!this.fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(this.emitObjectValue ? this.selectedOption : value);
        }
        this.selectedValue = value;
        this.fromWriteValue = false;
    }
    updateSelectedValueWithOldOption() {
        const oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
        if (oldOption && oldOption[this.dynamicLabel]) {
            return this.updateSelectedValue(oldOption);
        }
    }
    updateHasNext() {
        if (this.service && this.infiniteScroll) {
            this.defaultService.hasNext = true;
        }
    }
    static ɵfac = function PoComboBaseComponent_Factory(t) { return new (t || PoComboBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoComboBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], name: "name", filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], infiniteScroll: [i0.ɵɵInputFlags.None, "p-infinite-scroll", "infiniteScroll"], infiniteScrollDistance: [i0.ɵɵInputFlags.None, "p-infinite-scroll-distance", "infiniteScrollDistance"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], clean: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-clean", "clean", convertToBoolean], emitObjectValue: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-emit-object-value", "emitObjectValue", convertToBoolean], disabledTabFilter: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled-tab-filter", "disabledTabFilter", convertToBoolean], removeInitialFilter: [i0.ɵɵInputFlags.None, "p-remove-initial-filter", "removeInitialFilter"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], debounceTime: [i0.ɵɵInputFlags.None, "p-debounce-time", "debounceTime"], disabledInitFilter: [i0.ɵɵInputFlags.None, "p-disabled-init-filter", "disabledInitFilter"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], filterMinlength: [i0.ɵɵInputFlags.None, "p-filter-minlength", "filterMinlength"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], changeOnEnter: [i0.ɵɵInputFlags.None, "p-change-on-enter", "changeOnEnter"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], sort: [i0.ɵɵInputFlags.None, "p-sort", "sort"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], filterParams: [i0.ɵɵInputFlags.None, "p-filter-params", "filterParams"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], cache: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-cache", "cache", convertToBoolean], appendBox: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-append-in-body", "appendBox", convertToBoolean] }, outputs: { change: "p-change", ngModelChange: "ngModelChange", inputChange: "p-input-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], name: [{
            type: Input,
            args: ['name']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], infiniteScroll: [{
            type: Input,
            args: ['p-infinite-scroll']
        }], infiniteScrollDistance: [{
            type: Input,
            args: ['p-infinite-scroll-distance']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], clean: [{
            type: Input,
            args: [{ alias: 'p-clean', transform: convertToBoolean }]
        }], emitObjectValue: [{
            type: Input,
            args: [{ alias: 'p-emit-object-value', transform: convertToBoolean }]
        }], disabledTabFilter: [{
            type: Input,
            args: [{ alias: 'p-disabled-tab-filter', transform: convertToBoolean }]
        }], removeInitialFilter: [{
            type: Input,
            args: ['p-remove-initial-filter']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], inputChange: [{
            type: Output,
            args: ['p-input-change']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], debounceTime: [{
            type: Input,
            args: ['p-debounce-time']
        }], disabledInitFilter: [{
            type: Input,
            args: ['p-disabled-init-filter']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], filterMinlength: [{
            type: Input,
            args: ['p-filter-minlength']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], changeOnEnter: [{
            type: Input,
            args: ['p-change-on-enter']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], sort: [{
            type: Input,
            args: ['p-sort']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], cache: [{
            type: Input,
            args: [{ alias: 'p-cache', transform: convertToBoolean }]
        }], appendBox: [{
            type: Input,
            args: [{ alias: 'p-append-in-body', transform: convertToBoolean }]
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
class PoComboFilterService {
    http;
    fieldLabel = 'label';
    fieldValue = 'value';
    hasNext = true;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    _url;
    messages = [];
    get url() {
        return this._url;
    }
    constructor(http) {
        this.http = http;
    }
    getFilteredData(param, filterParams) {
        const params = this.prepareParams(param, filterParams);
        return this.http.get(`${this.url}`, { responseType: 'json', params, headers: this.headers }).pipe(tap(res => (this.hasNext = res['hasNext'])), map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated, headers: this.headers })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime$1(100));
    }
    prepareParams(param, filterParams) {
        const { page, pageSize, value } = param;
        const filterParamsValidated = validateObjectType(filterParams);
        return page
            ? { ...filterParamsValidated, page, pageSize, filter: value }
            : { ...filterParamsValidated, filter: value };
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            const parsedOptions = items.map(item => this.parseToComboOption(item));
            this.displayMessages();
            return parsedOptions;
        }
        return [];
    }
    parseToComboOption(item) {
        if (!item?.[this.fieldValue]) {
            this.addMessage(item, this.fieldValue);
            return { value: '' };
        }
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
    addMessage(item, property) {
        this.messages.push(`Cannot read property "${property}" of ${JSON.stringify(item)},
      see [p-field-value] property at https://po-ui.io/documentation/po-combo`);
    }
    displayMessages() {
        if (this.messages.length) {
            this.messages.forEach(message => console.error(message));
            this.messages = [];
        }
    }
    static ɵfac = function PoComboFilterService_Factory(t) { return new (t || PoComboFilterService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoComboFilterService, factory: PoComboFilterService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboFilterService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

const _c0$V = ["containerElement"];
const _c1$o = ["contentElement"];
const _c2$b = ["iconArrow"];
const _c3$6 = ["inp"];
const _c4$2 = ["poListbox"];
function PoComboComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵelement(1, "po-icon", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r1.disabled);
    i0.ɵɵproperty("p-icon", ctx_r1.icon);
} }
function PoComboComponent_po_clean_7_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 18);
    i0.ɵɵlistener("p-change-event", function PoComboComponent_po_clean_7_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.clear($event)); })("click", function PoComboComponent_po_clean_7_Template_po_clean_click_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); ctx_r14.clear(null); return i0.ɵɵresetView($event.preventDefault()); })("keydown.enter", function PoComboComponent_po_clean_7_Template_po_clean_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); ctx_r15.clearAndFocus(); return i0.ɵɵresetView($event.preventDefault()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r3.inputEl);
    i0.ɵɵattribute("aria-label", ctx_r3.literals.clean);
} }
function PoComboComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_ng_template_12_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_12_ng_container_0_Template, 1, 0, "ng-container", 19);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r11 = i0.ɵɵreference(18);
    i0.ɵɵproperty("ngTemplateOutlet", _r11);
} }
function PoComboComponent_ng_template_14_ng_template_0_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_ng_template_14_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_14_ng_template_0_ng_container_0_Template, 1, 0, "ng-container", 19);
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r11 = i0.ɵɵreference(18);
    i0.ɵɵproperty("ngTemplateOutlet", _r11);
} }
function PoComboComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_14_ng_template_0_Template, 1, 1, "ng-template", 20);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(2);
    i0.ɵɵproperty("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayOpen", true);
} }
function PoComboComponent_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 21, 22)(2, "po-listbox", 23, 24);
    i0.ɵɵlistener("p-selectcombo-item", function PoComboComponent_ng_template_17_Template_po_listbox_p_selectcombo_item_2_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r22.onOptionClick($event, $event.event)); })("p-update-infinite-scroll", function PoComboComponent_ng_template_17_Template_po_listbox_p_update_infinite_scroll_2_listener() { i0.ɵɵrestoreView(_r23); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.showMoreInfiniteScroll()); })("p-close", function PoComboComponent_ng_template_17_Template_po_listbox_p_close_2_listener() { i0.ɵɵrestoreView(_r23); const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.onCloseCombo()); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵproperty("hidden", !ctx_r10.comboOpen && !ctx_r10.isServerSearching);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-items", ctx_r10.visibleOptions)("p-field-value", ctx_r10.dynamicValue)("p-field-label", ctx_r10.dynamicLabel)("p-template", ctx_r10.comboOptionTemplate)("p-search-value", ctx_r10.getInputValue())("p-infinite-loading", ctx_r10.infiniteLoading)("p-infinite-scroll", ctx_r10.infiniteScroll)("p-filtering", ctx_r10.isFiltering)("p-cache", ctx_r10.cache)("p-filter-mode", ctx_r10.filterMode)("p-visible", ctx_r10.comboOpen)("p-is-searching", ctx_r10.isServerSearching)("p-should-mark-letter", ctx_r10.shouldMarkLetters)("p-compare-cache", ctx_r10.compareObjects(ctx_r10.cacheOptions, ctx_r10.visibleOptions))("p-combo-service", ctx_r10.service)("p-infinite-scroll-distance", ctx_r10.infiniteScrollDistance);
} }
const poComboContainerOffset = 8;
const poComboContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoComboBaseComponent
 *
 *
 * @example
 *
 * <example name="po-combo-basic" title="PO Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="PO Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="PO Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-infinity-scroll" title="PO Combo - Inifity Scroll">
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.html"> </file>
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 * </example>
 */
class PoComboComponent extends PoComboBaseComponent {
    element;
    differs;
    defaultService;
    renderer;
    changeDetector;
    controlPosition;
    comboOptionTemplate;
    containerElement;
    contentElement;
    iconElement;
    inputEl;
    poListbox;
    comboIcon = 'ICON_ARROW_DOWN';
    comboOpen = false;
    differ;
    id = `po-combo[${uuid()}]`;
    isProcessingValueByTab = false;
    scrollTop = 0;
    shouldMarkLetters = true;
    infiniteLoading = false;
    _isServerSearching = false;
    lastKey;
    clickoutListener;
    eventResizeListener;
    filterSubscription;
    getSubscription;
    subscriptionScrollEvent;
    constructor(element, differs, defaultService, renderer, changeDetector, controlPosition, languageService) {
        super(languageService);
        this.element = element;
        this.differs = differs;
        this.defaultService = defaultService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.differ = differs.find([]).create(null);
    }
    set isServerSearching(value) {
        if (value) {
            this._isServerSearching = value;
            this.changeDetector.detectChanges();
            this.setContainerPosition();
            this.initializeListeners();
        }
        else {
            this._isServerSearching = value;
        }
    }
    get isServerSearching() {
        return this._isServerSearching;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnChanges(changes) {
        if (changes.debounceTime) {
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        }
        if (changes.filterService) {
            this.configAfterSetFilterService(this.filterService);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.infiniteScroll) {
            this.subscriptionScrollEvent?.unsubscribe();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    onBlur() {
        this.onModelTouched?.();
    }
    onKeyDown(event) {
        const key = event.keyCode;
        const inputValue = event.target.value;
        if (event.shiftKey && key === PoKeyCodeEnum.tab) {
            this.controlComboVisibility(false);
            return;
        }
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue && !this.disabledTabFilter) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        if (key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.visibleOptions.length) {
                this.focusItem();
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            const isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            if (!this.service) {
                this.updateComboList([...this.cacheStaticOptions]);
            }
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
        if (key === PoKeyCodeEnum.esc) {
            if (key === this.lastKey) {
                this.lastKey = '';
                if (this.selectedValue) {
                    this.clearAndFocus();
                }
                return;
            }
            else {
                this.onCloseCombo();
            }
        }
        this.lastKey = event.keyCode;
    }
    onKeyUp(event) {
        const key = event.keyCode || event.which;
        const inputValue = event.target.value;
        const isValidKey = key !== PoKeyCodeEnum.arrowUp &&
            key !== PoKeyCodeEnum.arrowDown &&
            key !== PoKeyCodeEnum.enter &&
            key !== PoKeyCodeEnum.esc &&
            key !== PoKeyCodeEnum.tab;
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                    this.inputChange.emit(inputValue);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList([...this.cacheOptions]);
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    }
    initInputObservable() {
        if (this.service) {
            const keyupObservable = fromEvent(this.inputEl.nativeElement, 'keyup').pipe(filter$1((e) => this.isValidCharacterToSearch(e.keyCode)), map((e) => e.currentTarget.value), distinctUntilChanged(), tap(() => {
                this.shouldMarkLetters = false;
            }), debounceTime$1(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(value => {
                if (value.length >= this.filterMinlength || !value) {
                    this.controlApplyFilter(value);
                }
            });
        }
    }
    controlApplyFilter(value, isArrowDown) {
        if ((!this.isProcessingValueByTab && (!this.selectedOption || value !== this.selectedOption[this.dynamicLabel])) ||
            !this.cache) {
            this.defaultService.hasNext = true;
            this.page = this.setPage();
            this.options = [];
            this.applyFilter(value, true, isArrowDown);
        }
        this.isProcessingValueByTab = false;
    }
    applyFilter(value, reset = false, isArrowDown) {
        if (this.defaultService.hasNext) {
            this.controlComboVisibility(false, reset);
            this.isServerSearching = true;
            const param = this.infiniteScroll
                ? { property: this.fieldLabel, value, page: this.page, pageSize: this.pageSize }
                : { property: this.fieldLabel, value };
            this.filterSubscription = this.service.getFilteredData(param, this.filterParams).subscribe(items => {
                this.setOptionsByApplyFilter(value, items, reset);
                if (isArrowDown) {
                    this.focusItem();
                }
            }, error => this.onErrorFilteredData());
        }
    }
    setOptionsByApplyFilter(value, items, reset = false) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.infiniteLoading = false;
        this.options = this.prepareOptions(items);
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true, reset);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.comboOptionsList;
        }
    }
    getObjectByValue(value) {
        if (this.selectedValue !== value && this.selectedOption?.[this.dynamicLabel] !== value) {
            this.isProcessingValueByTab = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(item => this.updateOptionByFilteredValue(item), error => this.onErrorGetObjectByValue());
        }
    }
    updateOptionByFilteredValue(item) {
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(() => {
            this.isProcessingValueByTab = false;
        }, this.debounceTime);
    }
    setShouldApplyFocus(value) {
        this.shouldApplyFocus = value;
    }
    toggleComboVisibility(isButton) {
        if (this.disabled) {
            return;
        }
        this.setShouldApplyFocus(true);
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen, false, isButton);
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter && !this.selectedValue) {
            this.options = [];
            const scrollingControl = this.setScrollingControl();
            this.applyFilter('', scrollingControl);
        }
    }
    controlComboVisibility(toOpen, reset = false, isButton) {
        toOpen ? this.open(reset, isButton) : this.close(reset);
    }
    onCloseCombo() {
        this.controlComboVisibility(false);
        this.inputEl.nativeElement.focus();
    }
    onOptionClick(option, event) {
        const inputValue = this.getInputValue();
        const isUpdateModel = option[this.dynamicValue] !== this.selectedValue ||
            !!(this.selectedView && inputValue !== this.selectedView[this.dynamicLabel]);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        this.previousSearchValue = this.selectedView[this.dynamicLabel];
        if (this.shouldApplyFocus) {
            this.inputEl.nativeElement.focus();
        }
    }
    calculateScrollTop(selectedItem, index) {
        if (!selectedItem.length || index <= 1) {
            return 0;
        }
        else {
            return selectedItem[0].offsetTop;
        }
    }
    cleanListbox() {
        this.updateSelectedValue(null);
        this.options.map(option => (option.selected = false));
    }
    getInputValue() {
        return this.inputEl.nativeElement.value;
    }
    setInputValue(value) {
        this.inputEl.nativeElement.value = value;
        if (value === null) {
            this.cleanListbox();
        }
    }
    wasClickedOnToggle(event) {
        if (this.comboOpen &&
            !this.inputEl.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                const scrollingControl = this.setScrollingControl();
                this.applyFilter('', scrollingControl);
            }
        }
    }
    isValidCharacterToSearch(keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    }
    searchOnEnterOrArrow(event, value) {
        if ((event.key === 'ArrowDown' || event.key === 'Enter') &&
            this.service &&
            !this.selectedView &&
            value.length >= this.filterMinlength) {
            this.controlApplyFilter(value, event.key === 'ArrowDown');
        }
    }
    showMoreInfiniteScroll() {
        if (this.defaultService.hasNext) {
            this.infiniteLoading = true;
        }
        this.page++;
        this.applyFilter('', true);
    }
    clearAndFocus() {
        this.clear(null);
        this.inputEl.nativeElement.focus();
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    }
    close(reset) {
        this.comboOpen = false;
        if (!reset) {
            if (!this.getInputValue()) {
                this.page = this.setPage();
                this.defaultService.hasNext = true;
            }
            if (this.infiniteScroll) {
                this.options = this.setOptions();
            }
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'ICON_ARROW_DOWN';
        this.removeListeners();
        this.isFiltering = false;
        this.renderer.removeClass(this.inputEl.nativeElement, 'po-combo-input-focus');
    }
    initializeListeners() {
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout(() => this.adjustContainerPosition(), 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onErrorGetObjectByValue() {
        this.updateOptionByFilteredValue(null);
    }
    onScroll = () => {
        this.adjustContainerPosition();
    };
    onErrorFilteredData() {
        this.isServerSearching = false;
        this.updateComboList([]);
        this.controlComboVisibility(true);
    }
    open(reset, isButton) {
        this.comboOpen = true;
        if (!reset && this.infiniteScroll) {
            if (!this.getInputValue()) {
                this.page = 1;
            }
            this.options = this.setOptions();
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'ICON_ARROW_UP';
        this.initializeListeners();
        isButton
            ? this.renderer.addClass(this.inputEl.nativeElement, 'po-combo-input-focus')
            : this.inputEl.nativeElement.focus();
        this.setContainerPosition();
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setContainerPosition() {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputEl, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    setOptions() {
        return this.getInputValue() ? this.options : [];
    }
    prepareOptions(items) {
        return this.infiniteScroll ? [...this.options, ...items] : items;
    }
    setPage() {
        return this.infiniteScroll ? 1 : undefined;
    }
    setScrollingControl() {
        return this.infiniteScroll ? true : false;
    }
    focusItem() {
        this.poListbox?.listboxItemList?.nativeElement.focus();
        setTimeout(() => {
            let item;
            if (this.selectedValue) {
                item = document.querySelector('.po-listbox-item[aria-selected="true"]');
            }
            else {
                item = document.querySelectorAll('.po-listbox-item')[0];
            }
            this.poListbox?.listboxItemList?.nativeElement.focus();
            item?.focus();
        });
    }
    static ɵfac = function PoComboComponent_Factory(t) { return new (t || PoComboComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoComboFilterService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoComboComponent, selectors: [["po-combo"]], contentQueries: function PoComboComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoComboOptionTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comboOptionTemplate = _t.first);
        } }, viewQuery: function PoComboComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$V, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$o, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$b, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$6, 7, ElementRef);
            i0.ɵɵviewQuery(_c4$2, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poListbox = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([
                PoComboFilterService,
                PoControlPositionService,
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoComboComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoComboComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 19, vars: 30, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], ["cdkOverlayOrigin", "", 1, "po-field-container-content", "po-combo-container-content"], ["trigger", "cdkOverlayOrigin"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["autocomplete", "off", "type", "text", 1, "po-combo-input", 3, "ngClass", "disabled", "id", "placeholder", "required", "click", "keyup", "blur", "keydown"], ["inp", ""], [1, "po-field-icon-container-right"], ["tabindex", "0", "role", "button", "class", "po-combo-clean po-icon-input", 3, "p-element-ref", "p-change-event", "click", "keydown.enter", 4, "ngIf"], [1, "po-combo-arrow", "po-field-icon", 3, "click"], ["iconArrow", ""], [3, "p-icon"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["dropdownDefault", ""], ["dropdownCDK", ""], [3, "p-help", "p-disabled"], ["dropdownListbox", ""], [1, "po-field-icon-container-left"], [1, "po-field-icon", "po-icon-input", 3, "p-icon"], ["tabindex", "0", "role", "button", 1, "po-combo-clean", "po-icon-input", 3, "p-element-ref", "p-change-event", "click", "keydown.enter"], [4, "ngTemplateOutlet"], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen"], [1, "po-combo-container", 3, "hidden"], ["containerElement", ""], ["p-type", "option", 3, "p-items", "p-field-value", "p-field-label", "p-template", "p-search-value", "p-infinite-loading", "p-infinite-scroll", "p-filtering", "p-cache", "p-filter-mode", "p-visible", "p-is-searching", "p-should-mark-letter", "p-compare-cache", "p-combo-service", "p-infinite-scroll-distance", "p-selectcombo-item", "p-update-infinite-scroll", "p-close"], ["poListbox", "", "contentElement", ""]], template: function PoComboComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2);
            i0.ɵɵtemplate(3, PoComboComponent_div_3_Template, 2, 3, "div", 3);
            i0.ɵɵelementStart(4, "input", 4, 5);
            i0.ɵɵlistener("click", function PoComboComponent_Template_input_click_4_listener() { return ctx.toggleComboVisibility(); })("keyup", function PoComboComponent_Template_input_keyup_4_listener($event) { return ctx.onKeyUp($event); })("blur", function PoComboComponent_Template_input_blur_4_listener() { return ctx.onBlur(); })("keyup", function PoComboComponent_Template_input_keyup_4_listener($event) { return ctx.searchOnEnterOrArrow($event, $event.target.value); })("keydown", function PoComboComponent_Template_input_keydown_4_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtemplate(7, PoComboComponent_po_clean_7_Template, 1, 2, "po-clean", 7);
            i0.ɵɵelementStart(8, "div", 8, 9);
            i0.ɵɵlistener("click", function PoComboComponent_Template_div_click_8_listener() { return ctx.toggleComboVisibility(true); });
            i0.ɵɵelement(10, "po-icon", 10);
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(11, PoComboComponent_ng_container_11_Template, 1, 0, "ng-container", 11)(12, PoComboComponent_ng_template_12_Template, 1, 1, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor)(14, PoComboComponent_ng_template_14_Template, 1, 2, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelement(16, "po-field-container-bottom", 14);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(17, PoComboComponent_ng_template_17_Template, 5, 17, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(5);
            const _r7 = i0.ɵɵreference(13);
            const _r9 = i0.ɵɵreference(15);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon);
            i0.ɵɵproperty("ngClass", ctx.clean && _r2.value ? "po-input-double-icon-right" : "po-input-icon-right")("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && _r2.value);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-field-icon", !ctx.disabled)("po-combo-default-border", !ctx.disabled && _r2.value)("po-combo-background-arrow-up", !ctx.disabled && ctx.comboOpen);
            i0.ɵɵproperty("p-icon", ctx.comboOpen ? "ICON_ARROW_UP po-icon-input" : "ICON_ARROW_DOWN po-icon-input");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.appendBox)("ngIfThen", _r9)("ngIfElse", _r7);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i5$1.CdkConnectedOverlay, i5$1.CdkOverlayOrigin, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent, PoListBoxComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboComponent, [{
        type: Component,
        args: [{ selector: 'po-combo', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    PoComboFilterService,
                    PoControlPositionService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\" class=\"po-field-container-content po-combo-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon po-icon-input\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-combo-input\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (blur)=\"onBlur()\"\n      (keyup)=\"searchOnEnterOrArrow($event, $event.target.value)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"literals.clean\"\n        class=\"po-combo-clean po-icon-input\"\n        *ngIf=\"clean && !disabled && inp.value\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n        (click)=\"clear(null); $event.preventDefault()\"\n        (keydown.enter)=\"clearAndFocus(); $event.preventDefault()\"\n      >\n      </po-clean>\n\n      <div\n        #iconArrow\n        class=\"po-combo-arrow po-field-icon\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"toggleComboVisibility(true)\"\n      >\n        <po-icon\n          [p-icon]=\"comboOpen ? 'ICON_ARROW_UP po-icon-input' : 'ICON_ARROW_DOWN po-icon-input'\"\n          [class.po-field-icon]=\"!disabled\"\n          [class.po-combo-default-border]=\"!disabled && inp.value\"\n          [class.po-combo-background-arrow-up]=\"!disabled && comboOpen\"\n        ></po-icon>\n      </div>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"appendBox; then dropdownCDK; else dropdownDefault\"> </ng-container>\n\n  <ng-template #dropdownDefault>\n    <ng-container *ngTemplateOutlet=\"dropdownListbox\"> </ng-container>\n  </ng-template>\n\n  <ng-template #dropdownCDK>\n    <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"trigger\" [cdkConnectedOverlayOpen]=\"true\">\n      <ng-container *ngTemplateOutlet=\"dropdownListbox\"></ng-container>\n    </ng-template>\n  </ng-template>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #dropdownListbox>\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n    <po-listbox\n      #poListbox\n      #contentElement\n      p-type=\"option\"\n      [p-items]=\"visibleOptions\"\n      [p-field-value]=\"dynamicValue\"\n      [p-field-label]=\"dynamicLabel\"\n      [p-template]=\"comboOptionTemplate\"\n      [p-search-value]=\"getInputValue()\"\n      [p-infinite-loading]=\"infiniteLoading\"\n      [p-infinite-scroll]=\"infiniteScroll\"\n      [p-filtering]=\"isFiltering\"\n      [p-cache]=\"cache\"\n      (p-selectcombo-item)=\"onOptionClick($event, $event.event)\"\n      [p-filter-mode]=\"filterMode\"\n      [p-visible]=\"comboOpen\"\n      [p-is-searching]=\"isServerSearching\"\n      [p-should-mark-letter]=\"shouldMarkLetters\"\n      [p-compare-cache]=\"compareObjects(cacheOptions, visibleOptions)\"\n      [p-combo-service]=\"service\"\n      [p-infinite-scroll-distance]=\"infiniteScrollDistance\"\n      (p-update-infinite-scroll)=\"showMoreInfiniteScroll()\"\n      (p-close)=\"onCloseCombo()\"\n    ></po-listbox>\n  </div>\n</ng-template>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.IterableDiffers }, { type: PoComboFilterService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: PoControlPositionService }, { type: PoLanguageService }], { comboOptionTemplate: [{
            type: ContentChild,
            args: [PoComboOptionTemplateDirective, { static: true }]
        }], containerElement: [{
            type: ViewChild,
            args: ['containerElement', { read: ElementRef }]
        }], contentElement: [{
            type: ViewChild,
            args: ['contentElement', { read: ElementRef }]
        }], iconElement: [{
            type: ViewChild,
            args: ['iconArrow', { read: ElementRef, static: true }]
        }], inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], poListbox: [{
            type: ViewChild,
            args: ['poListbox']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoComboComponent, { className: "PoComboComponent", filePath: "lib/components/po-field/po-combo/po-combo.component.ts", lineNumber: 102 }); })();

const poDatepickerRangeLiteralsDefault = {
    en: {
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
        invalidDate: 'Invalid date',
        dateOutOfPeriod: 'Date out of period'
    },
    es: {
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
        invalidDate: 'Fecha invalida',
        dateOutOfPeriod: 'Fecha fuera de período'
    },
    pt: {
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
        invalidDate: 'Data inválida',
        dateOutOfPeriod: 'Data fora do período'
    },
    ru: {
        invalidFormat: 'Дата в неверном формате',
        startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
        invalidDate: 'Недействительная дата',
        dateOutOfPeriod: 'дата вне периода'
    }
};

/**
 * @description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 */
class PoDatepickerRangeBaseComponent {
    poDateService;
    languageService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    onChange = new EventEmitter();
    errorMessage = '';
    dateRange = { start: '', end: '' };
    format = 'dd/mm/yyyy';
    isDateRangeInputFormatValid = true;
    isStartDateRangeInputValid = true;
    onTouchedModel;
    poMaskObject;
    _clean = false;
    _disabled;
    _endDate;
    _literals;
    _maxDate;
    _minDate;
    _noAutocomplete = false;
    _readonly = false;
    _required = false;
    _startDate;
    _locale;
    language;
    onChangeModel;
    validatorChange;
    get isDateRangeInputValid() {
        return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita ação para limpar o campo.
     *
     * @default `false`
     */
    set clean(clean) {
        this._clean = convertToBoolean(clean);
    }
    get clean() {
        return this._clean;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data final.
     */
    set endDate(date) {
        this._endDate = this.convertPatternDateFormat(date);
        this.dateRange.end = this.endDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get endDate() {
        return this._endDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-datepicker-range`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format',
     *    startDateGreaterThanEndDate: 'End date less than start date'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-datepicker-range
     *   [p-literals]="customLiterals">
     * </po-datepicker-range>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poDatepickerRangeLiteralsDefault[poLocaleDefault],
                ...poDatepickerRangeLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poDatepickerRangeLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poDatepickerRangeLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker-range`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker-range`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.dateRange);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @optional
     *
     * @description
     *
     * Data inicial.
     */
    set startDate(date) {
        this._startDate = this.convertPatternDateFormat(date);
        this.dateRange.start = this.startDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get startDate() {
        return this._startDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma que o calendário utilizará para exibir as datas.
     *
     * > O locale padrão será recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
        else {
            this._locale = this.language;
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.languageService.getDateSeparator(this.locale)));
        }
    }
    get locale() {
        return this._locale || this.language;
    }
    constructor(poDateService, languageService) {
        this.poDateService = poDateService;
        this.languageService = languageService;
        this.language = languageService.getShortLanguage();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(control) {
        const value = control.value || {};
        const startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        const endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return {
                required: {
                    valid: false
                }
            };
        }
        if (!this.verifyValidDate(startDate, endDate)) {
            this.errorMessage = this.literals.invalidDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if ((startDate && !this.validateDateInRange(startDate)) || (endDate && !this.validateDateInRange(endDate))) {
            this.errorMessage = this.literals.dateOutOfPeriod;
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateDateInRange(startDate) {
        return validateDateRange(convertIsoToDate(startDate, false, false), this._minDate, this._maxDate);
    }
    writeValue(dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask(format = this.format) {
        let mask = format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
    dateFormatFailed(value) {
        return value && !this.poDateService.isValidIso(value);
    }
    // Executa a função onChange
    updateModel(value) {
        const model = typeof value === 'object' ? { ...value } : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    }
    validateModel(value) {
        const model = { ...value };
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    verifyValidDate(startDate, endDate) {
        if (startDate !== '' && endDate !== '') {
            return this.dateIsValid(startDate) && this.dateIsValid(endDate);
        }
        else if (startDate !== '') {
            return this.dateIsValid(startDate);
        }
        else {
            return this.dateIsValid(endDate);
        }
    }
    convertPatternDateFormat(value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    }
    dateRangeFailed(startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    }
    dateRangeFormatFailed(startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    }
    dateRangeObjectFailed(value) {
        return value && !this.isDateRangeObject(value);
    }
    isDateRangeObject(value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    }
    requiredDateRangeFailed(startDate, endDate) {
        return (this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate));
    }
    dateIsValid(date) {
        const [strYear, strMonth, strDay] = date.split('-');
        const year = Number(strYear);
        const month = Number(strMonth);
        const day = Number(strDay);
        //verificação dos meses com 31 dias
        if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
            return day < 1 || day > 31 ? false : true;
        }
        else if (month === 4 || month === 6 || month === 9 || month === 11) {
            //verificação dos meses com 30 dias
            return day < 1 || day > 30 ? false : true;
        }
        else {
            //verificacao de ano bissexto para verificar até qual dia irá o mês de fevereiro
            if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
                return day < 1 || day > 29 ? false : true;
            }
            else {
                return day < 1 || day > 28 ? false : true;
            }
        }
    }
    static ɵfac = function PoDatepickerRangeBaseComponent_Factory(t) { return new (t || PoDatepickerRangeBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDatepickerRangeBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], help: [i0.ɵɵInputFlags.None, "p-help", "help"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], clean: [i0.ɵɵInputFlags.None, "p-clean", "clean"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], endDate: [i0.ɵɵInputFlags.None, "p-end-date", "endDate"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], minDate: [i0.ɵɵInputFlags.None, "p-min-date", "minDate"], maxDate: [i0.ɵɵInputFlags.None, "p-max-date", "maxDate"], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], startDate: [i0.ɵɵInputFlags.None, "p-start-date", "startDate"], locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"] }, outputs: { onChange: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeBaseComponent, [{
        type: Directive
    }], () => [{ type: PoDateService }, { type: PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], help: [{
            type: Input,
            args: ['p-help']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], onChange: [{
            type: Output,
            args: ['p-change']
        }], clean: [{
            type: Input,
            args: ['p-clean']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], endDate: [{
            type: Input,
            args: ['p-end-date']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], startDate: [{
            type: Input,
            args: ['p-start-date']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }] }); })();

const _c0$U = ["dateRangeField"];
const _c1$n = ["endDateInput"];
const _c2$a = ["startDateInput"];
const _c3$5 = ["iconCalendar"];
const _c4$1 = ["calendarPicker"];
function PoDatepickerRangeComponent_po_clean_12_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 15);
    i0.ɵɵlistener("p-change-event", function PoDatepickerRangeComponent_po_clean_12_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.clear()); });
    i0.ɵɵelementEnd();
} }
function PoDatepickerRangeComponent_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 16, 17)(3, "po-calendar", 18);
    i0.ɵɵlistener("ngModelChange", function PoDatepickerRangeComponent_ng_container_17_Template_po_calendar_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onCalendarChange($event)); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngModel", ctx_r5.dateRange)("p-max-date", ctx_r5.maxDate)("p-min-date", ctx_r5.minDate)("p-locale", ctx_r5.locale);
} }
const arrowLeftKey = 37;
const arrowRightKey = 39;
const backspaceKey = 8;
const poDatepickerRangeDateLengthDefault = 10;
const poCalendarContentOffset = 8;
const poCalendarPositionDefault = 'bottom-left';
/* istanbul ignore next */
const providers$5 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    PoControlPositionService
];
/**
 * @docsExtends PoDatepickerRangeBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
class PoDatepickerRangeComponent extends PoDatepickerRangeBaseComponent {
    changeDetector;
    controlPosition;
    renderer;
    cd;
    poLanguageService;
    dateRangeField;
    endDateInput;
    startDateInput;
    iconCalendar;
    calendarPicker;
    isCalendarVisible = false;
    clickListener;
    eventResizeListener;
    poDatepickerRangeElement;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    get enableCleaner() {
        return this.clean && (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
    }
    get endDateInputName() {
        return 'end-date';
    }
    get endDateInputValue() {
        return this.endDateInput.nativeElement.value;
    }
    get getErrorMessage() {
        return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
    }
    get isDateRangeInputUncompleted() {
        return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
            this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
    }
    get isDirtyDateRangeInput() {
        return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
    }
    get startDateInputName() {
        return 'start-date';
    }
    get startDateInputValue() {
        return this.startDateInput.nativeElement.value;
    }
    constructor(changeDetector, controlPosition, renderer, cd, poLanguageService, poDateService, poDatepickerRangeElement) {
        super(poDateService, poLanguageService);
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.cd = cd;
        this.poLanguageService = poLanguageService;
        this.poDatepickerRangeElement = poDatepickerRangeElement;
    }
    static getKeyCode(event) {
        return event.keyCode || event.which;
    }
    static getTargetElement(event) {
        return event.target || event.srcElement;
    }
    static isValidKey(keyCode) {
        const isNumericKey = keyCode >= 48 && keyCode <= 57;
        const isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnInit() {
        // Classe de máscara
        this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.poLanguageService.getDateSeparator(this.locale)));
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.validateModel(this.dateRange);
        }
        if (changes.locale) {
            if (this.dateRange) {
                this.updateScreenByModel(this.dateRange);
            }
            this.poMaskObject = this.buildMask(replaceFormatSeparator(this.format, this.poLanguageService.getDateSeparator(this.locale)));
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    clear() {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    eventOnClick($event) {
        this.poMaskObject.click($event);
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    }
    onBlur(event) {
        this.onTouchedModel?.();
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.updateModelByScreen(isStartDateTargetEvent);
        this.removeFocusFromDatePickerRangeField();
    }
    onCalendarChange({ start, end }) {
        const isStartDateTargetEvent = start && !end;
        this.updateScreenByModel({ start: start || '', end: end || '' });
        this.updateModelByScreen(isStartDateTargetEvent, start || '', end || '');
        if (start && end) {
            setTimeout(() => {
                this.isCalendarVisible = false;
                this.cd.markForCheck();
            }, 300);
        }
    }
    onFocus(event) {
        this.applyFocusOnDatePickerRangeField();
        this.poMaskObject.resetPositions(event);
    }
    onKeydown(event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    }
    onKeyup(event) {
        if (this.readonly) {
            return;
        }
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelWhenComplete(isStartDateTargetEvent, this.startDateInputValue, this.endDateInputValue);
    }
    resetDateRangeInputValidation() {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    }
    toggleCalendar() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.isCalendarVisible = !this.isCalendarVisible;
        this.changeDetector.detectChanges();
        if (this.isCalendarVisible) {
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    }
    updateScreenByModel(model) {
        const dateRange = { start: model.start, end: model.end };
        const isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        const isDateValid = date => !this.dateFormatFailed(date) && isStartDateValid;
        const endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        const startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
        this.changeDetector.detectChanges();
    }
    applyFocusOnDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    }
    formatDate(format, day = '', month = '', year = '') {
        let dateFormatted = replaceFormatSeparator(format || this.format, this.poLanguageService.getDateSeparator(this.locale));
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    }
    formatScreenToModel(value = '') {
        const [day, month, year] = value.split(this.poLanguageService.getDateSeparator(this.locale));
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    }
    formatModelToScreen(value = '') {
        const [year, month, day] = value.split('-');
        return value ? this.formatDate(this.format, day, month, year) : '';
    }
    getDateRangeFormatValidation(startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid && this.verifyValidDate(startDate, endDate),
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    }
    getValidatedModel(startDate, endDate, isStartDateTargetEvent) {
        const dateRangeModel = { start: '', end: '' };
        dateRangeModel.end =
            (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start =
            (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                ? startDate
                : '';
        return dateRangeModel;
    }
    hasAttrCalendar(element) {
        const attrCalendar = 'attr-calendar';
        return element?.hasAttribute(attrCalendar) || element?.parentElement?.hasAttribute(attrCalendar);
    }
    hasInvalidClass() {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.isCalendarVisible = false;
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    isEqualBeforeValue(startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    }
    isSetFocusOnBackspace(event) {
        return (event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 &&
            this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey);
    }
    onScroll = () => {
        if (this.isCalendarVisible) {
            this.controlPosition.adjustPosition(poCalendarPositionDefault);
        }
    };
    removeFocusFromDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    }
    setDateRangeInputValidation(startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    }
    setFocus(event) {
        const inputElement = PoDatepickerRangeComponent.getTargetElement(event);
        const keyCode = PoDatepickerRangeComponent.getKeyCode(event);
        const inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    }
    setFocusAndPosition(position, inputElement, selectionRange) {
        this.focusOnElement(inputElement);
        setTimeout(() => {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            this.poMaskObject.initialPosition = position;
            this.poMaskObject.finalPosition = position;
        });
    }
    focusOnElement(inputElement) {
        inputElement.nativeElement.focus();
    }
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setCalendarPosition() {
        this.controlPosition.setElements(this.calendarPicker.nativeElement, poCalendarContentOffset, this.dateRangeField, ['bottom-left', 'bottom-right', 'top-left', 'top-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    }
    setFocusOnArrowLeft(keyCode, inputName) {
        const isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            const inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    }
    setFocusOnArrowRight(keyCode, inputName, inputElement) {
        const isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    setFocusOnBackspace() {
        const inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    }
    setFocusOnStartDateCompleted(keyCode, inputName) {
        const isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        const isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        const isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    updateModelWhenComplete(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = this.formatScreenToModel(endDate);
        const startDateFormatted = this.formatScreenToModel(startDate);
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit({ ...this.dateRange });
        }
    }
    updateModelByScreen(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = endDate || this.formatScreenToModel(this.endDateInputValue);
        const startDateFormatted = startDate || this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit({ ...this.dateRange });
        }
        if (!dateFormatValidation.isValid && this.verifyFormattedDates(startDateFormatted, endDateFormatted)) {
            this.dateRange = { ...dateFormatValidation.dateRangeModel };
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    }
    verifyFormattedDates(start, end) {
        return !!start || !!end;
    }
    wasClickedOnPicker(event) {
        if (!this.isCalendarVisible) {
            return;
        }
        if (!this.calendarPicker.nativeElement.contains(event.target) &&
            !this.iconCalendar.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.isCalendarVisible = false;
        }
        this.cd.markForCheck();
    }
    static ɵfac = function PoDatepickerRangeComponent_Factory(t) { return new (t || PoDatepickerRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDatepickerRangeComponent, selectors: [["po-datepicker-range"]], viewQuery: function PoDatepickerRangeComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$U, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$n, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$a, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$5, 7, ElementRef);
            i0.ɵɵviewQuery(_c4$1, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateRangeField = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconCalendar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendarPicker = _t.first);
        } }, features: [i0.ɵɵProvidersFeature(providers$5), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 18, vars: 30, consts: [[3, "p-disabled", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-datepicker-range-field", "po-input"], ["dateRangeField", ""], [1, "po-datepicker-range-start-date"], ["maxlength", "10", "type", "text", 1, "po-datepicker-range-input", 3, "autocomplete", "disabled", "name", "readonly", "blur", "focus", "keydown", "keyup", "click"], ["startDateInput", ""], [1, "po-datepicker-range-separator"], [1, "po-datepicker-range-end-date"], ["endDateInput", ""], [1, "po-datepicker-range-icon"], ["class", "po-icon-input", 3, "p-change-event", 4, "ngIf"], [3, "p-icon", "click"], ["iconCalendar", ""], [3, "p-help", "p-disabled", "p-error-pattern"], [4, "ngIf"], [1, "po-icon-input", 3, "p-change-event"], [1, "po-calendar-range-picker"], ["calendarPicker", ""], ["p-mode", "range", 3, "ngModel", "p-max-date", "p-min-date", "p-locale", "ngModelChange"]], template: function PoDatepickerRangeComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2)(3, "div", 3)(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_4_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_4_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_4_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtext(7, "-");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 7)(9, "input", 4, 8);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_9_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_9_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_9_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_9_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_9_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(11, "div", 9);
            i0.ɵɵtemplate(12, PoDatepickerRangeComponent_po_clean_12_Template, 1, 0, "po-clean", 10);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(13, "div", 9)(14, "po-icon", 11, 12);
            i0.ɵɵlistener("click", function PoDatepickerRangeComponent_Template_po_icon_click_14_listener() { return ctx.toggleCalendar(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵelement(16, "po-field-container-bottom", 13);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(17, PoDatepickerRangeComponent_ng_container_17_Template, 4, 4, "ng-container", 14);
        } if (rf & 2) {
            i0.ɵɵclassProp("po-date-picker-container-disabled", ctx.disabled);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-datepicker-range-field-disabled", ctx.disabled);
            i0.ɵɵattribute("disabled", ctx.disabled);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.startDateInputName)("readonly", ctx.readonly);
            i0.ɵɵattribute("aria-label", ctx.label);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.endDateInputName)("readonly", ctx.readonly);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.enableCleaner);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled || ctx.readonly);
            i0.ɵɵproperty("p-icon", !ctx.disabled || !ctx.readonly ? "ICON_CALENDAR po-clickable" : "ICON_CALENDAR");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorMessage);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isCalendarVisible);
        } }, dependencies: [i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoCleanComponent, PoCalendarComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeComponent, [{
        type: Component,
        args: [{ selector: 'po-datepicker-range', providers: providers$5, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container\n  [class.po-date-picker-container-disabled]=\"disabled\"\n  [p-disabled]=\"disabled\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div\n    #dateRangeField\n    class=\"po-datepicker-range-field po-input\"\n    [class.po-datepicker-range-field-disabled]=\"disabled\"\n    [attr.disabled]=\"disabled\"\n  >\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [attr.aria-label]=\"label\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean class=\"po-icon-input\" *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-icon\n        #iconCalendar\n        [p-icon]=\"!disabled || !readonly ? 'ICON_CALENDAR po-clickable' : 'ICON_CALENDAR'\"\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"toggleCalendar()\"\n      >\n      </po-icon>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorMessage\"\n  ></po-field-container-bottom>\n</po-field-container>\n\n<ng-container *ngIf=\"isCalendarVisible\">\n  <div #calendarPicker class=\"po-calendar-range-picker\">\n    <po-calendar\n      p-mode=\"range\"\n      [ngModel]=\"dateRange\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      [p-locale]=\"locale\"\n      (ngModelChange)=\"onCalendarChange($event)\"\n    ></po-calendar>\n  </div>\n</ng-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoControlPositionService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: PoLanguageService }, { type: PoDateService }, { type: i0.ElementRef }], { dateRangeField: [{
            type: ViewChild,
            args: ['dateRangeField', { read: ElementRef, static: true }]
        }], endDateInput: [{
            type: ViewChild,
            args: ['endDateInput', { read: ElementRef, static: true }]
        }], startDateInput: [{
            type: ViewChild,
            args: ['startDateInput', { read: ElementRef, static: true }]
        }], iconCalendar: [{
            type: ViewChild,
            args: ['iconCalendar', { read: ElementRef, static: true }]
        }], calendarPicker: [{
            type: ViewChild,
            args: ['calendarPicker', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDatepickerRangeComponent, { className: "PoDatepickerRangeComponent", filePath: "lib/components/po-field/po-datepicker-range/po-datepicker-range.component.ts", lineNumber: 82 }); })();

/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}".
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS): <br>
 * Obs: Só é possível realizar alterações ao adicionar a classe `.po-input`
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--text-color-placeholder`             | Cor do texto placeholder                              | `var(--color-neutral-light-30)`                 |
 * | `--color`                              | Cor pincipal do input                                 | `var(--color-neutral-dark-70)`                  |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                 |
 * | `--padding`                            | Preenchimento                                         |  `0 0.5rem`                                     |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                  |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-dark)`                    |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                |
 * | **Focused**                            |                                                       |                                                 |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                   |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Disabled**                           |                                                       |                                                 |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-neutral-light-30)`                 |
 * | `--background-disabled`                | Cor de background no estado disabled                  | `var(--color-neutral-light-20)`                 |
 * | `--text-color-disabled`                | Cor do texto no estado disabled                       | `var(--color-neutral-dark-70)`                  |
 *
 * <br>
 */
class PoInputBaseComponent {
    cd;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-input p-icon="po-icon-user" p-label="PO input"></po-input>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-input p-icon="fa fa-podcast" p-label="PO input"></po-input>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-input [p-icon]="template" p-label="input template ionic"></po-input>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Sempre emite as alterações do model mesmo quando o valor atual for igual ao valor anterior.
     *
     * @default `false`
     */
    emitAllChanges = false;
    /** Rótulo do campo. */
    label;
    /** Texto de apoio do campo. */
    help;
    /** Nome e identificador do campo. */
    name;
    /**
     * @description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     */
    errorPattern = '';
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @description
     *
     * Converte o conteúdo do campo em maiúsulo automaticamente.
     *
     */
    upperCase = false;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao sair do campo.
     */
    blur = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao entrar do campo.
     */
    enter = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor e deixar o campo.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do model.
     */
    changeModel = new EventEmitter();
    type;
    onChangePropagate = null;
    objMask;
    modelLastUpdate;
    onTouched = null;
    passedWriteValue = false;
    validatorChange;
    _maxlength;
    _minlength;
    _noAutocomplete = false;
    _placeholder = '';
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * > No componente `po-password` será definido como `new-password`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * @default `false`
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    disabled = false;
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    /** Indica que o campo será somente leitura. */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    readonly = false;
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    required = false;
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /** Se verdadeiro, o campo receberá um botão para ser limpo. */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    clean = false;
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(p-mask)` será automaticamente validado por ela, porém
     * é possível definir um p-pattern para substituir a validação da máscara.
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    pattern;
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._maxlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._minlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    get minlength() {
        return this._minlength;
    }
    /**
     * @description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade p-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    mask = '';
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
    }
    /**
     * @description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * @default `false`
     */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    maskFormatModel = false;
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof PoMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    constructor(cd) {
        this.cd = cd;
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
    }
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    callUpdateModelWithTimeout(value) {
        setTimeout(() => this.updateModel(value));
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value || this.emitAllChanges) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd?.markForCheck();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return {
                pattern: {
                    valid: false
                }
            };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
        this.cd?.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout(() => {
                this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    }
    static ɵfac = function PoInputBaseComponent_Factory(t) { return new (t || PoInputBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], emitAllChanges: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-emit-all-changes", "emitAllChanges", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], name: "name", errorPattern: [i0.ɵɵInputFlags.None, "p-error-pattern", "errorPattern"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], upperCase: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-upper-case", "upperCase", convertToBoolean], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], setDisabled: [i0.ɵɵInputFlags.None, "p-disabled", "setDisabled"], setReadonly: [i0.ɵɵInputFlags.None, "p-readonly", "setReadonly"], setRequired: [i0.ɵɵInputFlags.None, "p-required", "setRequired"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], setClean: [i0.ɵɵInputFlags.None, "p-clean", "setClean"], setPattern: [i0.ɵɵInputFlags.None, "p-pattern", "setPattern"], maxlength: [i0.ɵɵInputFlags.None, "p-maxlength", "maxlength"], minlength: [i0.ɵɵInputFlags.None, "p-minlength", "minlength"], setMask: [i0.ɵɵInputFlags.None, "p-mask", "setMask"], setMaskFormatModel: [i0.ɵɵInputFlags.None, "p-mask-format-model", "setMaskFormatModel"] }, outputs: { blur: "p-blur", enter: "p-enter", change: "p-change", changeModel: "p-change-model" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.ChangeDetectorRef }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], emitAllChanges: [{
            type: Input,
            args: [{ alias: 'p-emit-all-changes', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], name: [{
            type: Input,
            args: ['name']
        }], errorPattern: [{
            type: Input,
            args: ['p-error-pattern']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], upperCase: [{
            type: Input,
            args: [{ alias: 'p-upper-case', transform: convertToBoolean }]
        }], blur: [{
            type: Output,
            args: ['p-blur']
        }], enter: [{
            type: Output,
            args: ['p-enter']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], setDisabled: [{
            type: Input,
            args: ['p-disabled']
        }], setReadonly: [{
            type: Input,
            args: ['p-readonly']
        }], setRequired: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], setClean: [{
            type: Input,
            args: ['p-clean']
        }], setPattern: [{
            type: Input,
            args: ['p-pattern']
        }], maxlength: [{
            type: Input,
            args: ['p-maxlength']
        }], minlength: [{
            type: Input,
            args: ['p-minlength']
        }], setMask: [{
            type: Input,
            args: ['p-mask']
        }], setMaskFormatModel: [{
            type: Input,
            args: ['p-mask-format-model']
        }] }); })();

const _c0$T = ["inp"];
function PoDecimalComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵelement(1, "po-icon", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoDecimalComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoDecimalComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
} }
const poDecimalDefaultDecimalsLength = 2;
const poDecimalDefaultThousandMaxlength = 13;
const poDecimalMaxDecimalsLength = 15;
const poDecimalTotalLengthLimit = 16;
/**
 *
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:
 *  + Aceita apenas números;
 *  + Utiliza ',' como separador de decimal;
 *  + Utiliza '.' para separação de milhar;
 *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * > **Importante:**
 * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,
 * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.
 * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.
 *
 * @example
 *
 * <example name="po-decimal-basic" title="PO Decimal Basic">
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-labs" title="PO Decimal Labs">
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage" title="PO Decimal - Hourly Wage">
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage-reactive-form" title="PO Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
class PoDecimalComponent extends PoInputBaseComponent {
    el;
    poLanguageService;
    inputEl;
    id = `po-decimal[${uuid()}]`;
    _decimalsLength = poDecimalDefaultDecimalsLength;
    _thousandMaxlength = poDecimalDefaultThousandMaxlength;
    _locale;
    _min;
    _max;
    decimalSeparator;
    fireChange = false;
    isKeyboardAndroid = false;
    minusSign = '-';
    oldDotsLength = null;
    thousandSeparator;
    valueBeforeChange;
    regex = {
        thousand: new RegExp('\\' + ',', 'g'),
        decimal: new RegExp('\\' + '.', 'g')
    };
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade máxima de casas decimais.
     *
     * > **Importante:**
     * - O valor máximo permitido é 15;
     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
     * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;
     * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).
     *
     * @default `2`
     */
    set decimalsLength(value) {
        let decimalsLength = convertToInt(value);
        decimalsLength = this.isValueBetweenAllowed(decimalsLength, poDecimalMaxDecimalsLength)
            ? decimalsLength
            : poDecimalDefaultDecimalsLength;
        if (this.isGreaterThanTotalLengthLimit(decimalsLength, this.thousandMaxlength)) {
            this.thousandMaxlength = poDecimalTotalLengthLimit - decimalsLength;
        }
        this._decimalsLength = decimalsLength;
    }
    get decimalsLength() {
        return this._decimalsLength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade máxima de dígitos antes do separador decimal.
     *
     * > **Importante:**
     * - O valor máximo permitido é 13;
     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
     * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.
     *
     * @default `13`
     */
    set thousandMaxlength(value) {
        let thousandMaxlength = convertToInt(value);
        if (this.decimalsLength > poDecimalDefaultDecimalsLength && !thousandMaxlength) {
            thousandMaxlength = poDecimalTotalLengthLimit - this.decimalsLength;
        }
        thousandMaxlength = this.isValueBetweenAllowed(thousandMaxlength, poDecimalDefaultThousandMaxlength)
            ? thousandMaxlength
            : poDecimalDefaultThousandMaxlength;
        if (this.isGreaterThanTotalLengthLimit(this.decimalsLength, thousandMaxlength)) {
            this.decimalsLength = poDecimalTotalLengthLimit - thousandMaxlength;
        }
        this._thousandMaxlength = thousandMaxlength;
    }
    get thousandMaxlength() {
        return this._thousandMaxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Informa o locale(país) para a formatação do valor.
     * Por padrão o valor será configurado segundo a o módulo [`I18n`](documentation/po-i18n)
     *
     * > Para ver quais linguagens suportadas acesse [`I18n`](documentation/po-i18n)
     *
     */
    set locale(locale) {
        this._locale = locale;
        this.setNumbersSeparators();
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor mínimo.
     */
    set min(value) {
        if (!isNaN(value)) {
            this._min = value;
            this.validateModel();
        }
        else if (!value) {
            this._min = undefined;
            this.validateModel();
        }
    }
    get min() {
        return this._min;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor máximo.
     */
    set max(value) {
        if (!isNaN(value)) {
            this._max = value;
            this.validateModel();
        }
        else if (!value) {
            this._max = undefined;
            this.validateModel();
        }
    }
    get max() {
        return this._max;
    }
    constructor(el, poLanguageService, cd) {
        super(cd);
        this.el = el;
        this.poLanguageService = poLanguageService;
        this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
    }
    ngOnInit() {
        this.setNumbersSeparators();
    }
    setNumbersSeparators() {
        const { decimalSeparator, thousandSeparator } = this.poLanguageService.getNumberSeparators(this._locale);
        this.decimalSeparator = decimalSeparator;
        this.thousandSeparator = thousandSeparator;
        this.regex = {
            thousand: new RegExp('\\' + thousandSeparator, 'g'),
            decimal: new RegExp('\\' + decimalSeparator, 'g')
        };
    }
    ngAfterViewInit() {
        this.verifyAutoFocus();
        this.setPaddingInput();
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    extraValidation(abstractControl) {
        const value = abstractControl.value;
        const thousandValue = Math.trunc(value);
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
        if (minFailed(this.min, value)) {
            return {
                min: {
                    valid: false
                }
            };
        }
        if (maxFailed(this.max, value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        if ((maxlengpoailed(this.thousandMaxlength, thousandValue) &&
            this.thousandMaxlength < poDecimalDefaultThousandMaxlength) ||
            maxlengpoailed(poDecimalTotalLengthLimit, value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        return null;
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    getScreenValue() {
        return this.inputEl ? this.inputEl.nativeElement.value : '';
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    }
    hasLetters(value = '') {
        return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
    }
    hasNotSpace(value = '') {
        return value.match(/^\S*$/);
    }
    isValidNumber(event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        const keyValue = String.fromCharCode(event.which);
        const validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && this.hasNotSpace(keyValue) && validKey;
    }
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    onBlur(event) {
        this.onTouched?.();
        const value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneDecimalSeparator(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            const valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            const formatedViewValue = this.formatToViewValue(valueWithoutThousandSeparator);
            this.setViewValue(formatedViewValue);
            if (!formatedViewValue) {
                this.callOnChange(undefined);
                return;
            }
        }
        this.blur.emit();
        this.controlChangeEmitter();
    }
    onFocus(event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    onInput(event) {
        const selectionStart = event.target.selectionStart;
        const selectionEnd = event.target.selectionEnd;
        let modelValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        const viewValue = this.formatMask(modelValue);
        // validação para não quebrar IE com placeholder definido e Input vazio
        if (viewValue) {
            this.setViewValue(viewValue);
            this.setCursorInput(event, selectionStart, selectionEnd);
        }
        this.callOnChange(this.formatToModelValue(modelValue));
    }
    onInputKeyboardAndroid(event) {
        const inputValue = event.target.value;
        const selectionStart = event.target.selectionStart;
        const hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            const position = selectionStart - 1;
            const key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    }
    onKeyPress(event) {
        this.isValidKey(event);
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    writeValueModel(value) {
        let formatedViewValue;
        if (this.inputEl) {
            if (value || value === 0) {
                formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (formatedViewValue) {
            this.change.emit(value);
        }
    }
    getErrorPatternMessage() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    // responsável por adicionar 0 antes da virgula (decimalSeparator).
    addZeroBefore(value) {
        const isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? `0${value}` : value;
    }
    containsComma(value) {
        return value.includes(this.decimalSeparator);
    }
    containsMoreThanOneDecimalSeparator(value = '') {
        const foundComma = value.match(this.regex.decimal);
        return !!(foundComma && foundComma.length > 1);
    }
    controlChangeEmitter() {
        const elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    formatMask(value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            const regex = new RegExp(`(\\d)(?=(\\d{3})+(?!\\d)${this.decimalSeparator})`, 'g');
            return value.toString().replace(regex, `$1${this.thousandSeparator}`);
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, `$1${this.thousandSeparator}`);
    }
    formatToModelValue(value) {
        const formattedValue = this.replaceCommaToDot(value);
        const parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    }
    formatToViewValue(value) {
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        const numberValue = Number(value).toFixed(this.decimalsLength);
        const valueBeforeDot = this.getValueBeforeSeparator(numberValue, '.');
        const valueAfterDot = this.getValueAfterSeparator(numberValue, '.');
        const formatedNumber = this.formatMask(valueBeforeDot);
        if (formatedNumber === 'NaN') {
            return '';
        }
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return `${formatedNumber}${this.decimalSeparator}${valueAfterDot}`;
        }
    }
    formatValueWithoutThousandSeparator(value = '') {
        return value.toString().replace(this.regex.thousand, '');
    }
    getValueAfterSeparator(value = '', separator) {
        return value.split(separator)[1] || '';
    }
    getValueBeforeSeparator(value = '', separator) {
        return value.split(separator)[0] || '';
    }
    hasLessDot(value) {
        if (value) {
            const dots = value.match(this.regex.thousand);
            const dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    hasMoreDot(value) {
        if (value) {
            const dots = value.match(this.regex.thousand);
            const dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    hasMinusSignInvalidPosition(event) {
        const keyIsMinusSign = event.key === this.minusSign;
        const selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    }
    isInvalidKey(event, charCode) {
        const isInvalidNumber = !this.isValidNumber(event);
        return (this.verifyInsertComma(event) ||
            this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) ||
            this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) ||
            isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) ||
            this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode));
    }
    isGreaterThanTotalLengthLimit(decimalsMaxLength, thousandMaxlength) {
        return decimalsMaxLength + thousandMaxlength > poDecimalTotalLengthLimit;
    }
    isKeyDecimalSeparator(event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    }
    isPositionAfterDecimalSeparator(positionCursor, value) {
        const indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    }
    isSelectionStartDifferentSelectionEnd(target) {
        return target.selectionStart !== target.selectionEnd;
    }
    isValidKey(event, key) {
        const charCode = event.which || event.keyCode;
        const validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    }
    isValueBetweenAllowed(value, maxAllowed) {
        return value >= 0 && value <= maxAllowed;
    }
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode) {
        return charCode === 44 && this.decimalsLength === 0;
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    setInitialSelectionRange(target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    }
    replaceAt(value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    }
    replaceCommaToDot(value = '') {
        if (this.decimalSeparator === ',') {
            value = value.toString().replace(this.regex.decimal, '.');
        }
        return value;
    }
    setCursorInput(event, selectionStart, selectionEnd) {
        const target = event.target;
        const viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === '0' + this.decimalSeparator) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    }
    setPositionValue(event) {
        const value = event.target.value;
        const position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    }
    setViewValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    validateCursorPositionBeforeSeparator(event) {
        const target = event.target;
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        const valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event));
    }
    verifyThousandLength(event) {
        const target = event.target;
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value));
    }
    verifyInsertComma(e) {
        const hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    }
    verifyInsertMinusSign(event) {
        const value = event.target.value;
        const indexMinusSign = value.lastIndexOf(this.minusSign) !== -1;
        const positionMinusSign = value.lastIndexOf('-');
        const occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    }
    verifyValueAfterComma(event) {
        const value = event.target.value;
        const selectionStart = event.target.selectionStart;
        const valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return (this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength);
    }
    static ɵfac = function PoDecimalComponent_Factory(t) { return new (t || PoDecimalComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDecimalComponent, selectors: [["po-decimal"]], viewQuery: function PoDecimalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$T, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, inputs: { decimalsLength: [i0.ɵɵInputFlags.None, "p-decimals-length", "decimalsLength"], thousandMaxlength: [i0.ɵɵInputFlags.None, "p-thousand-maxlength", "thousandMaxlength"], locale: [i0.ɵɵInputFlags.None, "p-locale", "locale"], min: [i0.ɵɵInputFlags.None, "p-min", "min"], max: [i0.ɵɵInputFlags.None, "p-max", "max"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoDecimalComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoDecimalComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 24, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["inputmode", "decimal", "type", "text", 1, "po-input", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "blur", "focus", "input", "keypress"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", "po-icon-input", 3, "p-icon"], [1, "po-icon-input", 3, "p-element-ref", "p-change-event"]], template: function PoDecimalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoDecimalComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoDecimalComponent_Template_input_blur_3_listener($event) { return ctx.onBlur($event); })("focus", function PoDecimalComponent_Template_input_focus_3_listener($event) { return ctx.onFocus($event); })("input", function PoDecimalComponent_Template_input_input_3_listener($event) { return ctx.onInput($event); })("keypress", function PoDecimalComponent_Template_input_keypress_3_listener($event) { return ctx.onKeyPress($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoDecimalComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required);
            i0.ɵɵattribute("max", ctx.max)("min", ctx.min)("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPatternMessage());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDecimalComponent, [{
        type: Component,
        args: [{ selector: 'po-decimal', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoDecimalComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoDecimalComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon po-icon-input\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      inputmode=\"decimal\"\n      type=\"text\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (input)=\"onInput($event)\"\n      (keypress)=\"onKeyPress($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\" [p-error-pattern]=\"getErrorPatternMessage()\">\n  </po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }], { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], decimalsLength: [{
            type: Input,
            args: ['p-decimals-length']
        }], thousandMaxlength: [{
            type: Input,
            args: ['p-thousand-maxlength']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }], min: [{
            type: Input,
            args: ['p-min']
        }], max: [{
            type: Input,
            args: ['p-max']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDecimalComponent, { className: "PoDecimalComponent", filePath: "lib/components/po-field/po-decimal/po-decimal.component.ts", lineNumber: 81 }); })();

const _c0$S = ["inp"];
/* eslint-disable @angular-eslint/directive-class-suffix */
class PoInputGeneric extends PoInputBaseComponent {
    inputEl;
    type = 'text';
    el;
    valueBeforeChange;
    timeoutChange;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    constructor(el, cd) {
        super(cd);
        this.el = el;
    }
    onKeydown(e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
            if (this.passedWriteValue) {
                this.validateClassesForMask(true);
            }
        }
    }
    onKeyup(e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    }
    ngAfterViewInit() {
        this.afterViewInit();
    }
    afterViewInit() {
        this.verifyAutoFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    eventOnInput(e) {
        let value = '';
        if (!this.mask) {
            value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
        }
        else {
            this.objMask.blur(e);
            this.inputEl.nativeElement.value = this.objMask.valueToInput;
            value = this.objMask.valueToModel;
        }
        this.inputEl.nativeElement.value = this.upperCase
            ? String(this.inputEl.nativeElement.value).toUpperCase()
            : this.inputEl.nativeElement.value;
        value = this.upperCase ? value.toUpperCase() : value;
        this.callOnChange(value);
    }
    validMaxLength(maxlength, value) {
        return (maxlength || maxlength === 0) && value.length > maxlength
            ? value.toString().substring(0, maxlength)
            : value;
    }
    eventOnFocus(e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur(e) {
        this.onTouched?.();
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    eventOnClick(e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    validateClassesForPattern() {
        const value = this.getScreenValue();
        const element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    }
    validateClassesForMask(keyDown = false) {
        const element = this.el.nativeElement;
        const elementValue = this.inputEl.nativeElement.value;
        if (!keyDown && !elementValue) {
            element.classList.add('ng-invalid-mask');
        }
        else {
            element.classList.remove('ng-invalid-mask');
        }
    }
    verifyPattern(pattern, value) {
        return new RegExp(pattern).test(value);
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    writeValueModel(value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.validateInitMask();
            this.changeModel.emit(value);
        }
    }
    getScreenValue() {
        const screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
        if (this.type === 'number') {
            const parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    }
    validateInitMask() {
        if (this.mask) {
            this.validateClassesForMask();
        }
    }
    static ɵfac = function PoInputGeneric_Factory(t) { return new (t || PoInputGeneric)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputGeneric, viewQuery: function PoInputGeneric_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$S, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, hostBindings: function PoInputGeneric_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("keydown", function PoInputGeneric_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("keyup", function PoInputGeneric_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); });
        } }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputGeneric, [{
        type: Directive
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onKeyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }] }); })();

function PoEmailComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵelement(1, "po-icon", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx_r0.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoEmailComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoEmailComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r2.disabled ? "po-icon-input-disabled" : "po-icon-input");
    i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
} }
/* istanbul ignore next */
const providers$4 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoEmailComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoEmailComponent),
        multi: true
    }
];
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * O `po-email` é um input específico para receber E-mail, com o pattern já configurado.
 *
 * @example
 *
 * <example name="po-email-basic" title="PO Email Basic">
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.html"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-email-labs" title="PO Email Labs">
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.html"> </file>
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-email-newsletter" title="PO Email - Newsletter">
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.html"> </file>
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.ts"> </file>
 * </example>
 */
class PoEmailComponent extends PoInputGeneric {
    id = `po-email[${uuid()}]`;
    icon = 'ICON_MAIL';
    type = 'email';
    // Consideramos o uso do nosso pattern com a seguinte expressão.
    // Antes do símbolo @:
    // - não há limite de caracteres.
    // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
    // - pode começar com letras, números, hífen ou undescore (underline).
    //
    // Depois do símbolo @:
    // - o domínio tem um limite de até 66 caracteres após um separador.
    // - separador deve ser um 'ponto' (.).
    // - o primeiro bloco pode conter letras, números, hífen ou underscore (underline).
    // - após o primeiro separador é permitido apenas letras.
    // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
    //
    // Limite total de 254 caracteres para o e-mail.
    //
    // As recomendações foram consultadas nas RFC 1034, RFC 5321 e RFC 5322.
    //
    // RFC 1034 - https://datatracker.ietf.org/doc/html/rfc1034#section-3
    // RFC 5321 - https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1
    // RFC 5322 - https://datatracker.ietf.org/doc/html/rfc5322#section-3.4
    pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([A-Za-z]{2,66}(?:\\.[A-Za-z]{2})?)$';
    mask = '';
    listener = this.validateClassesForPattern.bind(this);
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.maxlength = 254;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.addEventListener('keyup', this.listener);
            }
        });
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    }
    extraValidation(c) {
        return null;
    }
    static ɵfac = function PoEmailComponent_Factory(t) { return new (t || PoEmailComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoEmailComponent, selectors: [["po-email"]], features: [i0.ɵɵProvidersFeature(providers$4), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 23, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "class", "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-field-icon-container-left"], [3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoEmailComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoEmailComponent_div_2_Template, 2, 6, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoEmailComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoEmailComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoEmailComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoEmailComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoEmailComponent_po_clean_6_Template, 1, 4, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoEmailComponent, [{
        type: Component,
        args: [{ selector: 'po-email', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$4, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [p-icon]=\"icon\"\n      ></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"{{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorPattern()\"\n  ></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoEmailComponent, { className: "PoEmailComponent", filePath: "lib/components/po-field/po-email/po-email.component.ts", lineNumber: 63 }); })();

const _c0$R = ["inp"];
function PoInputComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵelement(1, "po-icon", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx_r0.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoInputComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoInputComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r2.disabled ? "po-icon-input-disabled" : "po-icon-input");
    i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
} }
/**
 * @docsExtends PoInputBaseComponent
 *
 * @example
 *
 * <example name="po-input-basic" title="PO Input Basic">
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.html"> </file>
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-labs" title="PO Input Labs">
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.html"> </file>
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-reactive-form" title="PO Input - Reactive Form">
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.html"> </file>
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.ts"> </file>
 * </example>
 */
class PoInputComponent extends PoInputGeneric {
    inp;
    id = `po-input[${uuid()}]`;
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
    }
    extraValidation(c) {
        return null;
    }
    static ɵfac = function PoInputComponent_Factory(t) { return new (t || PoInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoInputComponent, selectors: [["po-input"]], viewQuery: function PoInputComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$R, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inp = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoInputComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoInputComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 23, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "class", "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-field-icon-container-left"], [3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoInputComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoInputComponent_div_2_Template, 2, 6, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoInputComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoInputComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoInputComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoInputComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoInputComponent_po_clean_6_Template, 1, 4, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputComponent, [{
        type: Component,
        args: [{ selector: 'po-input', providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoInputComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoInputComponent),
                        multi: true
                    }
                ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [p-icon]=\"icon\"\n      ></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"{{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorPattern()\"\n  ></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { inp: [{
            type: ViewChild,
            args: ['inp', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoInputComponent, { className: "PoInputComponent", filePath: "lib/components/po-field/po-input/po-input.component.ts", lineNumber: 52 }); })();

function PoLoginComponent_po_clean_7_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 9);
    i0.ɵɵlistener("p-change-event", function PoLoginComponent_po_clean_7_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
} }
/* istanbul ignore next */
const providers$3 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLoginComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLoginComponent),
        multi: true
    }
];
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 * O `po-login` é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
 *
 * @example
 *
 * <example name="po-login-basic" title="PO Login Basic">
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.html"> </file>
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-labs" title="PO Login Labs">
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.html"> </file>
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-confirm" title="PO Login - Confirm Identity">
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.html"> </file>
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.ts"> </file>
 * </example>
 *
 */
class PoLoginComponent extends PoInputGeneric {
    id = `po-login[${uuid()}]`;
    type = 'text';
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
    }
    extraValidation(c) {
        return null;
    }
    static ɵfac = function PoLoginComponent_Factory(t) { return new (t || PoLoginComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoginComponent, selectors: [["po-login"]], features: [i0.ɵɵProvidersFeature(providers$3), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 25, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-field-icon-container-left"], ["p-icon", "ICON_USER"], [1, "po-input", "po-input-icon-left", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-icon-input", 3, "p-element-ref", "p-change-event"]], template: function PoLoginComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2);
            i0.ɵɵelement(3, "po-icon", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoLoginComponent_Template_input_blur_4_listener($event) { return ctx.eventOnBlur($event); })("click", function PoLoginComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); })("focus", function PoLoginComponent_Template_input_focus_4_listener($event) { return ctx.eventOnFocus($event); })("input", function PoLoginComponent_Template_input_input_4_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtemplate(7, PoLoginComponent_po_clean_7_Template, 1, 1, "po-clean", 7);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(8, "po-field-container-bottom", 8);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(3);
            i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoginComponent, [{
        type: Component,
        args: [{ selector: 'po-login', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$3, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <po-icon\n        p-icon=\"ICON_USER\"\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n      ></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\" [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLoginComponent, { className: "PoLoginComponent", filePath: "lib/components/po-field/po-login/po-login.component.ts", lineNumber: 54 }); })();

const poLookupLiteralsDefault = {
    en: {
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
        modalTableNoData: poTableLiteralsDefault.en.noData,
        modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData,
        modalAdvancedSearch: 'Advanced search',
        modalAdvancedSearchTitle: 'Advanced search',
        modalAdvancedSearchPrimaryActionLabel: 'Filter',
        modalAdvancedSearchSecondaryActionLabel: 'Return',
        modalDisclaimerGroupTitle: 'Presenting results filtered by:'
    },
    es: {
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
        modalTableNoData: poTableLiteralsDefault.es.noData,
        modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData,
        modalAdvancedSearch: 'Búsqueda Avanzada',
        modalAdvancedSearchTitle: 'Búsqueda Avanzada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Vuelve',
        modalDisclaimerGroupTitle: 'Presentar resultados filtrados por:'
    },
    pt: {
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
        modalTableNoData: poTableLiteralsDefault.pt.noData,
        modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData,
        modalAdvancedSearch: 'Busca avançada',
        modalAdvancedSearchTitle: 'Busca Avançada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Voltar',
        modalDisclaimerGroupTitle: 'Apresentando resultados filtrados por:'
    },
    ru: {
        modalPrimaryActionLabel: 'Выбрать',
        modalSecondaryActionLabel: 'Отменить',
        modalPlaceholder: 'Поиск',
        modalTitle: 'Выберите запись',
        modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
        modalTableNoData: poTableLiteralsDefault.ru.noData,
        modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData,
        modalAdvancedSearch: 'Расширенный поиск',
        modalAdvancedSearchTitle: 'Расширенный поиск',
        modalAdvancedSearchPrimaryActionLabel: 'Фильтр',
        modalAdvancedSearchSecondaryActionLabel: 'Назад',
        modalDisclaimerGroupTitle: 'Представленные результаты отфильтрованы по:'
    }
};
/**
 * @docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 */
class PoLookupModalBaseComponent {
    changeDetector;
    poModal;
    poTable;
    /**
     * Objeto com os campos que serão criados no busca avançada.
     *
     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.
     *
     * Exemplo de URL com busca avançada: http://localhost:3000/v1/heroes?filter=&page=1&pageSize=10`&name=Tony%20Stark&nickname=Homem%20de%20Ferro&email=irnman@marvel.com`
     *
     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando virgula.
     * Exemplo: http://localhost:3000/v1/heroes?filter=&page=1&pageSize=10`&name=Tony%20Stark,Peter%20Parker,Gohan`
     *
     */
    advancedFilters;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     */
    columns;
    /** Lista de itens da tabela. */
    items;
    /** Classe de serviço com a implementação do cliente. */
    filterService;
    /** Classe de serviço com a implementação do cliente. */
    filterParams;
    /** Se verdadeiro, esconde o gerenciador de tarefas, responsável pela definição de quais colunas serão exibidas. */
    hideColumnsManager = false;
    /** Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta. */
    infiniteScroll = false;
    /** Se verdadeiro, ativa a funcionalidade de multipla seleção. */
    multiple = false;
    /** Evento utilizado ao selecionar um registro da tabela. */
    model = new EventEmitter();
    /** Classe de serviço com items selecionados */
    selectedItems;
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    fieldLabel;
    /**
     * @description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     */
    fieldValue;
    /**
     * Responsável por aplicar espaçamento nas colunas da tabela contida no lookup.
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     */
    spacing = PoTableColumnSpacing.Medium;
    /**
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     */
    textWrap = false;
    /**
     * @optional
     *
     * @description
     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
     *
     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    changeVisibleColumns = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
     *
     * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    columnRestoreManager = new EventEmitter();
    hasNext = true;
    isLoading = false;
    page = 1;
    pageSize = 10;
    searchValue = '';
    tableLiterals;
    // Propriedade da modal de busca avançada:
    advancedFilterModalTitle = '';
    dynamicFormValue = {};
    disclaimer;
    disclaimerGroup;
    isAdvancedFilter = false;
    primaryActionAdvancedFilter;
    secondaryActionAdvancedFilter;
    selecteds = [];
    sort;
    filterSubscription;
    searchSubscription;
    showMoreSubscription;
    disclaimerLabel;
    _literals;
    _title;
    language = poLocaleDefault;
    // eslint-disable-next-line @typescript-eslint/member-ordering
    primaryAction = {
        action: () => {
            let selectedsItems = [];
            if (!this.multiple) {
                this.items.forEach(element => {
                    if (element['$selected']) {
                        selectedsItems.push(element);
                    }
                });
            }
            else {
                selectedsItems = this.selecteds;
            }
            this.model.emit(selectedsItems);
            this.poModal.close();
        },
        label: this.literals.modalPrimaryActionLabel
    };
    // eslint-disable-next-line @typescript-eslint/member-ordering
    secondaryAction = {
        action: () => {
            this.model.emit(null);
            this.poModal.close();
        },
        label: this.literals.modalSecondaryActionLabel
    };
    /** Objeto com as literais usadas no `po-lookup-modal`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poLookupLiteralsDefault[poLocaleDefault],
                ...poLookupLiteralsDefault[this.language],
                ...value
            };
            if (value.modalTitle) {
                this.title = this.literals.modalTitle;
            }
        }
        else {
            this._literals = poLookupLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.modalPrimaryActionLabel;
        this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
        this.setTableLiterals();
    }
    get literals() {
        return this._literals || poLookupLiteralsDefault[this.language];
    }
    /** Título da modal. */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
    }
    get title() {
        return this._title;
    }
    constructor(languageService, changeDetector) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.setAdvancedFilterModalProperties();
        this.initializeData();
        this.setTableLiterals();
    }
    createDisclaimer() {
        this.disclaimerGroup.disclaimers = [];
        this.searchValue = '';
        for (const [key, value] of Object.entries(this.dynamicFormValue)) {
            this.addDisclaimer(value, key);
        }
        if (!Object.values(this.dynamicFormValue).some(v => v !== null && typeof v !== 'undefined')) {
            this.initializeData();
        }
    }
    addDisclaimer(value, property) {
        this.disclaimerLabel = '';
        const fieldFilter = this.advancedFilters.find(filter => filter.property === property);
        this.disclaimer = { property: property };
        this.disclaimer.value = value;
        const labelProperty = fieldFilter.label || capitalizeFirstLetter(fieldFilter.property);
        if (fieldFilter.type === 'currency' && value) {
            this.formatValueToCurrency(fieldFilter, value);
        }
        if (fieldFilter.type === 'boolean' && (value === true || value === false)) {
            this.formatValueToBoolean(fieldFilter, value);
        }
        if (fieldFilter.options && value) {
            this.applyDisclaimerLabelValue(fieldFilter, value);
        }
        if (!this.disclaimerLabel) {
            this.disclaimerLabel = this.disclaimer.value;
        }
        this.disclaimer.label = `${labelProperty}: ${this.disclaimerLabel}`;
        this.disclaimerGroup.disclaimers = [...this.disclaimerGroup.disclaimers, this.disclaimer];
    }
    onChangeDisclaimerGroup() {
        if (!this.searchValue) {
            this.isLoading = true;
            this.searchValue = '';
            this.searchFilteredItems();
        }
    }
    search() {
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.disclaimerGroup.disclaimers = [];
            this.searchFilteredItems();
        }
        else {
            this.initializeData();
        }
    }
    searchFilteredItems() {
        this.searchSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.setLookupResponseProperties();
            return throwError(error);
        }))
            .subscribe((data) => this.setLookupResponseProperties(data), () => { });
    }
    showMoreEvent() {
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.hasNext = false;
            this.isLoading = false;
            return throwError(error);
        }))
            .subscribe((data) => {
            this.items = [...this.items, ...data.items];
            this.hasNext = data.hasNext;
            this.isLoading = false;
            this.changeDetector.detectChanges();
            this.setSelectedItems();
        }, () => { });
    }
    //Método responsável por selecionar as linhas quando abre o modal.
    setSelectedItems() {
        this.selecteds.forEach(selectedItem => {
            if (this.multiple) {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem.value);
            }
            else {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem[this.fieldValue]);
            }
        });
    }
    //Método responsável por criar os disclaimers quando abre o modal.
    setDisclaimersItems() {
        if (this.selectedItems && !Array.isArray(this.selectedItems)) {
            this.multiple ? (this.selecteds = [{ value: this.selectedItems }]) : (this.selecteds = [this.selectedItems]);
            return;
        }
        if (this.selectedItems && this.selectedItems.length) {
            this.selecteds = [...this.selectedItems];
        }
    }
    applyDisclaimerLabelValue(field, filterValue) {
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        const labels = values.map(optionValue => {
            const findOption = field.options.find(option => option.value === optionValue);
            return findOption.label;
        });
        if (labels.join()) {
            this.disclaimerLabel = labels.join(', ');
        }
    }
    formatValueToCurrency(field, filterValue) {
        const currencyLabel = new Intl.NumberFormat(field.locale ? field.locale : this.language, {
            minimumFractionDigits: 2
        }).format(filterValue);
        this.disclaimerLabel = currencyLabel;
    }
    formatValueToBoolean(field, filterValue) {
        let labelBoolean;
        if (filterValue) {
            labelBoolean = field.booleanTrue ? field.booleanTrue : filterValue;
        }
        else {
            labelBoolean = field.booleanFalse ? field.booleanFalse : filterValue;
        }
        this.disclaimerLabel = `${labelBoolean}`;
    }
    setAdvancedFilterModalProperties() {
        this.advancedFilterModalTitle = this.literals.modalAdvancedSearchTitle;
        this.disclaimerGroup = {
            title: this.literals.modalDisclaimerGroupTitle,
            disclaimers: []
        };
        this.primaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
                this.page = 1;
                this.createDisclaimer();
            },
            label: this.literals.modalAdvancedSearchPrimaryActionLabel
        };
        this.secondaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
            },
            label: this.literals.modalAdvancedSearchSecondaryActionLabel
        };
    }
    getAdvancedFilters(advancedParams) {
        if (advancedParams && advancedParams.length > 0) {
            const filters = {};
            let validatedAdvacendFilters;
            advancedParams.forEach((filter) => {
                filters[filter.property] = filter.value instanceof Array ? filter.value.join() : filter.value;
                validatedAdvacendFilters = { ...validatedAdvacendFilters, ...filters };
            });
            return validatedAdvacendFilters;
        }
        return undefined;
    }
    getFilteredItems(filter) {
        const filteredParams = this.getFilteredParams(filter);
        return this.filterService.getFilteredItems(filteredParams);
    }
    getFilteredParams(filter) {
        const { page, pageSize, filterParams, sort } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sort);
        const advancedFilters = this.getAdvancedFilters(this.disclaimerGroup.disclaimers);
        const params = { filter, page, pageSize, order, filterParams, advancedFilters };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
    initializeData() {
        this.isLoading = true;
        this.filterSubscription = this.getFilteredItems('').subscribe(data => {
            this.setLookupResponseProperties(data);
        });
    }
    setLookupResponseProperties(data) {
        this.items = data?.items ?? [];
        this.hasNext = data?.hasNext ?? false;
        this.isLoading = false;
        this.changeDetector.detectChanges();
        this.setDisclaimersItems();
        this.setSelectedItems();
    }
    setTableLiterals() {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData
        };
    }
    static ɵfac = function PoLookupModalBaseComponent_Factory(t) { return new (t || PoLookupModalBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupModalBaseComponent, viewQuery: function PoLookupModalBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
            i0.ɵɵviewQuery(PoTableComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTable = _t.first);
        } }, inputs: { advancedFilters: [i0.ɵɵInputFlags.None, "p-advanced-filters", "advancedFilters"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], filterParams: [i0.ɵɵInputFlags.None, "p-filter-params", "filterParams"], hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], multiple: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-multiple", "multiple", convertToBoolean], selectedItems: [i0.ɵɵInputFlags.None, "p-selected-items", "selectedItems"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"] }, outputs: { model: "p-change-model", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }, { type: i0.ChangeDetectorRef }], { poModal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }], poTable: [{
            type: ViewChild,
            args: [PoTableComponent, { static: true }]
        }], advancedFilters: [{
            type: Input,
            args: ['p-advanced-filters']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], multiple: [{
            type: Input,
            args: [{ alias: 'p-multiple', transform: convertToBoolean }]
        }], model: [{
            type: Output,
            args: ['p-change-model']
        }], selectedItems: [{
            type: Input,
            args: ['p-selected-items']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }] }); })();

/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
class PoDynamicFormBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Nome da propriedade, atribuída ao `PoDynamicFormField.property`, que iniciará o campo com foco.
     */
    autoFocus;
    /**
     * @description
     *
     * Coleção de objetos que implementam a interface `PoDynamicFormField`, para definição dos campos que serão criados
     * dinamicamente.
     *
     * > Ex: `[ { property: 'name' } ]`
     *
     * Regras de tipagem e criação dos componentes:
     *
     * - Caso o *type* informado seja *boolean* o componente criado será o `po-switch`.
     * - Caso o *type* informado seja *currency* e não seja informado um *mask* ou *pattern* o componente criado será o `po-decimal`,
     * caso seja informado um *mask* ou *pattern* o componente criado será o `po-input`.
     * - Caso o *type* informado seja *number* e não seja informado um *mask* ou *pattern* o componente criado será o `po-number`, caso seja
     * informado um *mask* ou *pattern* o componente criado será o `po-input`.
     * - Caso a lista possua a propriedade `options` e a mesma possua até 3 itens o componente criado será o `po-radio-group`
     * ou `po-checkbox-group` se informar a propriedade `optionsMulti`.
     * - Caso a mesma possua 3 ou mais itens, será criado o componente `po-select` ou, `po-multiselect` se a propriedade `optionsMulti`
     * for verdadeira.
     * - Caso o *type* informado seja *date* ou *datetime* o componente criado será o `po-datepicker`.
     * - Caso seja informado a propriedade `optionsService` o componente criado será o `po-combo`.
     * - Caso o *type* informado seja *time* o componente criado será um `po-input` podendo receber um *mask* para formatar
     * o valor exibido, caso não seja informado um *mask* o componente será criado com a máscara '99:99' por padrão.
     * - Caso a lista possua a propriedade `rows` e esta seja definida com valor maior ou igual a 3 o componente criado será
     * o `po-textarea`, caso o valor da propriedade `rows` seja menor que 3 o componente criado será o `po-input`.
     * - Caso seja informada a propriedade `secret` o componente criado será o `po-password`.
     * - Caso o *type* informado seja *string* o componente criado será o `po-input`.
     *
     * @default `[]`
     */
    fields;
    /**
     * Objeto que será utilizado como valor para exibir as informações, será recuperado e preenchido através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * Pode iniciar com valor ou apenas com um objeto vazio que será preenchido conforme descrito acima.
     *
     * > Ex: `{ name: 'po' }`
     */
    value;
    /**
     * @optional
     *
     * @description
     *
     * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
     * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
     *
     * Portanto existem duas maneiras de recuperar o formulário,
     * através de *template reference* e através do *output*, veja os exemplos abaixo:
     *
     * > *template reference*
     *
     * ```html
     *  <po-dynamic-form #dynamicForm>
     *  </po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
     *  </po-button>
     *
     * ```
     *
     * > *Output*
     *
     * ```html
     *  ...
     *  <po-dynamic-form (p-form)="getForm($event)">
     *  </po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
     *  </po-button>
     *  ...
     *
     * ```
     *
     * ```ts
     *  ...
     *
     *  export class AppComponent {
     *
     *    dynamicForm: NgForm;
     *
     *    getForm(form: NgForm) {
     *      this.dynamicForm = form;
     *    }
     *
     *  }
     * ```
     *
     * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
     * o formulário pai.
     */
    formOutput = new EventEmitter();
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * Ao ser executado, irá receber como parâmetro o objeto informado no `p-value`.
     *
     * O retorno desta função deve ser do tipo [PoDynamicFormLoad](documentation/po-dynamic-form#po-dynamic-form-load),
     * onde o usuário poderá determinar as novas atualizações dos campos, valores e determinar o campo a ser focado.
     *
     * Por exemplo:
     *
     * ```
     * onLoadFields(): PoDynamicFormLoad {
     *
     *   return {
     *     value: { cpf: undefined },
     *     fields: [
     *       { property: 'cpf' }
     *     ],
     *     focus: 'cpf'
     *   };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadFields.bind(this)"
     * ```
     */
    load;
    /**
     * Função ou serviço para validar as **mudanças do formulário**.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * Ao ser executado, irá receber como parâmetro um objeto com o nome da propriedade
     * alterada e o novo valor, conforme a interface `PoDynamicFormFieldChanged`:
     *
     * ```
     * { property: 'property name', value: 'new value' }
     * ```
     *
     * O retorno desta função deve ser do tipo [PoDynamicFormValidation](documentation/po-dynamic-form#po-dynamic-form-validation),
     * onde o usuário poderá determinar as novas atualizações dos campos.
     * Por exemplo:
     *
     * ```
     * onChangeFields(changeValue): PoDynamicFormValidation {
     *
     * if (changeValue.property === 'state') {
     *
     *   return {
     *     value: { city: undefined },
     *     fields: [
     *       { property: 'city', options: this.getCity(changeValue.value.state) }
     *     ],
     *     focus: 'city'
     *   };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-validate]="this.myFunction.bind(this)"
     * ```
     *
     * > Se houver uma lista de campos para validação definida em `p-validate-fields`, a propriedade `validate` só receberá o disparo para os campos equivalentes.
     */
    validate;
    /**
     * @optional
     *
     * @description
     *
     * Lista que define os campos que irão disparar o validate do form.
     */
    validateFields;
    _groupForm = false;
    /**
     * @optional
     *
     * @description
     * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
     * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
     *
     * ```html
     * <form #parentForm="ngForm">
     *
     *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
     * </form>
     * ```
     */
    set groupForm(value) {
        this._groupForm = value === '' ? true : convertToBoolean(value);
    }
    get groupForm() {
        return this._groupForm;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ao informar esta propriedade, o componente passará a emitir o valor a cada caractere digitado.
     *
     * Pode ser aplicado nos seguintes componentes:
     * - po-input
     * - po-number
     * - po-decimal
     * - po-textarea
     * - po-password
     *
     * Deve informar os campos que deseja receber as emissões na propriedade `p-validate-fields`.
     *
     *
     */
    validateOnInput = false;
    static ɵfac = function PoDynamicFormBaseComponent_Factory(t) { return new (t || PoDynamicFormBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.None, "p-auto-focus", "autoFocus"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], load: [i0.ɵɵInputFlags.None, "p-load", "load"], validate: [i0.ɵɵInputFlags.None, "p-validate", "validate"], validateFields: [i0.ɵɵInputFlags.None, "p-validate-fields", "validateFields"], groupForm: [i0.ɵɵInputFlags.None, "p-group-form", "groupForm"], validateOnInput: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-validate-on-input", "validateOnInput", convertToBoolean] }, outputs: { formOutput: "p-form" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], formOutput: [{
            type: Output,
            args: ['p-form']
        }], load: [{
            type: Input,
            args: ['p-load']
        }], validate: [{
            type: Input,
            args: ['p-validate']
        }], validateFields: [{
            type: Input,
            args: ['p-validate-fields']
        }], groupForm: [{
            type: Input,
            args: ['p-group-form']
        }], validateOnInput: [{
            type: Input,
            args: [{ alias: 'p-validate-on-input', transform: convertToBoolean }]
        }] }); })();

class PoDynamicFormOperation {
    http;
    constructor(http) {
        this.http = http;
    }
    execute(action, param) {
        return typeof action === 'string' ? this.post(action, param) : of(action(param));
    }
    post(url, body) {
        return this.http.post(url, body);
    }
    setFormDefaultIfEmpty(validateFields) {
        return (validateFields || {
            value: {},
            fields: [],
            focus: undefined
        });
    }
}

class PoDynamicFormLoadService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    createAndUpdateFieldsForm(loadedFields = [], fields = []) {
        return [...loadedFields].reduce((updatedFields, field) => {
            const index = updatedFields.findIndex(updatedField => updatedField.property === field.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = { ...fields[index], ...field };
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, [...fields]);
    }
    executeLoad(load, value) {
        return this.execute(load, value).pipe(map(loadedFormdData => this.setFormDefaultIfEmpty(loadedFormdData)));
    }
    static ɵfac = function PoDynamicFormLoadService_Factory(t) { return new (t || PoDynamicFormLoadService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormLoadService, factory: PoDynamicFormLoadService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormLoadService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = { ...fields[index], ...validatedField };
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return (validateFields || {
            field: {}
        });
    }
    static ɵfac = function PoDynamicFormValidationService_Factory(t) { return new (t || PoDynamicFormValidationService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormValidationService, factory: PoDynamicFormValidationService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormValidationService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

const _c0$Q = ["fieldsComponent"];
const _c1$m = ["dynamicForm"];
function PoDynamicFormComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoDynamicFormComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-dynamic-form-fields", 3, 4);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-auto-focus", ctx_r1.autoFocus)("p-fields", ctx_r1.fields)("p-value", ctx_r1.value);
} }
function PoDynamicFormComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "form", null, 5)(2, "po-dynamic-form-fields", 6, 4);
    i0.ɵɵtwoWayListener("p-fieldsChange", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_fieldsChange_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); i0.ɵɵtwoWayBindingSet(ctx_r8.fields, $event) || (ctx_r8.fields = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-object-value", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_object_value_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.sendObjectValue($event)); })("p-form-validate", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_form_validate_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.validateForm($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtwoWayProperty("p-fields", ctx_r3.fields);
    i0.ɵɵproperty("p-auto-focus", ctx_r3.autoFocus)("p-disabled-form", ctx_r3.disabledForm)("p-validate", ctx_r3.validate)("p-validate-fields", ctx_r3.validateFields)("p-validate-on-input", ctx_r3.validateOnInput)("p-value", ctx_r3.value);
} }
/**
 * @docsExtends PoDynamicFormBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-container" title="PO Dynamic Form - Container">
 *  <file name="sample-po-dynamic-form-container/sample-po-dynamic-form-container.component.html"> </file>
 *  <file name="sample-po-dynamic-form-container/sample-po-dynamic-form-container.component.ts"> </file>
 *  <file name="sample-po-dynamic-form-container/sample-po-dynamic-form-container.service.ts"> </file>
 * </example>
 *
 */
class PoDynamicFormComponent extends PoDynamicFormBaseComponent {
    changes;
    loadService;
    validationService;
    fieldsComponent;
    disabledForm;
    _form;
    onLoadSubscription;
    sendFormSubscription;
    comboOptionSubject = new Subject();
    set form(value) {
        // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
        setTimeout(() => {
            this._form = value;
            this.emitForm();
        });
    }
    get form() {
        return this._form || {};
    }
    constructor(changes, loadService, validationService) {
        super();
        this.changes = changes;
        this.loadService = loadService;
        this.validationService = validationService;
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    ngOnInit() {
        if (this.load) {
            this.loadDataOnInitialize();
        }
    }
    /**
     * Função que atribui foco ao campo desejado.
     *
     * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
     *
     * ``` html
     * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
     * ```
     *
     * ``` javascript
     * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
     *
     * fields: Array<PoDynamicFormField> = [
     *   { property: 'fieldOne' },
     *   { property: 'fieldTwo' }
     * ];
     *
     * fieldFocus() {
     *   this.dynamicForm.focus('fieldTwo');
     * }
     * ```
     *
     * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
     */
    focus(property) {
        this.fieldsComponent.focus(property);
    }
    getObjectValue() {
        return this.comboOptionSubject.asObservable();
    }
    sendObjectValue(objectValue) {
        this.comboOptionSubject.next(objectValue);
    }
    validateForm(field) {
        const previousFocusElement = document.activeElement;
        this.disableForm(true);
        const errorOnValidation = () => this.disableForm(false);
        this.sendFormSubscription = this.validationService
            .sendFormChange(this.validate, field, this.value)
            .subscribe(this.applyFormValidation(previousFocusElement), errorOnValidation);
    }
    applyFormUpdatesOnLoad(previousFocusElement) {
        return dynamicFormData => {
            this.updateModelOnLoad(dynamicFormData);
            this.disableForm(false);
            this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    }
    applyFormValidation(previousFocusElement) {
        return dynamicFormData => {
            this.updateModelWithValidation(dynamicFormData);
            this.disableForm(false);
            this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    }
    disableForm(value) {
        this.disabledForm = value;
        this.changes.detectChanges();
    }
    emitForm() {
        if (!this.groupForm && this.formOutput.observers.length) {
            this.formOutput.emit(this.form);
        }
    }
    loadDataOnInitialize() {
        const previousFocusElement = document.activeElement;
        this.disabledForm = true;
        const errorOnLoad = () => (this.disabledForm = false);
        this.onLoadSubscription = this.loadService
            .executeLoad(this.load, this.value)
            .subscribe(this.applyFormUpdatesOnLoad(previousFocusElement), errorOnLoad);
    }
    removeListeners() {
        if (this.onLoadSubscription) {
            this.onLoadSubscription.unsubscribe();
        }
        if (this.sendFormSubscription) {
            this.sendFormSubscription.unsubscribe();
        }
    }
    setFocusOnFieldByProperty(property, previousFocusElement) {
        if (property) {
            // precisa do timeout para que o valor seja atribuido no campo antes de setar o focus,
            // para nao disparar a mudança posteriormente. Situação ocorre quando retornar campo com valor e focus atribuido a ele.
            setTimeout(() => this.focus(property));
        }
        else {
            previousFocusElement['focus']();
        }
    }
    updateModelOnLoad(loadedFormData) {
        Object.assign(this.value, loadedFormData.value);
        this.fields = this.loadService.createAndUpdateFieldsForm(loadedFormData.fields, this.fields);
    }
    updateModelWithValidation(formData) {
        Object.assign(this.value, formData.value);
        this.fieldsComponent.updatePreviousValue();
        this.fields = this.validationService.updateFieldsForm(formData.fields, this.fields);
    }
    static ɵfac = function PoDynamicFormComponent_Factory(t) { return new (t || PoDynamicFormComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoDynamicFormLoadService), i0.ɵɵdirectiveInject(PoDynamicFormValidationService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicFormComponent, selectors: [["po-dynamic-form"]], viewQuery: function PoDynamicFormComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$Q, 5);
            i0.ɵɵviewQuery(_c1$m, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fieldsComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.form = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["reuseFormTemplate", ""], ["uniqueFormTemplate", ""], [3, "p-auto-focus", "p-fields", "p-value"], ["fieldsComponent", ""], ["dynamicForm", "ngForm"], [3, "p-fields", "p-auto-focus", "p-disabled-form", "p-validate", "p-validate-fields", "p-validate-on-input", "p-value", "p-fieldsChange", "p-object-value", "p-form-validate"]], template: function PoDynamicFormComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicFormComponent_ng_container_0_Template, 1, 0, "ng-container", 0)(1, PoDynamicFormComponent_ng_template_1_Template, 2, 3, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(3, PoDynamicFormComponent_ng_template_3_Template, 4, 7, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            const _r4 = i0.ɵɵreference(4);
            i0.ɵɵproperty("ngIf", ctx.groupForm)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormComponent, [{
        type: Component,
        args: [{ selector: 'po-dynamic-form', template: "<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n  <po-dynamic-form-fields #fieldsComponent [p-auto-focus]=\"autoFocus\" [p-fields]=\"fields\" [p-value]=\"value\">\n  </po-dynamic-form-fields>\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n  <form #dynamicForm=\"ngForm\">\n    <po-dynamic-form-fields\n      #fieldsComponent\n      [(p-fields)]=\"fields\"\n      [p-auto-focus]=\"autoFocus\"\n      [p-disabled-form]=\"disabledForm\"\n      [p-validate]=\"validate\"\n      [p-validate-fields]=\"validateFields\"\n      [p-validate-on-input]=\"validateOnInput\"\n      [p-value]=\"value\"\n      (p-object-value)=\"sendObjectValue($event)\"\n      (p-form-validate)=\"validateForm($event)\"\n    >\n    </po-dynamic-form-fields>\n  </form>\n</ng-template>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoDynamicFormLoadService }, { type: PoDynamicFormValidationService }], { fieldsComponent: [{
            type: ViewChild,
            args: ['fieldsComponent']
        }], form: [{
            type: ViewChild,
            args: ['dynamicForm']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDynamicFormComponent, { className: "PoDynamicFormComponent", filePath: "lib/components/po-dynamic/po-dynamic-form/po-dynamic-form.component.ts", lineNumber: 41 }); })();

const _c0$P = ["inpsearch"];
const _c1$l = ["container"];
function PoLookupModalComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16)(1, "span", 17);
    i0.ɵɵlistener("click", function PoLookupModalComponent_div_9_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onAdvancedFilter()); })("keydown.enter", function PoLookupModalComponent_div_9_Template_span_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onAdvancedFilter()); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r2.literals.modalAdvancedSearch, " ");
} }
function PoLookupModalComponent_po_disclaimer_group_10_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer-group", 18);
    i0.ɵɵlistener("p-change", function PoLookupModalComponent_po_disclaimer_group_10_Template_po_disclaimer_group_p_change_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onChangeDisclaimerGroup()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disclaimers", ctx_r3.disclaimerGroup == null ? null : ctx_r3.disclaimerGroup.disclaimers)("p-title", ctx_r3.disclaimerGroup == null ? null : ctx_r3.disclaimerGroup.title);
} }
function PoLookupModalComponent_po_disclaimer_group_14_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer-group", 19);
    i0.ɵɵlistener("p-remove", function PoLookupModalComponent_po_disclaimer_group_14_Template_po_disclaimer_group_p_remove_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onUnselectFromDisclaimer($event.removedDisclaimer)); })("p-remove-all", function PoLookupModalComponent_po_disclaimer_group_14_Template_po_disclaimer_group_p_remove_all_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onAllUnselected($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disclaimers", ctx_r5.selecteds);
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoLookupModalBaseComponent
 */
class PoLookupModalComponent extends PoLookupModalBaseComponent {
    componentFactory;
    inputSearchEl;
    container;
    keyUpObservable = null;
    tableHeight;
    componentRef;
    dynamicForm;
    constructor(componentFactory, poLanguage, changeDetector) {
        super(poLanguage, changeDetector);
        this.componentFactory = componentFactory;
    }
    ngOnInit() {
        super.ngOnInit();
        this.setTableHeight();
    }
    ngAfterViewInit() {
        this.initializeEventInput();
    }
    // Seleciona um item na tabela
    onSelect(item) {
        if (this.multiple) {
            this.selecteds = [...this.selecteds, { value: item[this.fieldValue], label: item[this.fieldLabel], ...item }];
        }
        else {
            this.selecteds = [{ value: item[this.fieldValue], label: item[this.fieldLabel], ...item }];
        }
    }
    // Remove a seleção de um item na tabela
    onUnselect(unselectedItem) {
        this.selecteds = this.selecteds.filter(itemSelected => itemSelected.value !== unselectedItem[this.fieldValue]);
    }
    onUnselectFromDisclaimer(removedDisclaimer) {
        this.poTable.unselectRowItem(item => item[this.fieldValue] === removedDisclaimer.value);
    }
    // Seleciona todos os itens visíveis na tabela
    onAllSelected(items) {
        this.selecteds = items.map(item => ({ value: item[this.fieldValue], label: item[this.fieldLabel], ...item }));
    }
    // Remove a seleção de todos os itens visíveis na tabela
    onAllUnselected(items) {
        this.poTable.unselectRows();
        this.selecteds = [];
    }
    initializeEventInput() {
        this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(filter$1((e) => this.validateEnterPressed(e)), debounceTime$1(400));
        this.keyUpObservable.subscribe(() => {
            this.search();
            this.changeDetector.detectChanges();
        });
    }
    openModal() {
        this.poModal.open();
    }
    sortBy(sort) {
        const order = sort.type === 'ascending' ? true : false;
        sortArrayOfObjects(this.items, sort.column.property, order);
        this.sort = sort;
    }
    destroyDynamicForm() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    onAdvancedFilter() {
        this.setupModalAdvancedFilter();
        this.createDynamicForm();
    }
    setTableHeight() {
        this.tableHeight = this.infiniteScroll ? 515 : 615;
    }
    validateEnterPressed(e) {
        return e.keyCode === 13;
    }
    setupModalAdvancedFilter() {
        this.dynamicFormValue = {};
        this.isAdvancedFilter = true;
    }
    createDynamicForm() {
        const component = this.componentFactory.resolveComponentFactory(PoDynamicFormComponent);
        this.componentRef = this.container.createComponent(component);
        this.componentRef.instance.fields = this.advancedFilters;
        this.componentRef.instance.value = this.dynamicFormValue;
        this.componentRef.instance.formOutput
            .pipe(tap(form => {
            this.dynamicForm = form;
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        }), switchMap(form => form.valueChanges))
            .subscribe(() => {
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        });
        this.changeDetector.markForCheck();
    }
    static ɵfac = function PoLookupModalComponent_Factory(t) { return new (t || PoLookupModalComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLookupModalComponent, selectors: [["po-lookup-modal"]], viewQuery: function PoLookupModalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$P, 5);
            i0.ɵɵviewQuery(_c1$l, 5, ViewContainerRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputSearchEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 18, vars: 27, consts: [["p-click-out", "false", "p-hide-close", "false", "p-size", "lg", 3, "p-primary-action", "p-secondary-action", "p-title"], [3, "hidden"], [1, "po-lookup-header", "po-pull-right", 3, "p-optional"], [1, "po-lookup-filter-content"], [1, "po-field-icon-container-right"], ["p-icon", "ICON_SEARCH", 1, "po-field-icon", "po-icon-input", 3, "click"], ["iconLookup", ""], ["name", "contentSearch", "type", "text", 1, "po-input", "po-input-icon-right", 3, "ngModel", "placeholder", "ngModelChange"], ["inpsearch", ""], ["class", "po-lookup-advanced-search", 4, "ngIf"], ["class", "po-md-12", 3, "p-disclaimers", "p-title", "p-change", 4, "ngIf"], [1, "po-row", "po-lookup-container-table"], [1, "po-md-12", 3, "p-selectable", "p-hide-detail", "p-single-select", "p-hide-action-fixed-columns", "p-sort", "p-columns", "p-height", "p-hide-columns-manager", "p-items", "p-literals", "p-loading", "p-show-more-disabled", "p-infinite-scroll", "p-spacing", "p-text-wrap", "p-selected", "p-unselected", "p-all-selected", "p-all-unselected", "p-show-more", "p-sort-by", "p-change-visible-columns", "p-restore-column-manager"], ["poTable", ""], ["class", "po-md-12", 3, "p-disclaimers", "p-remove", "p-remove-all", 4, "ngIf"], ["container", ""], [1, "po-lookup-advanced-search"], ["tabindex", "0", 1, "po-lookup-advanced-search-link", "po-icon-input", 3, "click", "keydown.enter"], [1, "po-md-12", 3, "p-disclaimers", "p-title", "p-change"], [1, "po-md-12", 3, "p-disclaimers", "p-remove", "p-remove-all"]], template: function PoLookupModalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0)(1, "div", 1)(2, "po-field-container", 2)(3, "div", 3)(4, "div", 4)(5, "po-icon", 5, 6);
            i0.ɵɵlistener("click", function PoLookupModalComponent_Template_po_icon_click_5_listener() { return ctx.search(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "input", 7, 8);
            i0.ɵɵtwoWayListener("ngModelChange", function PoLookupModalComponent_Template_input_ngModelChange_7_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.searchValue, $event) || (ctx.searchValue = $event); return $event; });
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(9, PoLookupModalComponent_div_9_Template, 3, 1, "div", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoLookupModalComponent_po_disclaimer_group_10_Template, 1, 2, "po-disclaimer-group", 10);
            i0.ɵɵelementStart(11, "div", 11)(12, "po-table", 12, 13);
            i0.ɵɵlistener("p-selected", function PoLookupModalComponent_Template_po_table_p_selected_12_listener($event) { return ctx.onSelect($event); })("p-unselected", function PoLookupModalComponent_Template_po_table_p_unselected_12_listener($event) { return ctx.onUnselect($event); })("p-all-selected", function PoLookupModalComponent_Template_po_table_p_all_selected_12_listener($event) { return ctx.onAllSelected($event); })("p-all-unselected", function PoLookupModalComponent_Template_po_table_p_all_unselected_12_listener($event) { return ctx.onAllUnselected($event); })("p-show-more", function PoLookupModalComponent_Template_po_table_p_show_more_12_listener() { return ctx.showMoreEvent(); })("p-sort-by", function PoLookupModalComponent_Template_po_table_p_sort_by_12_listener($event) { return ctx.sortBy($event); })("p-change-visible-columns", function PoLookupModalComponent_Template_po_table_p_change_visible_columns_12_listener($event) { return ctx.changeVisibleColumns.emit($event); })("p-restore-column-manager", function PoLookupModalComponent_Template_po_table_p_restore_column_manager_12_listener($event) { return ctx.columnRestoreManager.emit($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(14, PoLookupModalComponent_po_disclaimer_group_14_Template, 1, 1, "po-disclaimer-group", 14);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(15, "div", 1);
            i0.ɵɵelementContainer(16, null, 15);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("p-primary-action", ctx.isAdvancedFilter ? ctx.primaryActionAdvancedFilter : ctx.primaryAction)("p-secondary-action", ctx.isAdvancedFilter ? ctx.secondaryActionAdvancedFilter : ctx.secondaryAction)("p-title", ctx.isAdvancedFilter ? ctx.advancedFilterModalTitle : ctx.title);
            i0.ɵɵadvance();
            i0.ɵɵproperty("hidden", ctx.isAdvancedFilter);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-optional", false);
            i0.ɵɵadvance(5);
            i0.ɵɵtwoWayProperty("ngModel", ctx.searchValue);
            i0.ɵɵproperty("placeholder", ctx.literals.modalPlaceholder);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.advancedFilters && ctx.advancedFilters.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !!ctx.disclaimerGroup);
            i0.ɵɵadvance();
            i0.ɵɵattribute("data-multiple", ctx.multiple);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-selectable", true)("p-hide-detail", true)("p-single-select", !ctx.multiple)("p-hide-action-fixed-columns", true)("p-sort", true)("p-columns", ctx.columns)("p-height", ctx.tableHeight)("p-hide-columns-manager", ctx.hideColumnsManager)("p-items", ctx.items)("p-literals", ctx.tableLiterals)("p-loading", ctx.isLoading)("p-show-more-disabled", !ctx.hasNext)("p-infinite-scroll", ctx.infiniteScroll)("p-spacing", ctx.spacing)("p-text-wrap", ctx.textWrap);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.multiple);
            i0.ɵɵadvance();
            i0.ɵɵproperty("hidden", !ctx.isAdvancedFilter);
        } }, encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalComponent, [{
        type: Component,
        args: [{ selector: 'po-lookup-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-modal\n  p-click-out=\"false\"\n  p-hide-close=\"false\"\n  p-size=\"lg\"\n  [p-primary-action]=\"isAdvancedFilter ? primaryActionAdvancedFilter : primaryAction\"\n  [p-secondary-action]=\"isAdvancedFilter ? secondaryActionAdvancedFilter : secondaryAction\"\n  [p-title]=\"isAdvancedFilter ? advancedFilterModalTitle : title\"\n>\n  <div [hidden]=\"isAdvancedFilter\">\n    <po-field-container class=\"po-lookup-header po-pull-right\" [p-optional]=\"false\">\n      <div class=\"po-lookup-filter-content\">\n        <div class=\"po-field-icon-container-right\">\n          <po-icon #iconLookup p-icon=\"ICON_SEARCH\" class=\"po-field-icon po-icon-input\" (click)=\"search()\"> </po-icon>\n        </div>\n\n        <input\n          #inpsearch\n          class=\"po-input po-input-icon-right\"\n          name=\"contentSearch\"\n          [(ngModel)]=\"searchValue\"\n          [placeholder]=\"literals.modalPlaceholder\"\n          type=\"text\"\n        />\n      </div>\n\n      <div *ngIf=\"advancedFilters && advancedFilters.length > 0\" class=\"po-lookup-advanced-search\">\n        <span\n          class=\"po-lookup-advanced-search-link po-icon-input\"\n          tabindex=\"0\"\n          (click)=\"onAdvancedFilter()\"\n          (keydown.enter)=\"onAdvancedFilter()\"\n        >\n          {{ literals.modalAdvancedSearch }}\n        </span>\n      </div>\n    </po-field-container>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"!!disclaimerGroup\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup()\"\n    >\n    </po-disclaimer-group>\n\n    <div class=\"po-row po-lookup-container-table\" [attr.data-multiple]=\"multiple\">\n      <po-table\n        #poTable\n        class=\"po-md-12\"\n        [p-selectable]=\"true\"\n        [p-hide-detail]=\"true\"\n        [p-single-select]=\"!multiple\"\n        [p-hide-action-fixed-columns]=\"true\"\n        [p-sort]=\"true\"\n        [p-columns]=\"columns\"\n        [p-height]=\"tableHeight\"\n        [p-hide-columns-manager]=\"hideColumnsManager\"\n        [p-items]=\"items\"\n        [p-literals]=\"tableLiterals\"\n        [p-loading]=\"isLoading\"\n        [p-show-more-disabled]=\"!hasNext\"\n        [p-infinite-scroll]=\"infiniteScroll\"\n        [p-spacing]=\"spacing\"\n        [p-text-wrap]=\"textWrap\"\n        (p-selected)=\"onSelect($event)\"\n        (p-unselected)=\"onUnselect($event)\"\n        (p-all-selected)=\"onAllSelected($event)\"\n        (p-all-unselected)=\"onAllUnselected($event)\"\n        (p-show-more)=\"showMoreEvent()\"\n        (p-sort-by)=\"sortBy($event)\"\n        (p-change-visible-columns)=\"changeVisibleColumns.emit($event)\"\n        (p-restore-column-manager)=\"columnRestoreManager.emit($event)\"\n      >\n      </po-table>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"multiple\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"selecteds\"\n      (p-remove)=\"onUnselectFromDisclaimer($event.removedDisclaimer)\"\n      (p-remove-all)=\"onAllUnselected($event)\"\n    >\n    </po-disclaimer-group>\n  </div>\n  <div [hidden]=\"!isAdvancedFilter\">\n    <ng-container #container> </ng-container>\n  </div>\n</po-modal>\n" }]
    }], () => [{ type: i0.ComponentFactoryResolver }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }], { inputSearchEl: [{
            type: ViewChild,
            args: ['inpsearch']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLookupModalComponent, { className: "PoLookupModalComponent", filePath: "lib/components/po-field/po-lookup/po-lookup-modal/po-lookup-modal.component.ts", lineNumber: 32 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
class PoLookupFilterService {
    httpClient;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    url;
    fieldValue;
    multiple = false;
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams, advancedFilters, ...restFilteredItemsParams } = filteredItemsParams;
        const validatedFilterParams = this.validateParams(filterParams);
        const validatedAdvancedFilters = this.validateParams(advancedFilters);
        const params = { ...restFilteredItemsParams, ...validatedFilterParams, ...validatedAdvancedFilters };
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        let newURL;
        let encodedValue;
        if (this.multiple) {
            encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
            newURL = `${this.url}?${this.fieldValue}=${encodedValue}`;
        }
        else {
            encodedValue = encodeURIComponent(value);
            newURL = `${this.url}/${encodedValue}`;
        }
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map((response) => ('items' in response ? response.items : response)));
    }
    setConfig(url, fieldValue, multiple) {
        this.url = url;
        this.fieldValue = fieldValue;
        this.multiple = multiple;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
    static ɵfac = function PoLookupFilterService_Factory(t) { return new (t || PoLookupFilterService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupFilterService, factory: PoLookupFilterService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupFilterService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
class PoLookupModalService {
    poComponentInjector;
    selectValueEvent = new EventEmitter();
    componentRef = null;
    constructor(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param advancedFilters {Array<PoDynamicFormField>} Objeto utilizado para criar o busca avançada.
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     * @param selectedItems {any} Valor que está selecionado que será repassado para o modal para apresentar na tabela.
     * @param fieldLabel {string} Valor que será utilizado como descrição do campo.
     * @param fieldValue {string} Valor que será utilizado como valor do campo.
     * @param changeVisibleColumns {function} Função que será executada quando for alterada a visibilidade das colunas.
     * @param columnRestoreManager {function} Função que será executada quando for restaurar as colunas padrão.
     */
    openModal(params) {
        const { advancedFilters, service, columns, filterParams, hideColumnsManager, title, literals, infiniteScroll, multiple, selectedItems, fieldLabel, fieldValue, spacing, textWrap, changeVisibleColumns, columnRestoreManager } = params;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.advancedFilters = advancedFilters;
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe($event => {
            this.selectValue($event);
        });
        this.componentRef.instance.infiniteScroll = infiniteScroll;
        this.componentRef.instance.multiple = multiple;
        this.componentRef.instance.selectedItems = selectedItems;
        this.componentRef.instance.fieldLabel = fieldLabel;
        this.componentRef.instance.fieldValue = fieldValue;
        this.componentRef.instance.changeVisibleColumns = changeVisibleColumns;
        this.componentRef.instance.columnRestoreManager = columnRestoreManager;
        this.componentRef.instance.hideColumnsManager = hideColumnsManager;
        this.componentRef.instance.spacing = spacing;
        this.componentRef.instance.textWrap = textWrap;
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    setChangeColumns(columns) {
        if (this.componentRef !== null) {
            this.componentRef.instance.columns = columns;
            this.componentRef.changeDetectorRef.detectChanges();
        }
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
    static ɵfac = function PoLookupModalService_Factory(t) { return new (t || PoLookupModalService)(i0.ɵɵinject(PoComponentInjectorService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupModalService, factory: PoLookupModalService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalService, [{
        type: Injectable
    }], () => [{ type: PoComponentInjectorService }], null); })();

/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do
 * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 */
class PoLookupBaseComponent {
    defaultService;
    injector;
    poLookupModalService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * Label do campo.
     *
     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha
     * sido definido um `modalTitle` na propriedade `p-literals`.
     */
    label;
    /**
     * @description
     *
     * Objeto com as literais usadas no `po-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more',
     *    modalTitle: 'Select a user',
     *    modalAdvancedSearch: 'Advanced search',
     *    modalAdvancedSearchTitle: 'Advanced search',
     *    modalAdvancedSearchPrimaryActionLabel: 'Filter',
     *    modalAdvancedSearchSecondaryActionLabel: 'Return',
     *    modalDisclaimerGroupTitle: 'Presenting results filtered by:'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-lookup
     *   [p-literals]="customLiterals">
     * </po-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    literals;
    /** Texto de apoio do campo. */
    help;
    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /** Nome e Id do componente. */
    name;
    /**
     * @description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     */
    fieldValue;
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    set fieldLabel(value) {
        this._fieldLabel = value;
        this.keysDescription = [this.fieldLabel];
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /** Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface `PoLookupFilter`. */
    filterParams;
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `p-field-label` na descrição do campo.
     *
     * Pode-se informar uma lista de propriedades que deseja exibir como descrição do campo, Por exemplo:
     * ```
     * <po-lookup
     *  ...
     *  [p-field-format]="['id','nickname']"
     *  ...
     * >
     *
     * Objeto retornado:
     *   {
     *      id:123,
     *      name: 'Kakaroto',
     *      nickname: 'Goku',
     *   }
     * Apresentação no campo: 123 - Goku
     * ```
     *
     * > Será utilizado ` - ` como separador.
     */
    fieldFormat;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     */
    columns;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     *
     * @optional
     *
     * @description
     *
     * Lista de objetos dos campos que serão criados na busca avançada.
     *
     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.
     *
     * Exemplo de URL com busca avançada:
     *
     * ```
     * url + ?page=1&pageSize=20&name=Tony%20Stark&nickname=Homem%20de%20Ferro
     * ```
     *
     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando vírgula.
     * Exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&name=Tony%20Stark,Peter%20Parker,Gohan
     * ```
     *
     */
    advancedFilters;
    /**
     * @optional
     *
     * @description
     *
     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
     *
     * @default `false`
     */
    hideColumnsManager = false;
    /**
     * @optional
     *
     * @description
     *
     * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.
     *
     * @default `false`
     */
    infiniteScroll = false;
    /** Exibe um ícone que permite limpar o campo. */
    clean = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de múltiplos itens.
     *
     * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`
     *
     * @default `false`
     */
    multiple = false;
    /**
     * @optional
     *
     * @description
     *
     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
     *
     * @default `false`
     */
    autoHeight = false;
    /**
     * @optional
     *
     * @description
     *
     * Responsável por aplicar espaçamento nas colunas da tabela contida no lookup.
     *
     * Deve receber um dos valores do enum `PoTableColumnSpacing`.
     *
     * @default `medium`
     */
    spacing = PoTableColumnSpacing.Medium;
    /**
     * @optional
     *
     * @description
     *
     * Habilita ou desabilita a quebra automática de texto. Quando ativada, o texto que excede
     * o espaço disponível é transferido para a próxima linha em pontos apropriados para uma
     * leitura clara.
     *
     * Esta propriedade aplica-se ao texto contido nas células da tabela.
     *
     * @default `false`
     */
    textWrap = false;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     */
    onError = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     */
    selected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     *  Evento que será disparado ao alterar o model.
     *  Por parâmetro será passado o novo valor.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
     *
     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    changeVisibleColumns = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
     *
     * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
     * Por exemplo: ["idCard", "name", "hireStatus", "age"].
     */
    columnRestoreManager = new EventEmitter();
    service;
    selectedOptions = [];
    getSubscription;
    keysDescription;
    oldValue = '';
    valueToModel;
    oldValueToModel = null;
    // eslint-disable-next-line
    onTouched = null;
    resizeListener;
    _disabled = false;
    _fieldLabel;
    _filterService;
    _noAutocomplete;
    _placeholder = '';
    _required = false;
    _autoHeight = false;
    autoHeightInitialValue;
    onChangePropagate = null;
    validatorChange;
    control;
    injectOptions = {
        self: true
    };
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `PoLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=name
     * ```
     *
     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:
     * ```
     * model = 1234;
     *
     * GET url/1234
     * ```
     *
     * Caso estiver com múltipla seleção habilitada:
     * ```
     * model = [1234, 5678]
     *
     * GET url?${fieldValue}=1234,5678
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
     *
     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se
     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)
     * e concatenado na URL da seguinte forma:
     *
     * ```
     * url/valor%20que%20se%20deseja%20filtrar
     * ```
     *
     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.
     *
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório seré exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    constructor(defaultService, injector, poLookupModalService) {
        this.defaultService = defaultService;
        this.injector = injector;
        this.poLookupModalService = poLookupModalService;
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.initializeColumn();
    }
    ngAfterViewInit() {
        this.setControl();
    }
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    ngOnChanges(changes) {
        if (changes.columns?.currentValue) {
            this.columns = changes.columns.currentValue;
            this.poLookupModalService?.setChangeColumns(this.columns);
        }
        if (changes.multiple && isTypeof(this.filterService, 'string')) {
            this.service.setConfig(this.filterService, this.fieldValue, this.multiple);
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    selectValue(valueSelected) {
        this.valueToModel = valueSelected;
        this.multiple
            ? this.callOnChange(this.valueToModel)
            : this.valueToModel
                ? this.callOnChange(this.valueToModel[this.fieldValue])
                : this.callOnChange(undefined);
        this.selected.emit(valueSelected);
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        if (this.oldValueToModel !== this.valueToModel) {
            this.change.emit(value);
        }
        // Armazenar o valor antigo do model
        this.oldValueToModel = this.valueToModel;
    }
    searchById(value) {
        let checkedValue = value;
        if (typeof checkedValue === 'string') {
            checkedValue = checkedValue.trim();
        }
        if (checkedValue !== '') {
            const oldDisable = this.disabled;
            this.disabled = true;
            if (this.control) {
                // :TODO: Retirar no futuro pois esse setTimeout foi feito
                // pois quando o campo é acionado pelos métodos setValue ou patchValue
                // a mudança não é detectada
                setTimeout(() => this.control.markAsPending());
            }
            this.getSubscription = this.service
                .getObjectByValue(value, this.filterParams)
                .pipe(finalize(() => {
                this.disabled = oldDisable;
                if (this.control) {
                    this.control.updateValueAndValidity();
                }
            }))
                .subscribe(element => {
                if (element?.length || (!Array.isArray(element) && element)) {
                    if (Array.isArray(element) && element.length > 1) {
                        this.setDisclaimers(element);
                        this.updateVisibleItems();
                    }
                    this.selectModel(this.multiple ? element : [element]);
                }
                else {
                    this.cleanModel();
                }
            }, error => {
                this.cleanModel();
                this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        if (value?.length || (!Array.isArray(value) && value)) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    // Retorna o Subscriber da propriedade getSubscription que ocorre
    // no evento de blur que executa o método searchEvent().
    getSubscriptionFunction() {
        return this.getSubscription;
    }
    cleanViewValue() {
        this.setDisclaimers([]);
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    getFormattedLabel(value) {
        return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    selectModel(options) {
        if (options.length) {
            this.selectedOptions = [...options];
            const newModel = this.multiple ? options.map(option => option[this.fieldValue]) : options[0];
            this.selectValue(newModel);
            if (options.length === 1) {
                this.oldValue = options[0][this.fieldLabel];
                this.setViewValue(this.getFormattedLabel(options[0]), options[0]);
            }
        }
        else {
            this.selectValue(undefined);
            this.cleanViewValue();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setConfig(service, this.fieldValue, this.multiple);
        }
    }
    setControl() {
        const ngControl = this.injector.get(NgControl, null, this.injectOptions);
        if (ngControl) {
            this.control = ngControl.control;
        }
    }
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(element => element.fieldLabel).map(element => element.property);
        }
    }
    static ɵfac = function PoLookupBaseComponent_Factory(t) { return new (t || PoLookupBaseComponent)(i0.ɵɵdirectiveInject(PoLookupFilterService), i0.ɵɵdirectiveInject(Injector), i0.ɵɵdirectiveInject(PoLookupModalService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], name: "name", fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], filterParams: [i0.ɵɵInputFlags.None, "p-filter-params", "filterParams"], fieldFormat: [i0.ɵɵInputFlags.None, "p-field-format", "fieldFormat"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], advancedFilters: [i0.ɵɵInputFlags.None, "p-advanced-filters", "advancedFilters"], hideColumnsManager: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-columns-manager", "hideColumnsManager", convertToBoolean], infiniteScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-infinite-scroll", "infiniteScroll", convertToBoolean], clean: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-clean", "clean", convertToBoolean], multiple: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-multiple", "multiple", convertToBoolean], autoHeight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-height", "autoHeight", convertToBoolean], spacing: [i0.ɵɵInputFlags.None, "p-spacing", "spacing"], textWrap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-text-wrap", "textWrap", convertToBoolean], filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], noAutocomplete: [i0.ɵɵInputFlags.None, "p-no-autocomplete", "noAutocomplete"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"] }, outputs: { onError: "p-error", selected: "p-selected", change: "p-change", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLookupFilterService }, { type: i0.Injector, decorators: [{
                type: Inject,
                args: [Injector]
            }] }, { type: PoLookupModalService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], name: [{
            type: Input,
            args: ['name']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], fieldFormat: [{
            type: Input,
            args: ['p-field-format']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], advancedFilters: [{
            type: Input,
            args: ['p-advanced-filters']
        }], hideColumnsManager: [{
            type: Input,
            args: [{ alias: 'p-hide-columns-manager', transform: convertToBoolean }]
        }], infiniteScroll: [{
            type: Input,
            args: [{ alias: 'p-infinite-scroll', transform: convertToBoolean }]
        }], clean: [{
            type: Input,
            args: [{ alias: 'p-clean', transform: convertToBoolean }]
        }], multiple: [{
            type: Input,
            args: [{ alias: 'p-multiple', transform: convertToBoolean }]
        }], autoHeight: [{
            type: Input,
            args: [{ alias: 'p-auto-height', transform: convertToBoolean }]
        }], spacing: [{
            type: Input,
            args: ['p-spacing']
        }], textWrap: [{
            type: Input,
            args: [{ alias: 'p-text-wrap', transform: convertToBoolean }]
        }], onError: [{
            type: Output,
            args: ['p-error']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }] }); })();

const _c0$O = ["inp"];
function PoLookupComponent_div_1_po_clean_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 12);
    i0.ɵɵlistener("p-change-event", function PoLookupComponent_div_1_po_clean_4_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.cleanModel()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-element-ref", ctx_r4.inputEl);
} }
function PoLookupComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 4)(1, "input", 5, 6);
    i0.ɵɵlistener("blur", function PoLookupComponent_div_1_Template_input_blur_1_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.searchEvent()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 7);
    i0.ɵɵtemplate(4, PoLookupComponent_div_1_po_clean_4_Template, 1, 1, "po-clean", 8);
    i0.ɵɵelementStart(5, "div", 9, 10);
    i0.ɵɵlistener("click", function PoLookupComponent_div_1_Template_div_click_5_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.openLookup()); })("focus", function PoLookupComponent_div_1_Template_div_focus_5_listener() { i0.ɵɵrestoreView(_r9); const _r3 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r3.focus()); });
    i0.ɵɵelement(7, "po-icon", 11);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const _r3 = i0.ɵɵreference(2);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("id", ctx_r0.id)("ngClass", ctx_r0.clean && _r3.value ? "po-input-double-icon-right" : "po-input-icon-right")("autocomplete", ctx_r0.autocomplete)("disabled", ctx_r0.disabled)("placeholder", ctx_r0.disabled ? "" : ctx_r0.placeholder)("required", ctx_r0.required);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.clean && !ctx_r0.disabled);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-field-icon", !ctx_r0.disabled)("po-field-icon-disabled", ctx_r0.disabled);
} }
function PoLookupComponent_ng_template_3_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 17);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r13.placeholder, " ");
} }
function PoLookupComponent_ng_template_3_po_disclaimer_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer", 18);
    i0.ɵɵlistener("p-close-action", function PoLookupComponent_ng_template_3_po_disclaimer_4_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const disclaimer_r16 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r17.closeDisclaimer(disclaimer_r16.value)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const disclaimer_r16 = ctx.$implicit;
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-clickable", disclaimer_r16.value === "" && !ctx_r14.disabled);
    i0.ɵɵproperty("p-label", disclaimer_r16.label)("p-value", disclaimer_r16.value)("p-hide-close", disclaimer_r16.value === "" || ctx_r14.disabled);
} }
function PoLookupComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 4)(1, "div", 13, 6);
    i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_span_3_Template, 2, 1, "span", 14)(4, PoLookupComponent_ng_template_3_po_disclaimer_4_Template, 1, 5, "po-disclaimer", 15);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", 7)(6, "div", 16, 10);
    i0.ɵɵlistener("click", function PoLookupComponent_ng_template_3_Template_div_click_6_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.openLookup()); })("focus", function PoLookupComponent_ng_template_3_Template_div_focus_6_listener() { i0.ɵɵrestoreView(_r20); const _r12 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r12.focus()); });
    i0.ɵɵelement(8, "po-icon", 11);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-lookup-input-auto", ctx_r1.autoHeight)("po-lookup-input-static", !ctx_r1.autoHeight)("po-lookup-input-disabled", ctx_r1.disabled);
    i0.ɵɵproperty("tabindex", ctx_r1.disabled ? -1 : 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.placeholder && !(ctx_r1.disclaimers == null ? null : ctx_r1.disclaimers.length));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r1.visibleDisclaimers);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("po-field-icon", !ctx_r1.disabled)("po-field-icon-disabled", ctx_r1.disabled);
} }
/* istanbul ignore next */
const providers$2 = [
    PoLookupFilterService,
    PoLookupModalService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NgControl,
        useExisting: forwardRef(() => PoLookupComponent),
        multi: false
    }
];
/**
 * @docsExtends PoLookupBaseComponent
 *
 * @description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * @example
 *
 * <example name="po-lookup-basic" title="PO Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="PO Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="PO Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-multiple" title="PO Lookup - Multiple">
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.html"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.ts"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.service.ts"> </file>
 * </example>
 */
class PoLookupComponent extends PoLookupBaseComponent {
    renderer;
    cd;
    inputEl;
    initialized = false;
    timeoutResize;
    visibleElement = false;
    disclaimers = [];
    visibleDisclaimers = [];
    id = `po-lookup[${uuid()}]`;
    modalSubscription;
    isCalculateVisibleItems = true;
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    constructor(renderer, poLookupFilterService, poLookupModalService, cd, injector) {
        super(poLookupFilterService, injector, poLookupModalService);
        this.renderer = renderer;
        this.cd = cd;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngDoCheck() {
        const inputWidth = this.inputEl?.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
        this.cd.markForCheck();
    }
    ngOnDestroy() {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.initializeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    openLookup() {
        if (this.isAllowedOpenModal()) {
            const { advancedFilters, service, columns, filterParams, hideColumnsManager, literals, infiniteScroll, multiple, fieldLabel, fieldValue, spacing, textWrap, changeVisibleColumns, columnRestoreManager } = this;
            const selectedItems = this.checkSelectedItems();
            this.poLookupModalService.openModal({
                advancedFilters,
                service,
                columns,
                filterParams,
                hideColumnsManager,
                title: this.label,
                literals,
                infiniteScroll,
                multiple,
                selectedItems,
                fieldLabel,
                fieldValue,
                spacing,
                textWrap,
                changeVisibleColumns,
                columnRestoreManager
            });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(selectedOptions => {
                    if (selectedOptions.length > 1 || this.disclaimers.length) {
                        this.setDisclaimers(selectedOptions);
                        this.updateVisibleItems();
                    }
                    this.selectModel(selectedOptions);
                });
            }
        }
    }
    checkSelectedItems() {
        if (this.multiple) {
            if (!this.disclaimers.length && this.valueToModel?.length) {
                return [{ value: this.valueToModel[0], label: this.oldValue, ...this.selectedOptions[0] }];
            }
            return this.disclaimers;
        }
        else {
            return this.valueToModel;
        }
    }
    setDisclaimers(selectedOptions) {
        this.disclaimers = selectedOptions.map(selectedOption => ({
            value: selectedOption[this.fieldValue],
            label: selectedOption[this.fieldLabel],
            ...selectedOption
        }));
        this.visibleDisclaimers = [...this.disclaimers];
        this.cd.markForCheck();
    }
    setViewValue(value, object) {
        if (this.inputEl && this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
        this.cd.markForCheck();
    }
    getViewValue() {
        return this.inputEl.nativeElement.value;
    }
    searchEvent() {
        this.onTouched?.();
        const value = this.getViewValue();
        if (this.oldValue?.toString() !== value) {
            this.searchById(value);
        }
    }
    closeDisclaimer(value) {
        this.disclaimers = this.disclaimers.filter(disclaimer => disclaimer.value !== value);
        this.valueToModel = this.valueToModel.filter(model => model !== value);
        this.updateVisibleItems();
        this.callOnChange(this.valueToModel.length ? this.valueToModel : undefined);
    }
    updateVisibleItems() {
        if (this.disclaimers && this.disclaimers.length > 0) {
            this.visibleDisclaimers = [].concat(this.disclaimers);
        }
        this.debounceResize();
        if (!this.inputEl.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
    }
    getInputWidth() {
        return this.inputEl.nativeElement.offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.inputEl.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        const newDisclaimers = [];
        const disclaimers = this.disclaimers;
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < disclaimers.length; i++) {
                sum += disclaimersWidth[i];
                newDisclaimers.push(disclaimers[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !disclaimers.length) {
                if (i === disclaimers.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    newDisclaimers.splice(-2, 2);
                    const label = '+' + (disclaimers.length + 1 - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
                else {
                    newDisclaimers.splice(-1, 1);
                    const label = '+' + (disclaimers.length - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
            }
        }
        this.visibleDisclaimers = [...newDisclaimers];
    }
    isAllowedOpenModal() {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    }
    formatFields(objectSelected, properties) {
        let formatedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formatedField) {
                        formatedField = objectSelected[property];
                    }
                    else {
                        formatedField = formatedField + ' - ' + objectSelected[property];
                    }
                }
            }
        }
        if (!formatedField) {
            formatedField = objectSelected[this.fieldValue];
        }
        return formatedField;
    }
    setInputValueWipoieldFormat(objectSelected) {
        const isEmpty = Object.keys(objectSelected).length === 0;
        let fieldFormated;
        if (Array.isArray(this.fieldFormat)) {
            fieldFormated = this.formatFields(objectSelected, this.fieldFormat);
        }
        else {
            fieldFormated = this.fieldFormat(objectSelected);
        }
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
        });
    }
    static ɵfac = function PoLookupComponent_Factory(t) { return new (t || PoLookupComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLookupFilterService), i0.ɵɵdirectiveInject(PoLookupModalService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLookupComponent, selectors: [["po-lookup"]], viewQuery: function PoLookupComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$O, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, features: [i0.ɵɵProvidersFeature(providers$2), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 10, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], ["class", "po-field-container-content", 4, "ngIf", "ngIfElse"], [3, "p-help", "p-disabled"], ["disclaimersTemplate", ""], [1, "po-field-container-content"], ["type", "text", 1, "po-input", 3, "id", "ngClass", "autocomplete", "disabled", "placeholder", "required", "blur"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input po-field-icon", 3, "p-element-ref", "p-change-event", 4, "ngIf"], ["tabindex", "-1", 1, "po-field-icon", "po-field-icon-right", "po-icon-input", 3, "click", "focus"], ["iconLookup", ""], ["p-icon", "ICON_SEARCH"], [1, "po-icon-input", "po-field-icon", 3, "p-element-ref", "p-change-event"], [1, "po-input", "po-input-icon-right", "po-lookup-input", "po-icon-input", 3, "tabindex"], ["class", "po-lookup-input-placeholder", 4, "ngIf"], ["class", "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "po-clickable", "p-close-action", 4, "ngFor", "ngForOf"], ["tabindex", "-1", 1, "po-field-icon", "po-icon-input", 3, "click", "focus"], [1, "po-lookup-input-placeholder"], [1, "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "p-close-action"]], template: function PoLookupComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0);
            i0.ɵɵtemplate(1, PoLookupComponent_div_1_Template, 8, 11, "div", 1);
            i0.ɵɵelement(2, "po-field-container-bottom", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_Template, 9, 13, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(4);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.disclaimers.length)("ngIfElse", _r2);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoCleanComponent, PoDisclaimerComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupComponent, [{
        type: Component,
        args: [{ selector: 'po-lookup', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$2, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\" *ngIf=\"!disclaimers.length; else disclaimersTemplate\">\n    <input\n      #inp\n      class=\"po-input\"\n      [id]=\"id\"\n      type=\"text\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input po-field-icon\"\n        *ngIf=\"clean && !disabled\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"cleanModel()\"\n      >\n      </po-clean>\n\n      <div\n        #iconLookup\n        class=\"po-field-icon po-field-icon-right po-icon-input\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n        <po-icon p-icon=\"ICON_SEARCH\"></po-icon>\n      </div>\n    </div>\n  </div>\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #disclaimersTemplate>\n  <div class=\"po-field-container-content\">\n    <div\n      #inp\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"po-input po-input-icon-right po-lookup-input po-icon-input\"\n      [class.po-lookup-input-auto]=\"autoHeight\"\n      [class.po-lookup-input-static]=\"!autoHeight\"\n      [class.po-lookup-input-disabled]=\"disabled\"\n    >\n      <span *ngIf=\"placeholder && !disclaimers?.length\" class=\"po-lookup-input-placeholder\">\n        {{ placeholder }}\n      </span>\n\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        class=\"po-lookup-input-disclaimer\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n    </div>\n\n    <div class=\"po-field-icon-container-right\">\n      <div\n        #iconLookup\n        class=\"po-field-icon po-icon-input\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n        <po-icon p-icon=\"ICON_SEARCH\"></po-icon>\n      </div>\n    </div>\n  </div>\n</ng-template>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: PoLookupFilterService }, { type: PoLookupModalService }, { type: i0.ChangeDetectorRef }, { type: i0.Injector }], { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: false }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLookupComponent, { className: "PoLookupComponent", filePath: "lib/components/po-field/po-lookup/po-lookup.component.ts", lineNumber: 110 }); })();

/**
 * @usedBy PoMultiselectComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-multiselect-option-template` com `ng-template`
 * dentro da *tag* `po-multiselect`, o seu array de `p-options` repassado para com componente deve conter a propriedade `value` e `label`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Exemplo de uso:
 *
 * ```
 * ...
 * <po-multiselect
 *   name="multiselect"
 *   [(ngModel)]="multiselect"
 *   [p-options]="options"
 *   [p-hide-select-all]="true">
 *     <ng-template p-multiselect-option-template let-option>
 *        <!-- template customizado -->
 *       <div class="po-font-text-large-bold" [innerHtml]="option.label"></div>
 *       <!-- template customizado -->
 *     </ng-template>
 * </po-multiselect>
 * ...
 * ```
 *
 */
class PoMultiselectOptionTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoMultiselectOptionTemplateDirective_Factory(t) { return new (t || PoMultiselectOptionTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMultiselectOptionTemplateDirective, selectors: [["", "p-multiselect-option-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectOptionTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-multiselect-option-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();

/**
 * @usedBy PoMultiselectComponent
 *
 * @description
 *
 * Define o tipo de busca usado no po-multiselect.
 */
var PoMultiselectFilterMode;
(function (PoMultiselectFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["endsWith"] = 2] = "endsWith";
})(PoMultiselectFilterMode || (PoMultiselectFilterMode = {}));

const PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT = 400;
const PO_MULTISELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_MULTISELECT_FIELD_VALUE_DEFAULT = 'value';
const poMultiselectLiteralsDefault = {
    en: {
        noData: 'No data found',
        placeholderSearch: 'Search',
        selectAll: 'Select all',
        selectItem: 'Select items'
    },
    es: {
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca',
        selectAll: 'Seleccionar todo',
        selectItem: 'Seleccionar items'
    },
    pt: {
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar',
        selectAll: 'Selecionar todos',
        selectItem: 'Selecionar itens'
    },
    ru: {
        noData: 'Данные не найдены',
        placeholderSearch: 'искать',
        selectAll: 'Выбрать все',
        selectItem: 'Выбрать элементы'
    }
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * #### Boas práticas
 *
 * - Caso a lista apresente menos de 5 itens, considere utilizar outro componente;
 * - Não utilize o multiselect caso o usuário possa selecionar apenas uma opção. Para esse caso, opte por utilizar po-radio ou po-select;
 * - Sempre que possível, agrupe as opções e use labels curtas para descrever o conteúdo. Exemplo: em uma combinação de alimentos,
 * as opções podem ser agrupadas por Vegetais, Frutas, etc;
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Quando em foco, o multiselect abre o listbox usando as teclas de Espaço ou Enter do teclado.
 * - Utilize as teclas Arrow Up [seta para cima] ou Arrow Down [seta para baixo] do teclado para navegar entre os itens do listbox.
 * - Utilize a tecla Esc do teclado para fechar o listbox.
 * - Quando um item estiver em foco, utilize as teclas Arrow Right [seta para direita] ou Arrow Left [seta para esquerda] do teclado para navegar entre eles.
 * - Quando em foco e havendo um item ou mais já selecionado, utilize a tecla Arrow Down [seta para baixo] do teclado para abrir o listbox.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--text-color-placeholder` &nbsp;      | Cor do texto do placeholder                           | `var(--color-action-disabled)`                    |
 * | `--color`                              | Cor principal do multiselect                          | `var(--color-neutral-dark-70)`                    |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                   |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                   |
 * | **Focused**                            |                                                       |                                                   |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                     |
 * | `--outline-color-focused` &nbsp;       | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                    |
 * | `--background-disabled` &nbsp;         | Cor de background no estado disabled &nbsp;           | `var(--color-neutral-light-20)`                   |
 * | **Error**                              |                                                       |                                                   |
 * | `--color-error`                        | Cor principal no estado error                         | `var(--color-feedback-negative-base)`             |
 *
 */
class PoMultiselectBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Label no componente. */
    label;
    /** Texto de apoio para o campo. */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder = '';
    /**
     * @description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * @default `Buscar`
     */
    placeholderSearch = '';
    /** Nome do componente. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo "Selecionar todos" será escondido.
     *
     * @default `false`
     */
    hideSelectAll;
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Define que o dropdown do multiselect será incluido no body da página e não suspenso com a caixa de texto do componente.
     * Opção necessária para o caso de uso do componente em páginas que necessitam renderizar o multiselect fora do conteúdo principal.
     *
     * > Obs: O uso dessa propriedade pode acarretar na perda sequencial da tabulação da página
     *
     * @default `false`
     */
    appendBox = false;
    selectedOptions = [];
    visibleOptionsDropdown = [];
    visibleTags = [];
    isServerSearching = false;
    isFirstFilter = true;
    filterSubject = new Subject();
    service;
    defaultService;
    // eslint-disable-next-line
    onModelTouched = null;
    clickOutListener;
    resizeListener;
    getObjectsByValuesSubscription;
    _filterService;
    _debounceTime = 400;
    _disabled = false;
    _filterMode = PoMultiselectFilterMode.startsWith;
    _hideSearch = false;
    _literals;
    _options;
    _required = false;
    _sort = false;
    _autoHeight = false;
    _fieldLabel = PO_MULTISELECT_FIELD_LABEL_DEFAULT;
    _fieldValue = PO_MULTISELECT_FIELD_VALUE_DEFAULT;
    language;
    lastLengthModel;
    onModelChange;
    validatorChange;
    autoHeightInitialValue;
    /**
     * @optional
     *
     * @description
     * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.
     *
     *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.
     *
     *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     *
     *```
     * // caso filtrar por "Peter"
     *  https://localhost:8080/api/heroes?filter=Peter
     *```
     *
     *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:
     *
     *```
     * // caso o valor do campo for [1234, 5678];
     *  https://localhost:8080/api/heroes?value=1234,5678
     *
     * //O *value* é referente ao `fieldValue`.
     *```
     *
     */
    set filterService(value) {
        if (value) {
            this._filterService = value;
            this.autoHeight = this.autoHeightInitialValue !== undefined ? this.autoHeightInitialValue : true;
            this.options = [];
        }
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
     *
     * > O valor padrão será `true` quando houver serviço (`p-filter-service`).
     *
     * @default `false`
     */
    set autoHeight(value) {
        this._autoHeight = value;
        this.autoHeightInitialValue = value;
    }
    get autoHeight() {
        return this._autoHeight;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     *
     * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar',
     *    selectAll: 'Select all',
     *    selectItem: 'Select items'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poMultiselectLiteralsDefault[poLocaleDefault],
                ...poMultiselectLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poMultiselectLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poMultiselectLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
        this.updateVisibleItems();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * @default `false`
     */
    set hideSearch(hideSearch) {
        this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
    }
    get hideSearch() {
        return this._hideSearch;
    }
    /**
     * @description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que será exibida no multiselect.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     * > A lista pode ser definida utilizando um array com o valor representando `value` e `label` das seguintes formas:
     *
     * ```
     * <po-multiselect name="multiselect" p-label="PO Multiselect" [p-options]="[{value: 1, label: 'One'}, {value: 2, label: 'two'}]"> </po-multiselect>
     * ```
     *
     * ```
     * <po-multiselect name="multiselect" p-label="PO Multiselect" [p-options]="[{name: 'Roger', age: 28}, {name: 'Anne', age: 35}]" p-field-label="name" p-field-value="age"> </po-multiselect>
     * ```
     *
     * - Aconselha-se utilizar valores distintos no `label` e `value` dos itens.
     */
    set options(options) {
        this._options = options;
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * @default `false`
     */
    set sort(sort) {
        this._sort = sort === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoMultiselectFilterMode ? filterMode : PoMultiselectFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoMultiselectFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoMultiselectFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoMultiselectFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value ? value : PO_MULTISELECT_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value ? value : PO_MULTISELECT_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    ngOnInit() {
        if (this.filterService) {
            this.setService(this.filterService);
        }
        this.filterSubject
            .pipe(debounceTime$1(this.debounceTime), distinctUntilChanged(), tap(() => (this.isServerSearching = true)), switchMap((search) => this.applyFilter(search)), tap(() => (this.isServerSearching = false)))
            .subscribe();
        this.setLabelsAndValuesOptions();
        this.validAndSortOptions();
        this.updateList(this.options);
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        else {
            this.service = this.defaultService;
            this.service.configProperties(service, this.fieldLabel, this.fieldValue);
        }
        this.isFirstFilter = true;
    }
    validAndSortOptions() {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptionsWithFieldValue(this.options, this.fieldValue);
            removeDuplicatedOptionsWithFieldValue(this.options, this.fieldValue);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, this.fieldLabel);
            }
        }
    }
    setUndefinedLabels(options) {
        options.forEach(option => {
            if (!option[this.fieldLabel]) {
                option[this.fieldLabel] = option[this.fieldValue];
            }
        });
    }
    updateList(options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    }
    callOnChange(selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    }
    eventChange(selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    }
    getValuesFromOptions(selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map(option => option[this.fieldValue]) : [];
    }
    getLabelByValue(value) {
        const index = this.options.findIndex(option => option[this.fieldValue] === value);
        return this.options[index].label;
    }
    searchByLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            options.forEach(option => {
                if (option[this.fieldLabel] && this.compareMethod(search, option, filterMode)) {
                    newOptions.push(option);
                }
            });
            this.visibleOptionsDropdown = newOptions;
        }
        else {
            this.visibleOptionsDropdown = [...options];
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option[this.fieldLabel].toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option[this.fieldLabel].toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option[this.fieldLabel].toLowerCase().endsWith(search.toLowerCase());
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return null;
    }
    updateSelectedOptions(newOptions, options = this.options) {
        this.selectedOptions = [];
        if (newOptions.length === 0) {
            this.lastLengthModel = undefined;
        }
        if (this.filterService) {
            this.selectedOptions = newOptions;
        }
        else {
            newOptions.forEach(newOption => {
                options.forEach(option => {
                    if (option[this.fieldValue] === newOption[this.fieldValue]) {
                        this.selectedOptions.push(option);
                    }
                });
            });
        }
        this.updateVisibleItems();
    }
    writeValue(values) {
        values = values || [];
        if (this.service && values.length) {
            this.getObjectsByValuesSubscription = this.service.getObjectsByValues(values).subscribe(options => {
                this.updateSelectedOptions(options);
                this.callOnChange(this.selectedOptions);
            });
        }
        else {
            // Validar se todos os items existem entre os options, senão atualizar o model
            this.updateSelectedOptions(values.map(value => ({ [this.fieldValue]: value })));
            if (this.selectedOptions && this.selectedOptions.length < values.length) {
                this.callOnChange(this.selectedOptions);
            }
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    setLabelsAndValuesOptions() {
        if (this.fieldLabel && this.fieldValue && this.options) {
            this.options.map(option => {
                option.label = option[this.fieldLabel];
                option.value = option[this.fieldValue];
            });
        }
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    static ɵfac = function PoMultiselectBaseComponent_Factory(t) { return new (t || PoMultiselectBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMultiselectBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], placeholderSearch: [i0.ɵɵInputFlags.None, "p-placeholder-search", "placeholderSearch"], name: "name", hideSelectAll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-select-all", "hideSelectAll", convertToBoolean], appendBox: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-append-in-body", "appendBox", convertToBoolean], filterService: [i0.ɵɵInputFlags.None, "p-filter-service", "filterService"], autoHeight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-height", "autoHeight", convertToBoolean], debounceTime: [i0.ɵɵInputFlags.None, "p-debounce-time", "debounceTime"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], hideSearch: [i0.ɵɵInputFlags.None, "p-hide-search", "hideSearch"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], sort: [i0.ɵɵInputFlags.None, "p-sort", "sort"], filterMode: [i0.ɵɵInputFlags.None, "p-filter-mode", "filterMode"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"] }, outputs: { change: "p-change" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], placeholderSearch: [{
            type: Input,
            args: ['p-placeholder-search']
        }], name: [{
            type: Input,
            args: ['name']
        }], hideSelectAll: [{
            type: Input,
            args: [{ alias: 'p-hide-select-all', transform: convertToBoolean }]
        }], change: [{
            type: Output,
            args: ['p-change']
        }], appendBox: [{
            type: Input,
            args: [{ alias: 'p-append-in-body', transform: convertToBoolean }]
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], autoHeight: [{
            type: Input,
            args: [{ alias: 'p-auto-height', transform: convertToBoolean }]
        }], debounceTime: [{
            type: Input,
            args: ['p-debounce-time']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], hideSearch: [{
            type: Input,
            args: ['p-hide-search']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], sort: [{
            type: Input,
            args: ['p-sort']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }] }); })();

class PoMultiselectFilterService {
    http;
    fieldLabel = 'label';
    fieldValue = 'value';
    _url;
    messages = [];
    get url() {
        return this._url;
    }
    constructor(http) {
        this.http = http;
    }
    getFilteredData({ value }) {
        const params = value ? { filter: value } : {};
        return this.http
            .get(this.url, {
            params
        })
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    getObjectsByValues(value) {
        return this.http
            .get(`${this.url}?${this.fieldValue}=${value.toString()}`)
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayMultiselectOptions(items) {
        if (items && items.length > 0) {
            return items.map(item => this.parseToMultiselectOption(item));
        }
        return [];
    }
    parseToMultiselectOption(item) {
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { [this.fieldLabel]: label, [this.fieldValue]: value };
    }
    static ɵfac = function PoMultiselectFilterService_Factory(t) { return new (t || PoMultiselectFilterService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMultiselectFilterService, factory: PoMultiselectFilterService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectFilterService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

const _c0$N = ["dropdownElement"];
const _c1$k = ["iconElement"];
const _c2$9 = ["inputElement"];
function PoMultiselectComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 15);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r2.placeholder ? ctx_r2.placeholder : ctx_r2.literals.selectItem, " ");
} }
function PoMultiselectComponent_po_tag_6_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-tag", 16);
    i0.ɵɵlistener("p-close", function PoMultiselectComponent_po_tag_6_Template_po_tag_p_close_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r15); const tag_r12 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.closeTag(tag_r12[ctx_r14.fieldValue], $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tag_r12 = ctx.$implicit;
    const i_r13 = ctx.index;
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-clickable", tag_r12[ctx_r3.fieldValue] === "" && !ctx_r3.disabled);
    i0.ɵɵproperty("p-value", tag_r12[ctx_r3.fieldLabel])("p-literals", i_r13 + 1 === ctx_r3.visibleTags.length && ctx_r3.hasMoreTag ? ctx_r3.literalsTag : undefined)("p-removable", true)("p-disabled", ctx_r3.disabled);
} }
function PoMultiselectComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMultiselectComponent_ng_template_11_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMultiselectComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoMultiselectComponent_ng_template_11_ng_container_0_Template, 1, 0, "ng-container", 17);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r11 = i0.ɵɵreference(17);
    i0.ɵɵproperty("ngTemplateOutlet", _r11);
} }
function PoMultiselectComponent_ng_template_13_ng_template_0_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMultiselectComponent_ng_template_13_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoMultiselectComponent_ng_template_13_ng_template_0_ng_container_0_Template, 1, 0, "ng-container", 17);
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r11 = i0.ɵɵreference(17);
    i0.ɵɵproperty("ngTemplateOutlet", _r11);
} }
function PoMultiselectComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoMultiselectComponent_ng_template_13_ng_template_0_Template, 1, 1, "ng-template", 18);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(2);
    i0.ɵɵproperty("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayOpen", true);
} }
function PoMultiselectComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-multiselect-dropdown", 19, 20);
    i0.ɵɵlistener("p-change", function PoMultiselectComponent_ng_template_16_Template_po_multiselect_dropdown_p_change_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r20.changeItems($event)); })("p-change-search", function PoMultiselectComponent_ng_template_16_Template_po_multiselect_dropdown_p_change_search_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r22.changeSearch($event)); })("p-close-dropdown", function PoMultiselectComponent_ng_template_16_Template_po_multiselect_dropdown_p_close_dropdown_0_listener() { i0.ɵɵrestoreView(_r21); const ctx_r23 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r23.controlDropdownVisibility(false)); })("keydown", function PoMultiselectComponent_ng_template_16_Template_po_multiselect_dropdown_keydown_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.onKeyDownDropdown($event, 0)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-searching", ctx_r10.isServerSearching)("p-hide-search", ctx_r10.hideSearch)("p-hide-select-all", ctx_r10.hideSelectAll)("p-literals", ctx_r10.literals)("p-options", ctx_r10.options)("p-visible-options", ctx_r10.visibleOptionsDropdown)("p-selected-options", ctx_r10.selectedOptions)("p-placeholder-search", ctx_r10.placeholderSearch)("p-field-value", ctx_r10.fieldValue)("p-field-label", ctx_r10.fieldLabel)("p-multiselect-template", ctx_r10.multiselectOptionTemplate);
} }
const poMultiselectContainerOffset = 8;
const poMultiselectContainerPositionDefault = 'bottom';
const poMultiselectInputPaddingRight = 52;
const poMultiselectSpaceBetweenTags = 8;
const literalsTagRemoveOthers = {
    pt: {
        remove: 'Remover todos os itens selecionados'
    },
    ru: {
        remove: 'Удалить все выбранные элементы'
    },
    es: {
        remove: 'Eliminar todos los elementos seleccionados'
    },
    en: {
        remove: 'Clear all selected items'
    }
};
/* istanbul ignore next */
const providers$1 = [
    PoMultiselectFilterService,
    PoControlPositionService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    }
];
/**
 * @docsExtends PoMultiselectBaseComponent
 *
 * @example
 *
 * <example name="po-multiselect-basic" title="PO Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="PO Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-template" title="PO Multiselect - Template">
 *   <file name="sample-po-multiselect-template/sample-po-multiselect-template.component.html"> </file>
 *   <file name="sample-po-multiselect-template/sample-po-multiselect-template.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-heroes" title="PO Multiselect - Heroes - using API">
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.html"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.ts"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.service.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-any-array" title="PO Multiselect - Array Any">
 *   <file name="sample-po-multiselect-any-array/sample-po-multiselect-any-array.component.html"> </file>
 *   <file name="sample-po-multiselect-any-array/sample-po-multiselect-any-array.component.ts"> </file>
 * </example>
 *
 */
class PoMultiselectComponent extends PoMultiselectBaseComponent {
    renderer;
    changeDetector;
    el;
    controlPosition;
    defaultService;
    multiselectOptionTemplate;
    dropdownElement;
    dropdown;
    iconElement;
    inputElement;
    literalsTag;
    dropdownIcon = 'ICON_ARROW_DOWN';
    dropdownOpen = false;
    initialized = false;
    hasMoreTag;
    timeoutResize;
    visibleElement = false;
    subscription = new Subscription();
    enterCloseTag = false;
    initCalculateItems = true;
    isCalculateVisibleItems = true;
    cacheOptions;
    focusOnTag = false;
    constructor(renderer, changeDetector, el, controlPosition, defaultService, languageService) {
        super(languageService);
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.el = el;
        this.controlPosition = controlPosition;
        this.defaultService = defaultService;
        const language = languageService.getShortLanguage();
        this.literalsTag = {
            ...literalsTagRemoveOthers[poLocaleDefault],
            ...literalsTagRemoveOthers[language]
        };
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngOnChanges(changes) {
        if (this.filterService && (changes.filterService || changes.fieldValue || changes.fieldLabel)) {
            this.setService(this.filterService);
        }
    }
    ngDoCheck() {
        const inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que as tags sejam calculadas na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        this.getObjectsByValuesSubscription?.unsubscribe();
        this.filterSubject?.unsubscribe();
        this.subscription.unsubscribe();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    }
    getInputWidth() {
        return this.el.nativeElement.querySelector('.po-multiselect-input').offsetWidth - poMultiselectInputPaddingRight;
    }
    getTagsWidth() {
        const tags = this.el.nativeElement.querySelectorAll('po-tag');
        return Array.from(tags).map(tag => tag['offsetWidth']);
    }
    calculateVisibleItems() {
        this.hasMoreTag = false;
        const tagsWidth = this.getTagsWidth();
        const inputWidth = this.getInputWidth();
        const extraTagSize = 63;
        const tagsVisible = tagsWidth[0];
        this.visibleTags = [];
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += tagsWidth[i] + poMultiselectSpaceBetweenTags;
                this.visibleTags.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= tagsWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (tagsVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                this.hasMoreTag = true;
                if (sum + extraTagSize > inputWidth) {
                    this.visibleTags.splice(-2, 2);
                    const label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleTags.push({ [this.fieldValue]: '', [this.fieldLabel]: label });
                }
                else {
                    this.visibleTags.splice(-1, 1);
                    const label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleTags.push({ [this.fieldValue]: '', [this.fieldLabel]: label });
                }
            }
            if (this.initCalculateItems) {
                setTimeout(() => {
                    this.handleKeyboardNavigationTag();
                }, 300);
            }
            this.initCalculateItems = false;
        }
        this.changeDetector.markForCheck();
    }
    changeItems(changedItems) {
        this.updateSelectedOptions(changedItems);
        this.callOnChange(this.selectedOptions);
        if (this.autoHeight && this.dropdownOpen) {
            this.changeDetector.detectChanges();
            this.adjustContainerPosition();
        }
        setTimeout(() => {
            this.handleKeyboardNavigationTag();
        }, 300);
    }
    updateVisibleItems() {
        if (this.selectedOptions) {
            this.visibleTags = [].concat(this.selectedOptions);
        }
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
        this.changeDetector.markForCheck();
    }
    onBlur() {
        if (typeof this.inputElement.nativeElement.getAttribute('aria-label') === 'string' &&
            this.inputElement.nativeElement.getAttribute('aria-label').includes('Unselected')) {
            this.inputElement.nativeElement.setAttribute('aria-label', this.label ? this.label : '');
        }
        this.onModelTouched?.();
    }
    onKeyDown(event) {
        if (event.shiftKey && event.keyCode === PoKeyCodeEnum.tab && !this.focusOnTag) {
            this.controlDropdownVisibility(false);
        }
        this.focusOnTag = false;
        if (event.keyCode === PoKeyCodeEnum.tab) {
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.esc) {
            event.preventDefault();
            this.controlDropdownVisibility(false);
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.arrowDown && this.visibleTags.length > 0) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            this.dropdown?.listbox?.setFocus();
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.enter && !this.enterCloseTag) {
            if (this.visibleTags.length === 0) {
                this.toggleDropdownVisibility();
                this.focus();
                return;
            }
            else {
                event.preventDefault();
                this.toggleDropdownVisibility();
                return;
            }
        }
        if (event.keyCode === PoKeyCodeEnum.space) {
            event.preventDefault();
            this.toggleDropdownVisibility();
        }
        this.enterCloseTag = false;
    }
    toggleDropdownVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.filterService) {
            this.applyFilterInFirstClick();
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    }
    onKeyDownDropdown(event, index) {
        if (event.key === 'Escape') {
            event.preventDefault();
            this.controlDropdownVisibility(false);
            this.inputElement.nativeElement.focus();
        }
    }
    openDropdown(toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    }
    controlDropdownVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    scrollToSelectedOptions() {
        if (this.selectedOptions && this.selectedOptions.length) {
            const index = this.options.findIndex(option => option[this.fieldValue] === this.selectedOptions[0][this.fieldValue]);
            this.dropdown.scrollTo(index);
        }
    }
    setVisibleOptionsDropdown(options) {
        this.visibleOptionsDropdown = options;
        this.changeDetector.markForCheck();
    }
    changeSearch(event) {
        if (event && event[this.fieldValue] !== undefined) {
            if (this.filterService) {
                this.filterSubject.next(event[this.fieldValue]);
            }
            else {
                this.searchByLabel(event[this.fieldValue], this.options, this.filterMode);
            }
        }
        else {
            this.setVisibleOptionsDropdown(this.options);
        }
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout(() => this.adjustContainerPosition());
    }
    closeTag(value, event) {
        let index;
        this.enterCloseTag = true;
        if (!value || (typeof value === 'string' && value.includes('+'))) {
            index = null;
            const itemsNotInVisibleTags = this.selectedOptions.filter(option => !this.visibleTags.includes(option));
            for (const option of this.visibleTags) {
                if (!this.selectedOptions.includes(option)) {
                    this.selectedOptions.splice(this.visibleTags.length - 1, itemsNotInVisibleTags.length);
                    this.updateVisibleItems();
                    this.callOnChange(this.selectedOptions);
                }
            }
        }
        else {
            index = this.selectedOptions.findIndex(option => option[this.fieldValue] === value);
            this.selectedOptions.splice(index, 1);
            this.updateVisibleItems();
            this.callOnChange(this.selectedOptions);
        }
        setTimeout(() => {
            this.focusOnNextTag(index, event);
        }, 300);
    }
    wasClickedOnToggle(event) {
        if (this.dropdownOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target)) {
            this.controlDropdownVisibility(false);
        }
    }
    applyFilter(value = '') {
        const param = { property: this.fieldLabel, value: value };
        return this.service.getFilteredData(param).pipe(catchError(err => {
            this.isServerSearching = false;
            return of([]);
        }), tap((options) => {
            this.setOptionsByApplyFilter(options);
        }));
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter) {
            this.isServerSearching = true;
            // necessario enviar um objeto string vazia para refazer a busca, quando alterar filterService, fieldValue e fieldLabel
            // pois temos o distinctUntilChange no pipe do filterSubject
            /* eslint-disable no-new-wrappers */
            this.filterSubject.next(new String());
        }
        else {
            this.options = [...this.cacheOptions];
        }
    }
    setOptionsByApplyFilter(items) {
        if (this.isFirstFilter) {
            this.cacheOptions = [...items];
            this.isFirstFilter = false;
        }
        this.options = [...items];
        this.setVisibleOptionsDropdown(this.options);
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
    }
    close() {
        this.dropdownIcon = 'ICON_ARROW_DOWN';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    }
    focusOnNextTag(indexClosed, clickOrEnter) {
        if (clickOrEnter === 'enter') {
            const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
            indexClosed = indexClosed || indexClosed === 0 ? indexClosed : tagRemoveElements.length;
            if (tagRemoveElements.length === 0) {
                this.inputElement.nativeElement.focus();
                this.inputElement.nativeElement.setAttribute('aria-label', `Unselected items ${this.label}`);
                this.controlDropdownVisibility(true);
            }
            this.focusOnRemoveTag(tagRemoveElements, indexClosed);
        }
        else {
            indexClosed = 0;
        }
        this.handleKeyboardNavigationTag(indexClosed);
    }
    focusOnRemoveTag(tag, indexClosed) {
        if (tag.length === indexClosed) {
            tag[indexClosed - 1]?.focus();
        }
        else {
            tag[indexClosed]?.focus();
        }
    }
    handleKeyboardNavigationTag(initialIndex = 0) {
        this.subscription.unsubscribe();
        this.subscription = new Subscription();
        const tagRemoveElements = this.el.nativeElement.querySelectorAll('.po-tag-remove');
        this.initializeTagRemoveElements(tagRemoveElements, initialIndex);
    }
    setTabIndex(element, tabIndex) {
        element.setAttribute('tabindex', tabIndex);
    }
    handleArrowLeft(tagRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index - 1].focus();
            this.setTabIndex(tagRemoveElements[index - 1], 0);
        }
    }
    handleArrowRight(tagRemoveElements, index) {
        if (index < tagRemoveElements.length - 1) {
            this.setTabIndex(tagRemoveElements[index], -1);
            tagRemoveElements[index + 1].focus();
            this.setTabIndex(tagRemoveElements[index + 1], 0);
        }
    }
    handleKeyDown(event, tagRemoveElements, index) {
        const KEY_SPACE = 'Space';
        const KEY_ARROW_LEFT = 'ArrowLeft';
        const KEY_ARROW_RIGHT = 'ArrowRight';
        this.focusOnTag = true;
        if (event.code === KEY_SPACE) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (event.key === KEY_ARROW_LEFT) {
            this.handleArrowLeft(tagRemoveElements, index);
        }
        else if (event.key === KEY_ARROW_RIGHT) {
            this.handleArrowRight(tagRemoveElements, index);
        }
    }
    initializeTagRemoveElements(tagRemoveElements, initialIndex) {
        tagRemoveElements.forEach((tagRemoveElement, index) => {
            if (index === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex], 0);
            }
            else if (tagRemoveElements.length === initialIndex) {
                this.setTabIndex(tagRemoveElements[initialIndex - 1], 0);
            }
            else {
                this.setTabIndex(tagRemoveElement, -1);
            }
            this.subscription.add(fromEvent(tagRemoveElement, 'keydown').subscribe((event) => {
                this.handleKeyDown(event, tagRemoveElements, index);
            }));
        });
    }
    initializeListeners() {
        this.clickOutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
            isMobile() ? this.adjustContainerPosition() : this.close();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onScroll = () => {
        this.adjustContainerPosition();
    };
    open() {
        this.dropdownIcon = 'ICON_ARROW_UP';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    }
    removeListeners() {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
        this.changeDetector.markForCheck();
    }
    setPositionDropdown() {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    static ɵfac = function PoMultiselectComponent_Factory(t) { return new (t || PoMultiselectComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(PoMultiselectFilterService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectComponent, selectors: [["po-multiselect"]], contentQueries: function PoMultiselectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoMultiselectOptionTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiselectOptionTemplate = _t.first);
        } }, viewQuery: function PoMultiselectComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$N, 5, ElementRef);
            i0.ɵɵviewQuery(_c0$N, 5);
            i0.ɵɵviewQuery(_c1$k, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$9, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        } }, features: [i0.ɵɵProvidersFeature(providers$1), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 18, vars: 30, consts: [[3, "p-disabled", "p-label", "p-optional", "p-required", "p-show-required"], ["cdkOverlayOrigin", "", 1, "po-field-container-content"], ["trigger", "cdkOverlayOrigin"], [1, "po-input-icon-right", "po-multiselect-input", 3, "tabindex", "keydown", "click", "blur"], ["inputElement", ""], ["class", "po-multiselect-input-placeholder", "aria-hidden", "true", 4, "ngIf"], [3, "p-value", "p-literals", "p-removable", "po-clickable", "p-disabled", "p-close", 4, "ngFor", "ngForOf"], [1, "po-field-icon-container-right"], [3, "p-icon", "ngClass"], ["iconElement", ""], [4, "ngIf", "ngIfThen", "ngIfElse"], ["dropdownDefault", ""], ["dropdownCDK", ""], [3, "p-help", "p-disabled"], ["dropdownListbox", ""], ["aria-hidden", "true", 1, "po-multiselect-input-placeholder"], [3, "p-value", "p-literals", "p-removable", "p-disabled", "p-close"], [4, "ngTemplateOutlet"], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen"], [3, "p-searching", "p-hide-search", "p-hide-select-all", "p-literals", "p-options", "p-visible-options", "p-selected-options", "p-placeholder-search", "p-field-value", "p-field-label", "p-multiselect-template", "p-change", "p-change-search", "p-close-dropdown", "keydown"], ["dropdownElement", ""]], template: function PoMultiselectComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2)(3, "div", 3, 4);
            i0.ɵɵlistener("keydown", function PoMultiselectComponent_Template_div_keydown_3_listener($event) { return ctx.onKeyDown($event); })("click", function PoMultiselectComponent_Template_div_click_3_listener() { return ctx.toggleDropdownVisibility(); })("blur", function PoMultiselectComponent_Template_div_blur_3_listener() { return ctx.onBlur(); });
            i0.ɵɵtemplate(5, PoMultiselectComponent_span_5_Template, 2, 1, "span", 5)(6, PoMultiselectComponent_po_tag_6_Template, 1, 6, "po-tag", 6);
            i0.ɵɵelementStart(7, "div", 7);
            i0.ɵɵelement(8, "po-icon", 8, 9);
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(10, PoMultiselectComponent_ng_container_10_Template, 1, 0, "ng-container", 10)(11, PoMultiselectComponent_ng_template_11_Template, 1, 1, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor)(13, PoMultiselectComponent_ng_template_13_Template, 1, 2, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelement(15, "po-field-container-bottom", 13);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(16, PoMultiselectComponent_ng_template_16_Template, 2, 11, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r7 = i0.ɵɵreference(12);
            const _r9 = i0.ɵɵreference(14);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-multiselect-show", ctx.dropdownOpen);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-multiselect-input-auto", ctx.autoHeight)("po-multiselect-input-static", !ctx.autoHeight)("po-multiselect-input-disabled", ctx.disabled)("po-multiselect-input-font", !ctx.disabled && !(ctx.visibleTags == null ? null : ctx.visibleTags.length));
            i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("disabled", ctx.disabled)("aria-label", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.disabled && !(ctx.visibleTags == null ? null : ctx.visibleTags.length));
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.visibleTags);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
            i0.ɵɵpropertyInterpolate("p-icon", ctx.dropdownIcon);
            i0.ɵɵproperty("ngClass", ctx.disabled ? "po-field-icon-disabled" : "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.appendBox)("ngIfThen", _r9)("ngIfElse", _r7);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectComponent, [{
        type: Component,
        args: [{ selector: 'po-multiselect', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$1, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div\n    cdkOverlayOrigin\n    #trigger=\"cdkOverlayOrigin\"\n    class=\"po-field-container-content\"\n    [class.po-multiselect-show]=\"dropdownOpen\"\n  >\n    <div\n      #inputElement\n      [tabindex]=\"disabled ? -1 : 0\"\n      [attr.disabled]=\"disabled\"\n      [attr.aria-label]=\"label\"\n      class=\"po-input-icon-right po-multiselect-input\"\n      [class.po-multiselect-input-auto]=\"autoHeight\"\n      [class.po-multiselect-input-static]=\"!autoHeight\"\n      [class.po-multiselect-input-disabled]=\"disabled\"\n      [class.po-multiselect-input-font]=\"!disabled && !visibleTags?.length\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\"\n      (blur)=\"onBlur()\"\n    >\n      <span *ngIf=\"!disabled && !visibleTags?.length\" class=\"po-multiselect-input-placeholder\" aria-hidden=\"true\">\n        {{ placeholder ? placeholder : literals.selectItem }}\n      </span>\n\n      <po-tag\n        *ngFor=\"let tag of visibleTags; index as i\"\n        [p-value]=\"tag[fieldLabel]\"\n        [p-literals]=\"i + 1 === visibleTags.length && hasMoreTag ? literalsTag : undefined\"\n        [p-removable]=\"true\"\n        [class.po-clickable]=\"tag[fieldValue] === '' && !disabled\"\n        [p-disabled]=\"disabled\"\n        (p-close)=\"closeTag(tag[fieldValue], $event)\"\n      ></po-tag>\n\n      <div class=\"po-field-icon-container-right\">\n        <po-icon\n          p-icon=\"{{ dropdownIcon }}\"\n          #iconElement\n          class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n          [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        >\n        </po-icon>\n      </div>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"appendBox; then dropdownCDK; else dropdownDefault\"> </ng-container>\n\n  <ng-template #dropdownDefault>\n    <ng-container *ngTemplateOutlet=\"dropdownListbox\"> </ng-container>\n  </ng-template>\n\n  <ng-template #dropdownCDK>\n    <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"trigger\" [cdkConnectedOverlayOpen]=\"true\">\n      <ng-container *ngTemplateOutlet=\"dropdownListbox\"></ng-container>\n    </ng-template>\n  </ng-template>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #dropdownListbox>\n  <po-multiselect-dropdown\n    #dropdownElement\n    [p-searching]=\"isServerSearching\"\n    [p-hide-search]=\"hideSearch\"\n    [p-hide-select-all]=\"hideSelectAll\"\n    [p-literals]=\"literals\"\n    [p-options]=\"options\"\n    [p-visible-options]=\"visibleOptionsDropdown\"\n    [p-selected-options]=\"selectedOptions\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    [p-field-value]=\"fieldValue\"\n    [p-field-label]=\"fieldLabel\"\n    [p-multiselect-template]=\"multiselectOptionTemplate\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\n    (keydown)=\"onKeyDownDropdown($event, 0)\"\n  >\n  </po-multiselect-dropdown>\n</ng-template>\n" }]
    }], () => [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: PoControlPositionService }, { type: PoMultiselectFilterService }, { type: PoLanguageService }], { multiselectOptionTemplate: [{
            type: ContentChild,
            args: [PoMultiselectOptionTemplateDirective, { static: true }]
        }], dropdownElement: [{
            type: ViewChild,
            args: ['dropdownElement', { read: ElementRef }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdownElement']
        }], iconElement: [{
            type: ViewChild,
            args: ['iconElement', { read: ElementRef, static: true }]
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMultiselectComponent, { className: "PoMultiselectComponent", filePath: "lib/components/po-field/po-multiselect/po-multiselect.component.ts", lineNumber: 118 }); })();

class PoNumberBaseComponent extends PoInputGeneric {
    type = 'number';
    invalidInputValueOnBlur = false;
    /* istanbul ignore next */
    constructor(elementRef, cd) {
        super(elementRef, cd);
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            this.invalidInputValueOnBlur = false;
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    onBlur(event) {
        const target = event.target;
        this.invalidInputValueOnBlur = target.value === '' && !target.validity.valid;
        if (this.invalidInputValueOnBlur) {
            this.callOnChange('Valor Inválido');
        }
        this.eventOnBlur(event);
    }
    onKeyDown(event) {
        if (!this.isKeyAllowed(event)) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
    isKeyAllowed(event) {
        return this.isShortcut(event) || this.isControlKeys(event) || !this.isInvalidKey(event.key);
    }
    isInvalidKey(key) {
        const validatesKey = new RegExp(/[a-zA-Z:;=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        return validatesKey.test(key);
    }
    isShortcut(event) {
        const key = event.keyCode;
        const ctrl = event.ctrlKey || event.metaKey;
        const keyA = key === 65;
        const keyC = key === 67;
        const keyX = key === 88;
        const keyV = key === 86;
        return (ctrl && keyC) || (ctrl && keyV) || (ctrl && keyA) || (ctrl && keyX);
    }
    isControlKeys(event) {
        const controlKeys = [
            'Backspace',
            'ArrowLeft',
            'ArrowRight',
            'ArrowUp',
            'ArrowDown',
            'Left',
            'Right',
            'Up',
            'Down',
            'Tab',
            'Delete',
            'Home',
            'End',
            'Enter'
        ];
        return controlKeys.indexOf(event.key) !== -1;
    }
    static ɵfac = function PoNumberBaseComponent_Factory(t) { return new (t || PoNumberBaseComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoNumberBaseComponent, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNumberBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], null); })();

function PoNumberComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵelement(1, "po-icon", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoNumberComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoNumberComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-default-value", null)("p-element-ref", ctx_r2.inputEl);
} }
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * O `po-number` é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com p-min, p-max e p-step,
 * respectivamente.
 *
 * @example
 *
 * <example name="po-number-basic" title="PO Number Basic">
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.html"> </file>
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-labs" title="PO Number Labs">
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.html"> </file>
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-calculate" title="PO Number - Calculate">
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.html"> </file>
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.ts"> </file>
 * </example>
 */
class PoNumberComponent extends PoNumberBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Intervalo.
     *
     * @default 1
     */
    step = '1';
    /** Valor mínimo.
     *
     * > Quando o valor mínimo for um número com decimais aconselha-se utilizar junto da propriedade `p-step` também passando a ela um valor decimal.
     */
    min;
    set setMin(min) {
        this.min = !isNaN(min) ? min : undefined;
        this.validateModel();
    }
    /** Valor máximo.
     *
     * > Quando o valor máximo for um número com decimais aconselha-se utilizar junto da propriedade `p-step` também passando a ela um valor decimal.
     */
    max;
    set setMax(max) {
        this.max = !isNaN(max) ? max : undefined;
        this.validateModel();
    }
    id = `po-number[${uuid()}]`;
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
    }
    onWheel(event) {
        event.preventDefault();
    }
    extraValidation(abstractControl) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
        if (minFailed(this.min, abstractControl.value)) {
            return {
                min: {
                    valid: false
                }
            };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        if (this.invalidInputValueOnBlur) {
            this.errorPattern = this.errorPattern || 'Valor Inválido';
            return {
                number: {
                    valid: false
                }
            };
        }
        return null;
    }
    getErrorPatternMessage() {
        return this.errorPattern !== '' && this.containsInvalidClass() ? this.errorPattern : '';
    }
    containsInvalidClass() {
        return ((this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '') ||
            this.invalidInputValueOnBlur);
    }
    static ɵfac = function PoNumberComponent_Factory(t) { return new (t || PoNumberComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNumberComponent, selectors: [["po-number"]], hostBindings: function PoNumberComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("wheel", function PoNumberComponent_wheel_HostBindingHandler($event) { return ctx.onWheel($event); });
        } }, inputs: { step: [i0.ɵɵInputFlags.None, "p-step", "step"], setMin: [i0.ɵɵInputFlags.None, "p-min", "setMin"], setMax: [i0.ɵɵInputFlags.None, "p-max", "setMax"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoNumberComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoNumberComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 26, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["type", "number", 1, "po-input", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "tabindex", "blur", "focus", "input", "keydown"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-default-value", "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", "po-icon-input", 3, "p-icon"], [1, "po-icon-input", 3, "p-default-value", "p-element-ref", "p-change-event"]], template: function PoNumberComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoNumberComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoNumberComponent_Template_input_blur_3_listener($event) { return ctx.onBlur($event); })("focus", function PoNumberComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoNumberComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); })("keydown", function PoNumberComponent_Template_input_keydown_3_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoNumberComponent_po_clean_6_Template, 1, 2, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("max", ctx.max)("min", ctx.min)("name", ctx.name)("step", ctx.step);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPatternMessage());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNumberComponent, [{
        type: Component,
        args: [{ selector: 'po-number', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoNumberComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoNumberComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon po-icon-input\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n    <input\n      #inp\n      class=\"po-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-default-value]=\"null\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\" [p-error-pattern]=\"getErrorPatternMessage()\">\n  </po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { step: [{
            type: Input,
            args: ['p-step']
        }], setMin: [{
            type: Input,
            args: ['p-min']
        }], setMax: [{
            type: Input,
            args: ['p-max']
        }], onWheel: [{
            type: HostListener,
            args: ['wheel', ['$event']]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNumberComponent, { className: "PoNumberComponent", filePath: "lib/components/po-field/po-number/po-number.component.ts", lineNumber: 61 }); })();

function PoPasswordComponent_po_clean_7_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoPasswordComponent_po_clean_7_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
} }
function PoPasswordComponent_po_icon_8_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 11);
    i0.ɵɵlistener("click", function PoPasswordComponent_po_icon_8_Template_po_icon_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.showPassword()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-icon", ctx_r2.visiblePassword ? "ICON_EYE" : "ICON_EYE_OFF po-field-icon-disabled")("ngClass", !ctx_r2.visiblePassword ? "po-field-icon-disabled" : "");
} }
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 * O `po-password` é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * @example
 *
 * <example name="po-password-basic" title="PO Password Basic">
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-labs" title="PO Password Labs">
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-reset" title="PO Password - Reset">
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
 * </example>
 */
class PoPasswordComponent extends PoInputGeneric {
    id = `po-password[${uuid()}]`;
    type = 'password';
    visiblePassword = false;
    _hidePasswordPeek = false;
    /**
     * @optional
     *
     * @description
     *
     * Permite esconder a função de espiar a senha digitada.
     *
     * @default `false`
     */
    set hidePasswordPeek(value) {
        this._hidePasswordPeek = convertToBoolean(value);
        if (value) {
            this.visiblePassword = false;
            this.type = 'password';
        }
    }
    get hidePasswordPeek() {
        return this._hidePasswordPeek;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'new-password' : 'on';
    }
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
    }
    extraValidation(c) {
        return null;
    }
    showPassword() {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    }
    static ɵfac = function PoPasswordComponent_Factory(t) { return new (t || PoPasswordComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPasswordComponent, selectors: [["po-password"]], inputs: { hidePasswordPeek: [i0.ɵɵInputFlags.None, "p-hide-password-peek", "hidePasswordPeek"] }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoPasswordComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoPasswordComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 28, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-field-icon-container-left"], ["p-icon", "ICON_LOCK"], [1, "po-input", "po-input-icon-left", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-element-ref", "p-change-event", 4, "ngIf"], ["class", "po-field-icon po-icon-input", 3, "p-icon", "ngClass", "click", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-icon-input", 3, "p-element-ref", "p-change-event"], [1, "po-field-icon", "po-icon-input", 3, "p-icon", "ngClass", "click"]], template: function PoPasswordComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2);
            i0.ɵɵelement(3, "po-icon", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoPasswordComponent_Template_input_blur_4_listener($event) { return ctx.eventOnBlur($event); })("click", function PoPasswordComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); })("focus", function PoPasswordComponent_Template_input_focus_4_listener($event) { return ctx.eventOnFocus($event); })("input", function PoPasswordComponent_Template_input_input_4_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtemplate(7, PoPasswordComponent_po_clean_7_Template, 1, 1, "po-clean", 7)(8, PoPasswordComponent_po_icon_8_Template, 1, 2, "po-icon", 8);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(9, "po-field-container-bottom", 9);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(5);
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(3);
            i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-double-icon-right", ctx.clean && _r0.value && !ctx.hidePasswordPeek)("po-input-icon-right", ctx.clean || !ctx.hidePasswordPeek);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.disabled ? "password" : ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hidePasswordPeek && !ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgClass, i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPasswordComponent, [{
        type: Component,
        args: [{ selector: 'po-password', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoPasswordComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoPasswordComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <po-icon\n        p-icon=\"ICON_LOCK\"\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n      >\n      </po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.po-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n\n      <po-icon\n        *ngIf=\"!hidePasswordPeek && !disabled\"\n        [p-icon]=\"visiblePassword ? 'ICON_EYE' : 'ICON_EYE_OFF po-field-icon-disabled'\"\n        class=\"po-field-icon po-icon-input\"\n        [ngClass]=\"!visiblePassword ? 'po-field-icon-disabled' : ''\"\n        (click)=\"showPassword()\"\n      >\n      </po-icon>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\" [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { hidePasswordPeek: [{
            type: Input,
            args: ['p-hide-password-peek']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPasswordComponent, { className: "PoPasswordComponent", filePath: "lib/components/po-field/po-password/po-password.component.ts", lineNumber: 47 }); })();

class PoRichTextService {
    model = new Subject();
    emitModel(value) {
        this.model.next(value);
    }
    getModel() {
        return this.model.asObservable();
    }
    static ɵfac = function PoRichTextService_Factory(t) { return new (t || PoRichTextService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoRichTextService, factory: PoRichTextService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextService, [{
        type: Injectable
    }], null, null); })();

/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
class PoRichTextBaseComponent {
    richTextService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * @optional
     *
     * @description
     *
     * Define se o alinhamento de texto será desabilitado.
     *
     * @default `false`
     */
    disabledTextAlign = false;
    /**
     * @description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     */
    errorMessage = '';
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label;
    /** Nome e identificador do campo. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
     */
    changeModel = new EventEmitter();
    invalid = false;
    onChangeModel = null;
    value;
    _height;
    _placeholder;
    _readonly;
    _required;
    validatorChange;
    // eslint-disable-next-line
    onTouched = null;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(value) {
        this._required = convertToBoolean(value);
        this.validateModel(this.value);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    constructor(richTextService) {
        this.richTextService = richTextService;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        this.value = value;
        this.richTextService.emitModel(value);
    }
    // Executa a função onChange
    updateModel(value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    }
    validateModel(value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    }
    static ɵfac = function PoRichTextBaseComponent_Factory(t) { return new (t || PoRichTextBaseComponent)(i0.ɵɵdirectiveInject(PoRichTextService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRichTextBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], disabledTextAlign: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled-text-align", "disabledTextAlign", convertToBoolean], errorMessage: [i0.ɵɵInputFlags.None, "p-error-message", "errorMessage"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], name: "name", optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, outputs: { change: "p-change", changeModel: "p-change-model" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextBaseComponent, [{
        type: Directive
    }], () => [{ type: PoRichTextService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], disabledTextAlign: [{
            type: Input,
            args: [{ alias: 'p-disabled-text-align', transform: convertToBoolean }]
        }], errorMessage: [{
            type: Input,
            args: ['p-error-message']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], name: [{
            type: Input,
            args: ['name']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();

const _c0$M = ["bodyElement"];
const poRichTextBodyCommands = [
    'bold',
    'italic',
    'underline',
    'justifyleft',
    'justifycenter',
    'justifyright',
    'justifyfull',
    'insertUnorderedList',
    'Createlink'
];
class PoRichTextBodyComponent {
    richTextService;
    bodyElement;
    height;
    label;
    modelValue;
    placeholder;
    readonly;
    change = new EventEmitter();
    commands = new EventEmitter();
    selectedLink = new EventEmitter();
    shortcutCommand = new EventEmitter();
    value = new EventEmitter();
    blur = new EventEmitter();
    isLinkEditing;
    linkElement;
    timeoutChange;
    valueBeforeChange;
    modelSubscription;
    constructor(richTextService) {
        this.richTextService = richTextService;
    }
    ngOnInit() {
        this.bodyElement.nativeElement.designMode = 'on';
        this.modelSubscription = this.richTextService.getModel().subscribe(modelValue => {
            this.modelValue = modelValue;
            this.bodyElement.nativeElement.innerHTML = '';
            this.updateValueWithModelValue();
            this.addClickListenerOnAnchorElements();
        });
    }
    ngOnDestroy() {
        this.modelSubscription?.unsubscribe();
    }
    executeCommand(command) {
        this.bodyElement.nativeElement.focus();
        if (typeof command === 'object') {
            if (command.command === 'InsertHTML') {
                const { command: linkCommand, value: { urlLink }, value: { urlLinkText } } = command;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    }
    linkEditing(event) {
        this.isLinkEditing = !!event;
    }
    onBlur() {
        this.blur.emit();
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(this.modelValue);
            }, 200);
        }
    }
    focus() {
        this.bodyElement.nativeElement.focus();
    }
    onClick() {
        this.emitSelectionCommands();
    }
    onFocus() {
        this.valueBeforeChange = this.modelValue;
    }
    onKeyDown(event) {
        const keyK = event.keyCode === PoKeyCodeEnum.keyK;
        const isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
        if (isLinkShortcut) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
        this.toggleCursorOnLink(event, 'add');
    }
    onKeyUp(event) {
        this.toggleCursorOnLink(event, 'remove');
        this.removeBrElement();
        this.updateModel();
        this.emitSelectionCommands();
    }
    onPaste() {
        this.update();
        setTimeout(() => this.addClickListenerOnAnchorElements());
    }
    update() {
        setTimeout(() => this.updateModel());
        setTimeout(() => {
            this.removeBrElement();
            this.updateModel();
            this.emitSelectionCommands();
        });
    }
    addClickListenerOnAnchorElements() {
        this.bodyElement.nativeElement.querySelectorAll('a').forEach(element => {
            element.addEventListener('click', this.onAnchorClick);
        });
    }
    emitSelectionCommands() {
        const commands = poRichTextBodyCommands.filter(command => document.queryCommandState(command));
        const rgbColor = document.queryCommandValue('ForeColor');
        let hexColor;
        if (!isIE()) {
            hexColor = this.rgbToHex(rgbColor);
        }
        if (this.isCursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
        this.commands.emit({ commands, hexColor });
    }
    getTextSelection() {
        const textSelection = document.getSelection();
        if (!textSelection) {
            return;
        }
        const focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
        const anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
        const node = focusNode || anchorNode;
        let tagName;
        if (node) {
            tagName = node['tagName'] || node['nodeName'];
            return {
                node,
                tagName
            };
        }
    }
    handleCommandLink(linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
            const linkValue = isFirefox() && !this.isLinkEditing
                ? `&nbsp;${this.makeLinkTag(urlLink, urlLinkText)}&nbsp;`
                : this.makeLinkTag(urlLink, urlLinkText);
            document.execCommand(linkCommand, false, linkValue);
        }
        this.addClickListenerOnAnchorElements();
    }
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    insertHtmlLinkElement(urlLink, urlLinkText) {
        const selection = document.getSelection();
        const selectionRange = selection.getRangeAt(0);
        const elementLink = document.createElement('a');
        const elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    }
    isCursorPositionedInALink() {
        const textSelection = this.getTextSelection();
        this.linkElement = undefined;
        let isLink = false;
        if (textSelection && textSelection.node && textSelection.tagName === 'A') {
            this.linkElement = textSelection.node;
            isLink = true;
        }
        else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
            isLink = true;
        }
        else {
            isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
        }
        return isLink;
    }
    isParentNodeAnchor(textSelection) {
        let element = textSelection.node;
        let isLink = false;
        while (element && (element.tagName !== null || element.nodeName !== null)) {
            if (element.tagName === 'A' || element.nodeName === 'A') {
                this.linkElement = element;
                isLink = true;
                return isLink;
            }
            element = element.parentElement || element.parentNode;
        }
        this.linkElement = undefined;
        return isLink;
    }
    makeLinkTag(urlLink, urlLinkText) {
        return `<a class="po-rich-text-link" href="${urlLink}" target="_blank">${urlLinkText || urlLink}</a>`;
    }
    onAnchorClick = event => {
        const { target, ctrlKey, metaKey } = event;
        let url;
        let elementLink;
        if (ctrlKey || metaKey) {
            if (event.path) {
                event.path.forEach(element => {
                    if (element.nodeName === 'A') {
                        url = element.href;
                        elementLink = element;
                    }
                });
            }
            else {
                url = target.attributes.href.value;
                elementLink = target;
            }
            openExternalLink(url);
            elementLink.classList.remove('po-clickable');
        }
    };
    // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
    removeBrElement() {
        const bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
    }
    rgbToHex(rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        const sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        let r = (+rgb[0]).toString(16);
        let g = (+rgb[1]).toString(16);
        let b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    }
    toggleCursorOnLink(event, action) {
        const selection = document.getSelection();
        const element = selection.focusNode ? selection.focusNode.parentNode : undefined;
        const isCtrl = event.key === 'Control';
        const isCommand = event.key === 'Meta';
        const isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
        if (element) {
            if (isOnCtrlLink) {
                element['classList'][action]('po-clickable');
            }
            else {
                const isClickable = element['classList'] && element['classList'].contains('po-clickable');
                if (isClickable) {
                    element['classList'].remove('po-clickable');
                }
            }
            this.updateModel();
        }
    }
    updateModel() {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    }
    updateValueWithModelValue() {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    }
    verifyCursorPositionInFirefoxIEEdge() {
        const textSelection = document.getSelection();
        const nodeLink = textSelection.focusNode;
        let isLink = false;
        if (nodeLink && nodeLink.nodeName === 'A') {
            this.linkElement = nodeLink;
            isLink = true;
        }
        else {
            const range = textSelection.getRangeAt(0);
            const fragmentDocument = range.cloneContents();
            const element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
            this.linkElement = element && element.nodeName === 'A' ? element : undefined;
            isLink = !!this.linkElement;
        }
        return isLink;
    }
    static ɵfac = function PoRichTextBodyComponent_Factory(t) { return new (t || PoRichTextBodyComponent)(i0.ɵɵdirectiveInject(PoRichTextService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextBodyComponent, selectors: [["po-rich-text-body"]], viewQuery: function PoRichTextBodyComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$M, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyElement = _t.first);
        } }, inputs: { height: [i0.ɵɵInputFlags.None, "p-height", "height"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], modelValue: [i0.ɵɵInputFlags.None, "p-model-value", "modelValue"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"] }, outputs: { change: "p-change", commands: "p-commands", selectedLink: "p-selected-link", shortcutCommand: "p-shortcut-command", value: "p-value", blur: "p-blur" }, decls: 2, vars: 5, consts: [["tabindex", "0", 1, "po-rich-text-body", 3, "blur", "click", "cut", "focus", "keydown", "keyup", "paste"], ["bodyElement", ""]], template: function PoRichTextBodyComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("blur", function PoRichTextBodyComponent_Template_div_blur_0_listener() { return ctx.onBlur(); })("click", function PoRichTextBodyComponent_Template_div_click_0_listener() { return ctx.onClick(); })("cut", function PoRichTextBodyComponent_Template_div_cut_0_listener() { return ctx.update(); })("focus", function PoRichTextBodyComponent_Template_div_focus_0_listener() { return ctx.onFocus(); })("keydown", function PoRichTextBodyComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); })("keyup", function PoRichTextBodyComponent_Template_div_keyup_0_listener($event) { return ctx.onKeyUp($event); })("paste", function PoRichTextBodyComponent_Template_div_paste_0_listener() { return ctx.onPaste(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵattribute("aria-label", ctx.label)("contenteditable", !ctx.readonly)("data-placeholder", ctx.placeholder);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextBodyComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-body', template: "<div\n  #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.aria-label]=\"label\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  (paste)=\"onPaste()\"\n></div>\n" }]
    }], () => [{ type: PoRichTextService }], { bodyElement: [{
            type: ViewChild,
            args: ['bodyElement', { static: true }]
        }], height: [{
            type: Input,
            args: ['p-height']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], modelValue: [{
            type: Input,
            args: ['p-model-value']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], commands: [{
            type: Output,
            args: ['p-commands']
        }], selectedLink: [{
            type: Output,
            args: ['p-selected-link']
        }], shortcutCommand: [{
            type: Output,
            args: ['p-shortcut-command']
        }], value: [{
            type: Output,
            args: ['p-value']
        }], blur: [{
            type: Output,
            args: ['p-blur']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextBodyComponent, { className: "PoRichTextBodyComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text-body/po-rich-text-body.component.ts", lineNumber: 25 }); })();

const poRichTextLiteralsDefault = {
    en: {
        bold: 'Bold',
        italic: 'Italic',
        underline: 'Underline',
        left: 'Left',
        center: 'Center',
        right: 'Right',
        justify: 'Justify',
        textColor: 'Text color',
        unorderedList: 'Bulleted list',
        insertLink: 'Insert link',
        linkTextLabel: 'Text with link',
        linkUrlTextHelper: 'Paste in the text box below the copied browser link',
        linkUrlTextPlaceholder: 'Enter the link address that will be attached to the text.',
        cancel: 'Cancel',
        editLink: 'Edit link',
        insert: 'Insert',
        insertImage: 'Insert image',
        urlImage: 'URL image'
    },
    es: {
        bold: 'Negrita',
        italic: 'Cursiva',
        underline: 'Subrayado',
        left: 'Izquierda',
        center: 'Centro',
        right: 'Derecha',
        justify: 'Justificado',
        textColor: 'Color del texto',
        unorderedList: 'Lista con viñetas',
        insertLink: 'Insertar el link',
        linkTextLabel: 'Texto con enlace',
        linkUrlTextHelper: 'Pegue en el cuadro de texto debajo del enlace del navegador copiado',
        linkUrlTextPlaceholder: 'Ingrese la dirección del enlace que se adjuntará al texto.',
        cancel: 'Cancelar',
        editLink: 'Editar enlace',
        insert: 'Insertar',
        insertImage: 'Insertar imagen',
        urlImage: 'Imagen URL'
    },
    pt: {
        bold: 'Negrito',
        italic: 'Itálico',
        underline: 'Sublinhado',
        left: 'Esquerda',
        center: 'Centro',
        right: 'Direita',
        justify: 'Justificado',
        textColor: 'Cor do texto',
        unorderedList: 'Lista com marcadores',
        insertLink: 'Inserir link',
        linkTextLabel: 'Texto com link',
        linkUrlTextHelper: 'Cole na caixa de texto abaixo o link copiado do navegador',
        linkUrlTextPlaceholder: 'Insira o endereço do link que será anexado ao texto',
        cancel: 'Cancelar',
        editLink: 'Editar link',
        insert: 'Inserir',
        insertImage: 'Inserir imagem',
        urlImage: 'Imagem em URL'
    },
    ru: {
        bold: 'Жирный',
        italic: 'Италик',
        underline: 'Подчеркивание',
        left: 'Влево',
        center: 'Центр',
        right: 'Вправо',
        justify: 'Растянуть',
        textColor: 'Цвет текста',
        unorderedList: 'Список',
        insertLink: 'Вставьте ссылку',
        linkTextLabel: 'Текст со ссылкой',
        linkUrlTextHelper: 'Вставьте в текстовое поле ниже скопированную ссылку',
        linkUrlTextPlaceholder: 'Вставьте ссылку для привязки к тексту',
        cancel: 'Отмена',
        editLink: 'Редактировать ссылку',
        insert: 'Вставить',
        insertImage: 'Вставить изображение',
        urlImage: 'Ссылка на изображение'
    }
};

// Enum de status de envio dos arquivos.
var PoUploadStatus;
(function (PoUploadStatus) {
    // Enviou com sucesso.
    PoUploadStatus[PoUploadStatus["Uploaded"] = 0] = "Uploaded";
    // Está enviando.
    PoUploadStatus[PoUploadStatus["Uploading"] = 1] = "Uploading";
    // Ocorreu algum erro no envio.
    PoUploadStatus[PoUploadStatus["Error"] = 2] = "Error";
    // Não enviou ou aconteceu algum erro.
    PoUploadStatus[PoUploadStatus["None"] = 3] = "None";
})(PoUploadStatus || (PoUploadStatus = {}));

// Classe responsável pelo arquivo do PO Upload
class PoUploadFile {
    // Nome do arquivo.
    name;
    // Arquivo bruto.
    rawFile;
    // Status de envio do arquivo.
    status;
    // Identificador do arquivo.
    uid;
    // Extensão do arquivo.
    extension;
    // Tamanho do arquivo em bytes;
    size;
    // propriedade para auxiliar a exibição do texto no componente progress
    displayName;
    // porcentagem utilizada para repassar ao componente progress
    percent;
    constructor(file) {
        if (file) {
            this.name = file.name;
            this.displayName = `${file.name} - ${this.getFileSize(file.size)}`;
            this.extension = this.getExtension(file.name);
            this.size = file.size;
            this.rawFile = file;
            this.uid = this.generateUUID();
            this.status = PoUploadStatus.None;
        }
    }
    getExtension(value) {
        if (value) {
            const extension = value.substr(value.lastIndexOf('.'));
            return extension.toLowerCase();
        }
        return '';
    }
    generateUUID() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }
    // Retorna o tamanho do arquivo em KBytes.
    getFileSize(size) {
        let kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return `${kbSize} KB`;
    }
}

class PoUploadBaseService {
    http;
    formField = 'files';
    requests = [];
    constructor(http) {
        this.http = http;
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    upload(url, files, headers, tOnUpload, uploadCallback, successCallback, errorCallback) {
        const filesLength = files.length;
        const uploadEvent = {
            data: {},
            file: null,
            url: url,
            headers: headers
        };
        for (let i = 0; i < filesLength; i++) {
            const formData = new FormData();
            const file = files[i];
            const fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
                url = uploadEvent.url;
                headers = uploadEvent.headers;
            }
            this.sendFile(url, file, headers, formData, uploadCallback, successCallback, errorCallback);
        }
    }
    sendFile(url, file, headers, formData, uploadCallback, successCallback, errorCallback) {
        let request = new Subscription();
        request = this.getRequest(url, headers, formData).subscribe(event => {
            if (event.type === HttpEventType.UploadProgress) {
                this.addRequest(file, request);
                const percentDone = Math.round((100 * event.loaded) / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }, (err) => {
            errorCallback(file, err);
        });
    }
    getRequest(url, headers, formData) {
        const httpHeaders = new HttpHeaders(headers);
        const req = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            headers: httpHeaders
        });
        return this.http.request(req);
    }
    stopRequestByFile(file, callback) {
        const requestObj = this.requests.find(req => req.file.uid === file.uid);
        if (requestObj) {
            const request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    }
    removeRequest(requestObj) {
        const index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    }
    addRequest(file, request) {
        const hasRequest = this.requests.some(req => req.file.uid === file.uid);
        if (!hasRequest) {
            this.requests.push({ file, request });
        }
    }
    static ɵfac = function PoUploadBaseService_Factory(t) { return new (t || PoUploadBaseService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoUploadBaseService, factory: PoUploadBaseService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadBaseService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

class PoUploadService extends PoUploadBaseService {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoUploadService_BaseFactory; return function PoUploadService_Factory(t) { return (ɵPoUploadService_BaseFactory || (ɵPoUploadService_BaseFactory = i0.ɵɵgetInheritedFactory(PoUploadService)))(t || PoUploadService); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoUploadService, factory: PoUploadService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadService, [{
        type: Injectable
    }], null, null); })();

const poUploadLiteralsDefault = {
    en: {
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    },
    es: {
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    },
    pt: {
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    },
    ru: {
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }
};
const poUploadFormFieldDefault = 'files';
const poUploadMaxFileSize = 31457280; // 30MB
const poUploadMinFileSize = 0;
/**
 * @description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 */
class PoUploadBaseComponent {
    uploadService;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /**
     * @optional
     *
     * @description
     *
     * Define em *pixels* a altura da área onde podem ser arrastados os arquivos. A altura mínima aceita é `160px`.
     *
     * > Esta propriedade funciona somente se a propriedade `p-drag-drop` estiver habilitada.
     *
     * @default `320`
     */
    dragDropHeight;
    /** Rótulo do campo. */
    label;
    /** Texto de apoio para o campo. */
    help;
    /** URL que deve ser feita a requisição com os arquivos selecionados. */
    url;
    /** Define o valor do atributo `name` do componente. */
    name = 'file';
    /**
     * @optional
     *
     * @description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * > Esta propriedade funciona somente se a propriedade `p-url` tiver um valor atribuído.
     *
     * @default `false`
     */
    autoUpload = false;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `p-required`;
     *  - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /** Objeto que contém os cabeçalhos que será enviado na requisição dos arquivos. */
    headers;
    /**
     * @optional
     *
     * @description
     *
     * Define se a propriedade `p-url` é obrigatória.
     *
     * Caso a propriedade seja definida como `false`:
     * - o botão de "Selecionar arquivo" ficará habilitado mesmo sem a propriedade `p-url` definida.
     * - o botão "Iniciar envio" ficará oculto até que a propriedade `p-url` seja definida.
     *
     * > Se utilizada com a propriedade `p-auto-upload` definida como `true` será necessário definir a propriedade `p-url`.
     *
     * @default `true`
     */
    requiredUrl = true;
    /**
     * @optional
     *
     * @description
     *
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propriedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuário'};
     * ```
     */
    onUpload = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     */
    onError = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     */
    onSuccess = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-upload ... [ngModel]="UploadModel" (ngModelChange)="uploadModel = $event"> </po-upload>
     * ```
     *
     */
    ngModelChange = new EventEmitter();
    allowedExtensions;
    currentFiles;
    canHandleDirectory;
    onModelChange;
    extensionNotAllowed = 0;
    quantityNotAllowed = 0;
    sizeNotAllowed = 0;
    onModelTouched = null;
    _directory;
    _disabled;
    _dragDrop = false;
    _fileRestrictions;
    _formField;
    _hideRestrictionsInfo;
    _hideSelectButton;
    _hideSendButton;
    _isMultiple;
    _literals;
    _required;
    language;
    validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
     *
     * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
     *
     * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
     *
     * @default `false`
     */
    set directory(value) {
        this._directory = convertToBoolean(value);
        this.canHandleDirectory = this._directory && !isIE() && !isMobile();
        this.setDirectoryAttribute(this.canHandleDirectory);
    }
    get directory() {
        return this._directory;
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
     * automaticamente.
     *
     * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
     *
     * @default `false`
     */
    set dragDrop(value) {
        this._dragDrop = convertToBoolean(value);
    }
    get dragDrop() {
        return this._dragDrop;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta visualmente as informações de restrições para o upload.
     *
     * @default `false`
     */
    set hideRestrictionsInfo(value) {
        this._hideRestrictionsInfo = convertToBoolean(value);
    }
    get hideRestrictionsInfo() {
        return this._hideRestrictionsInfo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de seleção de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `selectFiles()` para seleção de arquivos.
     *
     * @default `false`
     */
    set hideSelectButton(value) {
        this._hideSelectButton = convertToBoolean(value);
    }
    get hideSelectButton() {
        return this._hideSelectButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de envio de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
     *
     * @default `false`
     */
    set hideSendButton(value) {
        this._hideSendButton = convertToBoolean(value);
    }
    get hideSendButton() {
        return this._hideSendButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-upload`.
     *
     * Existem duas maneiras de customizar o componente:
     *
     * - passando um objeto implementando a interface `PoUploadLiterals` com todas as literais disponíveis;
     * - passando apenas as literais que deseja customizar:
     * ```
     *  const customLiterals: PoUploadLiterals = {
     *    folders: 'Pastas',
     *    selectFile: 'Buscar arquivo',
     *    startSending: 'Enviar'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-upload
     *   [p-literals]="customLiterals">
     * </po-upload>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es, ru).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poUploadLiteralsDefault[poLocaleDefault],
                ...poUploadLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poUploadLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poUploadLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
     * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
     */
    set fileRestrictions(restrictions) {
        this._fileRestrictions = this.initRestrictions(restrictions);
        this.setAllowedExtensions(restrictions);
    }
    get fileRestrictions() {
        return this._fileRestrictions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
     *
     * @default `files`
     */
    set formField(value) {
        this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
        this.getUploadService().formField = this.formField;
    }
    get formField() {
        return this._formField;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.currentFiles);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se pode selecionar mais de um arquivo.
     *
     * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
     */
    set isMultiple(value) {
        this._isMultiple = convertToBoolean(value);
    }
    get isMultiple() {
        return this.canHandleDirectory ? true : this._isMultiple;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.currentFiles);
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    constructor(uploadService, languageService) {
        this.uploadService = uploadService;
        this.language = languageService.getShortLanguage();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    }
    isExceededFileLimit(currentFilesLength) {
        return (this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength);
    }
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    parseFiles(files) {
        let poUploadFiles = this.currentFiles || [];
        const filesLength = files.length;
        for (let i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            const file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Verifica se o arquivo está de acordo com as restrições.
    checkRestrictions(file) {
        const restrictions = this.fileRestrictions;
        if (restrictions) {
            const allowedExtensions = restrictions.allowedExtensions;
            const minFileSize = restrictions.minFileSize;
            const maxFileSize = restrictions.maxFileSize;
            const isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            const isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    }
    existsFileSameName(file, files) {
        return files.some(currentFile => file.name === currentFile.name);
    }
    getUploadService() {
        return this.uploadService;
    }
    insertFileInFiles(newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    }
    isAllowedExtension(extension, allowedExtensions = []) {
        const isAllowed = allowedExtensions.some(ext => ext.toLowerCase() === extension);
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    }
    setAllowedExtensions(restrictions = {}) {
        const _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    }
    initRestrictions(restrictions) {
        if (!restrictions) {
            return;
        }
        const minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        const maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return {
            ...restrictions,
            maxFileSize: maxFileSize,
            minFileSize: minFileSize
        };
    }
    updateExistsFileInFiles(newFile, files) {
        const fileIndex = files.findIndex(currentFile => newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded);
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    }
    static ɵfac = function PoUploadBaseComponent_Factory(t) { return new (t || PoUploadBaseComponent)(i0.ɵɵdirectiveInject(PoUploadService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoUploadBaseComponent, hostVars: 1, hostBindings: function PoUploadBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-required-url", ctx.requiredUrl);
        } }, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], dragDropHeight: [i0.ɵɵInputFlags.None, "p-drag-drop-height", "dragDropHeight"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], url: [i0.ɵɵInputFlags.None, "p-url", "url"], name: "name", autoUpload: [i0.ɵɵInputFlags.None, "p-auto-upload", "autoUpload"], optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], headers: [i0.ɵɵInputFlags.None, "p-headers", "headers"], requiredUrl: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-required-url", "requiredUrl", convertToBoolean], directory: [i0.ɵɵInputFlags.None, "p-directory", "directory"], dragDrop: [i0.ɵɵInputFlags.None, "p-drag-drop", "dragDrop"], hideRestrictionsInfo: [i0.ɵɵInputFlags.None, "p-hide-restrictions-info", "hideRestrictionsInfo"], hideSelectButton: [i0.ɵɵInputFlags.None, "p-hide-select-button", "hideSelectButton"], hideSendButton: [i0.ɵɵInputFlags.None, "p-hide-send-button", "hideSendButton"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], fileRestrictions: [i0.ɵɵInputFlags.None, "p-restrictions", "fileRestrictions"], formField: [i0.ɵɵInputFlags.None, "p-form-field", "formField"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], isMultiple: [i0.ɵɵInputFlags.None, "p-multiple", "isMultiple"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, outputs: { onUpload: "p-upload", onError: "p-error", onSuccess: "p-success", ngModelChange: "ngModelChange" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadBaseComponent, [{
        type: Directive
    }], () => [{ type: PoUploadService }, { type: PoLanguageService }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], dragDropHeight: [{
            type: Input,
            args: ['p-drag-drop-height']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], url: [{
            type: Input,
            args: ['p-url']
        }], name: [{
            type: Input,
            args: ['name']
        }], autoUpload: [{
            type: Input,
            args: ['p-auto-upload']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], headers: [{
            type: Input,
            args: ['p-headers']
        }], requiredUrl: [{
            type: HostBinding,
            args: ['attr.p-required-url']
        }, {
            type: Input,
            args: [{ alias: 'p-required-url', transform: convertToBoolean }]
        }], onUpload: [{
            type: Output,
            args: ['p-upload']
        }], onError: [{
            type: Output,
            args: ['p-error']
        }], onSuccess: [{
            type: Output,
            args: ['p-success']
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], directory: [{
            type: Input,
            args: ['p-directory']
        }], dragDrop: [{
            type: Input,
            args: ['p-drag-drop']
        }], hideRestrictionsInfo: [{
            type: Input,
            args: ['p-hide-restrictions-info']
        }], hideSelectButton: [{
            type: Input,
            args: ['p-hide-select-button']
        }], hideSendButton: [{
            type: Input,
            args: ['p-hide-send-button']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], fileRestrictions: [{
            type: Input,
            args: ['p-restrictions']
        }], formField: [{
            type: Input,
            args: ['p-form-field']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], isMultiple: [{
            type: Input,
            args: ['p-multiple']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();

const _c0$L = ["selectFilesLink"];
function PoUploadDragDropAreaComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoUploadDragDropAreaComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 5);
    i0.ɵɵelementStart(1, "div", 6);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.directoryCompatible ? ctx_r1.literals == null ? null : ctx_r1.literals.dropFoldersHere : ctx_r1.literals == null ? null : ctx_r1.literals.dropFilesHere, " ");
} }
const _c1$j = a0 => ({ "po-clickable": a0 });
function PoUploadDragDropAreaComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelement(0, "po-icon", 7);
    i0.ɵɵelementStart(1, "div", 8);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "button", 9, 10);
    i0.ɵɵlistener("click", function PoUploadDragDropAreaComponent_ng_template_5_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.selectFiles.emit()); });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r3.directoryCompatible ? ctx_r3.literals == null ? null : ctx_r3.literals.dragFoldersHere : ctx_r3.literals == null ? null : ctx_r3.literals.dragFilesHere, " ");
    i0.ɵɵadvance();
    i0.ɵɵproperty("disabled", ctx_r3.disabled)("ngClass", i0.ɵɵpureFunction1(4, _c1$j, !ctx_r3.disabled));
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r3.directoryCompatible ? ctx_r3.literals == null ? null : ctx_r3.literals.selectFolderOnComputer : ctx_r3.literals == null ? null : ctx_r3.literals.selectFilesOnComputer, " ");
} }
const _c2$8 = a0 => ({ "po-upload-drag-drop-area-disabled": a0 });
class PoUploadDragDropAreaComponent {
    elementRef;
    directoryCompatible;
    disabled;
    height;
    literals;
    overlay;
    selectFiles = new EventEmitter();
    selectFilesLinkElement;
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    focus() {
        this.selectFilesLinkElement.nativeElement.focus();
    }
    static ɵfac = function PoUploadDragDropAreaComponent_Factory(t) { return new (t || PoUploadDragDropAreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropAreaComponent, selectors: [["po-upload-drag-drop-area"]], viewQuery: function PoUploadDragDropAreaComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$L, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectFilesLinkElement = _t.first);
        } }, inputs: { directoryCompatible: [i0.ɵɵInputFlags.None, "p-directory-compatible", "directoryCompatible"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], overlay: [i0.ɵɵInputFlags.None, "p-overlay", "overlay"] }, outputs: { selectFiles: "p-select-files" }, decls: 7, vars: 8, consts: [[1, "po-upload-drag-drop-area", 3, "ngClass"], [1, "po-upload-drag-drop-area-container"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["overlayTemplate", ""], ["defaultTemplate", ""], ["p-icon", "ICON_UPLOAD_CLOUD", 1, "po-upload-drag-drop-area-overlay-icon"], [1, "po-upload-drag-drop-area-overlay-label"], ["p-icon", "ICON_UPLOAD_CLOUD", 1, "po-upload-drag-drop-area-icon"], [1, "po-upload-drag-drop-area-label"], [1, "po-upload-drag-drop-area-select-files", 3, "disabled", "ngClass", "click"], ["selectFilesLink", ""]], template: function PoUploadDragDropAreaComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoUploadDragDropAreaComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, PoUploadDragDropAreaComponent_ng_template_3_Template, 3, 1, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor)(5, PoUploadDragDropAreaComponent_ng_template_5_Template, 6, 6, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(4);
            const _r4 = i0.ɵɵreference(6);
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c2$8, ctx.disabled));
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.overlay && !ctx.disabled)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, dependencies: [i1.NgClass, i1.NgIf, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropAreaComponent, [{
        type: Component,
        args: [{ selector: 'po-upload-drag-drop-area', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"po-upload-drag-drop-area\"\n  [ngClass]=\"{ 'po-upload-drag-drop-area-disabled': disabled }\"\n  [style.height.px]=\"height\"\n>\n  <div class=\"po-upload-drag-drop-area-container\">\n    <ng-container *ngIf=\"overlay && !disabled; then overlayTemplate; else defaultTemplate\"> </ng-container>\n  </div>\n</div>\n\n<ng-template #overlayTemplate>\n  <po-icon p-icon=\"ICON_UPLOAD_CLOUD\" class=\"po-upload-drag-drop-area-overlay-icon\"></po-icon>\n  <div class=\"po-upload-drag-drop-area-overlay-label\">\n    {{ directoryCompatible ? literals?.dropFoldersHere : literals?.dropFilesHere }}\n  </div>\n</ng-template>\n\n<ng-template #defaultTemplate>\n  <po-icon p-icon=\"ICON_UPLOAD_CLOUD\" class=\"po-upload-drag-drop-area-icon\"></po-icon>\n  <div class=\"po-upload-drag-drop-area-label\">\n    {{ directoryCompatible ? literals?.dragFoldersHere : literals?.dragFilesHere }}\n  </div>\n\n  <button\n    #selectFilesLink\n    class=\"po-upload-drag-drop-area-select-files\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-clickable': !disabled }\"\n    (click)=\"selectFiles.emit()\"\n  >\n    {{ directoryCompatible ? literals?.selectFolderOnComputer : literals?.selectFilesOnComputer }}\n  </button>\n</ng-template>\n" }]
    }], () => [{ type: i0.ElementRef }], { directoryCompatible: [{
            type: Input,
            args: ['p-directory-compatible']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], overlay: [{
            type: Input,
            args: ['p-overlay']
        }], selectFiles: [{
            type: Output,
            args: ['p-select-files']
        }], selectFilesLinkElement: [{
            type: ViewChild,
            args: ['selectFilesLink']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUploadDragDropAreaComponent, { className: "PoUploadDragDropAreaComponent", filePath: "lib/components/po-field/po-upload/po-upload-drag-drop/po-upload-drag-drop-area/po-upload-drag-drop-area.component.ts", lineNumber: 10 }); })();

class PoUploadDragDropDirective {
    i18nPipe;
    notification;
    areaElement;
    directoryCompatible;
    disabled;
    literals;
    dragLeave = new EventEmitter();
    dragOver = new EventEmitter();
    fileChange = new EventEmitter();
    timeout;
    files;
    invalidFileType;
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(() => this.dragLeave.emit(), 30);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(() => {
                    this.sendFiles(event, this.files);
                });
            }
            else {
                const files = this.getOnlyFiles(event.dataTransfer);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    async getFilesFromEntry(entry) {
        if (entry.isFile) {
            const file = await this.readFile(entry);
            return [file];
        }
        else if (entry.isDirectory) {
            return await this.readDirectory(entry);
        }
    }
    async getOnlyDirectories(dataTransferItems) {
        const entries = [];
        // lista todas as entradas antes de analisá-las
        for (const item of dataTransferItems) {
            entries.push(item.webkitGetAsEntry());
        }
        this.files = [];
        for (const entry of entries) {
            if (entry.isFile) {
                this.invalidFileType++;
            }
            else {
                const newFiles = await this.getFilesFromEntry(entry);
                this.files = this.files.concat(newFiles);
            }
        }
    }
    // return only files. If it is a directory, invalidFileType counts.
    getOnlyFiles(dataTransfer) {
        const fileList = Array.from(dataTransfer.files);
        const entriesFiles = Array.from(dataTransfer.items).map(item => item.webkitGetAsEntry());
        return fileList.reduce((newFiles, file) => {
            const entryFile = entriesFiles.find(entry => entry.name === file.name);
            if (entryFile.isFile) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }, []);
    }
    readFile(entry) {
        return new Promise(resolve => {
            entry.file(file => {
                resolve(file);
            });
        });
    }
    async readDirectory(entry) {
        const dirReader = entry.createReader();
        let files = [];
        const newFiles = await this.readDirectoryEntries(dirReader);
        files = files.concat(newFiles);
        return files;
    }
    readDirectoryEntries(dirReader) {
        return new Promise(resolve => {
            dirReader.readEntries(async (entries) => {
                let files = [];
                for (const entry of entries) {
                    const itemFiles = await this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            });
        });
    }
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    setPipeArguments(literalAttributes, args) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
    static ɵfac = function PoUploadDragDropDirective_Factory(t) { return new (t || PoUploadDragDropDirective)(i0.ɵɵdirectiveInject(PoI18nPipe), i0.ɵɵdirectiveInject(PoNotificationService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoUploadDragDropDirective, selectors: [["", "p-upload-drag-drop", ""]], hostBindings: function PoUploadDragDropDirective_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("dragleave", function PoUploadDragDropDirective_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); }, false, i0.ɵɵresolveDocument)("dragover", function PoUploadDragDropDirective_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); }, false, i0.ɵɵresolveDocument)("drop", function PoUploadDragDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); }, false, i0.ɵɵresolveDocument);
        } }, inputs: { areaElement: [i0.ɵɵInputFlags.None, "p-area-element", "areaElement"], directoryCompatible: [i0.ɵɵInputFlags.None, "p-directory-compatible", "directoryCompatible"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"] }, outputs: { dragLeave: "p-drag-leave", dragOver: "p-drag-over", fileChange: "p-file-change" }, features: [i0.ɵɵProvidersFeature([PoI18nPipe])] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropDirective, [{
        type: Directive,
        args: [{
                selector: '[p-upload-drag-drop]',
                providers: [PoI18nPipe]
            }]
    }], () => [{ type: PoI18nPipe }, { type: PoNotificationService }], { areaElement: [{
            type: Input,
            args: ['p-area-element']
        }], directoryCompatible: [{
            type: Input,
            args: ['p-directory-compatible']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], dragLeave: [{
            type: Output,
            args: ['p-drag-leave']
        }], dragOver: [{
            type: Output,
            args: ['p-drag-over']
        }], fileChange: [{
            type: Output,
            args: ['p-file-change']
        }], onDragLeave: [{
            type: HostListener,
            args: ['document:dragleave', ['$event']]
        }], onDragOver: [{
            type: HostListener,
            args: ['document:dragover', ['$event']]
        }], onDrop: [{
            type: HostListener,
            args: ['document:drop', ['$event']]
        }] }); })();

const _c0$K = ["DragDropAreaFixed"];
class PoUploadDragDropAreaOverlayComponent {
    renderer;
    DragDropAreaFixed;
    directoryCompatible;
    disabled;
    literals;
    target;
    areaElement = new EventEmitter();
    constructor(renderer) {
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        if (this.target) {
            this.setPosition(this.target);
        }
        this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
    }
    setPosition(targetElement) {
        const boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
        const clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
        clientRectKeys.forEach(clientRectKey => {
            const clientRectValue = boundingClientRect[clientRectKey];
            this.renderer.setStyle(this.DragDropAreaFixed.nativeElement, clientRectKey, `${clientRectValue}px`);
        });
    }
    static ɵfac = function PoUploadDragDropAreaOverlayComponent_Factory(t) { return new (t || PoUploadDragDropAreaOverlayComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropAreaOverlayComponent, selectors: [["po-upload-drag-drop-area-overlay"]], viewQuery: function PoUploadDragDropAreaOverlayComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$K, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.DragDropAreaFixed = _t.first);
        } }, inputs: { directoryCompatible: [i0.ɵɵInputFlags.None, "p-directory-compatible", "directoryCompatible"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], target: [i0.ɵɵInputFlags.None, "p-target", "target"] }, outputs: { areaElement: "p-area-element" }, decls: 3, vars: 4, consts: [[1, "po-overlay-fixed"], [1, "po-upload-drag-drop-area-overlay", 3, "p-directory-compatible", "p-disabled", "p-literals", "p-overlay"], ["DragDropAreaFixed", ""]], template: function PoUploadDragDropAreaOverlayComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-upload-drag-drop-area", 1, 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-directory-compatible", ctx.directoryCompatible)("p-disabled", ctx.disabled)("p-literals", ctx.literals)("p-overlay", true);
        } }, dependencies: [PoUploadDragDropAreaComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropAreaOverlayComponent, [{
        type: Component,
        args: [{ selector: 'po-upload-drag-drop-area-overlay', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-overlay-fixed\">\n  <po-upload-drag-drop-area\n    #DragDropAreaFixed\n    class=\"po-upload-drag-drop-area-overlay\"\n    [p-directory-compatible]=\"directoryCompatible\"\n    [p-disabled]=\"disabled\"\n    [p-literals]=\"literals\"\n    [p-overlay]=\"true\"\n  >\n  </po-upload-drag-drop-area>\n</div>\n" }]
    }], () => [{ type: i0.Renderer2 }], { DragDropAreaFixed: [{
            type: ViewChild,
            args: ['DragDropAreaFixed', { read: ElementRef, static: true }]
        }], directoryCompatible: [{
            type: Input,
            args: ['p-directory-compatible']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], areaElement: [{
            type: Output,
            args: ['p-area-element']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUploadDragDropAreaOverlayComponent, { className: "PoUploadDragDropAreaOverlayComponent", filePath: "lib/components/po-field/po-upload/po-upload-drag-drop/po-upload-drag-drop-area-overlay/po-upload-drag-drop-area-overlay.component.ts", lineNumber: 20 }); })();

const _c0$J = ["dragDropOverlay"];
function PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-upload-drag-drop-area-overlay", 2, 3);
    i0.ɵɵlistener("p-area-element", function PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template_po_upload_drag_drop_area_overlay_p_area_element_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onAreaElement($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-directory-compatible", ctx_r0.directoryCompatible)("p-disabled", ctx_r0.disabled)("p-literals", ctx_r0.literals)("p-target", ctx_r0.dragDropAreaComponent.elementRef);
} }
const PoUploadDragDropHeightDefault = 320;
const PoUploadDragDropHeightMin = 160;
class PoUploadDragDropComponent {
    changeDetector;
    dragDropOverlayElement;
    dragDropAreaComponent;
    directoryCompatible;
    disabled;
    literals;
    fileChange = new EventEmitter();
    selectFiles = new EventEmitter();
    areaElement;
    isDragOver = false;
    _dragDropHeight = PoUploadDragDropHeightDefault;
    set dragDropHeight(value) {
        const dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
        this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
    }
    get dragDropHeight() {
        return this._dragDropHeight;
    }
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    focus() {
        this.dragDropAreaComponent.focus();
    }
    onAreaElement(element) {
        this.areaElement = element;
        // necessário para não ocorrer o erro HasBeenChecked
        this.changeDetector.detectChanges();
    }
    onDragLeave() {
        this.isDragOver = false;
    }
    onDragOver() {
        this.isDragOver = true;
    }
    onFileChange(files) {
        this.isDragOver = false;
        this.fileChange.emit(files);
    }
    static ɵfac = function PoUploadDragDropComponent_Factory(t) { return new (t || PoUploadDragDropComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropComponent, selectors: [["po-upload-drag-drop"]], viewQuery: function PoUploadDragDropComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$J, 5, ElementRef);
            i0.ɵɵviewQuery(PoUploadDragDropAreaComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragDropOverlayElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragDropAreaComponent = _t.first);
        } }, inputs: { directoryCompatible: [i0.ɵɵInputFlags.None, "p-directory-compatible", "directoryCompatible"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], dragDropHeight: [i0.ɵɵInputFlags.None, "p-drag-drop-height", "dragDropHeight"] }, outputs: { fileChange: "p-file-change", selectFiles: "p-select-files" }, decls: 2, vars: 7, consts: [[3, "p-directory-compatible", "p-disabled", "p-literals", "p-target", "p-area-element", 4, "ngIf"], ["p-upload-drag-drop", "", 3, "p-area-element", "p-directory-compatible", "p-disabled", "p-height", "p-literals", "p-overlay", "p-drag-leave", "p-drag-over", "p-file-change", "p-select-files"], [3, "p-directory-compatible", "p-disabled", "p-literals", "p-target", "p-area-element"], ["dragDropOverlay", ""]], template: function PoUploadDragDropComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template, 2, 4, "po-upload-drag-drop-area-overlay", 0);
            i0.ɵɵelementStart(1, "po-upload-drag-drop-area", 1);
            i0.ɵɵlistener("p-drag-leave", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_drag_leave_1_listener() { return ctx.onDragLeave(); })("p-drag-over", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_drag_over_1_listener() { return ctx.onDragOver(); })("p-file-change", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_file_change_1_listener($event) { return ctx.onFileChange($event); })("p-select-files", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_select_files_1_listener() { return ctx.selectFiles.emit(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.isDragOver);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-area-element", ctx.areaElement)("p-directory-compatible", ctx.directoryCompatible)("p-disabled", ctx.disabled)("p-height", ctx.dragDropHeight)("p-literals", ctx.literals)("p-overlay", false);
        } }, dependencies: [i1.NgIf, PoUploadDragDropDirective, PoUploadDragDropAreaOverlayComponent, PoUploadDragDropAreaComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropComponent, [{
        type: Component,
        args: [{ selector: 'po-upload-drag-drop', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-upload-drag-drop-area-overlay\n  #dragDropOverlay\n  *ngIf=\"isDragOver\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-literals]=\"literals\"\n  [p-target]=\"dragDropAreaComponent.elementRef\"\n  (p-area-element)=\"onAreaElement($event)\"\n>\n</po-upload-drag-drop-area-overlay>\n\n<po-upload-drag-drop-area\n  p-upload-drag-drop\n  [p-area-element]=\"areaElement\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-height]=\"dragDropHeight\"\n  [p-literals]=\"literals\"\n  [p-overlay]=\"false\"\n  (p-drag-leave)=\"onDragLeave()\"\n  (p-drag-over)=\"onDragOver()\"\n  (p-file-change)=\"onFileChange($event)\"\n  (p-select-files)=\"selectFiles.emit()\"\n>\n</po-upload-drag-drop-area>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { dragDropOverlayElement: [{
            type: ViewChild,
            args: ['dragDropOverlay', { read: ElementRef }]
        }], dragDropAreaComponent: [{
            type: ViewChild,
            args: [PoUploadDragDropAreaComponent, { static: true }]
        }], directoryCompatible: [{
            type: Input,
            args: ['p-directory-compatible']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], fileChange: [{
            type: Output,
            args: ['p-file-change']
        }], selectFiles: [{
            type: Output,
            args: ['p-select-files']
        }], dragDropHeight: [{
            type: Input,
            args: ['p-drag-drop-height']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUploadDragDropComponent, { className: "PoUploadDragDropComponent", filePath: "lib/components/po-field/po-upload/po-upload-drag-drop/po-upload-drag-drop.component.ts", lineNumber: 25 }); })();

function PoUploadFileRestrictionsComponent_p_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 1);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "poI18n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r0.literals == null ? null : ctx_r0.literals.numberOfFilesAllowed, ctx_r0.maxFiles), "\n");
} }
function PoUploadFileRestrictionsComponent_p_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 1);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "poI18n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r1.literals == null ? null : ctx_r1.literals.allowedFormats, ctx_r1.allowedExtensions), "\n");
} }
const _c0$I = (a0, a1) => [a0, a1];
function PoUploadFileRestrictionsComponent_p_2_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "poI18n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r3.literals == null ? null : ctx_r3.literals.allowedFileSizeRange, i0.ɵɵpureFunction2(4, _c0$I, ctx_r3.minFileSize, ctx_r3.maxFileSize)), " ");
} }
function PoUploadFileRestrictionsComponent_p_2_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "poI18n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r4.literals == null ? null : ctx_r4.literals.minFileSizeAllowed, ctx_r4.minFileSize), " ");
} }
function PoUploadFileRestrictionsComponent_p_2_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "poI18n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r5.literals == null ? null : ctx_r5.literals.maxFileSizeAllowed, ctx_r5.maxFileSize), " ");
} }
function PoUploadFileRestrictionsComponent_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 1)(1, "span");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, PoUploadFileRestrictionsComponent_p_2_span_3_Template, 3, 7, "span", 2)(4, PoUploadFileRestrictionsComponent_p_2_span_4_Template, 3, 4, "span", 2)(5, PoUploadFileRestrictionsComponent_p_2_span_5_Template, 3, 4, "span", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r2.literals == null ? null : ctx_r2.literals.allowedSizes);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.minFileSize && ctx_r2.maxFileSize);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.minFileSize && !ctx_r2.maxFileSize);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.maxFileSize && !ctx_r2.minFileSize);
} }
class PoUploadFileRestrictionsComponent {
    changeDetector;
    maxFiles;
    literals;
    _allowedExtensions;
    _maxFileSize;
    _minFileSize;
    language;
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y', 'ru': 'и' };
        return allowedExtensions
            ? allowedExtensions
                .join(', ')
                .toUpperCase()
                .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`)
            : undefined;
    }
    setLiterals() {
        this.literals = {
            ...poUploadLiteralsDefault[poLocaleDefault],
            ...poUploadLiteralsDefault[this.language]
        };
        this.changeDetector.detectChanges();
    }
    static ɵfac = function PoUploadFileRestrictionsComponent_Factory(t) { return new (t || PoUploadFileRestrictionsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadFileRestrictionsComponent, selectors: [["po-upload-file-restrictions"]], inputs: { maxFiles: [i0.ɵɵInputFlags.None, "p-max-files", "maxFiles"], allowedExtensions: [i0.ɵɵInputFlags.None, "p-allowed-extensions", "allowedExtensions"], maxFileSize: [i0.ɵɵInputFlags.None, "p-max-file-size", "maxFileSize"], minFileSize: [i0.ɵɵInputFlags.None, "p-min-file-size", "minFileSize"] }, decls: 3, vars: 3, consts: [["class", "po-font-text-small", 4, "ngIf"], [1, "po-font-text-small"], [4, "ngIf"]], template: function PoUploadFileRestrictionsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoUploadFileRestrictionsComponent_p_0_Template, 3, 4, "p", 0)(1, PoUploadFileRestrictionsComponent_p_1_Template, 3, 4, "p", 0)(2, PoUploadFileRestrictionsComponent_p_2_Template, 6, 4, "p", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.maxFiles > 1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.allowedExtensions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.minFileSize || ctx.maxFileSize);
        } }, dependencies: [i1.NgIf, PoI18nPipe], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadFileRestrictionsComponent, [{
        type: Component,
        args: [{ selector: 'po-upload-file-restrictions', changeDetection: ChangeDetectionStrategy.OnPush, template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\n  </span>\n</p>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoLanguageService }], { maxFiles: [{
            type: Input,
            args: ['p-max-files']
        }], allowedExtensions: [{
            type: Input,
            args: ['p-allowed-extensions']
        }], maxFileSize: [{
            type: Input,
            args: ['p-max-file-size']
        }], minFileSize: [{
            type: Input,
            args: ['p-min-file-size']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUploadFileRestrictionsComponent, { className: "PoUploadFileRestrictionsComponent", filePath: "lib/components/po-field/po-upload/po-upload-file-restrictions/po-upload-file-restrictions.component.ts", lineNumber: 14 }); })();

const _c0$H = ["inputFile"];
const _c1$i = ["uploadButton"];
function PoUploadComponent_po_upload_drag_drop_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-upload-drag-drop", 11);
    i0.ɵɵlistener("p-file-change", function PoUploadComponent_po_upload_drag_drop_5_Template_po_upload_drag_drop_p_file_change_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onFileChangeDragDrop($event)); })("p-select-files", function PoUploadComponent_po_upload_drag_drop_5_Template_po_upload_drag_drop_p_select_files_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.selectFiles()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-directory-compatible", ctx_r1.canHandleDirectory)("p-disabled", ctx_r1.isDisabled)("p-drag-drop-height", ctx_r1.dragDropHeight)("p-literals", ctx_r1.literals);
} }
function PoUploadComponent_po_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 12, 13);
    i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_6_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.selectFiles()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r2.isDisabled)("p-label", ctx_r2.selectFileButtonLabel);
} }
const _c2$7 = a0 => ({ "po-upload-file-restrictions-drag-drop": a0 });
function PoUploadComponent_po_upload_file_restrictions_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-upload-file-restrictions", 14);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c2$7, ctx_r3.displayDragDrop))("p-allowed-extensions", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.allowedExtensions)("p-max-files", ctx_r3.maxFiles)("p-max-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.maxFileSize)("p-min-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.minFileSize);
} }
function PoUploadComponent_div_8_po_progress_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-progress", 19);
    i0.ɵɵlistener("p-cancel", function PoUploadComponent_div_8_po_progress_3_Template_po_progress_p_cancel_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.cancel(file_r13)); })("p-retry", function PoUploadComponent_div_8_po_progress_3_Template_po_progress_p_retry_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r16.uploadFiles([file_r13])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r13 = ctx.$implicit;
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-info", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].text(file_r13.percent))("p-info-icon", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].icon)("p-status", ctx_r12.progressStatusByFileStatus[file_r13.status])("p-text", file_r13.displayName)("p-value", file_r13.percent);
} }
const _c3$4 = a0 => ({ "po-upload-progress-container-area po-pt-2 po-pl-1": a0 });
function PoUploadComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15)(1, "po-container", 16)(2, "div", 17);
    i0.ɵɵtemplate(3, PoUploadComponent_div_8_po_progress_3_Template, 1, 5, "po-progress", 18);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-height", ctx_r4.hasMoreThanFourItems ? 280 : "auto")("p-no-border", !ctx_r4.hasMoreThanFourItems)("p-no-padding", !ctx_r4.hasMoreThanFourItems);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c3$4, ctx_r4.hasMoreThanFourItems));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r4.currentFiles)("ngForTrackBy", ctx_r4.trackByFn);
} }
function PoUploadComponent_po_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 20);
    i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_9_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.uploadFiles(ctx_r17.currentFiles)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-mt-3", ctx_r5.hasMoreThanFourItems);
    i0.ɵɵproperty("p-disabled", ctx_r5.hasAnyFileUploading(ctx_r5.currentFiles))("p-label", ctx_r5.literals.startSending);
} }
/**
 * @docsExtends PoUploadBaseComponent
 *
 * @example
 *
 * <example name="po-upload-basic" title="PO Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="PO Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="PO Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="PO Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
class PoUploadComponent extends PoUploadBaseComponent {
    renderer;
    i18nPipe;
    notification;
    cd;
    inputFile;
    poUploadDragDropComponent;
    uploadButton;
    id = `po-upload[${uuid()}]`;
    infoByUploadStatus = {
        [PoUploadStatus.Uploaded]: {
            text: () => this.literals.sentWithSuccess,
            icon: 'ICON_OK'
        },
        [PoUploadStatus.Error]: {
            text: () => this.literals.errorOccurred
        },
        [PoUploadStatus.Uploading]: {
            text: percent => percent + '%'
        }
    };
    progressStatusByFileStatus = {
        [PoUploadStatus.Uploaded]: PoProgressStatus.Success,
        [PoUploadStatus.Error]: PoProgressStatus.Error
    };
    calledByCleanInputValue = false;
    constructor(uploadService, renderer, i18nPipe, notification, cd, languageService) {
        super(uploadService, languageService);
        this.renderer = renderer;
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.cd = cd;
    }
    get displayDragDrop() {
        return this.dragDrop && !isMobile();
    }
    get displaySendButton() {
        const currentFiles = this.currentFiles || [];
        return (!this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded && this.requiredUrl);
    }
    get selectFileButtonLabel() {
        if (this.canHandleDirectory) {
            return this.literals.selectFolder;
        }
        else if (this.isMultiple) {
            return this.literals.selectFiles;
        }
        else {
            return this.literals.selectFile;
        }
    }
    get hasMoreThanFourItems() {
        return this.currentFiles && this.currentFiles.length > 4;
    }
    get hasMultipleFiles() {
        return this.currentFiles && this.currentFiles.length > 1;
    }
    get hasFileNotUploaded() {
        if (Array.isArray(this.currentFiles)) {
            return this.currentFiles.some(file => file.status !== PoUploadStatus.Uploaded);
        }
        return false;
    }
    get isDisabled() {
        const currentFiles = this.currentFiles || [];
        return this.requiredUrl
            ? !!(this.hasAnyFileUploading(currentFiles) ||
                !this.url ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length))
            : !!(this.hasAnyFileUploading(currentFiles) ||
                this.autoUpload ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length));
    }
    get maxFiles() {
        return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
    }
    cancel(file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear() {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    }
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    hasAnyFileUploading(files) {
        if (files && files.length) {
            return files.some(file => file.status === PoUploadStatus.Uploading);
        }
        return false;
    }
    // retorna se o status do arquivo é diferente de enviado
    isAllowCancelEvent(status) {
        return status !== PoUploadStatus.Uploaded;
    }
    // Função disparada ao selecionar algum arquivo.
    onFileChange(event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        const files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    }
    onFileChangeDragDrop(files) {
        this.updateFiles(files);
    }
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    removeFile(file) {
        const index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel([...this.currentFiles]);
    }
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles() {
        this.onModelTouched?.();
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    }
    sendFeedback() {
        if (this.sizeNotAllowed > 0) {
            const minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            const maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            const args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            const allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            const args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            const args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    }
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles() {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    }
    setDirectoryAttribute(canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    }
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    stopUpload(file) {
        this.uploadService.stopRequestByFile(file, () => {
            if (this.autoUpload) {
                this.removeFile(file);
            }
            else {
                this.stopUploadHandler(file);
            }
            this.cd.markForCheck();
        });
    }
    trackByFn(index, file) {
        return file.uid;
    }
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    uploadFiles(files) {
        const filesFiltered = files.filter(file => file.status !== PoUploadStatus.Uploaded);
        this.uploadService.upload(this.url, filesFiltered, this.headers, this.onUpload, (file, percent) => {
            // UPLOADING
            this.uploadingHandler(file, percent);
        }, (file, eventResponse) => {
            // SUCCESS
            this.responseHandler(file, PoUploadStatus.Uploaded);
            this.onSuccess.emit(eventResponse);
        }, (file, eventError) => {
            // Error
            this.responseHandler(file, PoUploadStatus.Error);
            this.onError.emit(eventError);
        });
    }
    cleanInputValue() {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
        this.cd.detectChanges();
    }
    // função disparada na resposta do sucesso ou error
    responseHandler(file, status) {
        file.status = status;
        file.percent = 100;
        this.cd.markForCheck();
    }
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    setPipeArguments(literalAttributes, literalArguments) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    }
    // Função disparada ao parar um envio de arquivo.
    stopUploadHandler(file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
        this.cd.markForCheck();
    }
    updateFiles(files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel([...this.currentFiles]);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    }
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    updateModel(files) {
        const modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    }
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    uploadingHandler(file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
        this.cd.markForCheck();
    }
    // retorna os objetos do array sem as propriedades: percent e displayName
    mapCleanUploadFiles(files) {
        const mapedByUploadFile = progressFile => {
            const { percent, displayName, ...uploadFile } = progressFile;
            return uploadFile;
        };
        return files.map(mapedByUploadFile);
    }
    static ɵfac = function PoUploadComponent_Factory(t) { return new (t || PoUploadComponent)(i0.ɵɵdirectiveInject(PoUploadService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoI18nPipe), i0.ɵɵdirectiveInject(PoNotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadComponent, selectors: [["po-upload"]], viewQuery: function PoUploadComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$H, 7, ElementRef);
            i0.ɵɵviewQuery(PoUploadDragDropComponent, 5);
            i0.ɵɵviewQuery(_c1$i, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputFile = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poUploadDragDropComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadButton = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([
                PoI18nPipe,
                PoUploadService,
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoUploadComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoUploadComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 11, vars: 19, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-upload"], ["type", "file", 1, "po-upload-input", 3, "accept", "id", "disabled", "multiple", "required", "change"], ["inputFile", ""], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files", 4, "ngIf"], ["class", "po-upload-button", "for", "file", 3, "p-disabled", "p-label", "p-click", 4, "ngIf"], ["class", "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size", 4, "ngIf"], ["class", "po-upload-progress-container", 4, "ngIf"], ["class", "po-upload-send-button", "p-kind", "primary", 3, "po-mt-3", "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-help", "p-disabled"], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files"], ["for", "file", 1, "po-upload-button", 3, "p-disabled", "p-label", "p-click"], ["uploadButton", ""], [1, "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size"], [1, "po-upload-progress-container"], [3, "p-height", "p-no-border", "p-no-padding"], [3, "ngClass"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry"], ["p-kind", "primary", 1, "po-upload-send-button", 3, "p-disabled", "p-label", "p-click"]], template: function PoUploadComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2)(3, "input", 3, 4);
            i0.ɵɵlistener("change", function PoUploadComponent_Template_input_change_3_listener($event) { return ctx.onFileChange($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoUploadComponent_po_upload_drag_drop_5_Template, 1, 4, "po-upload-drag-drop", 5)(6, PoUploadComponent_po_button_6_Template, 2, 2, "po-button", 6)(7, PoUploadComponent_po_upload_file_restrictions_7_Template, 1, 7, "po-upload-file-restrictions", 7)(8, PoUploadComponent_div_8_Template, 4, 8, "div", 8)(9, PoUploadComponent_po_button_9_Template, 1, 4, "po-button", 9);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(10, "po-field-container-bottom", 10);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.isDisabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("accept", ctx.allowedExtensions)("id", ctx.id)("disabled", ctx.isDisabled)("multiple", ctx.isMultiple)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.displayDragDrop);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideSelectButton && !ctx.displayDragDrop);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.fileRestrictions && !ctx.hideRestrictionsInfo);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.currentFiles && ctx.currentFiles.length);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.displaySendButton);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoButtonComponent, PoContainerComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoProgressComponent, PoUploadDragDropComponent, PoUploadFileRestrictionsComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadComponent, [{
        type: Component,
        args: [{ selector: 'po-upload', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    PoI18nPipe,
                    PoUploadService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"isDisabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div class=\"po-upload\">\n      <input\n        #inputFile\n        class=\"po-upload-input\"\n        type=\"file\"\n        [accept]=\"allowedExtensions\"\n        [attr.name]=\"name\"\n        [id]=\"id\"\n        [disabled]=\"isDisabled\"\n        [multiple]=\"isMultiple\"\n        [required]=\"required\"\n        (change)=\"onFileChange($event)\"\n      />\n\n      <po-upload-drag-drop\n        *ngIf=\"displayDragDrop\"\n        [p-directory-compatible]=\"canHandleDirectory\"\n        [p-disabled]=\"isDisabled\"\n        [p-drag-drop-height]=\"dragDropHeight\"\n        [p-literals]=\"literals\"\n        (p-file-change)=\"onFileChangeDragDrop($event)\"\n        (p-select-files)=\"selectFiles()\"\n      >\n      </po-upload-drag-drop>\n\n      <po-button\n        *ngIf=\"!hideSelectButton && !displayDragDrop\"\n        #uploadButton\n        class=\"po-upload-button\"\n        for=\"file\"\n        [p-disabled]=\"isDisabled\"\n        [p-label]=\"selectFileButtonLabel\"\n        (p-click)=\"selectFiles()\"\n      >\n      </po-button>\n\n      <po-upload-file-restrictions\n        *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\n        class=\"po-upload-file-restrictions\"\n        [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\n        [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\n        [p-max-files]=\"maxFiles\"\n        [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\n        [p-min-file-size]=\"fileRestrictions?.minFileSize\"\n      >\n      </po-upload-file-restrictions>\n\n      <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\n        <po-container\n          [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\n          [p-no-border]=\"!hasMoreThanFourItems\"\n          [p-no-padding]=\"!hasMoreThanFourItems\"\n        >\n          <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\n            <po-progress\n              *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\n              [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\n              [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\n              [p-status]=\"progressStatusByFileStatus[file.status]\"\n              [p-text]=\"file.displayName\"\n              [p-value]=\"file.percent\"\n              (p-cancel)=\"cancel(file)\"\n              (p-retry)=\"uploadFiles([file])\"\n            >\n            </po-progress>\n          </div>\n        </po-container>\n      </div>\n\n      <po-button\n        *ngIf=\"displaySendButton\"\n        class=\"po-upload-send-button\"\n        [class.po-mt-3]=\"hasMoreThanFourItems\"\n        p-kind=\"primary\"\n        [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\n        [p-label]=\"literals.startSending\"\n        (p-click)=\"uploadFiles(currentFiles)\"\n      ></po-button>\n    </div>\n  </div>\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: PoUploadService }, { type: i0.Renderer2 }, { type: PoI18nPipe }, { type: PoNotificationService }, { type: i0.ChangeDetectorRef }, { type: PoLanguageService }], { inputFile: [{
            type: ViewChild,
            args: ['inputFile', { read: ElementRef, static: true }]
        }], poUploadDragDropComponent: [{
            type: ViewChild,
            args: [PoUploadDragDropComponent]
        }], uploadButton: [{
            type: ViewChild,
            args: ['uploadButton']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUploadComponent, { className: "PoUploadComponent", filePath: "lib/components/po-field/po-upload/po-upload.component.ts", lineNumber: 70 }); })();

function PoUrlComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵelement(1, "po-icon", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassMapInterpolate1("po-field-icon ", ctx_r0.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoUrlComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoUrlComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r2.disabled ? "po-icon-input-disabled" : "po-icon-input");
    i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
} }
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * O `po-url` é um input específico para receber URL, com o pattern já configurado.
 *
 * @example
 *
 * <example name="po-url-basic" title="PO Url Basic">
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.html"> </file>
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-labs" title="PO Url Labs">
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.html"> </file>
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-shortener" title="PO Url - Shortener">
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.html"> </file>
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.ts"> </file>
 * </example>
 *
 */
class PoUrlComponent extends PoInputGeneric {
    id = `po-url[${uuid()}]`;
    icon = 'ICON_WORLD';
    type = 'url';
    pattern = '^((https|http):\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-A-Za-z\\d%_.~+]*)*' + // port and path
        '(\\?[;&A-Za-z\\d%_.~+=-]*)?' + // query string
        '(\\#[-A-Za-z\\d_]*)?$';
    mask = '';
    listener = this.validateClassesForPattern.bind(this);
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.maxlength = 254;
    }
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        setTimeout(() => {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.addEventListener('keyup', this.listener);
            }
        });
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    }
    extraValidation(c) {
        return null;
    }
    static ɵfac = function PoUrlComponent_Factory(t) { return new (t || PoUrlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUrlComponent, selectors: [["po-url"]], features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoUrlComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoUrlComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 23, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "id", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "class", "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-help", "p-disabled", "p-error-pattern"], [1, "po-field-icon-container-left"], [3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoUrlComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoUrlComponent_div_2_Template, 2, 6, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoUrlComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoUrlComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoUrlComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoUrlComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoUrlComponent_po_clean_6_Template, 1, 4, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled)("p-error-pattern", ctx.getErrorPattern());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUrlComponent, [{
        type: Component,
        args: [{ selector: 'po-url', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoUrlComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoUrlComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon\n        class=\"po-field-icon {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [p-icon]=\"icon\"\n      ></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"{{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-help]=\"help\"\n    [p-disabled]=\"disabled\"\n    [p-error-pattern]=\"getErrorPattern()\"\n  ></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoUrlComponent, { className: "PoUrlComponent", filePath: "lib/components/po-field/po-url/po-url.component.ts", lineNumber: 57 }); })();

const _c0$G = ["modal"];
const _c1$h = ["modalImageForm"];
const _c2$6 = ["upload"];
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
class PoRichTextImageModalComponent {
    languageService;
    modal;
    modalImageForm;
    upload;
    command = new EventEmitter();
    savedCursorPosition;
    selection = document.getSelection();
    uploadModel;
    uploadRestrictions = {
        allowedExtensions: uploadRestrictions
    };
    urlImage;
    literals;
    modalCancelAction;
    modalConfirmAction;
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = {
            ...poRichTextLiteralsDefault[this.languageService.getShortLanguage()]
        };
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
    }
    openModal() {
        this.saveCursorPosition();
        this.modal.open();
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.uploadModel = undefined;
    }
    async convertToBase64() {
        if (this.isUploadValid) {
            const uploadImage = this.uploadModel[0].rawFile;
            return await convertImageToBase64(uploadImage);
        }
    }
    emitCommand(value) {
        let command;
        if (value) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    async insertElementRef() {
        let uploadImage;
        if (!this.urlImage) {
            uploadImage = await this.convertToBase64();
        }
        this.retrieveCursorPosition();
        this.modal.close();
        if (this.isUrlValid || this.isUploadValid) {
            this.emitCommand(this.urlImage || uploadImage);
        }
        this.cleanUpFields();
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    static ɵfac = function PoRichTextImageModalComponent_Factory(t) { return new (t || PoRichTextImageModalComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextImageModalComponent, selectors: [["po-rich-text-image-modal"]], viewQuery: function PoRichTextImageModalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$G, 7);
            i0.ɵɵviewQuery(_c1$h, 5);
            i0.ɵɵviewQuery(_c2$6, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalImageForm = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.upload = _t.first);
        } }, outputs: { command: "p-command" }, decls: 9, vars: 10, consts: [["p-hide-close", "", 3, "p-primary-action", "p-secondary-action", "p-title"], ["modal", ""], ["modalImageForm", "ngForm"], [1, "po-row"], ["name", "upload", "p-drag-drop-height", "160", "p-hide-restrictions-info", "", "p-hide-send-button", "", "p-url", "x", 1, "po-md-12", 3, "ngModel", "p-drag-drop", "p-disabled", "p-restrictions", "ngModelChange"], ["upload", ""], ["name", "url", 1, "po-md-12", "po-mt-3", 3, "ngModel", "p-label", "p-disabled", "ngModelChange"]], template: function PoRichTextImageModalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0, 1)(2, "form", null, 2)(4, "div", 3)(5, "po-upload", 4, 5);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextImageModalComponent_Template_po_upload_ngModelChange_5_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.uploadModel, $event) || (ctx.uploadModel = $event); return $event; });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "div", 3)(8, "po-url", 6);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextImageModalComponent_Template_po_url_ngModelChange_8_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.urlImage, $event) || (ctx.urlImage = $event); return $event; });
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵproperty("p-primary-action", ctx.modalConfirmAction)("p-secondary-action", ctx.modalCancelAction)("p-title", ctx.literals.insertImage);
            i0.ɵɵadvance(5);
            i0.ɵɵtwoWayProperty("ngModel", ctx.uploadModel);
            i0.ɵɵproperty("p-drag-drop", !_r0.isHidden)("p-disabled", ctx.isUrlValid)("p-restrictions", ctx.uploadRestrictions);
            i0.ɵɵadvance(3);
            i0.ɵɵtwoWayProperty("ngModel", ctx.urlImage);
            i0.ɵɵproperty("p-label", ctx.literals.urlImage)("p-disabled", ctx.isUploadValid);
        } }, dependencies: [i2$1.ɵNgNoValidate, i2$1.NgControlStatus, i2$1.NgControlStatusGroup, i2$1.NgModel, i2$1.NgForm, PoModalComponent, PoUploadComponent, PoUrlComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextImageModalComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-image-modal', template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"literals.insertImage\"\n>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n" }]
    }], () => [{ type: PoLanguageService }], { modal: [{
            type: ViewChild,
            args: ['modal', { static: true }]
        }], modalImageForm: [{
            type: ViewChild,
            args: ['modalImageForm']
        }], upload: [{
            type: ViewChild,
            args: ['upload', { static: true }]
        }], command: [{
            type: Output,
            args: ['p-command']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextImageModalComponent, { className: "PoRichTextImageModalComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text-image-modal/po-rich-text-image-modal.component.ts", lineNumber: 18 }); })();

const _c0$F = ["modal"];
const _c1$g = ["modalLinkForm"];
class PoRichTextLinkModalComponent {
    languageService;
    modal;
    modalLinkForm;
    command = new EventEmitter();
    linkEditing = new EventEmitter();
    savedCursorPosition;
    selection = document.getSelection();
    urlLink;
    urlLinkText;
    literals;
    modalCancelAction;
    modalConfirmAction;
    isLinkEditing;
    isSelectedLink;
    linkElement;
    savedSelection;
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = {
            ...poRichTextLiteralsDefault[this.languageService?.getShortLanguage()]
        };
    }
    ngOnInit() {
        this.setModalCancelAction();
        this.setModalConfirmAction();
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    formModelValidate() {
        return (this.modalConfirmAction.disabled = this.modalLinkForm?.invalid);
    }
    openModal(selectedLinkElement) {
        this.saveCursorPosition();
        this.prepareModalForLink(selectedLinkElement);
        this.modalConfirmAction.label = this.linkConfirmAction();
        this.modal.open();
    }
    selectedLink(linkElement) {
        this.isSelectedLink = !!linkElement;
        this.linkElement = linkElement;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink(selectedLinkElement) {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => {
            this.formModelValidate();
        });
        this.selectedLink(selectedLinkElement);
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    setModalCancelAction() {
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
    }
    setModalConfirmAction() {
        this.modalConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => (this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText))
        };
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
    static ɵfac = function PoRichTextLinkModalComponent_Factory(t) { return new (t || PoRichTextLinkModalComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextLinkModalComponent, selectors: [["po-rich-text-link-modal"]], viewQuery: function PoRichTextLinkModalComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$F, 7);
            i0.ɵɵviewQuery(_c1$g, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalLinkForm = _t.first);
        } }, outputs: { command: "p-command", linkEditing: "p-link-editing" }, decls: 7, vars: 9, consts: [["p-hide-close", "", 3, "p-primary-action", "p-secondary-action", "p-title"], ["modal", ""], ["modalLinkForm", "ngForm"], [1, "po-row"], ["name", "urlLinkText", "p-optional", "", 1, "po-md-12", "po-mb-2", 3, "ngModel", "p-label", "p-placeholder", "ngModelChange"], ["name", "urlLink", "p-label", "Link", "p-required", "", 1, "po-md-12", 3, "ngModel", "p-help", "p-placeholder", "ngModelChange", "p-change-model"]], template: function PoRichTextLinkModalComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0, 1)(2, "form", null, 2)(4, "div", 3)(5, "po-input", 4);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextLinkModalComponent_Template_po_input_ngModelChange_5_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.urlLinkText, $event) || (ctx.urlLinkText = $event); return $event; });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "po-url", 5);
            i0.ɵɵtwoWayListener("ngModelChange", function PoRichTextLinkModalComponent_Template_po_url_ngModelChange_6_listener($event) { i0.ɵɵtwoWayBindingSet(ctx.urlLink, $event) || (ctx.urlLink = $event); return $event; });
            i0.ɵɵlistener("p-change-model", function PoRichTextLinkModalComponent_Template_po_url_p_change_model_6_listener() { return ctx.formModelValidate(); });
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            i0.ɵɵproperty("p-primary-action", ctx.modalConfirmAction)("p-secondary-action", ctx.modalCancelAction)("p-title", ctx.linkConfirmAction());
            i0.ɵɵadvance(5);
            i0.ɵɵtwoWayProperty("ngModel", ctx.urlLinkText);
            i0.ɵɵproperty("p-label", ctx.literals.linkTextLabel)("p-placeholder", ctx.literals.linkTextLabel);
            i0.ɵɵadvance();
            i0.ɵɵtwoWayProperty("ngModel", ctx.urlLink);
            i0.ɵɵproperty("p-help", ctx.literals.linkUrlTextHelper)("p-placeholder", ctx.literals.linkUrlTextPlaceholder);
        } }, dependencies: [i2$1.ɵNgNoValidate, i2$1.NgControlStatus, i2$1.NgControlStatusGroup, i2$1.NgModel, i2$1.NgForm, PoModalComponent, PoInputComponent, PoUrlComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextLinkModalComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-link-modal', template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"linkConfirmAction()\"\n>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n" }]
    }], () => [{ type: PoLanguageService }], { modal: [{
            type: ViewChild,
            args: ['modal', { static: true }]
        }], modalLinkForm: [{
            type: ViewChild,
            args: ['modalLinkForm']
        }], command: [{
            type: Output,
            args: ['p-command']
        }], linkEditing: [{
            type: Output,
            args: ['p-link-editing']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextLinkModalComponent, { className: "PoRichTextLinkModalComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text-link-modal/po-rich-text-link-modal.component.ts", lineNumber: 14 }); })();

const _c0$E = ["colorPickerInput"];
const _c1$f = ["toolbarElement"];
function PoRichTextToolbarComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15)(1, "div", 16)(2, "button", 17)(3, "input", 18, 19);
    i0.ɵɵlistener("change", function PoRichTextToolbarComponent_div_4_Template_input_change_3_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeTextColor($event.target.value)); });
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r1.readonly)("p-tooltip", ctx_r1.literals.textColor);
    i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
    i0.ɵɵadvance();
    i0.ɵɵproperty("disabled", ctx_r1.readonly);
    i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
} }
function PoRichTextToolbarComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵelement(1, "po-button-group", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-buttons", ctx_r2.alignButtons);
} }
const poRichTextDefaultColor = '#000000';
class PoRichTextToolbarComponent {
    languageService;
    colorPickerInput;
    toolbarElement;
    richTextImageModal;
    richTextLinkModal;
    command = new EventEmitter();
    modal = new EventEmitter();
    linkEditing = new EventEmitter();
    literals;
    alignButtons;
    formatButtons;
    listButtons;
    linkButtons;
    mediaButtons;
    _disabledTextAlign;
    _readonly;
    selectedLinkElement;
    set disabledTextAlign(value) {
        this._disabledTextAlign = value;
    }
    get disabledTextAlign() {
        return this._disabledTextAlign;
    }
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    get readonly() {
        return this._readonly;
    }
    get isInternetExplorer() {
        return isIE();
    }
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = {
            ...poRichTextLiteralsDefault[this.languageService?.getShortLanguage()]
        };
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'ICON_ALIGN_LEFT',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'ICON_ALIGN_CENTER',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'ICON_ALIGN_RIGHT',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'ICON_ALIGN_JUSTIFY',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'ICON_TEXT_BOLD',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'ICON_TEXT_ITALIC',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'ICON_TEXT_UNDERLINE',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'ICON_LIST',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'ICON_PICTURE',
                action: () => this.richTextImageModal.openModal()
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'ICON_LINK',
                tooltip: `${this.literals.insertLink} (Ctrl + K)`,
                action: () => this.richTextLinkModal.openModal(this.selectedLinkElement)
            }
        ];
    }
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    changeTextColor(value) {
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    emitLinkEditing(isLinkEdit) {
        this.linkEditing.emit(isLinkEdit);
    }
    selectedLink(selectedLinkElement) {
        this.selectedLinkElement = selectedLinkElement;
    }
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    shortcutTrigger() {
        this.richTextLinkModal.openModal(this.selectedLinkElement);
    }
    emitCommand(command) {
        this.command.emit(command);
    }
    emitAlignCommand(command) {
        const index = this.alignButtons.findIndex(btn => btn.command === command);
        if (!this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    removeButtonFocus() {
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(button => button.setAttribute('tabindex', '-1'));
    }
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    toggleDisableButtons(state) {
        this.alignButtons.forEach(button => (button.disabled = state));
        this.formatButtons.forEach(button => (button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
    static ɵfac = function PoRichTextToolbarComponent_Factory(t) { return new (t || PoRichTextToolbarComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextToolbarComponent, selectors: [["po-rich-text-toolbar"]], viewQuery: function PoRichTextToolbarComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$E, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$f, 7);
            i0.ɵɵviewQuery(PoRichTextImageModalComponent, 7);
            i0.ɵɵviewQuery(PoRichTextLinkModalComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorPickerInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextImageModal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextLinkModal = _t.first);
        } }, inputs: { disabledTextAlign: [i0.ɵɵInputFlags.None, "p-disabled-text-align", "disabledTextAlign"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"] }, outputs: { command: "p-command", modal: "p-modal", linkEditing: "p-link-editing" }, decls: 16, vars: 6, consts: [[1, "po-rich-text-toolbar"], ["toolbarElement", ""], ["data-rich-text-toolbar", "format", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "multiple", 3, "p-buttons"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "color", 4, "ngIf"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "align", 4, "ngIf"], ["data-rich-text-toolbar", "list", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "single", 3, "p-buttons"], ["data-rich-text-toolbar", "link", 1, "po-rich-text-toolbar-button-align"], [3, "p-buttons"], ["data-rich-text-toolbar", "media", 1, "po-rich-text-toolbar-button-align"], [3, "p-command"], ["richTextImageModal", ""], [3, "p-command", "p-link-editing"], ["richTextLinkModal", ""], ["data-rich-text-toolbar", "color", 1, "po-rich-text-toolbar-button-align"], [1, "po-rich-text-toolbar-color-picker-container"], ["type", "button", 1, "po-button", "po-button-default", "po-rich-text-toolbar-color-picker-button", 3, "disabled", "p-tooltip"], ["type", "color", 1, "po-rich-text-toolbar-color-picker-input", 3, "disabled", "change"], ["colorPickerInput", ""], ["data-rich-text-toolbar", "align", 1, "po-rich-text-toolbar-button-align"]], template: function PoRichTextToolbarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "div", 2);
            i0.ɵɵelement(3, "po-button-group", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoRichTextToolbarComponent_div_4_Template, 5, 5, "div", 4)(5, PoRichTextToolbarComponent_div_5_Template, 2, 1, "div", 5);
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵelement(7, "po-button-group", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 8);
            i0.ɵɵelement(9, "po-button-group", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "div", 10);
            i0.ɵɵelement(11, "po-button-group", 9);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(12, "po-rich-text-image-modal", 11, 12);
            i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_image_modal_p_command_12_listener($event) { return ctx.emitCommand($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(14, "po-rich-text-link-modal", 13, 14);
            i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_command_14_listener($event) { return ctx.emitCommand($event); })("p-link-editing", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_link_editing_14_listener($event) { return ctx.emitLinkEditing($event); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-buttons", ctx.formatButtons);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.isInternetExplorer);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.disabledTextAlign);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.listButtons);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.linkButtons);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.mediaButtons);
        } }, dependencies: [i1.NgIf, PoButtonGroupComponent, PoTooltipDirective, PoRichTextImageModalComponent, PoRichTextLinkModalComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextToolbarComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-toolbar', template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"format\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"color\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        type=\"button\"\n        class=\"po-button po-button-default po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n        [attr.aria-label]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n          [attr.aria-label]=\"literals.textColor\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div *ngIf=\"!disabledTextAlign\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"list\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"link\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"media\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n\n<po-rich-text-image-modal #richTextImageModal (p-command)=\"emitCommand($event)\"> </po-rich-text-image-modal>\n\n<po-rich-text-link-modal\n  #richTextLinkModal\n  (p-command)=\"emitCommand($event)\"\n  (p-link-editing)=\"emitLinkEditing($event)\"\n>\n</po-rich-text-link-modal>\n" }]
    }], () => [{ type: PoLanguageService }], { colorPickerInput: [{
            type: ViewChild,
            args: ['colorPickerInput', { read: ElementRef }]
        }], toolbarElement: [{
            type: ViewChild,
            args: ['toolbarElement', { static: true }]
        }], richTextImageModal: [{
            type: ViewChild,
            args: [PoRichTextImageModalComponent, { static: true }]
        }], richTextLinkModal: [{
            type: ViewChild,
            args: [PoRichTextLinkModalComponent, { static: true }]
        }], command: [{
            type: Output,
            args: ['p-command']
        }], modal: [{
            type: Output,
            args: ['p-modal']
        }], linkEditing: [{
            type: Output,
            args: ['p-link-editing']
        }], disabledTextAlign: [{
            type: Input,
            args: ['p-disabled-text-align']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextToolbarComponent, { className: "PoRichTextToolbarComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text-toolbar/po-rich-text-toolbar.component.ts", lineNumber: 18 }); })();

/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: PoRichTextService
    }
];
/**
 * @docsExtends PoRichTextBaseComponent
 *
 * @example
 *
 * <example name="po-rich-text-basic" title="PO Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="PO Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
class PoRichTextComponent extends PoRichTextBaseComponent {
    element;
    bodyElement;
    listener = this.validateClassesForRequired.bind(this);
    modelLastUpdate;
    get errorMsg() {
        return this.errorMessage !== '' && !this.value && this.required && this.invalid ? this.errorMessage : '';
    }
    constructor(element, richTextService) {
        super(richTextService);
        this.element = element;
    }
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        this.addKeyListeners();
        this.verifyAutoFocus();
    }
    ngOnDestroy() {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('keydown', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     */
    focus() {
        this.bodyElement.focus();
    }
    onBlur() {
        this.onTouched?.();
    }
    onChangeValue(value) {
        this.change.emit(value);
    }
    updateValue(value) {
        this.value = value;
        this.invalid = !value;
        this.controlChangeModelEmitter(this.value);
        this.updateModel(this.value);
    }
    addKeyListeners() {
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('keydown', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    validateClassesForRequired() {
        setTimeout(() => {
            const value = this.value;
            const element = this.element.nativeElement;
            if (!value && this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        });
    }
    static ɵfac = function PoRichTextComponent_Factory(t) { return new (t || PoRichTextComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoRichTextService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextComponent, selectors: [["po-rich-text"]], viewQuery: function PoRichTextComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoRichTextBodyComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyElement = _t.first);
        } }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 13, consts: [[3, "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [3, "p-height", "p-label", "p-model-value", "p-placeholder", "p-readonly", "p-change", "p-commands", "p-selected-link", "p-shortcut-command", "p-value", "p-blur"], ["richTextBody", ""], [3, "p-readonly", "p-disabled-text-align", "p-link-editing", "p-command"], ["richTextToolbar", ""], [3, "p-help", "p-error-pattern"]], template: function PoRichTextComponent_Template(rf, ctx) { if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "po-rich-text-body", 2, 3);
            i0.ɵɵlistener("p-change", function PoRichTextComponent_Template_po_rich_text_body_p_change_2_listener($event) { return ctx.onChangeValue($event); })("p-commands", function PoRichTextComponent_Template_po_rich_text_body_p_commands_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.setButtonsStates($event)); })("p-selected-link", function PoRichTextComponent_Template_po_rich_text_body_p_selected_link_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.selectedLink($event)); })("p-shortcut-command", function PoRichTextComponent_Template_po_rich_text_body_p_shortcut_command_2_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.shortcutTrigger()); })("p-value", function PoRichTextComponent_Template_po_rich_text_body_p_value_2_listener($event) { return ctx.updateValue($event); })("p-blur", function PoRichTextComponent_Template_po_rich_text_body_p_blur_2_listener() { return ctx.onBlur(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "po-rich-text-toolbar", 4, 5);
            i0.ɵɵlistener("p-link-editing", function PoRichTextComponent_Template_po_rich_text_toolbar_p_link_editing_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.linkEditing($event)); })("p-command", function PoRichTextComponent_Template_po_rich_text_toolbar_p_command_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.executeCommand($event)); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(6, "po-field-container-bottom", 6);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-height", ctx.height)("p-label", ctx.label)("p-model-value", ctx.value)("p-placeholder", ctx.placeholder)("p-readonly", ctx.readonly);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-readonly", ctx.readonly)("p-disabled-text-align", ctx.disabledTextAlign);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-help", ctx.help)("p-error-pattern", ctx.errorMsg);
        } }, dependencies: [PoFieldContainerBottomComponent, PoFieldContainerComponent, PoRichTextBodyComponent, PoRichTextToolbarComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text', providers: providers, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-label]=\"label\" [p-optional]=\"optional\" [p-required]=\"required\" [p-show-required]=\"showRequired\">\n  <div class=\"po-field-container-content\">\n    <po-rich-text-body\n      #richTextBody\n      [p-height]=\"height\"\n      [p-label]=\"label\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-selected-link)=\"richTextToolbar.selectedLink($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\"\n      (p-blur)=\"onBlur()\"\n    >\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar\n      #richTextToolbar\n      [p-readonly]=\"readonly\"\n      [p-disabled-text-align]=\"disabledTextAlign\"\n      (p-link-editing)=\"richTextBody.linkEditing($event)\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n    >\n    </po-rich-text-toolbar>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: PoRichTextService }], { bodyElement: [{
            type: ViewChild,
            args: [PoRichTextBodyComponent, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoRichTextComponent, { className: "PoRichTextComponent", filePath: "lib/components/po-field/po-rich-text/po-rich-text.component.ts", lineNumber: 63 }); })();

/**
 * @docsExtends PoFieldModel
 */
class PoFieldValidateModel extends PoFieldModel {
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional = false;
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    required = false;
    /**
     *  Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    onValidatorChange;
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return this.extraValidation(abstractControl);
    }
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    validateModel() {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoFieldValidateModel_BaseFactory; return function PoFieldValidateModel_Factory(t) { return (ɵPoFieldValidateModel_BaseFactory || (ɵPoFieldValidateModel_BaseFactory = i0.ɵɵgetInheritedFactory(PoFieldValidateModel)))(t || PoFieldValidateModel); }; })();
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoFieldValidateModel, inputs: { optional: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-optional", "optional", convertToBoolean], required: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-required", "required", convertToBoolean], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"] }, features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldValidateModel, [{
        type: Directive
    }], null, { optional: [{
            type: Input,
            args: [{ alias: 'p-optional', transform: convertToBoolean }]
        }], required: [{
            type: Input,
            args: [{ alias: 'p-required', transform: convertToBoolean }]
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }] }); })();

const _c0$D = ["select"];
function PoSelectComponent_ng_container_4_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 8);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    let tmp_3_0;
    i0.ɵɵproperty("disabled", !!ctx_r5.placeholder)("hidden", !(ctx_r5.selectedValue == null ? null : ctx_r5.selectedValue.toString()) && !ctx_r5.placeholder)("selected", !(ctx_r5.selectedValue == null ? null : ctx_r5.selectedValue.toString()))("value", (tmp_3_0 = ctx_r5.placeholder) !== null && tmp_3_0 !== undefined ? tmp_3_0 : "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r5.placeholder, " ");
} }
function PoSelectComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_4_option_1_Template, 2, 5, "option", 6);
    i0.ɵɵelementStart(2, "option", 7);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !(ctx_r1.selectedValue == null ? null : ctx_r1.selectedValue.toString()) || !!ctx_r1.placeholder);
    i0.ɵɵadvance();
    i0.ɵɵproperty("hidden", true);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.displayValue);
} }
function PoSelectComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "option");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r2.displayValue || ctx_r2.placeholder);
} }
function PoSelectComponent_ng_container_6_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r6.readonly)("value", item_r7 == null ? null : item_r7[ctx_r6.fieldValue]);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", item_r7 == null ? null : item_r7[ctx_r6.fieldLabel], " ");
} }
function PoSelectComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_6_option_1_Template, 2, 3, "option", 9);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r3.optionWithoutGroup);
} }
function PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_option_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 15);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const subItem_r12 = ctx.$implicit;
    const ctx_r11 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("value", subItem_r12 == null ? null : subItem_r12[ctx_r11.fieldValue])("disabled", ctx_r11.readonly);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", subItem_r12 == null ? null : subItem_r12[ctx_r11.fieldLabel], " ");
} }
function PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "optgroup", 13);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_option_1_Template, 2, 3, "option", 14);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵpropertyInterpolate("label", item_r9 == null ? null : item_r9.label);
    i0.ɵɵproperty("disabled", ctx_r10.readonly);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", item_r9.options);
} }
function PoSelectComponent_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_optgroup_1_Template, 2, 3, "optgroup", 12);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", (item_r9 == null ? null : item_r9.options.length) > 0);
} }
function PoSelectComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoSelectComponent_ng_container_7_ng_container_1_Template, 2, 1, "ng-container", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r4.listGroupOptions);
} }
const PO_SELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_SELECT_FIELD_VALUE_DEFAULT = 'value';
/**
 * @docsExtends PoFieldValidateModel
 *
 * @example
 *
 * <example name="po-select-basic" title="PO Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="PO Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="PO Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 *
 * <example name="po-select-companies" title="PO Select Companies">
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.html"> </file>
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.ts"> </file>
 * </example>
 *
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-combo-option-template](/documentation/po-combo-option-template)**.
 *
 * > Obs: o template **[p-select-option-template](/documentation/po-select-option-template)** será depreciado na versão 14.x.x.
 */
class PoSelectComponent extends PoFieldValidateModel {
    changeDetector;
    renderer;
    selectElement;
    /**
     * @optional
     *
     * @description
     *
     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
     *
     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
     * two-way binding no componente deve se utilizar da seguinte forma:
     *
     * ```
     * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
     * ```
     */
    ngModelChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente para leitura.
     *
     * @default `false`
     */
    readonly = false;
    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada. */
    placeholder;
    displayValue;
    id = `po-select[${uuid()}]`;
    modelValue;
    selectedValue;
    optionsDefault = [];
    listGroupOptions = [];
    optionWithoutGroup = [];
    isSafari = isSafari();
    onModelTouched;
    _fieldLabel = PO_SELECT_FIELD_LABEL_DEFAULT;
    _fieldValue = PO_SELECT_FIELD_VALUE_DEFAULT;
    _options;
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`,
     * ou uma coleção de objetos dentro de grupos diferentes, que seriam da interface `PoSelectOptionGroup`.
     *
     * Caso esta lista estiver vazia, o model será `undefined`.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     *
     * > Para coleção de objetos dentro de grupos distintos será exibido a label e opções somente se a propriedade `options` possua valores.
     *  Sendo assim, a estrutura seguiria dessa forma:
     *
     * ```
     * this.options = [{
     *  label: 'Opções',
     *  options: [
     *    { value: 1, label: 'opção 1' },
     *    { value: 2, label: 'opção 2' }
     *  ],
     * }];
     * ```
     *
     * É possível a utilização de opções agrupadas e desagrupadas em conjunto, porém será feita a ordenação de exibir as opções
     * desagrupadas acima.
     *
     */
    set options(options) {
        this.listGroupOptions = [];
        this.optionWithoutGroup = [];
        if (this.fieldLabel && this.fieldValue && options) {
            options.map(option => {
                if (this.isItemGroup(option)) {
                    option.options.map(opt => {
                        opt.label = opt[this.fieldLabel];
                        opt.value = opt[this.fieldValue];
                    });
                }
                else {
                    option.label = option[this.fieldLabel];
                    option.value = option[this.fieldValue];
                }
            });
        }
        if (options) {
            this.optionsDefault = [...options];
            this.separateOptions();
            this.optionsDefault = [];
            this.optionsDefault = [...this.optionWithoutGroup, ...this.transformInArray(this.listGroupOptions)];
            this.onUpdateOptions();
            this._options = [...this.optionsDefault];
        }
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_SELECT_FIELD_LABEL_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_SELECT_FIELD_VALUE_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    /* istanbul ignore next */
    constructor(changeDetector, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
    }
    ngOnChanges(changes) {
        if (changes.options?.currentValue) {
            this.options = changes.options.currentValue;
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    onBlur() {
        this.onModelTouched?.();
    }
    // Altera o valor ao selecionar um item.
    onSelectChange(value) {
        this.onModelTouched?.();
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateValues(optionFound);
            }
        }
    }
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    // Atualiza valores
    updateValues(option) {
        if (this.selectedValue !== option[this.fieldValue]) {
            this.selectedValue = option[this.fieldValue];
            this.selectElement.nativeElement.value = option[this.fieldValue];
            this.updateModel(option[this.fieldValue]);
            this.displayValue = option[this.fieldLabel];
            this.emitChange(option[this.fieldValue]);
        }
    }
    // Recebe as alterações do model
    onWriteValue(value) {
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound[this.fieldValue];
            this.displayValue = optionFound[this.fieldLabel];
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.updateModel(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    extraValidation(c) {
        return null;
    }
    isItemGroup(item) {
        if (item.options) {
            return Array.isArray(item.options) ? true : false;
        }
        return false;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    findOptionValue(value) {
        if (this.options) {
            return this.options.find(option => this.isEqual(option.value, value));
        }
    }
    transformInArray(objectWithArray) {
        return objectWithArray.reduce((options, items) => {
            if (items.options) {
                return options.concat(items.options);
            }
            return [];
        }, []);
    }
    separateOptions() {
        this.optionsDefault.forEach(option => {
            if (this.isItemGroup(option)) {
                this.validateOptions(option.options);
                this.listGroupOptions.push(option);
            }
            else {
                this.optionWithoutGroup.push(option);
            }
        });
        if (this.optionWithoutGroup.length > 0) {
            this.validateOptions(this.optionWithoutGroup);
        }
    }
    validateOptions(options) {
        removeDuplicatedOptions(options);
        removeUndefinedAndNullOptions(options);
    }
    static ɵfac = function PoSelectComponent_Factory(t) { return new (t || PoSelectComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSelectComponent, selectors: [["po-select"]], viewQuery: function PoSelectComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$D, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElement = _t.first);
        } }, inputs: { readonly: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-readonly", "readonly", convertToBoolean], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"] }, outputs: { ngModelChange: "ngModelChange" }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoSelectComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoSelectComponent),
                    multi: true
                }
            ]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 9, vars: 18, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-select", 3, "disabled", "id", "required", "change"], ["select", ""], [4, "ngIf"], [3, "p-help", "p-disabled"], [3, "disabled", "hidden", "selected", "value", 4, "ngIf"], [3, "hidden"], [3, "disabled", "hidden", "selected", "value"], [3, "disabled", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "value"], [4, "ngFor", "ngForOf"], [3, "label", "disabled", 4, "ngIf"], [3, "label", "disabled"], [3, "value", "disabled", 4, "ngFor", "ngForOf"], [3, "value", "disabled"]], template: function PoSelectComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "select", 2, 3);
            i0.ɵɵlistener("change", function PoSelectComponent_Template_select_change_2_listener($event) { return ctx.onSelectChange($event.target.value); });
            i0.ɵɵtemplate(4, PoSelectComponent_ng_container_4_Template, 4, 3, "ng-container", 4)(5, PoSelectComponent_ng_container_5_Template, 3, 1, "ng-container", 4)(6, PoSelectComponent_ng_container_6_Template, 2, 1, "ng-container", 4)(7, PoSelectComponent_ng_container_7_Template, 2, 1, "ng-container", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(8, "po-field-container-bottom", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-select-placeholder", !(ctx.selectedValue == null ? null : ctx.selectedValue.toString()) && !!ctx.placeholder);
            i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.isSafari);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isSafari);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.optionWithoutGroup.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.listGroupOptions.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i2$1.NgSelectOption, i2$1.ɵNgSelectMultipleOption, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSelectComponent, [{
        type: Component,
        args: [{ selector: 'po-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <select\n      #select\n      class=\"po-select\"\n      [attr.name]=\"name\"\n      [class.po-select-placeholder]=\"!selectedValue?.toString() && !!placeholder\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [required]=\"required\"\n      (change)=\"onSelectChange($event.target.value)\"\n    >\n      <ng-container *ngIf=\"!isSafari\">\n        <option\n          *ngIf=\"!selectedValue?.toString() || !!placeholder\"\n          [disabled]=\"!!placeholder\"\n          [hidden]=\"!selectedValue?.toString() && !placeholder\"\n          [selected]=\"!selectedValue?.toString()\"\n          [value]=\"placeholder ?? ''\"\n        >\n          {{ placeholder }}\n        </option>\n        <option [hidden]=\"true\">{{ displayValue }}</option>\n      </ng-container>\n\n      <ng-container *ngIf=\"isSafari\">\n        <option>{{ displayValue || placeholder }}</option>\n      </ng-container>\n\n      <ng-container *ngIf=\"optionWithoutGroup.length > 0\">\n        <option *ngFor=\"let item of optionWithoutGroup\" [disabled]=\"readonly\" [value]=\"item?.[this.fieldValue]\">\n          {{ item?.[this.fieldLabel] }}\n        </option>\n      </ng-container>\n      <ng-container *ngIf=\"listGroupOptions.length > 0\">\n        <ng-container *ngFor=\"let item of listGroupOptions\">\n          <optgroup *ngIf=\"item?.options.length > 0\" label=\"{{ item?.label }}\" [disabled]=\"readonly\">\n            <option *ngFor=\"let subItem of item.options\" [value]=\"subItem?.[this.fieldValue]\" [disabled]=\"readonly\">\n              {{ subItem?.[this.fieldLabel] }}\n            </option>\n          </optgroup>\n        </ng-container>\n      </ng-container>\n    </select>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }], { selectElement: [{
            type: ViewChild,
            args: ['select', { read: ElementRef, static: true }]
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], readonly: [{
            type: Input,
            args: [{ alias: 'p-readonly', transform: convertToBoolean }]
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSelectComponent, { className: "PoSelectComponent", filePath: "lib/components/po-field/po-select/po-select.component.ts", lineNumber: 92 }); })();

/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 *
 * #### Acessibilidade tratada no componente
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas. São elas:
 *
 * - O Text area foi desenvolvido com uso de controles padrões HTML, o que permite a identificação do mesmo na interface por tecnologias
 * assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - O foco é visível e possui uma espessura superior a 2 pixels CSS, não ficando escondido por outros
 * elementos da tela. [WCAG 2.4.12: Focus Appearance)](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A identificação do erro acontece também através da mudança de cor do campo, mas também de um ícone
 * junto da mensagem. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 */
class PoTextareaBaseComponent {
    cd;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus = false;
    /** Label do campo. */
    label;
    /** Texto de apoio do campo. */
    help;
    /** Nome e Id do componente. */
    name;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao sair do campo.
     */
    blur = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao entrar do campo.
     */
    enter = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor e deixar o campo.
     */
    change = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do model.
     */
    changeModel = new EventEmitter();
    _disabled = false;
    _maxlength;
    _minlength;
    _placeholder = '';
    _readonly = false;
    _required = false;
    _rows = 3;
    modelLastUpdate;
    onChangePropagate = null;
    validatorChange;
    // eslint-disable-next-line
    onTouched = null;
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(readonly) {
        this._readonly = convertToBoolean(readonly);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Define se a indicação de campo obrigatório será exibida.
     *
     * > Não será exibida a indicação se:
     * - Não possuir `p-help` e/ou `p-label`.
     */
    showRequired = false;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(minlength) {
        this._minlength = convertToInt(minlength);
        this.validateModel();
    }
    get minlength() {
        return this._minlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(maxlength) {
        this._maxlength = convertToInt(maxlength);
        this.validateModel();
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * @default `3`
     */
    set rows(value) {
        this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
    }
    get rows() {
        return this._rows;
    }
    constructor(cd) {
        this.cd = cd;
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(func) {
        this.validatorChange = func;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
        this.cd.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    static ɵfac = function PoTextareaBaseComponent_Factory(t) { return new (t || PoTextareaBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTextareaBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-auto-focus", "autoFocus", convertToBoolean], label: [i0.ɵɵInputFlags.None, "p-label", "label"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], name: "name", optional: [i0.ɵɵInputFlags.None, "p-optional", "optional"], placeholder: [i0.ɵɵInputFlags.None, "p-placeholder", "placeholder"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], showRequired: [i0.ɵɵInputFlags.None, "p-show-required", "showRequired"], minlength: [i0.ɵɵInputFlags.None, "p-minlength", "minlength"], maxlength: [i0.ɵɵInputFlags.None, "p-maxlength", "maxlength"], rows: [i0.ɵɵInputFlags.None, "p-rows", "rows"] }, outputs: { blur: "p-blur", enter: "p-enter", change: "p-change", changeModel: "p-change-model" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTextareaBaseComponent, [{
        type: Directive
    }], () => [{ type: i0.ChangeDetectorRef }], { autoFocus: [{
            type: Input,
            args: [{ alias: 'p-auto-focus', transform: convertToBoolean }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], name: [{
            type: Input,
            args: ['name']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], blur: [{
            type: Output,
            args: ['p-blur']
        }], enter: [{
            type: Output,
            args: ['p-enter']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], minlength: [{
            type: Input,
            args: ['p-minlength']
        }], maxlength: [{
            type: Input,
            args: ['p-maxlength']
        }], rows: [{
            type: Input,
            args: ['p-rows']
        }] }); })();

const _c0$C = ["inp"];
/**
 * @docsExtends PoTextareaBaseComponent
 *
 * @example
 *
 * <example name="po-textarea-basic" title="PO Textarea Basic" >
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.html"> </file>
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-labs" title="PO Textarea Labs" >
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.html"> </file>
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email" title="PO Textarea - Email" >
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.html"> </file>
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email-reactive-form" title="PO Textarea - Email Reactive Form" >
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.html"> </file>
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.ts"> </file>
 * </example>
 *
 */
class PoTextareaComponent extends PoTextareaBaseComponent {
    inputEl;
    id = `po-textarea[${uuid()}]`;
    valueBeforeChange;
    fireChange = false;
    constructor(cd) {
        super(cd);
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTextareaComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
     *
     * focusTextarea() {
     *   this.textarea.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (!value) {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
            else {
                this.inputEl.nativeElement.value = value;
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.change.emit(value);
        }
    }
    validMaxLength(maxlength, value) {
        return maxlength && value.length > maxlength ? value.toString().substring(0, maxlength) : value;
    }
    eventOnInput(event) {
        const value = this.validMaxLength(this.maxlength, event.target.value);
        this.callOnChange(value);
        this.inputEl.nativeElement.value = value;
    }
    eventOnFocus() {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur() {
        this.onTouched?.();
        this.blur.emit();
        this.controlChangeEmitter();
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        if (elementValue !== this.valueBeforeChange) {
            this.change.emit(elementValue);
        }
    }
    static ɵfac = function PoTextareaComponent_Factory(t) { return new (t || PoTextareaComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTextareaComponent, selectors: [["po-textarea"]], viewQuery: function PoTextareaComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$C, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(() => PoTextareaComponent),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(() => PoTextareaComponent),
                    multi: true
                }
            ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 15, consts: [[3, "p-disabled", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-textarea", 3, "disabled", "id", "placeholder", "readonly", "required", "rows", "blur", "focus", "input"], ["inp", ""], [3, "p-help", "p-disabled"]], template: function PoTextareaComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "textarea", 2, 3);
            i0.ɵɵlistener("blur", function PoTextareaComponent_Template_textarea_blur_2_listener() { return ctx.eventOnBlur(); })("focus", function PoTextareaComponent_Template_textarea_focus_2_listener() { return ctx.eventOnFocus(); })("input", function PoTextareaComponent_Template_textarea_input_2_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "po-field-container-bottom", 4);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disabled)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("rows", ctx.rows);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
        } }, dependencies: [PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTextareaComponent, [{
        type: Component,
        args: [{ selector: 'po-textarea', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoTextareaComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoTextareaComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <textarea\n      #inp\n      class=\"po-textarea\"\n      (blur)=\"eventOnBlur()\"\n      (focus)=\"eventOnFocus()\"\n      (input)=\"eventOnInput($event)\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n    ></textarea>\n  </div>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTextareaComponent, { className: "PoTextareaComponent", filePath: "lib/components/po-field/po-textarea/po-textarea.component.ts", lineNumber: 59 }); })();

const poSearchLiteralsDefault = {
    en: {
        search: 'Search',
        clean: 'Clean',
        all: 'All'
    },
    es: {
        search: 'Buscar',
        clean: 'limpiar',
        all: 'Todo'
    },
    pt: {
        search: 'Pesquisar',
        clean: 'Apagar',
        all: 'Todos'
    },
    ru: {
        search: 'Поиск',
        clean: 'чистый',
        all: 'Все'
    }
};

/**
 * @description
 *
 * O componente search, também conhecido como barra de pesquisa, é utilizado para ajudar os usuários a localizar um determinado conteúdo
 *
 * Normalmente localizado no canto superior direito, junto com o ícone de lupa, uma vez que este ícone é amplamente reconhecido.
 *
 * Portanto, é de extrema importância que, ao utilizar este componente, as pessoas responsáveis por seu desenvolvimento considerem os seguintes critérios.
 *
 * #### Boas práticas
 *
 * Foram estruturados os padrões de usabilidade para auxiliar na utilização do componente e garantir uma boa experiência aos usuários. Por isso, é muito importante que ao utilizar este componente, as pessoas que o projetarem devem levar em consideração os seguintes critérios:
 * - Utilize labels para apresentar resultados que estão sendo exibidos e apresente os resultados mais relevantes primeiro.
 * - Exiba uma mensagem clara quando não forem encontrados resultados para busca e sempre que possível ofereça outras sugestões de busca.
 * - Mantenha o texto original no campo de input, que facilita a ação do usuário caso queira fazer uma nova busca com alguma modificação na pesquisa.
 * - Caso seja possível detectar um erro de digitação, mostre os resultados para a palavra "corrigida", isso evita a frustração de não obter resultados e não força o usuário a realizar uma nova busca.
 * - Quando apropriado, destaque os termos da busca nos resultados.
 * - A entrada do campo de pesquisa deve caber em uma linha. Não use entradas de pesquisa de várias linhas.
 * - Recomenda-se ter apenas uma pesquisa por página. Se você precisar de várias pesquisas, rotule-as claramente para indicar sua finalidade.
 * - Se possível, forneça sugestões de pesquisa, seja em um helptext ou sugestão de pesquisa que é um autocomplete. Isso ajuda os usuários a encontrar o que estão procurando, especialmente se os itens pesquisáveis forem complexos.
 *
 * #### Acessibilidade tratada no componente
 *
 *  Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Permitir a interação via teclado (2.1.1: Keyboard (A));
 * - Alteração entre os estados precisa ser indicada por mais de um elemento além da cor (1.4.1: Use of Color);
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                             | Descrição                                            | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--text-color-placeholder`             | Cor do texto no placeholder                           | `var(--color-neutral-light-30)`                   |
 * | `--color`                              | Cor principal do search                               | `var(--color-neutral-dark-70)`                    |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-05)`                   |
 * | `--text-color`                         | Cor do texto                                          | `var(--color-neutral-dark-90)`                    |
 * | `--color-clear`                        | Cor principal do icone close                          | `var(--color-action-default)`                     |
 * | **Icon**                               |                                                       |                                                   |
 * | `--color-icon-read`                    | Cor principal do icone de leitura                     | `var(--color-neutral-dark-70)`                    |
 * | `--color-icon`                         | Cor principal do icone                                | `var(--color-action-default)`                     |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-action-hover)`                       |
 * | `--background-hover`                   | Cor de background no estado hover                     | `var(--color-brand-01-lightest)`                  |
 * | **Focused**                            |                                                       |                                                   |
 * | `--color-focused`                      | Cor principal no estado de focus                      | `var(--color-action-default)`                     |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor principal no estado disabled                      | `var(--color-action-disabled)`                    |
 * | `--background-color-disabled`          | Cor de background no estado disabled                  | `var(--color-neutral-light-20)`                   |
 *
 */
class PoSearchBaseComponent {
    _literals;
    _ariaLabel;
    language;
    _filterSelect;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o po-search e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    disabled;
    /**
     * @optional
     *
     * @description
     *
     * Lista de itens que serão utilizados para pesquisa
     */
    items = [];
    /**
     * @optional
     *
     * @description
     *
     * Define um aria-label para o po-search.
     *
     * > Devido o componente não possuir uma label assim como outros campos de texto, o `aria-label` é utilizado para acessibilidade.
     */
    set ariaLabel(value) {
        this._ariaLabel = value;
        if (value !== this.literals.search) {
            this._ariaLabel = `${this._ariaLabel} ${this.literals.search}`;
        }
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * @description
     *
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente (p-items), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     */
    filterKeys = [];
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente (p-items), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     */
    icon;
    /**
     * @optional
     *
     * @description
     *
     * Determina a forma de realizar a pesquisa no componente
     *
     * Valores aceitos:
     * - `action`: Realiza a busca a cada caractere digitado.
     * - `trigger`: Realiza a busca ao pressionar `enter` ou clicar no ícone de busca.
     *
     * @default `action`
     */
    type = 'action';
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-search`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoSearchLiterals = {
     *    search: 'Pesquisar',
     *    clean: 'Limpar',
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-search
     *   [p-literals]="customLiterals">
     * </po-search>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poSearchLiteralsDefault[poLocaleDefault],
                ...poSearchLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poSearchLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poSearchLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado. Valores definidos no enum: PoSearchFilterMode
     *
     * @default `startsWith`
     */
    filterType = PoSearchFilterMode.startsWith;
    /**
     * @optional
     *
     * @description
     *
     * Exibe uma lista (auto-complete) com as opções definidas no `p-filter-keys` enquanto realiza uma busca,
     * respeitando o `p-filter-type` como modo de pesquisa.
     *
     * @default `false`
     */
    showListbox = false;
    /**
     * @description
     *
     * Define os tipos de filtros (p-filter-keys) a serem aplicados na busca ou lista do componente (p-items).
     * Automaticamente adiciona a opção 'Todos', com um mapeamento de todas as opções passadas.
     *
     * > O uso desta propriedade torna a propriedade 'p-filter-keys' inválida.
     *
     * Exemplo de uso:
     * ```typescript
     * const filterSelect = [
     *   { label: 'personal', value: ['name', 'email', 'nickname'] },
     *   { label: 'address', value: ['country', 'state', 'city', 'street'] },
     *   { label: 'family', value: ['father', 'mother', 'dependents'] }
     * ];
     * ```
     */
    set filterSelect(values) {
        if (!Array.isArray(values) || values.length === 0 || values.every(value => Object.keys(value).length === 0)) {
            this._filterSelect = undefined;
            return;
        }
        const _values = this.ensureFilterSelectOption(values);
        const allValues = _values.flatMap(e => e.value);
        const uniqueValues = [...new Set(allValues)];
        const filterOptionAll = {
            label: this.literals.all,
            value: uniqueValues
        };
        this._filterSelect = [filterOptionAll, ..._values];
    }
    get filterSelect() {
        return this._filterSelect;
    }
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do model.
     */
    changeModel = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver alterações no input.
     */
    filteredItemsChange = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver alterações nos filtros.
     */
    filter = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Pode ser informada uma função que será disparada quando houver click no listbox.
     */
    listboxOnClick = new EventEmitter();
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    ensureFilterSelectOption(values) {
        const _values = Array.isArray(values) ? values : Array.of(values);
        return _values.map(value => (typeof value === 'object' ? value : { label: value, value }));
    }
    static ɵfac = function PoSearchBaseComponent_Factory(t) { return new (t || PoSearchBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSearchBaseComponent, inputs: { disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-disabled", "disabled", convertToBoolean], items: [i0.ɵɵInputFlags.None, "p-items", "items"], ariaLabel: [i0.ɵɵInputFlags.None, "p-aria-label", "ariaLabel"], filterKeys: [i0.ɵɵInputFlags.None, "p-filter-keys", "filterKeys"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], type: [i0.ɵɵInputFlags.None, "p-search-type", "type"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], filterType: [i0.ɵɵInputFlags.None, "p-filter-type", "filterType"], showListbox: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-listbox", "showListbox", convertToBoolean], filterSelect: [i0.ɵɵInputFlags.None, "p-filter-select", "filterSelect"] }, outputs: { changeModel: "p-change-model", filteredItemsChange: "p-filtered-items-change", filter: "p-filter", listboxOnClick: "p-listbox-onclick" }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSearchBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { disabled: [{
            type: Input,
            args: [{ alias: 'p-disabled', transform: convertToBoolean }]
        }], items: [{
            type: Input,
            args: ['p-items']
        }], ariaLabel: [{
            type: Input,
            args: ['p-aria-label']
        }], filterKeys: [{
            type: Input,
            args: ['p-filter-keys']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], type: [{
            type: Input,
            args: ['p-search-type']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], filterType: [{
            type: Input,
            args: ['p-filter-type']
        }], showListbox: [{
            type: Input,
            args: [{ alias: 'p-show-listbox', transform: convertToBoolean }]
        }], filterSelect: [{
            type: Input,
            args: ['p-filter-select']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], filteredItemsChange: [{
            type: Output,
            args: ['p-filtered-items-change']
        }], filter: [{
            type: Output,
            args: ['p-filter']
        }], listboxOnClick: [{
            type: Output,
            args: ['p-listbox-onclick']
        }] }); })();

const _c0$B = ["poSearchInput"];
const _c1$e = ["poListboxContainerElement"];
const _c2$5 = ["poListboxElement"];
const _c3$3 = ["poListbox"];
function PoSearchComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵelement(1, "po-dropdown", 13);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-label", ctx_r0.searchFilterSelectLabel)("p-disabled", ctx_r0.disabled)("p-actions", ctx_r0.searchFilterSelectActions);
} }
function PoSearchComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵelement(1, "po-icon", 15);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-icon", ctx_r1.icon ? ctx_r1.icon : "ICON_SEARCH");
} }
function PoSearchComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 16);
    i0.ɵɵlistener("click", function PoSearchComponent_button_6_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.clearSearch()); })("keydown.enter", function PoSearchComponent_button_6_Template_button_keydown_enter_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.clearSearch()); });
    i0.ɵɵelement(1, "po-clean", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ariaLabel", ctx_r3.literals.clean);
} }
function PoSearchComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 18);
    i0.ɵɵlistener("click", function PoSearchComponent_button_7_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); const _r2 = i0.ɵɵreference(4); return i0.ɵɵresetView(ctx_r11.onSearchChange(_r2.value, true, true)); })("keydown.enter", function PoSearchComponent_button_7_Template_button_keydown_enter_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); const _r2 = i0.ɵɵreference(4); return i0.ɵɵresetView(ctx_r13.onSearchChange(_r2.value, true, true)); });
    i0.ɵɵelement(1, "po-icon", 15);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ariaLabel", ctx_r4.literals.search)("disabled", ctx_r4.disabled);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-icon", ctx_r4.icon ? ctx_r4.icon : "ICON_SEARCH");
} }
const poSearchContainerOffset = 8;
const poSearchContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoSearchBaseComponent
 *
 * @example
 *
 * <example name="po-search-basic" title="PO Search Basic">
 *  <file name="sample-po-search-basic/sample-po-search-basic.component.html"> </file>
 *  <file name="sample-po-search-basic/sample-po-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-search-labs" title="PO Search Labs">
 *  <file name="sample-po-search-labs/sample-po-search-labs.component.html"> </file>
 *  <file name="sample-po-search-labs/sample-po-search-labs.component.ts"> </file>
 *  <file name="sample-po-search-labs/sample-po-search-labs.service.ts"> </file>
 * </example>
 *
 * <example name="po-search-find-people" title="PO Search Find People">
 *  <file name="sample-po-search-find-people/sample-po-search-find-people.component.html"> </file>
 *  <file name="sample-po-search-find-people/sample-po-search-find-people.component.ts"> </file>
 *  <file name="sample-po-search-find-people/sample-po-search-find-people.service.ts"> </file>
 * </example>
 *
 * <example name="po-search-listbox" title="PO Search With Listbox">
 *  <file name="sample-po-search-listbox/sample-po-search-listbox.component.html"> </file>
 *  <file name="sample-po-search-listbox/sample-po-search-listbox.component.ts"> </file>
 *  <file name="sample-po-search-listbox/sample-po-search-listbox.service.ts"> </file>
 * </example>
 *
 * <example name="po-search-filter-select" title="PO Search With Filter Select + Listbox">
 *  <file name="sample-po-search-filter-select/sample-po-search-filter-select.component.html"> </file>
 *  <file name="sample-po-search-filter-select/sample-po-search-filter-select.component.ts"> </file>
 * </example>
 *
 */
class PoSearchComponent extends PoSearchBaseComponent {
    languageService;
    renderer;
    changeDetector;
    controlPosition;
    clickoutListener;
    eventResizeListener;
    poSearchInput;
    poListboxContainerElement;
    poListboxElement;
    poListbox;
    listboxFilteredItems = [];
    filteredItems = [];
    listboxOpen = false;
    shouldMarkLetters = true;
    isFiltering = false;
    listboxItemclicked = false;
    searchFilter = {};
    searchFilterSelectLabel;
    searchFilterSelectActions;
    constructor(languageService, renderer, changeDetector, controlPosition) {
        super(languageService);
        this.languageService = languageService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
    }
    ngOnInit() {
        this.filteredItems = this.items;
        if (this.showListbox) {
            this.listboxFilteredItems = this.listboxItems;
        }
        if (this.filterSelect) {
            this.createDropdownFilterSelect();
        }
    }
    ngOnChanges(changes) {
        if (changes.filterSelect && changes.filterSelect.currentValue) {
            this.createDropdownFilterSelect();
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    clearSearch() {
        this.poSearchInput.nativeElement.value = '';
        this.onSearchChange('', true);
        this.filteredItemsChange.emit(this.items);
        this.onCloseListbox();
    }
    onSearchChange(searchText, activated, buttonClick) {
        const searchTextInitial = searchText;
        if (searchText !== undefined) {
            searchText = searchText.toLowerCase();
        }
        this.isFiltering = true;
        if (this.showListbox && !buttonClick && searchText.length > 0) {
            this.controlListboxVisibility(true);
            this.listboxFilteredItems = this.getListboxFilteredItems(searchText);
        }
        else {
            if (searchText.length === 0) {
                this.listboxFilteredItems = this.listboxItems;
            }
        }
        if (activated && !this.listboxItemclicked) {
            this.updateFilteredItems(searchText);
            this.filteredItemsChange.emit(this.filteredItems);
            if (this.filterSelect) {
                this.searchFilter = {
                    ...this.searchFilter,
                    value: searchTextInitial
                };
            }
            else {
                this.searchFilter = {
                    filter: this.filterKeys,
                    value: searchTextInitial
                };
            }
            this.filter.emit(this.searchFilter);
            this.changeModel.emit(searchText);
        }
        if (this.listboxItemclicked) {
            this.listboxItemclicked = false;
        }
        this.changeDetector.detectChanges();
    }
    updateFilteredItems(searchText) {
        if (this.items && this.items.length > 0) {
            this.filteredItems = this.getFilteredItems(searchText);
        }
        else {
            this.filteredItems = [];
        }
    }
    getFilteredItems(searchText) {
        return this.items.filter(item => this.itemMatchesFilter(item, searchText));
    }
    itemMatchesFilter(item, searchText) {
        const valuesToSearch = this.filterKeys
            .map(key => (typeof item[key] !== 'string' ? String(item[key]) : item[key]))
            .map(value => (value ? value.toLowerCase() : ''));
        return valuesToSearch.some(value => this.filterValue(value, searchText));
    }
    getListboxFilteredItems(searchText) {
        return this.listboxItems.filter(item => this.filterValue(item.value, searchText));
    }
    filterValue(value, searchText) {
        value = value?.toLowerCase();
        switch (this.filterType) {
            case PoSearchFilterMode.startsWith:
                return value?.startsWith(searchText);
            case PoSearchFilterMode.contains:
                return value?.includes(searchText);
            case PoSearchFilterMode.endsWith:
                return value?.endsWith(searchText);
            default:
                return false;
        }
    }
    get listboxItems() {
        return this.items
            .map(item => this.filterKeys.map(key => item[key]).map(item => (typeof item !== 'string' ? String(item) : item)))
            .flat()
            .map(value => ({ label: value, value }))
            .filter((obj, index, self) => index === self.findIndex(o => o.label === obj.label && o.value === obj.value));
    }
    onCloseListbox() {
        this.poSearchInput.nativeElement.focus();
        this.controlListboxVisibility(false);
        this.isFiltering = false;
    }
    onListboxClick(option, event) {
        if (event) {
            event.stopPropagation();
        }
        if (!event || event.code === 'Enter') {
            this.listboxItemclicked = true;
        }
        this.poSearchInput.nativeElement.value = option.value;
        this.listboxOnClick.emit(option.value);
        this.onCloseListbox();
        if (this.type === 'action') {
            this.listboxItemclicked = false;
            this.onSearchChange(option.value.toString(), true, true);
        }
    }
    onBlur() {
        if (this.listboxOpen) {
            if (!this.poListbox.items.length) {
                this.controlListboxVisibility(false);
            }
            else {
                this.focusItem();
            }
        }
    }
    onKeyDown(event) {
        const key = event.keyCode;
        if (event.shiftKey && key === PoKeyCodeEnum.tab) {
            this.controlListboxVisibility(false);
            return;
        }
        if (key === PoKeyCodeEnum.tab) {
            this.controlListboxVisibility(false);
            return;
        }
        if (key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (!this.listboxOpen) {
                return;
            }
            this.focusItem();
            this.controlListboxVisibility(true);
            return;
        }
        if (key === PoKeyCodeEnum.esc) {
            this.controlListboxVisibility(false);
            this.poSearchInput.nativeElement.focus();
        }
        if (key === PoKeyCodeEnum.enter && this.listboxOpen) {
            this.controlListboxVisibility(false);
            this.isFiltering = false;
        }
    }
    focusItem() {
        const listboxItemList = document.querySelectorAll('.po-listbox-item');
        setTimeout(() => {
            Array.from(listboxItemList).forEach((el) => {
                el.tabIndex = -1;
                el.classList.remove('cdk-option-active');
            });
            const firstOption = listboxItemList[0];
            firstOption.focus();
            firstOption.classList.add('cdk-option-active');
        });
    }
    setContainerPosition() {
        if (this.poListboxContainerElement && this.poSearchInput) {
            this.controlPosition.setElements(this.poListboxContainerElement.nativeElement, poSearchContainerOffset, this.poSearchInput, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        }
    }
    adjustContainerPosition() {
        if (this.poListboxContainerElement && this.poSearchInput) {
            this.controlPosition.adjustPosition(poSearchContainerPositionDefault);
        }
    }
    controlListboxVisibility(toOpen) {
        toOpen ? this.openListbox() : this.closeListbox();
    }
    openListbox() {
        this.listboxOpen = true;
        this.changeDetector.detectChanges();
        this.initializeListeners();
        this.poSearchInput.nativeElement.focus();
        this.setContainerPosition();
    }
    closeListbox() {
        this.listboxOpen = false;
        this.changeDetector.detectChanges();
        this.removeListeners();
    }
    clickedOutsideInput(event) {
        if (this.listboxOpen &&
            !this.poSearchInput.nativeElement.contains(event.target) &&
            (!this.poListboxElement || !this.poListboxElement.nativeElement.contains(event.target))) {
            this.controlListboxVisibility(false);
        }
    }
    initializeListeners() {
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.clickedOutsideInput(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            setTimeout(() => this.adjustContainerPosition(), 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    onScroll = () => {
        this.adjustContainerPosition();
    };
    getInputValue() {
        return this.poSearchInput.nativeElement.value;
    }
    createDropdownFilterSelect() {
        this.searchFilterSelectActions = [];
        if (!this.filterSelect) {
            return;
        }
        this.filterSelect.forEach(filterOption => {
            const selectOption = {
                label: filterOption.label,
                action: () => this.changeFilterSelect(filterOption),
                selected: this.isSelected(filterOption)
            };
            this.searchFilterSelectActions.push(selectOption);
        });
        this.changeFilterSelect(this.filterSelect[0]);
    }
    isSelected(filterOption) {
        return this.searchFilterSelectLabel === filterOption.label;
    }
    changeFilterSelect(filterOption) {
        this.searchFilterSelectLabel = filterOption.label;
        this.filterKeys = Array.isArray(filterOption.value) ? [...filterOption.value] : [filterOption.value];
        if (!this.searchFilterSelectActions) {
            return;
        }
        this.searchFilterSelectActions.map(action => (action.selected = false));
        const selectAction = this.searchFilterSelectActions.find(action => action.label === this.searchFilterSelectLabel);
        selectAction.selected = true;
        this.searchFilter = {
            filter: filterOption.label === this.literals.all ? ['all'] : filterOption.value
        };
        this.poSearchInput.nativeElement.focus();
        if (this.type === 'action') {
            this.onSearchChange(this.getInputValue(), true);
        }
    }
    static ɵfac = function PoSearchComponent_Factory(t) { return new (t || PoSearchComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoControlPositionService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSearchComponent, selectors: [["po-search"]], viewQuery: function PoSearchComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$B, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$e, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$5, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$3, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poSearchInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poListboxContainerElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poListboxElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poListbox = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 13, vars: 20, consts: [[1, "po-search"], ["class", "po-search-select", 4, "ngIf"], ["class", "po-search-icon", 4, "ngIf"], ["type", "text", 1, "po-search-input", 3, "ariaLabel", "disabled", "placeholder", "input", "keyup.enter", "keydown", "blur"], ["poSearchInput", ""], [1, "po-search-buttons"], ["class", "po-search-button po-search-button-clean", "type", "button", 3, "ariaLabel", "click", "keydown.enter", 4, "ngIf"], ["class", "po-search-button po-search-button-trigger", "type", "button", 3, "ariaLabel", "disabled", "click", "keydown.enter", 4, "ngIf"], [1, "po-search-listbox-container", 3, "hidden"], ["poListboxContainerElement", ""], ["p-type", "option", 3, "p-items", "p-visible", "p-filter-mode", "p-should-mark-letter", "p-filtering", "p-search-value", "p-selectcombo-item", "p-close"], ["poListbox", "", "poListboxElement", ""], [1, "po-search-select"], [3, "p-label", "p-disabled", "p-actions"], [1, "po-search-icon"], [3, "p-icon"], ["type", "button", 1, "po-search-button", "po-search-button-clean", 3, "ariaLabel", "click", "keydown.enter"], [1, "po-icon-input"], ["type", "button", 1, "po-search-button", "po-search-button-trigger", 3, "ariaLabel", "disabled", "click", "keydown.enter"]], template: function PoSearchComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoSearchComponent_div_1_Template, 2, 3, "div", 1)(2, PoSearchComponent_div_2_Template, 2, 1, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("input", function PoSearchComponent_Template_input_input_3_listener($event) { ctx.onSearchChange($event.target.value, false); return ctx.onSearchChange($event.target.value, ctx.type === "action" ? true : false); })("keyup.enter", function PoSearchComponent_Template_input_keyup_enter_3_listener($event) { ctx.listboxOpen ? ctx.closeListbox() : ctx.onSearchChange($event.target.value, ctx.type === "trigger" ? true : false, true); return ctx.closeListbox(); })("keydown", function PoSearchComponent_Template_input_keydown_3_listener($event) { return ctx.onKeyDown($event); })("blur", function PoSearchComponent_Template_input_blur_3_listener() { return ctx.onBlur(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoSearchComponent_button_6_Template, 2, 1, "button", 6)(7, PoSearchComponent_button_7_Template, 2, 3, "button", 7);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(8, "div", 8, 9)(10, "po-listbox", 10, 11);
            i0.ɵɵlistener("p-selectcombo-item", function PoSearchComponent_Template_po_listbox_p_selectcombo_item_10_listener($event) { return ctx.onListboxClick($event, $event.event); })("p-close", function PoSearchComponent_Template_po_listbox_p_close_10_listener() { return ctx.onCloseListbox(); });
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(4);
            i0.ɵɵclassProp("po-search-disabled", ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.filterSelect);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "action");
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-search-input-clean", !!_r2.value && !ctx.disabled)("po-search-input-trigger", ctx.type === "trigger");
            i0.ɵɵproperty("ariaLabel", ctx.ariaLabel)("disabled", ctx.disabled)("placeholder", ctx.literals.search);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !!_r2.value && !ctx.disabled);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "trigger");
            i0.ɵɵadvance();
            i0.ɵɵproperty("hidden", !ctx.listboxOpen);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-items", ctx.listboxFilteredItems)("p-visible", ctx.listboxOpen)("p-filter-mode", ctx.filterType)("p-should-mark-letter", ctx.shouldMarkLetters)("p-filtering", ctx.isFiltering)("p-search-value", ctx.getInputValue());
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoIconComponent, PoListBoxComponent, PoDropdownComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSearchComponent, [{
        type: Component,
        args: [{ selector: 'po-search', providers: [PoControlPositionService], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-search\" [class.po-search-disabled]=\"disabled\">\n  <div class=\"po-search-select\" *ngIf=\"filterSelect\">\n    <po-dropdown [p-label]=\"searchFilterSelectLabel\" [p-disabled]=\"disabled\" [p-actions]=\"searchFilterSelectActions\">\n    </po-dropdown>\n  </div>\n\n  <div *ngIf=\"type === 'action'\" class=\"po-search-icon\">\n    <po-icon [p-icon]=\"icon ? icon : 'ICON_SEARCH'\"></po-icon>\n  </div>\n\n  <input\n    #poSearchInput\n    class=\"po-search-input\"\n    type=\"text\"\n    [ariaLabel]=\"ariaLabel\"\n    [class.po-search-input-clean]=\"!!poSearchInput.value && !disabled\"\n    [class.po-search-input-trigger]=\"type === 'trigger'\"\n    [disabled]=\"disabled\"\n    [placeholder]=\"literals.search\"\n    (input)=\"\n      onSearchChange($event.target.value, false); onSearchChange($event.target.value, type === 'action' ? true : false)\n    \"\n    (keyup.enter)=\"\n      listboxOpen ? closeListbox() : onSearchChange($event.target.value, type === 'trigger' ? true : false, true);\n      closeListbox()\n    \"\n    (keydown)=\"onKeyDown($event)\"\n    (blur)=\"onBlur()\"\n  />\n\n  <div class=\"po-search-buttons\">\n    <button\n      *ngIf=\"!!poSearchInput.value && !disabled\"\n      class=\"po-search-button po-search-button-clean\"\n      type=\"button\"\n      [ariaLabel]=\"literals.clean\"\n      (click)=\"clearSearch()\"\n      (keydown.enter)=\"clearSearch()\"\n    >\n      <po-clean class=\"po-icon-input\"></po-clean>\n    </button>\n\n    <button\n      *ngIf=\"type === 'trigger'\"\n      class=\"po-search-button po-search-button-trigger\"\n      type=\"button\"\n      [ariaLabel]=\"literals.search\"\n      (click)=\"onSearchChange(poSearchInput.value, true, true)\"\n      (keydown.enter)=\"onSearchChange(poSearchInput.value, true, true)\"\n      [disabled]=\"disabled\"\n    >\n      <po-icon [p-icon]=\"icon ? icon : 'ICON_SEARCH'\"> </po-icon>\n    </button>\n  </div>\n</div>\n\n<div #poListboxContainerElement class=\"po-search-listbox-container\" [hidden]=\"!listboxOpen\">\n  <po-listbox\n    #poListbox\n    #poListboxElement\n    p-type=\"option\"\n    [p-items]=\"listboxFilteredItems\"\n    (p-selectcombo-item)=\"onListboxClick($event, $event.event)\"\n    [p-visible]=\"listboxOpen\"\n    [p-filter-mode]=\"filterType\"\n    [p-should-mark-letter]=\"shouldMarkLetters\"\n    [p-filtering]=\"isFiltering\"\n    [p-search-value]=\"getInputValue()\"\n    (p-close)=\"onCloseListbox()\"\n  ></po-listbox>\n</div>\n" }]
    }], () => [{ type: PoLanguageService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: PoControlPositionService }], { poSearchInput: [{
            type: ViewChild,
            args: ['poSearchInput', { read: ElementRef, static: true }]
        }], poListboxContainerElement: [{
            type: ViewChild,
            args: ['poListboxContainerElement', { read: ElementRef }]
        }], poListboxElement: [{
            type: ViewChild,
            args: ['poListboxElement', { read: ElementRef }]
        }], poListbox: [{
            type: ViewChild,
            args: ['poListbox']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSearchComponent, { className: "PoSearchComponent", filePath: "lib/components/po-search/po-search.component.ts", lineNumber: 64 }); })();

/**
 * @description
 *
 * Módulo do componente po-search.
 */
class PoSearchModule {
    static ɵfac = function PoSearchModule_Factory(t) { return new (t || PoSearchModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoSearchModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            PoCleanModule,
            PoIconModule,
            PoLoadingModule,
            PoAccordionModule,
            FormsModule,
            PoListBoxModule,
            PoDropdownModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSearchModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    PoCleanModule,
                    PoIconModule,
                    PoLoadingModule,
                    PoAccordionModule,
                    FormsModule,
                    PoListBoxModule,
                    PoDropdownModule
                ],
                declarations: [PoSearchComponent],
                exports: [PoSearchComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoSearchModule, { declarations: [PoSearchComponent], imports: [CommonModule,
        PoCleanModule,
        PoIconModule,
        PoLoadingModule,
        PoAccordionModule,
        FormsModule,
        PoListBoxModule,
        PoDropdownModule], exports: [PoSearchComponent] }); })();

/**
 * @description
 * Módulo do componente po-table
 */
class PoTableModule {
    static ɵfac = function PoTableModule_Factory(t) { return new (t || PoTableModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTableModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [DecimalPipe], imports: [CommonModule,
            FormsModule,
            ScrollingModule,
            DragDropModule,
            RouterModule,
            PoButtonModule,
            PoCheckboxGroupModule,
            PoContainerModule,
            PoLoadingModule,
            PoModalModule,
            PoPopoverModule,
            PoPopupModule,
            PoTagModule,
            PoTimeModule,
            PoTooltipModule,
            PoIconModule,
            PoCheckboxModule,
            PoRadioModule,
            PoLinkModule,
            PoPageSlideModule,
            PoSwitchModule,
            PoSearchModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ScrollingModule,
                    DragDropModule,
                    RouterModule,
                    PoButtonModule,
                    PoCheckboxGroupModule,
                    PoContainerModule,
                    PoLoadingModule,
                    PoModalModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoTagModule,
                    PoTimeModule,
                    PoTooltipModule,
                    PoIconModule,
                    PoCheckboxModule,
                    PoRadioModule,
                    PoLinkModule,
                    PoPageSlideModule,
                    PoSwitchModule,
                    PoSearchModule
                ],
                declarations: [
                    PoTableComponent,
                    PoTableColumnIconComponent,
                    PoTableColumnLabelComponent,
                    PoTableColumnLinkComponent,
                    PoTableColumnManagerComponent,
                    PoTableListManagerComponent,
                    PoTableDetailComponent,
                    PoTableIconComponent,
                    PoTableRowTemplateDirective,
                    PoTableShowSubtitleComponent,
                    PoTableSubtitleCircleComponent,
                    PoTableSubtitleFooterComponent,
                    PoTableCellTemplateDirective,
                    PoTableColumnTemplateDirective,
                    PoTableColumnFrozenDirective
                ],
                exports: [
                    PoTableComponent,
                    PoTableRowTemplateDirective,
                    PoTableCellTemplateDirective,
                    PoTableColumnTemplateDirective
                ],
                providers: [DecimalPipe]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTableModule, { declarations: [PoTableComponent,
        PoTableColumnIconComponent,
        PoTableColumnLabelComponent,
        PoTableColumnLinkComponent,
        PoTableColumnManagerComponent,
        PoTableListManagerComponent,
        PoTableDetailComponent,
        PoTableIconComponent,
        PoTableRowTemplateDirective,
        PoTableShowSubtitleComponent,
        PoTableSubtitleCircleComponent,
        PoTableSubtitleFooterComponent,
        PoTableCellTemplateDirective,
        PoTableColumnTemplateDirective,
        PoTableColumnFrozenDirective], imports: [CommonModule,
        FormsModule,
        ScrollingModule,
        DragDropModule,
        RouterModule,
        PoButtonModule,
        PoCheckboxGroupModule,
        PoContainerModule,
        PoLoadingModule,
        PoModalModule,
        PoPopoverModule,
        PoPopupModule,
        PoTagModule,
        PoTimeModule,
        PoTooltipModule,
        PoIconModule,
        PoCheckboxModule,
        PoRadioModule,
        PoLinkModule,
        PoPageSlideModule,
        PoSwitchModule,
        PoSearchModule], exports: [PoTableComponent,
        PoTableRowTemplateDirective,
        PoTableCellTemplateDirective,
        PoTableColumnTemplateDirective] }); })();
i0.ɵɵsetComponentScope(PoTableComponent, [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i1.NgPlural, i1.NgPluralCase, i2$2.CdkFixedSizeVirtualScroll, i2$2.CdkVirtualForOf, i2$2.CdkVirtualScrollViewport, i3.CdkDropList, i3.CdkDrag, i3.CdkDragHandle, PoButtonComponent, PoContainerComponent, PoLoadingOverlayComponent, PoModalComponent, PoPopupComponent, PoTooltipDirective, PoIconComponent, PoCheckboxComponent, PoRadioComponent, PoSearchComponent, PoTableColumnIconComponent,
    PoTableColumnLabelComponent,
    PoTableColumnLinkComponent,
    PoTableColumnManagerComponent,
    PoTableDetailComponent,
    PoTableSubtitleCircleComponent,
    PoTableSubtitleFooterComponent,
    PoTableColumnFrozenDirective], [i1.LowerCasePipe, i1.TitleCasePipe, i1.CurrencyPipe, i1.DatePipe, PoTimePipe]);

const _c0$A = ["container"];
const _c1$d = ["divElement"];
const _c2$4 = ["listbox"];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
class PoMultiselectDropdownComponent {
    cd;
    /** Propriedade que indica se deve exibir o loading. */
    isServerSearching = false;
    /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
    hideSearch = false;
    /** Propriedade que que recebe as literais definidas no componente `po-multiselect`. */
    literals;
    /** Placeholder do campo de pesquisa. */
    placeholderSearch;
    /** Propriedade que recebe a lista de opções selecionadas. */
    selectedOptions = [];
    /** Propriedade que recebe a lista com todas as opções. */
    options = [];
    /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
    visibleOptions = [];
    /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
    hideSelectAll = false;
    fieldValue;
    fieldLabel;
    multiselectTemplate;
    /** Evento disparado a cada tecla digitada na pesquisa. */
    changeSearch = new EventEmitter();
    /** Evento disparado a cada alteração na lista das opções selecionadas. */
    change = new EventEmitter();
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     */
    closeDropdown = new EventEmitter();
    container;
    divElement;
    listbox;
    scrollTop = 0;
    show = false;
    constructor(cd) {
        this.cd = cd;
    }
    get hasOptions() {
        return !!this.options?.length;
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
        this.cd.markForCheck();
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem[this.fieldValue] === option[this.fieldValue]);
    }
    clickItem(check, options) {
        if (options) {
            this.updateSelectedValues(check, options);
        }
        else {
            const { selected, option } = check;
            this.updateSelectedValues(selected, option);
        }
    }
    onClickSelectAll() {
        const selectedValues = this.selectedOptions.map(({ [this.fieldValue]: value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            this.selectedOptions = [];
        }
        else {
            this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
        }
        this.change.emit(this.selectedOptions);
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedOptions.push(option);
        }
        else {
            this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption[this.fieldValue] !== option[this.fieldValue]);
        }
        this.change.emit(this.selectedOptions);
    }
    everyVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.every(visibleOption => selectedValues.includes(visibleOption[this.fieldValue]));
    }
    someVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.some(visibleOption => selectedValues.includes(visibleOption[this.fieldValue]));
    }
    getStateSelectAll() {
        const selectedValues = this.selectedOptions.map(({ [this.fieldValue]: value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            return true;
        }
        else if (this.someVisibleOptionsSelected(selectedValues)) {
            return null;
        }
        else {
            return false;
        }
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.listbox?.searchElement && !this.hideSearch) {
                this.listbox.searchElement.setFocus();
                this.listbox.searchElement.clean();
            }
        });
        this.cd.markForCheck();
    }
    uniqueSelectedOptions(selectedValues) {
        const newSelectedOptions = [...this.selectedOptions];
        for (const visibleOption of this.visibleOptions) {
            if (!selectedValues.includes(visibleOption[this.fieldValue])) {
                newSelectedOptions.push(visibleOption);
            }
        }
        return newSelectedOptions;
    }
    static ɵfac = function PoMultiselectDropdownComponent_Factory(t) { return new (t || PoMultiselectDropdownComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectDropdownComponent, selectors: [["po-multiselect-dropdown"]], viewQuery: function PoMultiselectDropdownComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$A, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$d, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$4, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.divElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listbox = _t.first);
        } }, inputs: { isServerSearching: [i0.ɵɵInputFlags.None, "p-searching", "isServerSearching"], hideSearch: [i0.ɵɵInputFlags.None, "p-hide-search", "hideSearch"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], placeholderSearch: [i0.ɵɵInputFlags.None, "p-placeholder-search", "placeholderSearch"], selectedOptions: [i0.ɵɵInputFlags.None, "p-selected-options", "selectedOptions"], options: [i0.ɵɵInputFlags.None, "p-options", "options"], visibleOptions: [i0.ɵɵInputFlags.None, "p-visible-options", "visibleOptions"], hideSelectAll: [i0.ɵɵInputFlags.None, "p-hide-select-all", "hideSelectAll"], fieldValue: [i0.ɵɵInputFlags.None, "p-field-value", "fieldValue"], fieldLabel: [i0.ɵɵInputFlags.None, "p-field-label", "fieldLabel"], multiselectTemplate: [i0.ɵɵInputFlags.None, "p-multiselect-template", "multiselectTemplate"] }, outputs: { changeSearch: "p-change-search", change: "p-change", closeDropdown: "p-close-dropdown" }, decls: 7, vars: 15, consts: [[1, "po-multiselect-container", 3, "hidden"], ["container", ""], [3, "scrollTop"], ["divElement", ""], ["p-type", "check", 3, "p-items", "p-selected-options", "p-checkboxAllValue", "p-field-value", "p-field-value-search", "p-field-label", "p-literal-search", "p-literals", "p-is-searching", "p-hide-search", "p-hide-select-all", "p-template", "p-placeholder-search", "p-change", "p-change-all", "p-change-search", "p-close"], ["listbox", ""]], template: function PoMultiselectDropdownComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "div", 2, 3);
            i0.ɵɵelementContainerStart(4);
            i0.ɵɵelementStart(5, "po-listbox", 4, 5);
            i0.ɵɵlistener("p-change", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_5_listener($event) { return ctx.clickItem($event); })("p-change-all", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_all_5_listener() { return ctx.onClickSelectAll(); })("p-change-search", function PoMultiselectDropdownComponent_Template_po_listbox_p_change_search_5_listener($event) { return ctx.callChangeSearch($event); })("p-close", function PoMultiselectDropdownComponent_Template_po_listbox_p_close_5_listener() { return ctx.closeDropdown.emit(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementContainerEnd();
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("hidden", !ctx.show);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("scrollTop", ctx.scrollTop);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-items", ctx.visibleOptions)("p-selected-options", ctx.selectedOptions)("p-checkboxAllValue", ctx.getStateSelectAll())("p-field-value", ctx.fieldValue)("p-field-value-search", ctx.fieldValue)("p-field-label", ctx.fieldLabel)("p-literal-search", ctx.literals)("p-literals", ctx.literals)("p-is-searching", ctx.isServerSearching)("p-hide-search", ctx.hideSearch)("p-hide-select-all", ctx.hideSelectAll)("p-template", ctx.multiselectTemplate)("p-placeholder-search", ctx.placeholderSearch);
        } }, dependencies: [PoListBoxComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectDropdownComponent, [{
        type: Component,
        args: [{ selector: 'po-multiselect-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <div [scrollTop]=\"scrollTop\" #divElement>\n    <ng-container>\n      <po-listbox\n        #listbox\n        p-type=\"check\"\n        [p-items]=\"visibleOptions\"\n        [p-selected-options]=\"selectedOptions\"\n        [p-checkboxAllValue]=\"getStateSelectAll()\"\n        [p-field-value]=\"fieldValue\"\n        [p-field-value-search]=\"fieldValue\"\n        [p-field-label]=\"fieldLabel\"\n        [p-literal-search]=\"literals\"\n        [p-literals]=\"literals\"\n        [p-is-searching]=\"isServerSearching\"\n        [p-hide-search]=\"hideSearch\"\n        [p-hide-select-all]=\"hideSelectAll\"\n        [p-template]=\"multiselectTemplate\"\n        [p-placeholder-search]=\"placeholderSearch\"\n        (p-change)=\"clickItem($event)\"\n        (p-change-all)=\"onClickSelectAll()\"\n        (p-change-search)=\"callChangeSearch($event)\"\n        (p-close)=\"closeDropdown.emit()\"\n      >\n      </po-listbox>\n    </ng-container>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { isServerSearching: [{
            type: Input,
            args: ['p-searching']
        }], hideSearch: [{
            type: Input,
            args: ['p-hide-search']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], placeholderSearch: [{
            type: Input,
            args: ['p-placeholder-search']
        }], selectedOptions: [{
            type: Input,
            args: ['p-selected-options']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], visibleOptions: [{
            type: Input,
            args: ['p-visible-options']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], multiselectTemplate: [{
            type: Input,
            args: ['p-multiselect-template']
        }], changeSearch: [{
            type: Output,
            args: ['p-change-search']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], closeDropdown: [{
            type: Output,
            args: ['p-close-dropdown']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ElementRef, static: true }]
        }], divElement: [{
            type: ViewChild,
            args: ['divElement', { read: ElementRef, static: true }]
        }], listbox: [{
            type: ViewChild,
            args: ['listbox']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMultiselectDropdownComponent, { className: "PoMultiselectDropdownComponent", filePath: "lib/components/po-field/po-multiselect/po-multiselect-dropdown/po-multiselect-dropdown.component.ts", lineNumber: 29 }); })();

/**
 * @description
 *
 * Módulo dos componentes: po-checkbox, po-checkbox-group, po-combo, po-datepicker, po-datepicker-range, po-email, po-input,
 * po-lookup, po-number, po-multiselect, po-password, po-radio-group, po-select, po-switch, po-textarea, po-upload
 * e po-url.
 *
 * > Não esqueça de importar o módulo `FormsModule` para usar os componentes de formulários e caso esteja trabalhando com
 * > formulários reativos, importe o módulo `ReactiveFormsModule`, ambos nativos do Angular.
 */
class PoFieldModule {
    static ɵfac = function PoFieldModule_Factory(t) { return new (t || PoFieldModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoFieldModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            FormsModule,
            FormsModule.withConfig({
                callSetDisabledState: 'whenDisabledForLegacyCode'
            }),
            OverlayModule,
            PoButtonGroupModule,
            PoButtonModule,
            PoCleanModule,
            PoCalendarModule,
            PoCheckboxGroupModule,
            PoRadioGroupModule,
            PoContainerModule,
            PoDatepickerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoFieldContainerModule,
            PoLoadingModule,
            PoModalModule,
            PoProgressModule,
            PoServicesModule,
            PoTableModule,
            PoTooltipModule,
            PoIconModule,
            PoCheckboxModule,
            PoRadioModule,
            PoLabelModule,
            PoListBoxModule,
            PoSwitchModule,
            PoTagModule, PoCheckboxGroupModule,
            PoRadioGroupModule,
            PoCleanModule,
            PoDatepickerModule,
            PoFieldContainerModule,
            PoCheckboxModule,
            PoRadioModule,
            PoLabelModule,
            PoSwitchModule,
            PoTagModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    FormsModule.withConfig({
                        callSetDisabledState: 'whenDisabledForLegacyCode'
                    }),
                    OverlayModule,
                    PoButtonGroupModule,
                    PoButtonModule,
                    PoCleanModule,
                    PoCalendarModule,
                    PoCheckboxGroupModule,
                    PoRadioGroupModule,
                    PoContainerModule,
                    PoDatepickerModule,
                    PoDisclaimerGroupModule,
                    PoDisclaimerModule,
                    PoFieldContainerModule,
                    PoLoadingModule,
                    PoModalModule,
                    PoProgressModule,
                    PoServicesModule,
                    PoTableModule,
                    PoTooltipModule,
                    PoIconModule,
                    PoCheckboxModule,
                    PoRadioModule,
                    PoLabelModule,
                    PoListBoxModule,
                    PoSwitchModule,
                    PoTagModule
                ],
                exports: [
                    PoCheckboxGroupModule,
                    PoRadioGroupModule,
                    PoCleanModule,
                    PoDatepickerModule,
                    PoComboComponent,
                    PoComboOptionTemplateDirective,
                    PoMultiselectOptionTemplateDirective,
                    PoDecimalComponent,
                    PoDatepickerRangeComponent,
                    PoEmailComponent,
                    PoFieldContainerModule,
                    PoInputComponent,
                    PoLoginComponent,
                    PoLookupComponent,
                    PoLookupModalComponent,
                    PoMultiselectComponent,
                    PoNumberComponent,
                    PoPasswordComponent,
                    PoRichTextComponent,
                    PoSelectComponent,
                    PoTextareaComponent,
                    PoUploadComponent,
                    PoUrlComponent,
                    PoCheckboxModule,
                    PoRadioModule,
                    PoLabelModule,
                    PoSwitchModule,
                    PoTagModule
                ],
                declarations: [
                    PoComboComponent,
                    PoComboOptionTemplateDirective,
                    PoMultiselectOptionTemplateDirective,
                    PoDecimalComponent,
                    PoDatepickerRangeComponent,
                    PoEmailComponent,
                    PoInputComponent,
                    PoLoginComponent,
                    PoLookupComponent,
                    PoLookupModalComponent,
                    PoMultiselectComponent,
                    PoMultiselectDropdownComponent,
                    PoNumberComponent,
                    PoPasswordComponent,
                    PoRichTextBodyComponent,
                    PoRichTextComponent,
                    PoRichTextImageModalComponent,
                    PoRichTextLinkModalComponent,
                    PoRichTextToolbarComponent,
                    PoSelectComponent,
                    PoTextareaComponent,
                    PoUploadComponent,
                    PoUploadDragDropComponent,
                    PoUploadDragDropDirective,
                    PoUploadDragDropAreaOverlayComponent,
                    PoUploadDragDropAreaComponent,
                    PoUploadFileRestrictionsComponent,
                    PoUrlComponent
                ],
                providers: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoFieldModule, { declarations: [PoComboComponent,
        PoComboOptionTemplateDirective,
        PoMultiselectOptionTemplateDirective,
        PoDecimalComponent,
        PoDatepickerRangeComponent,
        PoEmailComponent,
        PoInputComponent,
        PoLoginComponent,
        PoLookupComponent,
        PoLookupModalComponent,
        PoMultiselectComponent,
        PoMultiselectDropdownComponent,
        PoNumberComponent,
        PoPasswordComponent,
        PoRichTextBodyComponent,
        PoRichTextComponent,
        PoRichTextImageModalComponent,
        PoRichTextLinkModalComponent,
        PoRichTextToolbarComponent,
        PoSelectComponent,
        PoTextareaComponent,
        PoUploadComponent,
        PoUploadDragDropComponent,
        PoUploadDragDropDirective,
        PoUploadDragDropAreaOverlayComponent,
        PoUploadDragDropAreaComponent,
        PoUploadFileRestrictionsComponent,
        PoUrlComponent], imports: [CommonModule,
        FormsModule, i2$1.FormsModule, OverlayModule,
        PoButtonGroupModule,
        PoButtonModule,
        PoCleanModule,
        PoCalendarModule,
        PoCheckboxGroupModule,
        PoRadioGroupModule,
        PoContainerModule,
        PoDatepickerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoFieldContainerModule,
        PoLoadingModule,
        PoModalModule,
        PoProgressModule,
        PoServicesModule,
        PoTableModule,
        PoTooltipModule,
        PoIconModule,
        PoCheckboxModule,
        PoRadioModule,
        PoLabelModule,
        PoListBoxModule,
        PoSwitchModule,
        PoTagModule], exports: [PoCheckboxGroupModule,
        PoRadioGroupModule,
        PoCleanModule,
        PoDatepickerModule,
        PoComboComponent,
        PoComboOptionTemplateDirective,
        PoMultiselectOptionTemplateDirective,
        PoDecimalComponent,
        PoDatepickerRangeComponent,
        PoEmailComponent,
        PoFieldContainerModule,
        PoInputComponent,
        PoLoginComponent,
        PoLookupComponent,
        PoLookupModalComponent,
        PoMultiselectComponent,
        PoNumberComponent,
        PoPasswordComponent,
        PoRichTextComponent,
        PoSelectComponent,
        PoTextareaComponent,
        PoUploadComponent,
        PoUrlComponent,
        PoCheckboxModule,
        PoRadioModule,
        PoLabelModule,
        PoSwitchModule,
        PoTagModule] }); })();
i0.ɵɵsetComponentScope(PoLookupModalComponent, function () { return [i1.NgIf, i2$1.DefaultValueAccessor, i2$1.NgControlStatus, i2$1.NgModel, PoDisclaimerGroupComponent, PoFieldContainerComponent, PoModalComponent, PoTableComponent, PoIconComponent]; }, []);
i0.ɵɵsetComponentScope(PoMultiselectComponent, function () { return [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i5$1.CdkConnectedOverlay, i5$1.CdkOverlayOrigin, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent, PoTagComponent, PoMultiselectDropdownComponent]; }, []);

/**
 * @usedBy PoInfoComponent
 *
 * @description
 *
 * Define os tipos de orientações disponíveis para o `po-info`.
 */
var PoInfoOrientation;
(function (PoInfoOrientation) {
    /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
    PoInfoOrientation["Horizontal"] = "horizontal";
    /** Exibe o valor na vertical, ou seja, abaixo do label. */
    PoInfoOrientation["Vertical"] = "vertical";
})(PoInfoOrientation || (PoInfoOrientation = {}));

const poInfoOrientationDefault = PoInfoOrientation.Vertical;
class PoInfoBaseComponent {
    /** Valor do rótulo a ser exibido. */
    label;
    /**
     * Ao informar uma URL, o conteúdo será exibido na forma de um *link* e ao ser clicado será redirecionado para a URL informada.
     *
     * > Caso informar `http://` será aberto uma nova aba.
     * Caso informar um caminho relativo, exemplo: `/customers`, será aberto na aba atual.
     *
     */
    url;
    /** Valor do conteúdo a ser exibido. */
    value;
    poInfoOrientation = PoInfoOrientation;
    _labelSize;
    _orientation = poInfoOrientationDefault;
    /**
     * @optional
     *
     * @description
     *
     * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
     * utilizado na orientação horizontal.
     *
     * Valores válidos:
     *  - `[1 .. 11]`
     *
     * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
     */
    set labelSize(value) {
        if (isNaN(parseInt(value, 10))) {
            this._labelSize = undefined;
        }
        else {
            value = parseInt(value, 10);
            this._labelSize = value < 1 || value > 11 ? undefined : value;
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o layout de exibição.
     *
     * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    static ɵfac = function PoInfoBaseComponent_Factory(t) { return new (t || PoInfoBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInfoBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], url: [i0.ɵɵInputFlags.None, "p-url", "url"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], labelSize: [i0.ɵɵInputFlags.None, "p-label-size", "labelSize"], orientation: [i0.ɵɵInputFlags.None, "p-orientation", "orientation"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], url: [{
            type: Input,
            args: ['p-url']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], labelSize: [{
            type: Input,
            args: ['p-label-size']
        }], orientation: [{
            type: Input,
            args: ['p-orientation']
        }] }); })();

function PoInfoComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoInfoComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoInfoComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoInfoComponent_ng_template_6_ng_container_0_Template, 1, 0, "ng-container", 4);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(11);
    const _r8 = i0.ɵɵreference(13);
    i0.ɵɵproperty("ngIf", ctx_r1.isExternalLink)("ngIfThen", _r6)("ngIfElse", _r8);
} }
function PoInfoComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 9);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r3.value);
} }
function PoInfoComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("href", ctx_r5.url, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r5.value);
} }
function PoInfoComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 11);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("routerLink", ctx_r7.url);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r7.value);
} }
/**
 * @docsExtends PoInfoBaseComponent
 *
 * @description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão PO.
 *
 * @example
 *
 * <example name="po-info-basic" title="PO Info Basic">
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.html"> </file>
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-info-labs" title="PO Info Labs">
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.html"> </file>
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.ts"> </file>
 * </example>
 */
class PoInfoComponent extends PoInfoBaseComponent {
    get isExternalLink() {
        return isExternalLink(this.url);
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoInfoComponent_BaseFactory; return function PoInfoComponent_Factory(t) { return (ɵPoInfoComponent_BaseFactory || (ɵPoInfoComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoInfoComponent)))(t || PoInfoComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoInfoComponent, selectors: [["po-info"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 14, vars: 16, consts: [[1, "po-info"], [1, "po-info-container-title", 3, "ngClass"], [1, "po-info-label"], [3, "ngClass"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["infoLink", ""], ["infoValue", ""], ["externalLink", ""], ["internalLink", ""], [1, "po-info-value"], ["target", "_blank", 1, "po-info-value", "po-info-link", 3, "href"], [1, "po-info-value", "po-info-link", 3, "routerLink"]], template: function PoInfoComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(4, "div", 3);
            i0.ɵɵtemplate(5, PoInfoComponent_ng_container_5_Template, 1, 0, "ng-container", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(6, PoInfoComponent_ng_template_6_Template, 1, 3, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor)(8, PoInfoComponent_ng_template_8_Template, 2, 1, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor)(10, PoInfoComponent_ng_template_10_Template, 2, 2, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor)(12, PoInfoComponent_ng_template_12_Template, 2, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(7);
            const _r4 = i0.ɵɵreference(9);
            i0.ɵɵclassProp("po-row", ctx.orientation === ctx.poInfoOrientation.Horizontal && ctx.labelSize);
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-info-label-horizontal", ctx.orientation === ctx.poInfoOrientation.Horizontal)("po-text-nowrap", ctx.orientation === ctx.poInfoOrientation.Horizontal && !ctx.labelSize);
            i0.ɵɵproperty("ngClass", ctx.labelSize && ctx.orientation === ctx.poInfoOrientation.Horizontal ? "po-sm-" + ctx.labelSize : "");
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.orientation === ctx.poInfoOrientation.Horizontal ? ctx.label + ":" : ctx.label, " ");
            i0.ɵɵadvance();
            i0.ɵɵclassProp("po-info-container-content", ctx.orientation !== ctx.poInfoOrientation.Horizontal)("po-info-value-horizontal", ctx.orientation === ctx.poInfoOrientation.Horizontal);
            i0.ɵɵproperty("ngClass", ctx.labelSize && ctx.orientation === ctx.poInfoOrientation.Horizontal ? "po-sm-" + (12 - ctx.labelSize) : "");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.url)("ngIfThen", _r2)("ngIfElse", _r4);
        } }, dependencies: [i1.NgClass, i1.NgIf, i2.RouterLink], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoComponent, [{
        type: Component,
        args: [{ selector: 'po-info', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-info\" [class.po-row]=\"orientation === poInfoOrientation.Horizontal && labelSize\">\n  <div\n    class=\"po-info-container-title\"\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + labelSize : ''\"\n    [class.po-info-label-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n    [class.po-text-nowrap]=\"orientation === poInfoOrientation.Horizontal && !labelSize\"\n  >\n    <span class=\"po-info-label\">\n      {{ orientation === poInfoOrientation.Horizontal ? label + ':' : label }}\n    </span>\n  </div>\n\n  <div\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + (12 - labelSize) : ''\"\n    [class.po-info-container-content]=\"orientation !== poInfoOrientation.Horizontal\"\n    [class.po-info-value-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n  >\n    <ng-container *ngIf=\"url; then infoLink; else infoValue\"></ng-container>\n  </div>\n</div>\n\n<ng-template #infoLink>\n  <ng-container *ngIf=\"isExternalLink; then externalLink; else internalLink\"> </ng-container>\n</ng-template>\n\n<ng-template #infoValue>\n  <span class=\"po-info-value\">{{ value }}</span>\n</ng-template>\n\n<ng-template #externalLink>\n  <a class=\"po-info-value po-info-link\" [href]=\"url\" target=\"_blank\">{{ value }}</a>\n</ng-template>\n\n<ng-template #internalLink>\n  <a class=\"po-info-value po-info-link\" [routerLink]=\"url\">{{ value }}</a>\n</ng-template>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoInfoComponent, { className: "PoInfoComponent", filePath: "lib/components/po-info/po-info.component.ts", lineNumber: 32 }); })();

/**
 * @description
 *
 * Módulo do componente po-info.
 */
class PoInfoModule {
    static ɵfac = function PoInfoModule_Factory(t) { return new (t || PoInfoModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoInfoModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule],
                declarations: [PoInfoComponent],
                exports: [PoInfoComponent],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoInfoModule, { declarations: [PoInfoComponent], imports: [CommonModule, RouterModule], exports: [PoInfoComponent] }); })();

function getGridColumnsClasses(gridColumns, offsetColumns, grid, offset, pull) {
    const systemGrid = {
        gridSm: grid?.smGrid || gridColumns || 12,
        gridMd: grid?.mdGrid || gridColumns || 6,
        gridLg: grid?.lgGrid || gridColumns || 4,
        gridXl: grid?.xlGrid || gridColumns || 3,
        offsetSm: offset?.smOffset || offsetColumns || 0,
        offsetMd: offset?.mdOffset || offsetColumns || 0,
        offsetLg: offset?.lgOffset || offsetColumns || 0,
        offsetXl: offset?.xlOffset || offsetColumns || 0,
        pullSm: pull?.smPull || 0,
        pullMd: pull?.mdPull || 0,
        pullLg: pull?.lgPull || 0,
        pullXl: pull?.xlPull || 0
    };
    return (`po-sm-${systemGrid.gridSm} po-offset-sm-${systemGrid.offsetSm} po-pull-sm-${systemGrid.pullSm} ` +
        `po-md-${systemGrid.gridMd} po-offset-md-${systemGrid.offsetMd} po-pull-md-${systemGrid.pullMd} ` +
        `po-lg-${systemGrid.gridLg} po-offset-lg-${systemGrid.offsetLg} po-pull-lg-${systemGrid.pullLg} ` +
        `po-xl-${systemGrid.gridXl} po-offset-xl-${systemGrid.offsetXl} po-pull-xl-${systemGrid.pullXl}`);
}
function isVisibleField(field) {
    const containsVisible = 'visible' in field;
    return containsVisible ? field.visible : true;
}

/**
 * @usedBy PoDynamicFormComponent
 *
 * @description
 *
 * Enum para definição do tipo de campo que será criado dinamicamente.
 */
var PoDynamicFieldType;
(function (PoDynamicFieldType) {
    /** Valor booleano. */
    PoDynamicFieldType["Boolean"] = "boolean";
    /** Valor numérico que contém casas decimais e milhar. */
    PoDynamicFieldType["Currency"] = "currency";
    /** Valor numérico que contém casas decimais e milhar. */
    PoDynamicFieldType["Decimal"] = "decimal";
    /** Valor para data. */
    PoDynamicFieldType["Date"] = "date";
    /** Valor para data e hora. */
    PoDynamicFieldType["DateTime"] = "datetime";
    /** Utilizado para informar/exibir hora. */
    PoDynamicFieldType["Time"] = "time";
    /** Valor numérico. */
    PoDynamicFieldType["Number"] = "number";
    /** Texto. */
    PoDynamicFieldType["String"] = "string";
    /** Utilizado para fazer uploads de arquivos. */
    PoDynamicFieldType["Upload"] = "upload";
})(PoDynamicFieldType || (PoDynamicFieldType = {}));

/**
 * @usedBy PoDynamicViewComponent, PoDynamicFormComponent
 * @description
 * Componente para listar dados compartilhados entre o dynamic-view e o dynamic-form
 */
class PoDynamicSharedBase {
    visibleFields = [];
    containerFields = [];
    hasContainers = false;
    ensureFieldHasContainer(fields) {
        if (fields && fields.some(field => field?.container)) {
            const firstFieldIndex = fields.findIndex(field => field.order === 1);
            if (firstFieldIndex !== -1 && !fields[firstFieldIndex].container) {
                fields[firstFieldIndex].container = '';
            }
        }
    }
    setContainerFields() {
        this.hasContainers = this.visibleFields && this.visibleFields.some(field => field.container);
        if (this.hasContainers) {
            this.containerFields = this.groupFieldsIntoContainers(this.visibleFields);
        }
    }
    groupFieldsIntoContainers(fields) {
        const groups = [[]];
        return fields.reduce((acc, field) => {
            if (field.container && acc[acc.length - 1].length > 0)
                acc.push([]);
            acc[acc.length - 1].push(field);
            return acc;
        }, groups);
    }
    static ɵfac = function PoDynamicSharedBase_Factory(t) { return new (t || PoDynamicSharedBase)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicSharedBase });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicSharedBase, [{
        type: Directive
    }], null, null); })();

class PoDynamicFormFieldsBaseComponent extends PoDynamicSharedBase {
    titleCasePipe;
    autoFocus;
    disabledForm;
    validate;
    formValidate = new EventEmitter();
    fieldsChange = new EventEmitter();
    // Evento disparado se existir optionsService em visibleField. Necessário resgatar referência do objeto selecionado para quando se tratar de recebimento de opções via serviço.
    objectValue = new EventEmitter();
    validateOnInput;
    _fields;
    _validateFields;
    _value = {};
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    set validateFields(value) {
        this._validateFields = Array.isArray(value) ? [...value] : [];
    }
    get validateFields() {
        return this._validateFields;
    }
    constructor(titleCasePipe) {
        super();
        this.titleCasePipe = titleCasePipe;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visíveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        const _visibleFields = sortFields(visibleFields);
        this.ensureFieldHasContainer(_visibleFields);
        return _visibleFields;
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const componentClass = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return {
            label: this.titleCasePipe.transform(field.property),
            maskFormatModel: this.compareTo(type, PoDynamicFieldType.Time),
            ...field,
            componentClass,
            control,
            focus,
            options
        };
    }
    existsProperty(fields, property) {
        return fields.some(field => field.property === property);
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const { forceBooleanComponentType } = field;
        const forceOptionComponent = this.verifyForceOptionComponent(field);
        if (forceBooleanComponentType) {
            return forceBooleanComponentType;
        }
        if (forceOptionComponent) {
            const { forceOptionsComponentType } = field;
            return forceOptionsComponentType;
        }
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type) || type === PoDynamicFieldType.Decimal) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return field.range ? 'datepickerrange' : 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        else if (this.isUpload(field)) {
            return 'upload';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && (isTypeof(optionsService, 'string') || this.isComboFilter(optionsService));
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    }
    isLookupFilter(object) {
        return object && object.getObjectByValue !== undefined;
    }
    isComboFilter(object) {
        return object && object.getFilteredData !== undefined;
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && (isTypeof(searchService, 'string') || this.isLookupFilter(searchService));
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return optionsMulti && (!!optionsService || (!!options && options.length > 3));
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    isUpload(field) {
        const { url, type } = field;
        return url && type === 'upload';
    }
    verifyForceOptionComponent(field) {
        const { optionsMulti, optionsService, forceOptionsComponentType } = field;
        if (forceOptionsComponentType && !optionsMulti && !optionsService) {
            return true;
        }
        return false;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
    static ɵfac = function PoDynamicFormFieldsBaseComponent_Factory(t) { return new (t || PoDynamicFormFieldsBaseComponent)(i0.ɵɵdirectiveInject(i1.TitleCasePipe)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormFieldsBaseComponent, inputs: { autoFocus: [i0.ɵɵInputFlags.None, "p-auto-focus", "autoFocus"], disabledForm: [i0.ɵɵInputFlags.None, "p-disabled-form", "disabledForm"], validate: [i0.ɵɵInputFlags.None, "p-validate", "validate"], validateOnInput: [i0.ɵɵInputFlags.None, "p-validate-on-input", "validateOnInput"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"], value: [i0.ɵɵInputFlags.None, "p-value", "value"], validateFields: [i0.ɵɵInputFlags.None, "p-validate-fields", "validateFields"] }, outputs: { formValidate: "p-form-validate", fieldsChange: "p-fieldsChange", objectValue: "p-object-value" }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormFieldsBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.TitleCasePipe }], { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], disabledForm: [{
            type: Input,
            args: ['p-disabled-form']
        }], validate: [{
            type: Input,
            args: ['p-validate']
        }], formValidate: [{
            type: Output,
            args: ['p-form-validate']
        }], fieldsChange: [{
            type: Output,
            args: ['p-fieldsChange']
        }], objectValue: [{
            type: Output,
            args: ['p-object-value']
        }], validateOnInput: [{
            type: Input,
            args: ['p-validate-on-input']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], validateFields: [{
            type: Input,
            args: ['p-validate-fields']
        }] }); })();

function PoDynamicContainerComponent_ng_template_1_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fieldsInContainer_r1 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", fieldsInContainer_r1[0].container, " ");
} }
function PoDynamicContainerComponent_ng_template_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0$z = a0 => ({ $implicit: a0 });
function PoDynamicContainerComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoDynamicContainerComponent_ng_template_1_div_1_Template, 2, 1, "div", 2);
    i0.ɵɵelementStart(2, "po-container")(3, "div", 3);
    i0.ɵɵtemplate(4, PoDynamicContainerComponent_ng_template_1_ng_container_4_Template, 1, 0, "ng-container", 4);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const fieldsInContainer_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", fieldsInContainer_r1[0].container);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r0.content)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0$z, fieldsInContainer_r1));
} }
class PoDynamicContainerComponent {
    content;
    fields;
    static ɵfac = function PoDynamicContainerComponent_Factory(t) { return new (t || PoDynamicContainerComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicContainerComponent, selectors: [["po-dynamic-container"]], inputs: { content: [i0.ɵɵInputFlags.None, "p-content", "content"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"] }, decls: 2, vars: 1, consts: [[1, "po-dynamic-container"], ["ngFor", "", 3, "ngForOf"], ["class", "po-dynamic-container-title", 4, "ngIf"], [1, "po-row"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-dynamic-container-title"]], template: function PoDynamicContainerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoDynamicContainerComponent_ng_template_1_Template, 5, 5, "ng-template", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.fields);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoContainerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicContainerComponent, [{
        type: Component,
        args: [{ selector: 'po-dynamic-container', template: "<div class=\"po-dynamic-container\">\n  <ng-template ngFor let-fieldsInContainer [ngForOf]=\"fields\">\n    <div>\n      <div class=\"po-dynamic-container-title\" *ngIf=\"fieldsInContainer[0].container\">\n        {{ fieldsInContainer[0].container }}\n      </div>\n      <po-container>\n        <div class=\"po-row\">\n          <ng-container *ngTemplateOutlet=\"content; context: { $implicit: fieldsInContainer }\"> </ng-container>\n        </div>\n      </po-container>\n    </div>\n  </ng-template>\n</div>\n" }]
    }], null, { content: [{
            type: Input,
            args: ['p-content']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDynamicContainerComponent, { className: "PoDynamicContainerComponent", filePath: "lib/components/po-dynamic/po-dynamic-container/po-dynamic-container.component.ts", lineNumber: 7 }); })();

const _c0$y = ["component"];
function PoDynamicFormFieldsComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c1$c = a0 => ({ $implicit: a0 });
function PoDynamicFormFieldsComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtemplate(1, PoDynamicFormFieldsComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(4);
    const _r2 = i0.ɵɵreference(2);
    i0.ɵɵclassProp("po-dynamic", ctx_r0.hasContainers);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r0.hasContainers ? _r4 : _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(4, _c1$c, ctx_r0.hasContainers ? ctx_r0.containerFields : ctx_r0.visibleFields));
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_divider_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-divider", 22);
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("p-label", field_r8.divider);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_2_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-datepicker", 23, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_2_Template_po_datepicker_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r29); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r28 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r28.value[field_r8.property], $event) || (ctx_r28.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_2_Template_po_datepicker_p_change_0_listener() { i0.ɵɵrestoreView(_r29); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r31 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r31.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r10.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-disabled", ctx_r10.isDisabled(field_r8))("p-error-pattern", field_r8.errorMessage)("p-auto-focus", field_r8.focus)("p-format", field_r8.format)("p-help", field_r8.help)("p-iso-format", field_r8.isoFormat)("p-label", field_r8.label)("p-locale", field_r8.locale)("p-max-date", field_r8.maxValue)("p-min-date", field_r8.minValue)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_range_3_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-datepicker-range", 25, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_range_3_Template_po_datepicker_range_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r36); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r35 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r35.value[field_r8.property], $event) || (ctx_r35.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_range_3_Template_po_datepicker_range_p_change_0_listener() { i0.ɵɵrestoreView(_r36); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r38 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r38.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r11.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-disabled", ctx_r11.isDisabled(field_r8))("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-label", field_r8.label)("p-literals", field_r8.literals)("p-max-date", field_r8.maxValue)("p-min-date", field_r8.minValue)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_input_4_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-input", 26, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_input_4_Template_po_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r43); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r42 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r42.value[field_r8.property], $event) || (ctx_r42.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_input_4_Template_po_input_p_change_0_listener() { i0.ɵɵrestoreView(_r43); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r45 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r45.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_input_4_Template_po_input_p_change_model_0_listener() { i0.ɵɵrestoreView(_r43); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r47 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r47.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r12.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-disabled", ctx_r12.isDisabled(field_r8))("p-error-pattern", field_r8.errorMessage)("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-label", field_r8.label)("p-mask-format-model", field_r8.maskFormatModel)("p-mask", field_r8.mask)("p-maxlength", field_r8.maxLength)("p-minlength", field_r8.minLength)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-pattern", field_r8.pattern)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-icon", field_r8.icon)("p-placeholder", field_r8.placeholder)("p-readonly", field_r8.readonly);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_number_5_Template(rf, ctx) { if (rf & 1) {
    const _r52 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-number", 27, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_number_5_Template_po_number_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r52); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r51 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r51.value[field_r8.property], $event) || (ctx_r51.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_number_5_Template_po_number_p_change_0_listener() { i0.ɵɵrestoreView(_r52); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r54 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r54.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_number_5_Template_po_number_p_change_model_0_listener() { i0.ɵɵrestoreView(_r52); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r56 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r56.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r13.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-disabled", ctx_r13.isDisabled(field_r8))("p-error-pattern", field_r8.errorMessage)("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-label", field_r8.label)("p-min", field_r8.minValue)("p-max", field_r8.maxValue)("p-maxlength", field_r8.maxLength)("p-minlength", field_r8.minLength)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-step", field_r8.step)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-icon", field_r8.icon)("p-placeholder", field_r8.placeholder);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_decimal_6_Template(rf, ctx) { if (rf & 1) {
    const _r61 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-decimal", 28, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_decimal_6_Template_po_decimal_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r61); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r60 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r60.value[field_r8.property], $event) || (ctx_r60.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_decimal_6_Template_po_decimal_p_change_0_listener() { i0.ɵɵrestoreView(_r61); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r63 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r63.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_decimal_6_Template_po_decimal_p_change_model_0_listener() { i0.ɵɵrestoreView(_r61); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r65 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r65.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r14.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-error-pattern", field_r8.errorMessage)("p-disabled", ctx_r14.isDisabled(field_r8))("p-decimals-length", field_r8.decimalsLength)("p-thousand-maxlength", field_r8.thousandMaxlength)("p-icon", field_r8.icon)("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-label", field_r8.label)("p-locale", field_r8.locale)("p-min", field_r8.minValue)("p-max", field_r8.maxValue)("p-maxlength", field_r8.maxLength)("p-minlength", field_r8.minLength)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_select_7_Template(rf, ctx) { if (rf & 1) {
    const _r70 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-select", 29, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_select_7_Template_po_select_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r70); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r69 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r69.value[field_r8.property], $event) || (ctx_r69.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_select_7_Template_po_select_p_change_0_listener() { i0.ɵɵrestoreView(_r70); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r72 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r72.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r15.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-field-label", field_r8.fieldLabel)("p-field-value", field_r8.fieldValue)("p-disabled", ctx_r15.isDisabled(field_r8))("p-help", field_r8.help)("p-label", field_r8.label)("p-optional", field_r8.optional)("p-options", field_r8.options)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder)("p-readonly", field_r8.readonly);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_radio_group_8_Template(rf, ctx) { if (rf & 1) {
    const _r77 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-radio-group", 30, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_radio_group_8_Template_po_radio_group_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r77); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r76 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r76.value[field_r8.property], $event) || (ctx_r76.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_radio_group_8_Template_po_radio_group_p_change_0_listener() { i0.ɵɵrestoreView(_r77); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r79 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r79.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r16.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-columns", field_r8.columns || 3)("p-auto-focus", field_r8.focus)("p-disabled", ctx_r16.isDisabled(field_r8))("p-help", field_r8.help)("p-label", field_r8.label)("p-optional", field_r8.optional)("p-options", field_r8.options)("p-required", field_r8.required)("p-show-required", field_r8.showRequired);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_switch_9_Template(rf, ctx) { if (rf & 1) {
    const _r84 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-switch", 31, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_switch_9_Template_po_switch_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r84); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r83 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r83.value[field_r8.property], $event) || (ctx_r83.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_switch_9_Template_po_switch_p_change_0_listener() { i0.ɵɵrestoreView(_r84); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r86 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r86.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r17 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r17.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-disabled", ctx_r17.isDisabled(field_r8))("p-format-model", field_r8.formatModel)("p-help", field_r8.help)("p-label", field_r8.label)("p-label-off", field_r8.booleanFalse)("p-label-on", field_r8.booleanTrue)("p-label-position", field_r8.labelPosition);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_10_Template(rf, ctx) { if (rf & 1) {
    const _r91 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox", 32, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_10_Template_po_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r91); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r90 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r90.value[field_r8.property], $event) || (ctx_r90.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_10_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r91); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r93 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r93.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r18.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-auto-focus", field_r8.focus)("p-disabled", ctx_r18.isDisabled(field_r8))("p-label", field_r8.label)("p-size", field_r8.size);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_combo_11_Template(rf, ctx) { if (rf & 1) {
    const _r98 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-combo", 33, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_combo_11_Template_po_combo_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r98); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r97 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r97.value[field_r8.property], $event) || (ctx_r97.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_combo_11_Template_po_combo_p_change_0_listener($event) { i0.ɵɵrestoreView(_r98); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r100 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r100.onChangeField(field_r8, $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r19.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-auto-focus", field_r8.focus)("p-clean", field_r8.clean)("p-disabled", ctx_r19.isDisabled(field_r8))("p-field-label", field_r8.fieldLabel)("p-field-value", field_r8.fieldValue)("p-filter-params", field_r8.params)("p-filter-service", field_r8.optionsService)("p-help", field_r8.help)("p-infinite-scroll", field_r8.infiniteScroll)("p-infinite-scroll-distance", field_r8.infiniteScrollDistance || 100)("p-label", field_r8.label)("p-literals", field_r8.literals)("p-options", field_r8.options)("p-optional", field_r8.optional)("p-sort", field_r8.sort)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-icon", field_r8.icon)("p-placeholder", field_r8.placeholder)("p-filter-minlength", field_r8.filterMinlength)("p-filter-mode", field_r8.filterMode)("p-disabled-init-filter", field_r8.disabledInitFilter)("p-disabled-tab-filter", field_r8.disabledTabFilter)("p-debounce-time", field_r8.debounceTime)("p-change-on-enter", field_r8.changeOnEnter);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template(rf, ctx) { if (rf & 1) {
    const _r105 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-lookup", 34, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template_po_lookup_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r105); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r104 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r104.value[field_r8.property], $event) || (ctx_r104.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template_po_lookup_p_change_0_listener() { i0.ɵɵrestoreView(_r105); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r107 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r107.onChangeField(field_r8)); })("p-change-visible-columns", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template_po_lookup_p_change_visible_columns_0_listener($event) { i0.ɵɵrestoreView(_r105); const field_r8 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r8.changeVisibleColumns == null ? null : field_r8.changeVisibleColumns($event)); })("p-restore-column-manager", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template_po_lookup_p_restore_column_manager_0_listener($event) { i0.ɵɵrestoreView(_r105); const field_r8 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r8.columnRestoreManager == null ? null : field_r8.columnRestoreManager($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r20.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-columns", field_r8.columns)("p-disabled", ctx_r20.isDisabled(field_r8))("p-field-label", field_r8.fieldLabel || "label")("p-field-value", field_r8.fieldValue || "value")("p-filter-params", field_r8.params)("p-filter-service", field_r8.searchService)("p-auto-focus", field_r8.focus)("p-auto-height", field_r8.autoHeight)("p-help", field_r8.help)("p-field-format", field_r8.format)("p-infinite-scroll", field_r8.infiniteScroll)("p-label", field_r8.label)("p-literals", field_r8.literals)("p-multiple", field_r8.multiple)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder)("p-advanced-filters", field_r8.advancedFilters);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_group_13_Template(rf, ctx) { if (rf & 1) {
    const _r116 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox-group", 30, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_group_13_Template_po_checkbox_group_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r116); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r115 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r115.value[field_r8.property], $event) || (ctx_r115.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_group_13_Template_po_checkbox_group_p_change_0_listener() { i0.ɵɵrestoreView(_r116); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r118 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r118.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r21.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-columns", field_r8.columns || 3)("p-auto-focus", field_r8.focus)("p-disabled", ctx_r21.isDisabled(field_r8))("p-help", field_r8.help)("p-label", field_r8.label)("p-optional", field_r8.optional)("p-options", field_r8.options)("p-required", field_r8.required)("p-show-required", field_r8.showRequired);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_multiselect_14_Template(rf, ctx) { if (rf & 1) {
    const _r123 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-multiselect", 35, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_multiselect_14_Template_po_multiselect_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r123); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r122 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r122.value[field_r8.property], $event) || (ctx_r122.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_multiselect_14_Template_po_multiselect_p_change_0_listener() { i0.ɵɵrestoreView(_r123); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r125 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r125.onChangeField(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r22.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-disabled", ctx_r22.isDisabled(field_r8))("p-auto-focus", field_r8.focus)("p-auto-height", field_r8.autoHeight)("p-help", field_r8.help)("p-label", field_r8.label)("p-literals", field_r8.literals)("p-optional", field_r8.optional)("p-options", field_r8.options)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder)("p-field-label", field_r8.fieldLabel)("p-field-value", field_r8.fieldValue)("p-filter-service", field_r8.optionsService)("p-filter-mode", field_r8.filterMode)("p-debounce-time", field_r8.debounceTime)("p-sort", field_r8.sort)("p-placeholder-search", field_r8.placeholderSearch)("p-hide-search", field_r8.hideSearch)("p-hide-select-all", field_r8.hideSelectAll);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_textarea_15_Template(rf, ctx) { if (rf & 1) {
    const _r130 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-textarea", 36, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_textarea_15_Template_po_textarea_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r130); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r129 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r129.value[field_r8.property], $event) || (ctx_r129.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_textarea_15_Template_po_textarea_p_change_0_listener() { i0.ɵɵrestoreView(_r130); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r132 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r132.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_textarea_15_Template_po_textarea_p_change_model_0_listener() { i0.ɵɵrestoreView(_r130); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r134 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r134.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r23 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r23.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-disabled", ctx_r23.isDisabled(field_r8))("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-label", field_r8.label)("p-maxlength", field_r8.maxLength)("p-minlength", field_r8.minLength)("p-optional", field_r8.optional)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-rows", field_r8.rows)("p-placeholder", field_r8.placeholder);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_password_16_Template(rf, ctx) { if (rf & 1) {
    const _r139 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-password", 37, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_password_16_Template_po_password_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r139); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r138 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r138.value[field_r8.property], $event) || (ctx_r138.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_password_16_Template_po_password_p_change_0_listener() { i0.ɵɵrestoreView(_r139); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r141 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r141.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_password_16_Template_po_password_p_change_model_0_listener() { i0.ɵɵrestoreView(_r139); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r143 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r143.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", field_r8.property);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r24.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-clean", field_r8.clean)("p-disabled", ctx_r24.isDisabled(field_r8))("p-error-pattern", field_r8.errorMessage)("p-auto-focus", field_r8.focus)("p-help", field_r8.help)("p-hide-password-peek", field_r8.hidePasswordPeek)("p-icon", field_r8.icon)("p-label", field_r8.label)("p-maxlength", field_r8.maxLength)("p-minlength", field_r8.minLength)("p-no-autocomplete", field_r8.noAutocomplete)("p-optional", field_r8.optional)("p-pattern", field_r8.pattern)("p-readonly", field_r8.readonly)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-placeholder", field_r8.placeholder);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template(rf, ctx) { if (rf & 1) {
    const _r148 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-upload", 38, 24);
    i0.ɵɵtwoWayListener("ngModelChange", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r147 = i0.ɵɵnextContext(2); i0.ɵɵtwoWayBindingSet(ctx_r147.value[field_r8.property], $event) || (ctx_r147.value[field_r8.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-error", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_p_error_0_listener($event) { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r8.onError($event)); })("p-success", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_p_success_0_listener($event) { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r8.onSuccess($event)); })("p-upload", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_p_upload_0_listener($event) { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r8.onUpload($event)); })("p-change", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_p_change_0_listener() { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r156 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r156.onChangeField(field_r8)); })("p-change-model", function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template_po_upload_p_change_model_0_listener() { i0.ɵɵrestoreView(_r148); const field_r8 = i0.ɵɵnextContext().$implicit; const ctx_r158 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r158.onChangeFieldModel(field_r8)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r25.value[field_r8.property]);
    i0.ɵɵproperty("ngClass", field_r8.componentClass)("p-auto-upload", field_r8.autoUpload)("p-directory", field_r8.directory)("p-disabled", ctx_r25.isDisabled(field_r8))("p-drag-drop", field_r8.dragDrop)("p-drag-drop-height", field_r8.dragDropHeight)("p-restrictions", field_r8.restrictions)("p-form-field", field_r8.formField)("p-headers", field_r8.headers)("p-help", field_r8.help)("p-hide-restrictions-info", field_r8.hideRestrictionsInfo)("p-hide-select-button", field_r8.hideSelectButton)("p-hide-send-button", field_r8.hideSendButton)("p-multiple", field_r8.multiple)("p-label", field_r8.label)("p-literals", field_r8.literals)("name", field_r8.property)("p-optional", field_r8.optional)("p-required", field_r8.required)("p-show-required", field_r8.showRequired)("p-url", field_r8.url);
} }
function PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_divider_1_Template, 1, 1, "po-divider", 6)(2, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_2_Template, 2, 20, "po-datepicker", 7)(3, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_datepicker_range_3_Template, 2, 16, "po-datepicker-range", 8)(4, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_input_4_Template, 2, 21, "po-input", 9)(5, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_number_5_Template, 2, 21, "po-number", 10)(6, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_decimal_6_Template, 2, 23, "po-decimal", 11)(7, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_select_7_Template, 2, 14, "po-select", 12)(8, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_radio_group_8_Template, 2, 12, "po-radio-group", 13)(9, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_switch_9_Template, 2, 10, "po-switch", 14)(10, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_10_Template, 2, 7, "po-checkbox", 15)(11, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_combo_11_Template, 2, 28, "po-combo", 16)(12, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_lookup_12_Template, 2, 24, "po-lookup", 17)(13, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_checkbox_group_13_Template, 2, 12, "po-checkbox-group", 13)(14, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_multiselect_14_Template, 2, 23, "po-multiselect", 18)(15, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_textarea_15_Template, 2, 15, "po-textarea", 19)(16, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_password_16_Template, 2, 20, "po-password", 20)(17, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_po_upload_17_Template, 2, 22, "po-upload", 21);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const field_r8 = ctx.$implicit;
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", field_r8 == null ? null : field_r8.divider == null ? null : field_r8.divider.trim());
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "datepicker"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "datepickerrange"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "input"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "number"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "decimal"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "select"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "radioGroup"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "switch"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "checkbox"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "combo"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "lookup"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "checkboxGroup"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "multiselect"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "textarea"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "password"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r7.compareTo(field_r8.control, "upload"));
} }
function PoDynamicFormFieldsComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoDynamicFormFieldsComponent_ng_template_1_ng_container_0_Template, 18, 17, "ng-container", 5);
} if (rf & 2) {
    const fields_r6 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngForOf", fields_r6)("ngForTrackBy", ctx_r1.trackBy);
} }
function PoDynamicFormFieldsComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-dynamic-container", 39);
} if (rf & 2) {
    const fields_r161 = ctx.$implicit;
    i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(2);
    i0.ɵɵproperty("p-fields", fields_r161)("p-content", _r2);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de criação dos campos dinâmicos.
 */
class PoDynamicFormFieldsComponent extends PoDynamicFormFieldsBaseComponent {
    validationService;
    changes;
    form;
    components;
    previousValue = {};
    constructor(titleCasePipe, validationService, changes, form) {
        super(titleCasePipe);
        this.validationService = validationService;
        this.changes = changes;
        this.form = form;
    }
    ngOnChanges(changes) {
        if (changes.fields) {
            this.visibleFields = this.getVisibleFields();
            this.setContainerFields();
        }
    }
    focus(property) {
        const foundComponent = this.components.find(component => component.name === property);
        if (foundComponent) {
            foundComponent.focus();
        }
    }
    isDisabled(field) {
        return field.disabled || this.disabledForm;
    }
    async onChangeField(visibleField, objectValue) {
        const { property } = visibleField;
        const isBooleanType = visibleField.type === 'boolean';
        const isChangedValueField = this.previousValue[property] !== this.value[property];
        if (visibleField.optionsService) {
            this.objectValue.emit(objectValue);
        }
        // verifica se o formulario esta touched para não disparar o validate ao carregar a tela.
        if ((this.form.touched || isBooleanType) && isChangedValueField) {
            const { changedField, changedFieldIndex } = this.getField(property);
            if (changedField.validate) {
                await this.validateField(changedField, changedFieldIndex, visibleField);
            }
            this.triggerValidationOnForm(changedFieldIndex);
        }
        this.updatePreviousValue();
    }
    //emite o valor a cada caractere digitado no input
    onChangeFieldModel(visibleField) {
        if (this.validateOnInput) {
            const { property } = visibleField;
            const { changedFieldIndex } = this.getField(property);
            this.triggerValidationOnForm(changedFieldIndex);
        }
    }
    updatePreviousValue() {
        this.previousValue = JSON.parse(JSON.stringify(this.value));
    }
    trackBy(index) {
        return index;
    }
    applyFieldValidation(index, validatedField) {
        const field = this.fields[index];
        this.fields[index] = { ...field, ...validatedField.field };
        this.updateFields();
        if (validatedField.hasOwnProperty('value')) {
            this.value[field.property] = validatedField.value;
        }
        this.changes.detectChanges();
        if (validatedField.focus) {
            this.focus(field.property);
        }
    }
    getField(property) {
        const changedFieldIndex = this.fields.findIndex(field => field.property === property);
        const changedField = this.fields[changedFieldIndex];
        return { changedField, changedFieldIndex };
    }
    triggerValidationOnForm(changedFieldIndex) {
        const isValidatableField = this.validateFields?.length
            ? this.validateFieldsChecker(this.validateFields, this.fields[changedFieldIndex].property)
            : true;
        const hasValidationForm = this.validate && isValidatableField && this.formValidate.observers.length;
        if (hasValidationForm) {
            const updatedField = this.fields[changedFieldIndex];
            this.formValidate.emit(updatedField);
        }
    }
    updateFields() {
        this.fieldsChange.emit(this.fields);
        this.visibleFields = this.getVisibleFields();
        this.setContainerFields();
    }
    validateFieldsChecker(validateFields, propertyField) {
        return validateFields.some(validateFieldItem => validateFieldItem === propertyField);
    }
    async validateField(field, fieldIndex, visibleField) {
        const value = this.value[field.property];
        const previousDisabled = visibleField.disabled;
        visibleField.disabled = true;
        this.changes.detectChanges();
        try {
            const validatedField = await this.validationService.sendFieldChange(field, value).toPromise();
            this.applyFieldValidation(fieldIndex, validatedField);
        }
        catch {
            visibleField.disabled = previousDisabled;
        }
    }
    static ɵfac = function PoDynamicFormFieldsComponent_Factory(t) { return new (t || PoDynamicFormFieldsComponent)(i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicFormValidationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.NgForm)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicFormFieldsComponent, selectors: [["po-dynamic-form-fields"]], viewQuery: function PoDynamicFormFieldsComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$y, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);
        } }, features: [i0.ɵɵProvidersFeature([PoDynamicFormValidationService], [{ provide: ControlContainer, useExisting: NgForm }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 5, vars: 1, consts: [["class", "po-row", 3, "po-dynamic", 4, "ngIf"], ["poContent", ""], ["poContentContainer", ""], [1, "po-row"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-sm-12", 3, "p-label", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-format", "p-help", "p-iso-format", "p-label", "p-locale", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-literals", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-mask-format-model", "p-mask", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-required", "p-show-required", "p-icon", "p-placeholder", "p-readonly", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-step", "p-readonly", "p-required", "p-show-required", "p-icon", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-error-pattern", "p-disabled", "p-decimals-length", "p-thousand-maxlength", "p-icon", "p-auto-focus", "p-help", "p-label", "p-locale", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-field-label", "p-field-value", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-show-required", "p-placeholder", "p-readonly", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-columns", "p-auto-focus", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-show-required", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-format-model", "p-help", "p-label", "p-label-off", "p-label-on", "p-label-position", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-auto-focus", "p-disabled", "p-label", "p-size", "ngModelChange", "p-change", 4, "ngIf"], ["p-emit-object-value", "", 3, "name", "ngModel", "ngClass", "p-auto-focus", "p-clean", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-help", "p-infinite-scroll", "p-infinite-scroll-distance", "p-label", "p-literals", "p-options", "p-optional", "p-sort", "p-required", "p-show-required", "p-icon", "p-placeholder", "p-filter-minlength", "p-filter-mode", "p-disabled-init-filter", "p-disabled-tab-filter", "p-debounce-time", "p-change-on-enter", "ngModelChange", "p-change", 4, "ngIf"], ["p-field-label", "label", "p-field-value", "value", 3, "name", "ngModel", "ngClass", "p-clean", "p-columns", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-auto-focus", "p-auto-height", "p-help", "p-field-format", "p-infinite-scroll", "p-label", "p-literals", "p-multiple", "p-no-autocomplete", "p-optional", "p-required", "p-show-required", "p-placeholder", "p-advanced-filters", "ngModelChange", "p-change", "p-change-visible-columns", "p-restore-column-manager", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-auto-height", "p-help", "p-label", "p-literals", "p-optional", "p-options", "p-required", "p-show-required", "p-placeholder", "p-field-label", "p-field-value", "p-filter-service", "p-filter-mode", "p-debounce-time", "p-sort", "p-placeholder-search", "p-hide-search", "p-hide-select-all", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-maxlength", "p-minlength", "p-optional", "p-readonly", "p-required", "p-show-required", "p-rows", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-hide-password-peek", "p-icon", "p-label", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "ngModel", "ngClass", "p-auto-upload", "p-directory", "p-disabled", "p-drag-drop", "p-drag-drop-height", "p-restrictions", "p-form-field", "p-headers", "p-help", "p-hide-restrictions-info", "p-hide-select-button", "p-hide-send-button", "p-multiple", "p-label", "p-literals", "name", "p-optional", "p-required", "p-show-required", "p-url", "ngModelChange", "p-error", "p-success", "p-upload", "p-change", "p-change-model", 4, "ngIf"], [1, "po-sm-12", 3, "p-label"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-format", "p-help", "p-iso-format", "p-label", "p-locale", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change"], ["component", ""], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-literals", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-mask-format-model", "p-mask", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-required", "p-show-required", "p-icon", "p-placeholder", "p-readonly", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-step", "p-readonly", "p-required", "p-show-required", "p-icon", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-error-pattern", "p-disabled", "p-decimals-length", "p-thousand-maxlength", "p-icon", "p-auto-focus", "p-help", "p-label", "p-locale", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-field-label", "p-field-value", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-show-required", "p-placeholder", "p-readonly", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-columns", "p-auto-focus", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-show-required", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-format-model", "p-help", "p-label", "p-label-off", "p-label-on", "p-label-position", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-auto-focus", "p-disabled", "p-label", "p-size", "ngModelChange", "p-change"], ["p-emit-object-value", "", 3, "name", "ngModel", "ngClass", "p-auto-focus", "p-clean", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-help", "p-infinite-scroll", "p-infinite-scroll-distance", "p-label", "p-literals", "p-options", "p-optional", "p-sort", "p-required", "p-show-required", "p-icon", "p-placeholder", "p-filter-minlength", "p-filter-mode", "p-disabled-init-filter", "p-disabled-tab-filter", "p-debounce-time", "p-change-on-enter", "ngModelChange", "p-change"], ["p-field-label", "label", "p-field-value", "value", 3, "name", "ngModel", "ngClass", "p-clean", "p-columns", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-auto-focus", "p-auto-height", "p-help", "p-field-format", "p-infinite-scroll", "p-label", "p-literals", "p-multiple", "p-no-autocomplete", "p-optional", "p-required", "p-show-required", "p-placeholder", "p-advanced-filters", "ngModelChange", "p-change", "p-change-visible-columns", "p-restore-column-manager"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-auto-height", "p-help", "p-label", "p-literals", "p-optional", "p-options", "p-required", "p-show-required", "p-placeholder", "p-field-label", "p-field-value", "p-filter-service", "p-filter-mode", "p-debounce-time", "p-sort", "p-placeholder-search", "p-hide-search", "p-hide-select-all", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-maxlength", "p-minlength", "p-optional", "p-readonly", "p-required", "p-show-required", "p-rows", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-hide-password-peek", "p-icon", "p-label", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-readonly", "p-required", "p-show-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "ngModel", "ngClass", "p-auto-upload", "p-directory", "p-disabled", "p-drag-drop", "p-drag-drop-height", "p-restrictions", "p-form-field", "p-headers", "p-help", "p-hide-restrictions-info", "p-hide-select-button", "p-hide-send-button", "p-multiple", "p-label", "p-literals", "name", "p-optional", "p-required", "p-show-required", "p-url", "ngModelChange", "p-error", "p-success", "p-upload", "p-change", "p-change-model"], [3, "p-fields", "p-content"]], template: function PoDynamicFormFieldsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicFormFieldsComponent_div_0_Template, 2, 6, "div", 0)(1, PoDynamicFormFieldsComponent_ng_template_1_Template, 1, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(3, PoDynamicFormFieldsComponent_ng_template_3_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.visibleFields && ctx.visibleFields.length > 0);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2$1.NgControlStatus, i2$1.NgModel, PoDividerComponent, PoCheckboxGroupComponent, PoRadioGroupComponent, PoDatepickerComponent, PoComboComponent, PoDecimalComponent, PoDatepickerRangeComponent, PoInputComponent, PoLookupComponent, PoMultiselectComponent, PoNumberComponent, PoPasswordComponent, PoSelectComponent, PoTextareaComponent, PoUploadComponent, PoCheckboxComponent, PoSwitchComponent, PoDynamicContainerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormFieldsComponent, [{
        type: Component,
        args: [{ selector: 'po-dynamic-form-fields', viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], providers: [PoDynamicFormValidationService], template: "<div class=\"po-row\" [class.po-dynamic]=\"hasContainers\" *ngIf=\"visibleFields && visibleFields.length > 0\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      hasContainers ? poContentContainer : poContent;\n      context: { $implicit: hasContainers ? containerFields : visibleFields }\n    \"\n  ></ng-container>\n</div>\n\n<ng-template #poContent let-fields>\n  <ng-container *ngFor=\"let field of fields; trackBy: trackBy\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <po-datepicker\n      #component\n      *ngIf=\"compareTo(field.control, 'datepicker')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-format]=\"field.format\"\n      [p-help]=\"field.help\"\n      [p-iso-format]=\"field.isoFormat\"\n      [p-label]=\"field.label\"\n      [p-locale]=\"field.locale\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-datepicker>\n\n    <po-datepicker-range\n      #component\n      *ngIf=\"compareTo(field.control, 'datepickerrange')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-datepicker-range>\n\n    <po-input\n      #component\n      *ngIf=\"compareTo(field.control, 'input')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-mask-format-model]=\"field.maskFormatModel\"\n      [p-mask]=\"field.mask\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-readonly]=\"field.readonly\"\n    >\n    </po-input>\n\n    <po-number\n      #component\n      *ngIf=\"compareTo(field.control, 'number')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-step]=\"field.step\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-number>\n\n    <po-decimal\n      #component\n      *ngIf=\"compareTo(field.control, 'decimal')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-decimals-length]=\"field.decimalsLength\"\n      [p-thousand-maxlength]=\"field.thousandMaxlength\"\n      [p-icon]=\"field.icon\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-locale]=\"field.locale\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-decimal>\n\n    <po-select\n      #component\n      *ngIf=\"compareTo(field.control, 'select')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-field-label]=\"field.fieldLabel\"\n      [p-field-value]=\"field.fieldValue\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-readonly]=\"field.readonly\"\n    >\n    </po-select>\n\n    <po-radio-group\n      #component\n      *ngIf=\"compareTo(field.control, 'radioGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns || 3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-radio-group>\n\n    <po-switch\n      #component\n      *ngIf=\"compareTo(field.control, 'switch')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-format-model]=\"field.formatModel\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-label-off]=\"field.booleanFalse\"\n      [p-label-on]=\"field.booleanTrue\"\n      [p-label-position]=\"field.labelPosition\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-switch>\n\n    <po-checkbox\n      #component\n      *ngIf=\"compareTo(field.control, 'checkbox')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-label]=\"field.label\"\n      [p-size]=\"field.size\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-checkbox>\n\n    <po-combo\n      #component\n      *ngIf=\"compareTo(field.control, 'combo')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-emit-object-value\n      [p-auto-focus]=\"field.focus\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-field-label]=\"field.fieldLabel\"\n      [p-field-value]=\"field.fieldValue\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-help]=\"field.help\"\n      [p-infinite-scroll]=\"field.infiniteScroll\"\n      [p-infinite-scroll-distance]=\"field.infiniteScrollDistance || 100\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-options]=\"field.options\"\n      [p-optional]=\"field.optional\"\n      [p-sort]=\"field.sort\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field, $event)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-filter-minlength]=\"field.filterMinlength\"\n      [p-filter-mode]=\"field.filterMode\"\n      [p-disabled-init-filter]=\"field.disabledInitFilter\"\n      [p-disabled-tab-filter]=\"field.disabledTabFilter\"\n      [p-debounce-time]=\"field.debounceTime\"\n      [p-change-on-enter]=\"field.changeOnEnter\"\n    >\n    </po-combo>\n\n    <po-lookup\n      #component\n      *ngIf=\"compareTo(field.control, 'lookup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      p-field-label=\"label\"\n      p-field-value=\"value\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-columns]=\"field.columns\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-field-label]=\"field.fieldLabel || 'label'\"\n      [p-field-value]=\"field.fieldValue || 'value'\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.searchService\"\n      [p-auto-focus]=\"field.focus\"\n      [p-auto-height]=\"field.autoHeight\"\n      [p-help]=\"field.help\"\n      [p-field-format]=\"field.format\"\n      [p-infinite-scroll]=\"field.infiniteScroll\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-multiple]=\"field.multiple\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-advanced-filters]=\"field.advancedFilters\"\n      (p-change-visible-columns)=\"field.changeVisibleColumns?.($event)\"\n      (p-restore-column-manager)=\"field.columnRestoreManager?.($event)\"\n    >\n    </po-lookup>\n\n    <po-checkbox-group\n      #component\n      *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns || 3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-checkbox-group>\n\n    <po-multiselect\n      #component\n      *ngIf=\"compareTo(field.control, 'multiselect')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-auto-height]=\"field.autoHeight\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-field-label]=\"field.fieldLabel\"\n      [p-field-value]=\"field.fieldValue\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-filter-mode]=\"field.filterMode\"\n      [p-debounce-time]=\"field.debounceTime\"\n      [p-sort]=\"field.sort\"\n      [p-placeholder-search]=\"field.placeholderSearch\"\n      [p-hide-search]=\"field.hideSearch\"\n      [p-hide-select-all]=\"field.hideSelectAll\"\n    >\n    </po-multiselect>\n\n    <po-textarea\n      #component\n      *ngIf=\"compareTo(field.control, 'textarea')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      [p-rows]=\"field.rows\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-textarea>\n\n    <po-password\n      #component\n      *ngIf=\"compareTo(field.control, 'password')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-hide-password-peek]=\"field.hidePasswordPeek\"\n      [p-icon]=\"field.icon\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-password>\n\n    <po-upload\n      #component\n      *ngIf=\"compareTo(field.control, 'upload')\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-auto-upload]=\"field.autoUpload\"\n      [p-directory]=\"field.directory\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-drag-drop]=\"field.dragDrop\"\n      [p-drag-drop-height]=\"field.dragDropHeight\"\n      [p-restrictions]=\"field.restrictions\"\n      [p-form-field]=\"field.formField\"\n      [p-headers]=\"field.headers\"\n      [p-help]=\"field.help\"\n      [p-hide-restrictions-info]=\"field.hideRestrictionsInfo\"\n      [p-hide-select-button]=\"field.hideSelectButton\"\n      [p-hide-send-button]=\"field.hideSendButton\"\n      [p-multiple]=\"field.multiple\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [name]=\"field.property\"\n      (p-error)=\"field.onError($event)\"\n      (p-success)=\"field.onSuccess($event)\"\n      (p-upload)=\"field.onUpload($event)\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      [p-show-required]=\"field.showRequired\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-url]=\"field.url\"\n    >\n    </po-upload>\n  </ng-container>\n</ng-template>\n\n<ng-template #poContentContainer let-fields>\n  <po-dynamic-container [p-fields]=\"fields\" [p-content]=\"poContent\"></po-dynamic-container>\n</ng-template>\n" }]
    }], () => [{ type: i1.TitleCasePipe }, { type: PoDynamicFormValidationService }, { type: i0.ChangeDetectorRef }, { type: i2$1.NgForm }], { components: [{
            type: ViewChildren,
            args: ['component']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDynamicFormFieldsComponent, { className: "PoDynamicFormFieldsComponent", filePath: "lib/components/po-dynamic/po-dynamic-form/po-dynamic-form-fields/po-dynamic-form-fields.component.ts", lineNumber: 23 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados dos campos que utilizam a propriedade `searchService`.
 */
class PoDynamicViewService {
    httpClient;
    headers = new HttpHeaders({
        'X-PO-No-Message': 'true'
    });
    url;
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        const encodedValue = encodeURIComponent(value);
        const newURL = `${this.url}/${encodedValue}`;
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map$1((response) => ('items' in response ? response.items : response)));
    }
    onLoad(url, value) {
        return this.httpClient.post(url, value).toPromise();
    }
    setConfig(url) {
        this.url = url;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
    static ɵfac = function PoDynamicViewService_Factory(t) { return new (t || PoDynamicViewService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicViewService, factory: PoDynamicViewService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
class PoDynamicViewBaseComponent extends PoDynamicSharedBase {
    currencyPipe;
    datePipe;
    decimalPipe;
    timePipe;
    titleCasePipe;
    dynamicViewService;
    comboFilterService;
    multiselectFilterService;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita executar uma função quando o componente é inicializado.
     *
     * A propriedade aceita os seguintes tipos:
     * - **String**: Endpoint usado pelo componente para requisição via `POST`.
     * - **Function**: Método que será executado na inicialização do componente.
     *
     * Para os dois tipos de utilização da propriedade espera-se o seguinte retorno:
     *
     * ```
     * {
     *   value: {
     *     cnpj: '**************', // altera valor do campo
     *     updated: (new Date()).toString() // atribui valor ao campo novo
     *   },
     *   fields: [
     *     { property: 'cnpj', tag: true, inverse: true }, // atribui novas propriedades ao field
     *     { property: 'updated', tag: true } // inclui campo novo
     *   ]
     * }
     * ```
     * > **value**: any = atribui novo valor do model.
     *
     * > **fields**: `Array<PoDynamicViewField>` = Lista de campos que deseja alterar as propriedades,
     * caso enviar um campo a mais será criado um novo campo.
     *
     * - Para esconder/remover campos precisa informar no field a propriedade `visible = false`.
     *
     */
    load;
    service;
    _fields = [];
    _showAllValue = false;
    _value = {};
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * @default `[]`
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    get fields() {
        return this._fields;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * @default `false`
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService, comboFilterService, multiselectFilterService) {
        super();
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this.dynamicViewService = dynamicViewService;
        this.comboFilterService = comboFilterService;
        this.multiselectFilterService = multiselectFilterService;
    }
    getFieldOrderRetroactive(position, index = 1) {
        if (position === index) {
            return position;
        }
        return this.fields.findIndex(field => field.order === index) > -1
            ? this.getFieldOrderRetroactive(position, index + 1)
            : index;
    }
    getFieldOrder(field, index) {
        const position = this.getFieldOrderRetroactive(index + 1);
        return this.fields.findIndex(e => e.order === position) > -1 ? this.getFieldOrder(field, position) : position;
    }
    getConfiguredFields(useSearchService = true) {
        const newFields = [];
        this.fields.forEach((field, index) => {
            field.order = field.order || this.getFieldOrder(field, index);
            if (!isVisibleField(field)) {
                return;
            }
            if (!field.searchService && !field.optionsService) {
                newFields.push(this.createField(field));
                return;
            }
            const hasValue = this.value[field.property]?.length ||
                (!Array.isArray(this.value[field.property]) && this.value[field.property] && useSearchService) ||
                field.container;
            if (hasValue) {
                const _field = this.returnValues({ ...field }, '');
                newFields.push(_field);
                if (field.searchService) {
                    if (typeof field.searchService === 'object') {
                        this.service = field.searchService;
                    }
                    else if (typeof field.searchService === 'string') {
                        this.service = this.dynamicViewService;
                        this.service.setConfig(field.searchService);
                    }
                }
                else if (field.optionsService) {
                    if (field.optionsMulti) {
                        if (typeof field.optionsService === 'object') {
                            this.service = field.optionsService;
                        }
                        else {
                            this.service = this.multiselectFilterService;
                            this.service.configProperties(field.optionsService, field.fieldLabel, field.fieldValue);
                        }
                    }
                    else {
                        if (typeof field.optionsService === 'object') {
                            this.service = field.optionsService;
                        }
                        else {
                            this.service = this.comboFilterService;
                            this.service.configProperties(field.optionsService, field.fieldLabel, field.fieldValue);
                        }
                    }
                }
                this.createFieldWithService(field, newFields, _field);
            }
        });
        const _sortedField = sortFields(newFields);
        this.ensureFieldHasContainer(_sortedField);
        return _sortedField;
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    getMergedFields() {
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach(valueField => {
            const fieldIndex = mergedFields.findIndex(field => field.property === valueField.property);
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        });
        return mergedFields;
    }
    // retorna o objeto value como fields.
    getValueFields() {
        return Object.keys(this.value).map(property => this.createField({ property }));
    }
    createField(field) {
        const property = field.property;
        let value;
        if (field.isArrayOrObject && this.value[property]) {
            value = this.transformArrayValue(this.value[property], field);
        }
        else if (field.fieldLabel) {
            value = this.transformFieldLabel(property, field);
        }
        if (!value) {
            value = this.transformValue(field.type, this.value[property], field.format);
        }
        return this.returnValues(field, value);
    }
    createFieldWithService(field, newFields, oldField) {
        const property = field.property;
        this.searchById(this.value[property], field).subscribe(response => {
            const value = response;
            const allValues = this.returnValues(field, value);
            const oldFieldIndex = newFields.indexOf(newFields.find(field => field === oldField));
            newFields.splice(oldFieldIndex, 1, allValues);
            sortFields(newFields);
        });
    }
    returnValues(field, value) {
        const property = field.property;
        const classesGridColumns = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return {
            property,
            value,
            label: this.titleCasePipe.transform(property),
            cssClass: classesGridColumns,
            ...field
        };
    }
    searchById(value, field) {
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            if (field.optionsMulti) {
                return this.service
                    .getObjectsByValues(value, field.params)
                    .pipe(map$1(res => this.transformArrayValue(res, field)))
                    .pipe(catchError$1(() => of(null)));
            }
            else {
                return this.service
                    .getObjectByValue(value, field.params)
                    .pipe(map$1(res => this.transformArrayValue(res, field)))
                    .pipe(catchError$1(() => of(null)));
            }
        }
        else {
            return of(null);
        }
    }
    transformArrayValue(valueProperty, field) {
        const valueArray = Array.isArray(valueProperty) ? valueProperty : [valueProperty];
        let labels;
        if (Array.isArray(field.format)) {
            labels = valueArray.map(objectData => this.formatField(objectData, field.format));
        }
        else {
            const arrayWithLabel = valueArray.map(item => ({
                value: item[field.fieldValue] || item.value,
                label: item[field.fieldLabel] || item.label
            }));
            labels = arrayWithLabel.map(optionValue => {
                if (optionValue.label) {
                    const labelTranformed = this.transformValue(field.type, optionValue.label, field.format);
                    if (field.concatLabelValue && optionValue.value) {
                        return `${labelTranformed} - ${optionValue.value}`;
                    }
                    else {
                        return labelTranformed;
                    }
                }
            });
        }
        if (labels[0] !== undefined && labels.join()) {
            return labels.join(', ');
        }
        else {
            valueProperty = '';
            return undefined;
        }
    }
    transformFieldLabel(property, field) {
        if (field.concatLabelValue && field.fieldLabel && field.fieldValue && !field.isArrayOrObject) {
            const transformedValue = this.transformValue(field.type, this.value[field.fieldLabel], field.format);
            return `${transformedValue} - ${this.value[field.fieldValue]}`;
        }
        if (field.fieldLabel && !field.concatLabelValue && !field.isArrayOrObject) {
            this.value[property] = this.value[field.fieldLabel];
        }
        return undefined;
    }
    transformValue(type, value, format) {
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
    formatField(objectSelected, properties) {
        let formattedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formattedField) {
                        formattedField = objectSelected[property];
                    }
                    else {
                        formattedField += ' - ' + objectSelected[property];
                    }
                }
            }
        }
        return formattedField;
    }
    static ɵfac = function PoDynamicViewBaseComponent_Factory(t) { return new (t || PoDynamicViewBaseComponent)(i0.ɵɵdirectiveInject(i1.CurrencyPipe), i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(PoTimePipe), i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicViewService), i0.ɵɵdirectiveInject(PoComboFilterService), i0.ɵɵdirectiveInject(PoMultiselectFilterService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicViewBaseComponent, inputs: { load: [i0.ɵɵInputFlags.None, "p-load", "load"], fields: [i0.ɵɵInputFlags.None, "p-fields", "fields"], showAllValue: [i0.ɵɵInputFlags.None, "p-show-all-value", "showAllValue"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, features: [i0.ɵɵInheritDefinitionFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewBaseComponent, [{
        type: Directive
    }], () => [{ type: i1.CurrencyPipe }, { type: i1.DatePipe }, { type: i1.DecimalPipe }, { type: PoTimePipe }, { type: i1.TitleCasePipe }, { type: PoDynamicViewService }, { type: PoComboFilterService }, { type: PoMultiselectFilterService }], { load: [{
            type: Input,
            args: ['p-load']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], showAllValue: [{
            type: Input,
            args: ['p-show-all-value']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();

/**
 * @description
 *
 * As imagens têm a função de traduzir visualmente ideias específicas ou mensagens complexas, mostrar um produto ou contar uma história, estabelecendo empatia e se conectando com os usuários.
 *
 * #### Boas Práticas
 *
 * O componente image foi projetado para atender os requisitos das Diretrizes de Acessibilidade para Conteúdo Web (WCAG) 2.1. Também foram estruturadas padrões de usabilidade para auxiliar na utilização do componente e garantir uma boa experiência para os usuários. Por isso, é muito importante que, ao aplicar esse componente, o proprietário do conteúdo leve em consideração alguns critérios e práticas:
 * ##### Uso
 * - Ao utilizar imagens, mantenha uma coerência entre elas no produto, de modo que compartilhem um mesmo estilo e intenção entre si.
 * - Utilize imagens que expressem a mensagem e estilo do produto, respeitando as diretrizes e guia da marca.
 * - Ao utilizar fotografias, é recomendável o uso de proporções de aspecto padrão, como 1:1, 3:1, 3:2, 16:9.
 * - Mantenha um ponto focal na imagem, pois isso influencia em como ela se comportará em diferentes formatos. Isso também ajuda a transmitir a mensagem de forma objetiva e consistente.
 *
 * ##### Imagem como plano de fundo
 * - Avalie se é realmente necessário o uso de imagem como plano de fundo e evite sempre que possível, pois pode ocasionar em um baixo contraste entre texto e imagem.
 * - Caso utilize, redobre a atenção na escolha da imagem e certifique-se de que ela está adequada para a leitura do texto e não está sendo apenas um ruído.
 * - Tenha especial atenção em telas menores. Embora seja possível posicionar o texto em uma área mais vazia ou escurecida, o texto e imagem se ajustam aos diferentes espaços, de acordo com o dispositivo. Muitas vezes acaba resultando no comprometimento tanto da leitura do texto e quando na visualização da imagem.
 * - Verifique a taxa de contraste do texto em relação ao fundo. Deve ser suficiente para atender aos padrões de acessibilidade, sendo 4,5:1 para textos acima de 18pt ou bold e 7,1: 1 para textos menores que 18pt.
 * - Se não tiver controle sobre qual imagem será colocada por trás do texto, o recomendado é não utilizar nesse formato.
 *
 * #### Acessibilidade tratada no componente
 * As boas práticas de acessibilidade variam de acordo com tipo da imagem, que podem ser divididas em:
 * - Imagem informativa simples, como por exemplo uma fotografia de um produto.
 * - Imagem complexa, como um gráfico, infográfico ou diagrama.
 * - Imagem decorativa, como um plano de fundo ou uma fotografia que ilustra um assunto, mas não é essencial para compreender a informação.
 */
class PoImageBaseComponent {
    isBase64 = false;
    _source;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da imagem em *pixels*. Caso não seja definida,
     * atribui o tamanho da imagem
     */
    height;
    /**
     * @optional
     *
     * @description
     *
     * Defini o texto alternativo descrevendo a imagem.
     */
    alternate;
    /**
     * @optional
     *
     * @description
     *
     * Fonte da imagem que pode ser um caminho local (`./assets/images/logo-black-small.png`)
     * ou um servidor externo (`https://po-ui.io/assets/images/logo-black-small.png`).
     */
    set source(value) {
        if (isValidImageBase64(value)) {
            this.isBase64 = true;
        }
        this._source = value;
    }
    get source() {
        return this._source;
    }
    /**
     * @optional
     *
     * @description
     *
     * Defini a prioridade de carregamento da imagem.
     * > Para as imagens com carregamento prioritátio ativo é necessário incluir
     * > uma tag link no head do arquivo index.html da sua aplicação.
     *
     * ```
     * <link rel="preconnect" href="<url_base_da_imagem>">
     * ```
     *
     * @default `false`
     */
    priority = false;
    /**
     * @optional
     *
     * @description
     *
     * Defini o carregamento que pode ser dos tipo:
     *
     * — lazy
     * — eager
     * — auto
     *
     * > Não é permitido definir esta propriedade em conjunto com a propriedade `p-priority`.
     */
    loading;
    static ɵfac = function PoImageBaseComponent_Factory(t) { return new (t || PoImageBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoImageBaseComponent, inputs: { height: [i0.ɵɵInputFlags.None, "p-height", "height"], alternate: [i0.ɵɵInputFlags.None, "p-alt", "alternate"], source: [i0.ɵɵInputFlags.None, "p-src", "source"], priority: [i0.ɵɵInputFlags.None, "p-priority", "priority"], loading: [i0.ɵɵInputFlags.None, "p-loading", "loading"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoImageBaseComponent, [{
        type: Directive
    }], null, { height: [{
            type: Input,
            args: ['p-height']
        }], alternate: [{
            type: Input,
            args: ['p-alt']
        }], source: [{
            type: Input,
            args: ['p-src']
        }], priority: [{
            type: Input,
            args: ['p-priority']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }] }); })();

function PoImageComponent_po_container_0_img_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 4);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("priority", ctx_r3.priority)("loading", ctx_r3.loading)("fill", true)("ngSrc", ctx_r3.source);
    i0.ɵɵattribute("alt", ctx_r3.alternate);
} }
function PoImageComponent_po_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-container", 2);
    i0.ɵɵtemplate(1, PoImageComponent_po_container_0_img_1_Template, 1, 5, "img", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(2);
    i0.ɵɵproperty("p-height", ctx_r0.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r0.isBase64)("ngIfElse", _r2);
} }
function PoImageComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 5);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("loading", ctx_r1.loading)("src", ctx_r1.source, i0.ɵɵsanitizeUrl);
    i0.ɵɵattribute("alt", ctx_r1.alternate);
} }
/**
 * @docsExtends PoImageBaseComponent
 *
 * @example
 *
 * <example name="po-image-basic" title="PO Image Basic" >
 *  <file name="sample-po-image-basic/sample-po-image-basic.component.html"> </file>
 *  <file name="sample-po-image-basic/sample-po-image-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-image-labs" title="PO Image Labs" >
 *  <file name="sample-po-image-labs/sample-po-image-labs.component.html"> </file>
 *  <file name="sample-po-image-labs/sample-po-image-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-image-travel" title="PO Image Travel" >
 *  <file name="sample-po-image-travel/sample-po-image-travel.component.html"> </file>
 *  <file name="sample-po-image-travel/sample-po-image-travel.component.ts"> </file>
 * </example>
 *
 */
class PoImageComponent extends PoImageBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoImageComponent_BaseFactory; return function PoImageComponent_Factory(t) { return (ɵPoImageComponent_BaseFactory || (ɵPoImageComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoImageComponent)))(t || PoImageComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoImageComponent, selectors: [["po-image"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 1, consts: [["class", "po-container-image", 3, "p-height", 4, "ngIf"], ["imageBase64", ""], [1, "po-container-image", 3, "p-height"], ["class", "po-image", 3, "priority", "loading", "fill", "ngSrc", 4, "ngIf", "ngIfElse"], [1, "po-image", 3, "priority", "loading", "fill", "ngSrc"], [1, "po-image", 3, "loading", "src"]], template: function PoImageComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoImageComponent_po_container_0_Template, 2, 3, "po-container", 0)(1, PoImageComponent_ng_template_1_Template, 1, 3, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.source);
        } }, dependencies: [i1.NgIf, PoContainerComponent, i1.NgOptimizedImage], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoImageComponent, [{
        type: Component,
        args: [{ selector: 'po-image', template: "<po-container class=\"po-container-image\" *ngIf=\"source\" [p-height]=\"height\">\n  <img\n    *ngIf=\"!isBase64; else imageBase64\"\n    class=\"po-image\"\n    [attr.alt]=\"alternate\"\n    [priority]=\"priority\"\n    [loading]=\"loading\"\n    [fill]=\"true\"\n    [ngSrc]=\"source\"\n  />\n</po-container>\n\n<ng-template #imageBase64>\n  <img class=\"po-image\" [attr.alt]=\"alternate\" [loading]=\"loading\" [src]=\"source\" />\n</ng-template>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoImageComponent, { className: "PoImageComponent", filePath: "lib/components/po-image/po-image.component.ts", lineNumber: 30 }); })();

function PoDynamicViewComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0$x = a0 => ({ $implicit: a0 });
function PoDynamicViewComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtemplate(1, PoDynamicViewComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(4);
    const _r2 = i0.ɵɵreference(2);
    i0.ɵɵclassProp("po-dynamic", ctx_r0.hasContainers);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r0.hasContainers ? _r4 : _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(4, _c0$x, ctx_r0.hasContainers ? ctx_r0.containerFields : ctx_r0.visibleFields));
} }
function PoDynamicViewComponent_ng_template_1_ng_template_0_po_divider_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-divider", 10);
} if (rf & 2) {
    const field_r14 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("p-label", field_r14.divider);
} }
function PoDynamicViewComponent_ng_template_1_ng_template_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoDynamicViewComponent_ng_template_1_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoDynamicViewComponent_ng_template_1_ng_template_0_po_divider_0_Template, 1, 1, "po-divider", 9)(1, PoDynamicViewComponent_ng_template_1_ng_template_0_ng_container_1_Template, 1, 0, "ng-container", 7);
} if (rf & 2) {
    const field_r14 = ctx.$implicit;
    i0.ɵɵnextContext(2);
    const _r6 = i0.ɵɵreference(6);
    const _r8 = i0.ɵɵreference(8);
    const _r10 = i0.ɵɵreference(10);
    i0.ɵɵproperty("ngIf", field_r14 == null ? null : field_r14.divider == null ? null : field_r14.divider.trim());
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", !field_r14.tag && !field_r14.image ? _r6 : !field_r14.image ? _r8 : _r10)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0$x, field_r14));
} }
function PoDynamicViewComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoDynamicViewComponent_ng_template_1_ng_template_0_Template, 2, 5, "ng-template", 8);
} if (rf & 2) {
    const fields_r12 = ctx.$implicit;
    i0.ɵɵproperty("ngForOf", fields_r12);
} }
function PoDynamicViewComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-dynamic-container", 11);
} if (rf & 2) {
    const fields_r18 = ctx.$implicit;
    i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(2);
    i0.ɵɵproperty("p-fields", fields_r18)("p-content", _r2);
} }
function PoDynamicViewComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-info", 12);
} if (rf & 2) {
    const field_r19 = ctx.$implicit;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", field_r19.cssClass)("p-label", field_r19.label)("p-value", ctx_r5.setFieldValue(field_r19));
} }
function PoDynamicViewComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tag", 13);
} if (rf & 2) {
    const field_r20 = ctx.$implicit;
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", field_r20.cssClass)("p-color", field_r20.color)("p-icon", field_r20.icon)("p-inverse", field_r20.inverse)("p-label", field_r20.label)("p-value", ctx_r7.setFieldValue(field_r20));
} }
function PoDynamicViewComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-image", 14);
} if (rf & 2) {
    const field_r21 = ctx.$implicit;
    i0.ɵɵproperty("p-alt", field_r21.alt)("p-height", field_r21.height)("p-src", field_r21.value);
} }
/**
 * @docsExtends PoDynamicViewBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.service.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-container" title="PO Dynamic View - Employee on load">
 *  <file name="sample-po-dynamic-view-container/sample-po-dynamic-view-container.component.html"> </file>
 *  <file name="sample-po-dynamic-view-container/sample-po-dynamic-view-container.component.ts"> </file>
 * </example>
 */
class PoDynamicViewComponent extends PoDynamicViewBaseComponent {
    initChanges;
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService, comboFilterService, multiselectFilterService) {
        super(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService, comboFilterService, multiselectFilterService);
    }
    ngOnChanges(changes) {
        if (this.load && !this.initChanges) {
            this.initChanges = false;
        }
        else {
            this.initChanges = true;
        }
        if ((changes.fields || changes.value || changes.showAllValue) && this.initChanges) {
            this.visibleFields = this.getVisibleFields();
            this.setContainerFields();
        }
    }
    ngOnInit() {
        if (this.load) {
            this.updateValuesAndFieldsOnLoad().finally(() => {
                this.setContainerFields();
            });
        }
    }
    setFieldValue(field) {
        if (field.options) {
            const selectedOption = field.options.find(option => option.value === field.value);
            return selectedOption ? selectedOption.label : field.value;
        }
        else if (field.type === 'boolean' && 'booleanTrue' in field && 'booleanFalse' in field) {
            return field.value ? field.booleanTrue : field.booleanFalse;
        }
        else {
            return field.value;
        }
    }
    async getValuesAndFieldsFromLoad() {
        let valueAndFieldsFromLoad;
        if (typeof this.load === 'string') {
            valueAndFieldsFromLoad = await this.dynamicViewService.onLoad(this.load, this.value);
        }
        else if (typeof this.load === 'function') {
            valueAndFieldsFromLoad = this.load();
        }
        return valueAndFieldsFromLoad || {};
    }
    getVisibleFields() {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    }
    setFieldOnLoad(fieldOnLoad) {
        const index = this.fields.findIndex(field => field.property === fieldOnLoad.property);
        if (index >= 0) {
            this.fields[index] = { ...this.fields[index], ...fieldOnLoad };
        }
        else {
            this.fields.push({ ...fieldOnLoad });
        }
    }
    setFieldsOnLoad(fields) {
        if (fields) {
            fields.forEach(fieldOnLoad => {
                this.setFieldOnLoad(fieldOnLoad);
            });
        }
    }
    setValueOnLoad(newValue) {
        Object.assign(this.value, newValue);
    }
    async updateValuesAndFieldsOnLoad() {
        const { value, fields } = await this.getValuesAndFieldsFromLoad();
        this.setValueOnLoad(value);
        this.setFieldsOnLoad(fields);
        this.visibleFields = this.getVisibleFields();
        this.initChanges = true;
    }
    static ɵfac = function PoDynamicViewComponent_Factory(t) { return new (t || PoDynamicViewComponent)(i0.ɵɵdirectiveInject(i1.CurrencyPipe), i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(PoTimePipe), i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicViewService), i0.ɵɵdirectiveInject(PoComboFilterService), i0.ɵɵdirectiveInject(PoMultiselectFilterService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicViewComponent, selectors: [["po-dynamic-view"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 11, vars: 1, consts: [["class", "po-row", 3, "po-dynamic", 4, "ngIf"], ["poContent", ""], ["poContentContainer", ""], ["poInfo", ""], ["poTag", ""], ["poImage", ""], [1, "po-row"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["ngFor", "", 3, "ngForOf"], ["class", "po-sm-12", 3, "p-label", 4, "ngIf"], [1, "po-sm-12", 3, "p-label"], [3, "p-fields", "p-content"], [3, "ngClass", "p-label", "p-value"], [3, "ngClass", "p-color", "p-icon", "p-inverse", "p-label", "p-value"], [3, "p-alt", "p-height", "p-src"]], template: function PoDynamicViewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicViewComponent_div_0_Template, 2, 6, "div", 0)(1, PoDynamicViewComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(3, PoDynamicViewComponent_ng_template_3_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(5, PoDynamicViewComponent_ng_template_5_Template, 1, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor)(7, PoDynamicViewComponent_ng_template_7_Template, 1, 6, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor)(9, PoDynamicViewComponent_ng_template_9_Template, 1, 3, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.visibleFields.length);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoDividerComponent, PoInfoComponent, PoTagComponent, PoImageComponent, PoDynamicContainerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewComponent, [{
        type: Component,
        args: [{ selector: 'po-dynamic-view', template: "<div class=\"po-row\" [class.po-dynamic]=\"hasContainers\" *ngIf=\"visibleFields.length\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      hasContainers ? poContentContainer : poContent;\n      context: { $implicit: hasContainers ? containerFields : visibleFields }\n    \"\n  ></ng-container>\n</div>\n\n<ng-template #poContent let-fields>\n  <ng-template ngFor let-field [ngForOf]=\"fields\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n    <ng-container\n      *ngTemplateOutlet=\"\n        !field.tag && !field.image ? poInfo : !field.image ? poTag : poImage;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-template>\n</ng-template>\n\n<ng-template #poContentContainer let-fields>\n  <po-dynamic-container [p-fields]=\"fields\" [p-content]=\"poContent\"></po-dynamic-container>\n</ng-template>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"setFieldValue(field)\"> </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag\n    [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"setFieldValue(field)\"\n  >\n  </po-tag>\n</ng-template>\n\n<ng-template #poImage let-field>\n  <po-image [p-alt]=\"field.alt\" [p-height]=\"field.height\" [p-src]=\"field.value\"> </po-image>\n</ng-template>\n" }]
    }], () => [{ type: i1.CurrencyPipe }, { type: i1.DatePipe }, { type: i1.DecimalPipe }, { type: PoTimePipe }, { type: i1.TitleCasePipe }, { type: PoDynamicViewService }, { type: PoComboFilterService }, { type: PoMultiselectFilterService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoDynamicViewComponent, { className: "PoDynamicViewComponent", filePath: "lib/components/po-dynamic/po-dynamic-view/po-dynamic-view.component.ts", lineNumber: 42 }); })();

/**
 * @description
 *
 * Módulo do componente po-image
 */
class PoImageModule {
    static ɵfac = function PoImageModule_Factory(t) { return new (t || PoImageModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoImageModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoContainerModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoImageModule, [{
        type: NgModule,
        args: [{
                declarations: [PoImageComponent],
                imports: [CommonModule, PoContainerModule, NgOptimizedImage],
                exports: [PoImageComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoImageModule, { declarations: [PoImageComponent], imports: [CommonModule, PoContainerModule, NgOptimizedImage], exports: [PoImageComponent] }); })();

class PoDynamicModule {
    static ɵfac = function PoDynamicModule_Factory(t) { return new (t || PoDynamicModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDynamicModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
            CurrencyPipe,
            DatePipe,
            DecimalPipe,
            PoTimePipe,
            TitleCasePipe,
            PoDynamicFormLoadService,
            PoDynamicFormValidationService,
            PoDynamicViewService,
            PoComboFilterService,
            PoMultiselectFilterService
        ], imports: [CommonModule,
            FormsModule,
            PoDividerModule,
            PoInfoModule,
            PoFieldModule,
            PoTagModule,
            PoTimeModule,
            PoImageModule,
            PoContainerModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    PoDividerModule,
                    PoInfoModule,
                    PoFieldModule,
                    PoTagModule,
                    PoTimeModule,
                    PoImageModule,
                    PoContainerModule
                ],
                declarations: [
                    PoDynamicFormComponent,
                    PoDynamicFormFieldsComponent,
                    PoDynamicViewComponent,
                    PoDynamicContainerComponent
                ],
                exports: [PoDynamicFormComponent, PoDynamicViewComponent, PoDynamicContainerComponent],
                providers: [
                    CurrencyPipe,
                    DatePipe,
                    DecimalPipe,
                    PoTimePipe,
                    TitleCasePipe,
                    PoDynamicFormLoadService,
                    PoDynamicFormValidationService,
                    PoDynamicViewService,
                    PoComboFilterService,
                    PoMultiselectFilterService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDynamicModule, { declarations: [PoDynamicFormComponent,
        PoDynamicFormFieldsComponent,
        PoDynamicViewComponent,
        PoDynamicContainerComponent], imports: [CommonModule,
        FormsModule,
        PoDividerModule,
        PoInfoModule,
        PoFieldModule,
        PoTagModule,
        PoTimeModule,
        PoImageModule,
        PoContainerModule], exports: [PoDynamicFormComponent, PoDynamicViewComponent, PoDynamicContainerComponent] }); })();
i0.ɵɵsetComponentScope(PoDynamicFormComponent, [i1.NgIf, i2$1.ɵNgNoValidate, i2$1.NgControlStatusGroup, i2$1.NgForm, PoDynamicFormFieldsComponent], []);

// Padding existente nas bordas do componente
const PoGaugePadding = 24;
// Altura mínima aceita pelo po-gauge.
const poGaugeMinHeight = 300;
// Chamado de coroa circular, refere-se à área entre os círculos externos e internos e que define a espessura do gauge.
const PoGaugeThickness = 16;
// A medida referente ao quanto o ponteiro se sobressai em relação ao gráfico. É necessário esse desconto no viewBox para não haver overflow.
const PoGaugePointerEnd = 4;
// Base default para cálculo da angulação final. Para gauge simples, seria como se fosse 100%.
const poGaugeTotalValueDefault = 100;

/**
 * @description
 *
 * O componente `po-gauge` provê a representação de um valor através de um arco. É muito comum, por exemplo, para demonstrar o desempenho ou progresso de algo.
 * O `po-gauge` possui dois tipos de tratamentos:
 * - É possível demonstrar um dado percentual simples em conjunto com uma descrição resumida em seu interior;
 * - Para um demonstrativo mais elaborado, consegue-se definir alcances em cores, um breve texto descritivo e um ponteiro indicando o valor desejado.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
class PoGaugeBaseComponent {
    colorService;
    _description;
    _height = poGaugeMinHeight;
    _ranges = [];
    _title;
    _value;
    /**
     * @optional
     *
     * @description
     *
     * Define o texto que será exibido no gauge.
     * Há dois posicionamentos para ele:
     * - Se houver definição para `p-ranges`, o descritivo será exibido no topo do container, ficando acima do gauge;
     * - Na ausência de `p-ranges`, será incorporado dentro do arco do gauge, e abaixo de `p-value`.
     *
     * Para ambos os casos, se o conteúdo ultrapassar a área designada, serão geradas automaticamente reticências.
     * No entanto, será possível visualizar a mensagem através de um tooltip no passar do mouse sobre o texto.
     *
     * > Para uma melhor experiência do usuário, é recomendado um descritivo breve e com poucas palavras.
     * Desta forma evita-se o *overflow* do texto.
     */
    set description(value) {
        this._description = value;
        this.svgContainerSize();
    }
    get description() {
        return this._description;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gauge.
     *
     * O valor mínimo aceito é 300px.
     *
     * @default `300px`
     */
    set height(value) {
        this._height = this.setGaugeHeight(value);
        this.svgContainerSize();
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição para o alcance de cores. Ao adicionar pelo menos um item na lista,
     * incorpora-se o ponteiro que assinala o valor passado em `p-value`.
     * Se o valor de `p-value` for inferior ao mínimo valor definido em `PoGaugeRanges.from`, o domínio mínimo do gauge será `p-value`.
     * A mesma regra prevalece para valores máximos.
     */
    set ranges(value) {
        this._ranges = Array.isArray(value) ? this.verifyColors(value) : [];
        this.svgContainerSize();
    }
    get ranges() {
        return this._ranges;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o título do gauge.
     */
    set title(value) {
        this._title = value;
        this.svgContainerSize();
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor referente ao valor da série. Seu comportamento segue a seguintes regras:
     *
     * - Sem `p-ranges`: Os valores passados para `p-value` e `p-description` serão centralizados no interior do arco.
     * A base do valor será percentual tendo como base os alcances entre zero e 100%. Se passado um valor superior a 100,
     * A colorização do gauge será completa e o valor passado será exibido no interior do arco.
     * - Com `p-ranges`: A descrição será exibida acima do gauge e haverá um ponteiro marcando o valor passado em `p-value`.
     * Considerando que o alcance em `ranges` é aberto, então a escala de `p-value` será em relação ao menor/maior alcance
     * absoluto definido em `p-ranges`.
     * Se passado um `p-value` inferior em relação ao mínimo valor definido em `p-ranges`, o domínio mínimo do gauge partirá de `p-value`.
     * A mesma regra prevalece para valores máximos.
     *
     */
    set value(gaugeValue) {
        if (typeof gaugeValue === 'number' || (typeof gaugeValue === 'string' && gaugeValue.trim())) {
            const value = !isNaN(gaugeValue) ? Number(gaugeValue) : undefined;
            this._value = value;
        }
        else {
            this._value = undefined;
        }
    }
    get value() {
        return this._value;
    }
    constructor(colorService) {
        this.colorService = colorService;
    }
    verifyColors(ranges) {
        return this.colorService.getColors(ranges);
    }
    setGaugeHeight(height) {
        const gaugeHeight = convertToInt(height);
        return gaugeHeight && gaugeHeight > poGaugeMinHeight ? gaugeHeight : poGaugeMinHeight;
    }
    static ɵfac = function PoGaugeBaseComponent_Factory(t) { return new (t || PoGaugeBaseComponent)(i0.ɵɵdirectiveInject(PoColorService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoGaugeBaseComponent, inputs: { description: [i0.ɵɵInputFlags.None, "p-description", "description"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], ranges: [i0.ɵɵInputFlags.None, "p-ranges", "ranges"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeBaseComponent, [{
        type: Directive
    }], () => [{ type: PoColorService }], { description: [{
            type: Input,
            args: ['p-description']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], ranges: [{
            type: Input,
            args: ['p-ranges']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();

function PoGaugeTitleComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r0.title);
} }
class PoGaugeTitleComponent {
    title;
    static ɵfac = function PoGaugeTitleComponent_Factory(t) { return new (t || PoGaugeTitleComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeTitleComponent, selectors: [["po-gauge-title"]], inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"] }, decls: 1, vars: 1, consts: [["class", "po-gauge-title", 4, "ngIf"], [1, "po-gauge-title"]], template: function PoGaugeTitleComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoGaugeTitleComponent_div_0_Template, 2, 1, "div", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.title);
        } }, dependencies: [i1.NgIf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeTitleComponent, [{
        type: Component,
        args: [{ selector: 'po-gauge-title', template: "<div *ngIf=\"title\" class=\"po-gauge-title\">{{ title }}</div>\n" }]
    }], null, { title: [{
            type: Input,
            args: ['p-title']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugeTitleComponent, { className: "PoGaugeTitleComponent", filePath: "lib/components/po-gauge/po-gauge-title/po-gauge-title.component.ts", lineNumber: 7 }); })();

function PoGaugeLegendComponent_li_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0$w = a0 => ({ $implicit: a0 });
function PoGaugeLegendComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 4);
    i0.ɵɵtemplate(1, PoGaugeLegendComponent_li_1_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementStart(2, "p", 6);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const range_r5 = ctx.$implicit;
    i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", (range_r5.color == null ? null : range_r5.color.includes("po-color")) ? _r2 : _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0$w, range_r5));
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(range_r5.label);
} }
function PoGaugeLegendComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 7);
} if (rf & 2) {
    const range_r7 = ctx.$implicit;
    i0.ɵɵclassMap(range_r7.color);
} }
function PoGaugeLegendComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 7);
} if (rf & 2) {
    const range_r8 = ctx.$implicit;
    i0.ɵɵstyleProp("background", range_r8.color);
} }
class PoGaugeLegendComponent {
    _ranges;
    set ranges(value) {
        this._ranges = value.length ? this.filterLabel(value) : [];
    }
    get ranges() {
        return this._ranges;
    }
    constructor() { }
    trackBy(index) {
        return index;
    }
    filterLabel(ranges) {
        return ranges.filter(range => range.label);
    }
    static ɵfac = function PoGaugeLegendComponent_Factory(t) { return new (t || PoGaugeLegendComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeLegendComponent, selectors: [["po-gauge-legend"]], inputs: { ranges: [i0.ɵɵInputFlags.None, "p-ranges", "ranges"] }, decls: 6, vars: 2, consts: [[1, "po-gauge-legend"], ["class", "po-gauge-legend-item", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["colorpalette", ""], ["colorstyle", ""], [1, "po-gauge-legend-item"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-gauge-legend-text"], [1, "po-gauge-legend-square"]], template: function PoGaugeLegendComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "ul", 0);
            i0.ɵɵtemplate(1, PoGaugeLegendComponent_li_1_Template, 4, 5, "li", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoGaugeLegendComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(4, PoGaugeLegendComponent_ng_template_4_Template, 1, 2, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.ranges)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf, i1.NgTemplateOutlet], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeLegendComponent, [{
        type: Component,
        args: [{ selector: 'po-gauge-legend', template: "<ul class=\"po-gauge-legend\">\n  <li class=\"po-gauge-legend-item\" *ngFor=\"let range of ranges; trackBy: trackBy\">\n    <ng-container\n      *ngTemplateOutlet=\"range.color?.includes('po-color') ? colorpalette : colorstyle; context: { $implicit: range }\"\n    ></ng-container>\n    <p class=\"po-gauge-legend-text\">{{ range.label }}</p>\n  </li>\n</ul>\n\n<ng-template #colorpalette let-range>\n  <span class=\"po-gauge-legend-square\" [class]=\"range.color\"></span>\n</ng-template>\n\n<ng-template #colorstyle let-range>\n  <span class=\"po-gauge-legend-square\" [style.background]=\"range.color\"></span>\n</ng-template>\n" }]
    }], () => [], { ranges: [{
            type: Input,
            args: ['p-ranges']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugeLegendComponent, { className: "PoGaugeLegendComponent", filePath: "lib/components/po-gauge/po-gauge-legend/po-gauge-legend.component.ts", lineNumber: 9 }); })();

const _c0$v = ["po-gauge-path", ""];
function PoGaugePathComponent__svg_path_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelement(0, "path");
} if (rf & 2) {
    const range_r1 = ctx.$implicit;
    i0.ɵɵclassMap((range_r1 == null ? null : range_r1.color == null ? null : range_r1.color.includes("po-color")) ? range_r1.color : "");
    i0.ɵɵattribute("d", range_r1 == null ? null : range_r1.coordinates)("fill", range_r1 == null ? null : range_r1.color);
} }
class PoGaugePathComponent {
    baseCoordinates;
    rangesCoordinates;
    constructor() { }
    trackBy(index) {
        return index;
    }
    static ɵfac = function PoGaugePathComponent_Factory(t) { return new (t || PoGaugePathComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugePathComponent, selectors: [["", "po-gauge-path", ""]], inputs: { baseCoordinates: [i0.ɵɵInputFlags.None, "p-base-coordinates", "baseCoordinates"], rangesCoordinates: [i0.ɵɵInputFlags.None, "p-ranges-coordinates", "rangesCoordinates"] }, attrs: _c0$v, decls: 3, vars: 3, consts: [[1, "po-gauge-base"], [3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"]], template: function PoGaugePathComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵelement(1, "path", 0);
            i0.ɵɵtemplate(2, PoGaugePathComponent__svg_path_2_Template, 1, 4, "path", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵattribute("d", ctx.baseCoordinates == null ? null : ctx.baseCoordinates.coordinates);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.rangesCoordinates)("ngForTrackBy", ctx.trackBy);
        } }, dependencies: [i1.NgForOf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugePathComponent, [{
        type: Component,
        args: [{ selector: '[po-gauge-path]', template: "<svg:g>\n  <svg:path\n    class=\"po-gauge-base\"\n    [attr.d]=\"baseCoordinates?.coordinates\">\n  </svg:path> \n\n  <svg:path *ngFor=\"let range of rangesCoordinates; trackBy: trackBy\"\n    [class]=\"range?.color?.includes('po-color') ? range.color : ''\"\n    [attr.d]=\"range?.coordinates\"\n    [attr.fill]=\"range?.color\">\n  </svg:path> \n</svg:g>\n" }]
    }], () => [], { baseCoordinates: [{
            type: Input,
            args: ['p-base-coordinates']
        }], rangesCoordinates: [{
            type: Input,
            args: ['p-ranges-coordinates']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugePathComponent, { className: "PoGaugePathComponent", filePath: "lib/components/po-gauge/po-gauge-svg/po-gauge-path/po-gauge-path.component.ts", lineNumber: 9 }); })();

const _c0$u = ["pointer"];
const _c1$b = ["po-gauge-pointer", ""];
class PoGaugePointerComponent {
    renderer;
    pointer;
    radiusScale;
    _coordinates;
    afterViewInit = false;
    set coordinates(value) {
        this._coordinates = value;
        if (this._coordinates?.radius) {
            this.calculateRadiusScale(this.coordinates.radius);
        }
        if (this._coordinates?.hasOwnProperty('pointerDegrees') && this.afterViewInit) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
    }
    get coordinates() {
        return this._coordinates;
    }
    constructor(renderer) {
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        if (this._coordinates?.pointerDegrees) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
        this.afterViewInit = true;
    }
    calculateRadiusScale(radius) {
        const scale = radius / 20;
        const maxScaleValue = 24;
        this.radiusScale = scale < maxScaleValue ? scale : maxScaleValue;
    }
    applyPointerRotation(degrees) {
        this.renderer.setStyle(this.pointer.nativeElement, 'transformOrigin', `${this.coordinates.radius}px ${this.coordinates.radius}px`);
        this.renderer.setStyle(this.pointer.nativeElement, 'transform', `rotate(${degrees}deg)`);
    }
    static ɵfac = function PoGaugePointerComponent_Factory(t) { return new (t || PoGaugePointerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugePointerComponent, selectors: [["", "po-gauge-pointer", ""]], viewQuery: function PoGaugePointerComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$u, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pointer = _t.first);
        } }, inputs: { coordinates: [i0.ɵɵInputFlags.None, "p-coordinates", "coordinates"] }, attrs: _c1$b, decls: 4, vars: 4, consts: [[1, "po-gauge-pointer"], ["pointer", ""], [1, "po-gauge-pointer-circle"]], template: function PoGaugePointerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵelement(1, "path", 0, 1)(3, "circle", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵattribute("d", ctx.coordinates == null ? null : ctx.coordinates.coordinates);
            i0.ɵɵadvance(2);
            i0.ɵɵattribute("cx", ctx.coordinates == null ? null : ctx.coordinates.radius)("cy", ctx.coordinates == null ? null : ctx.coordinates.radius)("r", ctx.radiusScale);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugePointerComponent, [{
        type: Component,
        args: [{ selector: '[po-gauge-pointer]', template: "<svg:g>\n  <svg:path #pointer\n    class=\"po-gauge-pointer\"\n    [attr.d]=\"coordinates?.coordinates\"\n  >\n  </svg:path> \n\n  <svg:circle \n    class=\"po-gauge-pointer-circle\" \n    [attr.cx]=\"coordinates?.radius\" \n    [attr.cy]=\"coordinates?.radius\" \n    [attr.r]=\"radiusScale\"\n  >\n  </svg:circle>\n</svg:g>" }]
    }], () => [{ type: i0.Renderer2 }], { pointer: [{
            type: ViewChild,
            args: ['pointer']
        }], coordinates: [{
            type: Input,
            args: ['p-coordinates']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugePointerComponent, { className: "PoGaugePointerComponent", filePath: "lib/components/po-gauge/po-gauge-svg/po-gauge-pointer/po-gauge-pointer.component.ts", lineNumber: 8 }); })();

function PoGaugeSvgComponent__svg_svg_0__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelement(0, "g", 4);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-coordinates", ctx_r1.pointerCoordinates);
} }
function PoGaugeSvgComponent__svg_svg_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 1);
    i0.ɵɵelement(1, "g", 2);
    i0.ɵɵtemplate(2, PoGaugeSvgComponent__svg_svg_0__svg_g_2_Template, 1, 1, "g", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵattribute("viewBox", ctx_r0.viewBox)("height", ctx_r0.container == null ? null : ctx_r0.container.height);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-base-coordinates", ctx_r0.baseCoordinates)("p-ranges-coordinates", ctx_r0.coordinates);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.hasRanges);
} }
const poGaugeStartAngle = -Math.PI;
class PoGaugeSvgComponent {
    container;
    ranges;
    value;
    addSvgElement = false;
    baseCoordinates;
    coordinates;
    pointerCoordinates;
    viewBox;
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngOnChanges(changes) {
        if ((this.container && changes.value) || (this.container && changes.ranges) || this.container) {
            this.setCoordinates(this.value, this.ranges, this.container);
        }
    }
    setCoordinates(value, ranges, container) {
        const { height } = container;
        // Adiciona elemento svg somente após calcular a altura do container pois o svg tem altura default de 150px.
        this.addSvgElement = true;
        this.setViewBox(height);
        this.setBaseCoordinates(height);
        if (!ranges.length) {
            this.setSingleRangeCoordinates(height, value);
            return;
        }
        this.setRangesCoordinates(height, value, ranges);
    }
    setBaseCoordinates(height) {
        const endAngleRadian = 0;
        const coordinates = this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian);
        this.baseCoordinates = { coordinates };
    }
    setRangesCoordinates(height, value = 0, ranges) {
        const { minRange, maxRange } = this.calculateMinAndMaxValues(ranges);
        const minValue = value < minRange ? value : minRange;
        const maxValue = value > maxRange ? value : maxRange;
        this.setPointerCoordinates(height, value, maxValue, minValue);
        // `.reverse()` no término da iteração para tratar a sobreposicão correta das bordas arredondadas dos ranges.
        const rangesCoordinates = ranges
            .map((range) => {
            const from = range.from ?? 0;
            const to = range.to ?? maxRange;
            const startAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(from, maxValue, minValue);
            const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(to, maxValue, minValue);
            const coordinates = this.calculateCoordinates(height, startAngleRadian, endAngleRadian);
            return { coordinates, color: range.color };
        })
            .reverse();
        this.coordinates = rangesCoordinates;
    }
    setSingleRangeCoordinates(height, value) {
        const verifiedValue = value > 100 ? 100 : value;
        const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(verifiedValue, poGaugeTotalValueDefault);
        const coordinates = value > 0 ? this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian) : undefined;
        const color = PoDefaultColors[0][0];
        this.coordinates = [{ coordinates, color }];
    }
    setPointerCoordinates(height, value, maxValue, minValue) {
        const coordinates = this.calculatePointerInitialCoordinates(height, poGaugeStartAngle);
        const pointerDegrees = this.pointerRotation(value, maxValue, minValue);
        this.pointerCoordinates = { ...coordinates, pointerDegrees };
    }
    pointerRotation(value, maxValue, minValue) {
        const percent = this.convertValueToPercentage(value, maxValue, minValue);
        // valores referentes às angulações mínimas e máximas do ponteiro.
        const minRotation = 0;
        const maxRotation = 180;
        return (percent * (maxRotation - minRotation)) / 100 + minRotation;
    }
    calculatePointerInitialCoordinates(height, startAngleRadian) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        // Valor que representa a escala do ponteiro para plotagem.
        const scale = 40;
        const pointerScaledWidth = radius / scale;
        const pointerScaledBorderRadius = radius / (scale * 2);
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const targetX = radius + cosAlpha * radius;
        const targetY = radius + sinAlpha * radius;
        const startX = radius;
        const startY = radius + pointerScaledWidth;
        const endX = radius;
        const endY = radius - pointerScaledWidth;
        const coordinates = [
            'M',
            startX,
            startY,
            'L',
            targetX,
            targetY + pointerScaledBorderRadius,
            'A',
            1,
            1,
            0,
            '0,1',
            targetX,
            targetY - pointerScaledBorderRadius,
            'L',
            endX,
            endY,
            'Z'
        ].join(' ');
        return { coordinates, radius };
    }
    calculateCoordinates(height, startAngleRadian, endAngleRadian) {
        // Subtrai altura pelo excedente ponteiro em relação ao gráfico, pela metade do valor da coroa circular.
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        const innerRadius = radius - PoGaugeThickness;
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const sinBeta = Math.sin(endAngleRadian);
        const cosBeta = Math.cos(endAngleRadian);
        const startX = Math.round(radius + cosAlpha * radius);
        const startY = Math.round(radius + sinAlpha * radius);
        const endX = Math.round(radius + cosBeta * radius);
        const endY = Math.round(radius + sinBeta * radius);
        const startInnerX = Math.round(radius + cosAlpha * innerRadius);
        const startInnerY = Math.round(radius + sinAlpha * innerRadius);
        const endInnerX = Math.round(radius + cosBeta * innerRadius);
        const endInnerY = Math.round(radius + sinBeta * innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            '0,1',
            endX,
            endY,
            'A',
            1,
            1,
            0,
            '0,1',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            '0,0',
            startInnerX,
            startInnerY,
            'A',
            1,
            1,
            0,
            '0,1',
            startX,
            startY,
            'Z'
        ].join(' ');
    }
    calculateAngleRadius(value, maxValue, minValue = 0) {
        const angle = ((value - minValue) / (maxValue - minValue)) * (Math.PI * 2);
        return angle / 2;
    }
    convertValueToPercentage(value, maxValue, minValue) {
        return ((value - minValue) / (maxValue - minValue)) * 100;
    }
    setViewBox(height) {
        const width = this.calculateDiameter(height);
        this.viewBox = `0 ${-PoGaugePointerEnd} ${width} ${height}`;
    }
    calculateDiameter(height) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        return radius + Math.cos(0) * radius;
    }
    calculateMinAndMaxValues(ranges) {
        const minRange = this.getDomain(ranges, 'min');
        const maxRange = this.getDomain(ranges, 'max');
        return {
            minRange: this.verifyIfFloatOrInteger(minRange) ? minRange : 0,
            maxRange: this.verifyIfFloatOrInteger(maxRange) ? maxRange : 100
        };
    }
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    getDomain(ranges, type) {
        const rangeType = { min: 'from', max: 'to' };
        return Math[type](...ranges.map(range => range[rangeType[type]]));
    }
    static ɵfac = function PoGaugeSvgComponent_Factory(t) { return new (t || PoGaugeSvgComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeSvgComponent, selectors: [["po-gauge-svg"]], inputs: { container: [i0.ɵɵInputFlags.None, "p-container", "container"], ranges: [i0.ɵɵInputFlags.None, "p-ranges", "ranges"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "po-gauge-svg", "preserveAspectRatio", "xMidYMax meet", "width", "100%", 4, "ngIf"], ["preserveAspectRatio", "xMidYMax meet", "width", "100%", 1, "po-gauge-svg"], ["po-gauge-path", "", 3, "p-base-coordinates", "p-ranges-coordinates"], ["po-gauge-pointer", "", 3, "p-coordinates", 4, "ngIf"], ["po-gauge-pointer", "", 3, "p-coordinates"]], template: function PoGaugeSvgComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoGaugeSvgComponent__svg_svg_0_Template, 3, 5, "svg", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.addSvgElement);
        } }, dependencies: [i1.NgIf, PoGaugePathComponent, PoGaugePointerComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeSvgComponent, [{
        type: Component,
        args: [{ selector: 'po-gauge-svg', template: "<svg:svg\n  *ngIf=\"addSvgElement\"\n  class=\"po-gauge-svg\"\n  preserveAspectRatio=\"xMidYMax meet\"\n  width=\"100%\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.height]=\"container?.height\"\n>\n  <!-- GAUGE PATHS -->\n  <svg:g po-gauge-path [p-base-coordinates]=\"baseCoordinates\" [p-ranges-coordinates]=\"coordinates\"></svg:g>\n\n  <!-- GAUGE POINTER -->\n  <svg:g *ngIf=\"hasRanges\" po-gauge-pointer [p-coordinates]=\"pointerCoordinates\"></svg:g>\n</svg:svg>\n" }]
    }], null, { container: [{
            type: Input,
            args: ['p-container']
        }], ranges: [{
            type: Input,
            args: ['p-ranges']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugeSvgComponent, { className: "PoGaugeSvgComponent", filePath: "lib/components/po-gauge/po-gauge-svg/po-gauge-svg.component.ts", lineNumber: 17 }); })();

const _c0$t = ["descriptionText"];
function PoGaugeDescriptionComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoGaugeDescriptionComponent_ng_template_2_p_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "p", 5, 6);
    i0.ɵɵlistener("mouseenter", function PoGaugeDescriptionComponent_ng_template_2_p_0_Template_p_mouseenter_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.verifyIfHasEllipsis()); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-tooltip", ctx_r5.tooltip);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r5.description, " ");
} }
function PoGaugeDescriptionComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoGaugeDescriptionComponent_ng_template_2_p_0_Template, 3, 2, "p", 4);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r1.description);
} }
function PoGaugeDescriptionComponent_ng_template_4_p_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1("", ctx_r9.value, "%");
} }
function PoGaugeDescriptionComponent_ng_template_4_p_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "p", 11, 6);
    i0.ɵɵlistener("mouseenter", function PoGaugeDescriptionComponent_ng_template_4_p_2_Template_p_mouseenter_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r12.verifyIfHasEllipsis()); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-tooltip", ctx_r10.tooltip);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r10.description, " ");
} }
function PoGaugeDescriptionComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtemplate(1, PoGaugeDescriptionComponent_ng_template_4_p_1_Template, 2, 1, "p", 8)(2, PoGaugeDescriptionComponent_ng_template_4_p_2_Template, 3, 2, "p", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("width", ctx_r3.descriptionWidth, "px");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r3.isValidValue);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r3.description);
} }
class PoGaugeDescriptionComponent {
    description;
    hasRanges;
    descriptionWidth;
    value;
    descriptionText;
    tooltip;
    get isValidValue() {
        return this.value || this.value === 0;
    }
    verifyIfHasEllipsis() {
        const { offsetWidth, scrollWidth } = this.descriptionText.nativeElement;
        // O tooltip só exibe se adicionado dentro de setTimeout.
        setTimeout(() => {
            this.tooltip = offsetWidth < scrollWidth ? this.description : undefined;
        });
    }
    static ɵfac = function PoGaugeDescriptionComponent_Factory(t) { return new (t || PoGaugeDescriptionComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeDescriptionComponent, selectors: [["po-gauge-description"]], viewQuery: function PoGaugeDescriptionComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$t, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.descriptionText = _t.first);
        } }, inputs: { description: [i0.ɵɵInputFlags.None, "p-description", "description"], hasRanges: [i0.ɵɵInputFlags.None, "p-has-ranges", "hasRanges"], descriptionWidth: [i0.ɵɵInputFlags.None, "p-description-width", "descriptionWidth"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, decls: 6, vars: 1, consts: [[1, "po-gauge-description"], [4, "ngTemplateOutlet"], ["rangesDescription", ""], ["percentageDescription", ""], ["class", "po-gauge-description-text po-gauge-description-upper-text", 3, "p-tooltip", "mouseenter", 4, "ngIf"], [1, "po-gauge-description-text", "po-gauge-description-upper-text", 3, "p-tooltip", "mouseenter"], ["descriptionText", ""], ["tabindex", "0", 1, "po-gauge-description-bottom"], ["class", "po-gauge-description-bottom-value", 4, "ngIf"], ["class", "po-gauge-description-text po-gauge-description-bottom-text", 3, "p-tooltip", "mouseenter", 4, "ngIf"], [1, "po-gauge-description-bottom-value"], [1, "po-gauge-description-text", "po-gauge-description-bottom-text", 3, "p-tooltip", "mouseenter"]], template: function PoGaugeDescriptionComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoGaugeDescriptionComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoGaugeDescriptionComponent_ng_template_2_Template, 1, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor)(4, PoGaugeDescriptionComponent_ng_template_4_Template, 3, 4, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(3);
            const _r4 = i0.ɵɵreference(5);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngTemplateOutlet", ctx.hasRanges ? _r2 : _r4);
        } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeDescriptionComponent, [{
        type: Component,
        args: [{ selector: 'po-gauge-description', template: "<div class=\"po-gauge-description\">\n  <ng-container *ngTemplateOutlet=\"hasRanges ? rangesDescription : percentageDescription\"> </ng-container>\n</div>\n\n<ng-template #rangesDescription>\n  <p\n    #descriptionText\n    *ngIf=\"description\"\n    class=\"po-gauge-description-text po-gauge-description-upper-text\"\n    [p-tooltip]=\"tooltip\"\n    (mouseenter)=\"verifyIfHasEllipsis()\"\n  >\n    {{ description }}\n  </p>\n</ng-template>\n\n<ng-template #percentageDescription>\n  <div class=\"po-gauge-description-bottom\" tabindex=\"0\" [style.width.px]=\"descriptionWidth\">\n    <p *ngIf=\"isValidValue\" class=\"po-gauge-description-bottom-value\">{{ value }}%</p>\n    <p\n      #descriptionText\n      *ngIf=\"description\"\n      class=\"po-gauge-description-text po-gauge-description-bottom-text\"\n      [p-tooltip]=\"tooltip\"\n      (mouseenter)=\"verifyIfHasEllipsis()\"\n    >\n      {{ description }}\n    </p>\n  </div>\n</ng-template>\n" }]
    }], null, { description: [{
            type: Input,
            args: ['p-description']
        }], hasRanges: [{
            type: Input,
            args: ['p-has-ranges']
        }], descriptionWidth: [{
            type: Input,
            args: ['p-description-width']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], descriptionText: [{
            type: ViewChild,
            args: ['descriptionText']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugeDescriptionComponent, { className: "PoGaugeDescriptionComponent", filePath: "lib/components/po-gauge/po-gauge-description/po-gauge-description.component.ts", lineNumber: 7 }); })();

const _c0$s = ["descriptionEl"];
const _c1$a = ["legendEl"];
const _c2$3 = ["titleEl"];
const _c3$2 = ["svgEl"];
/**
 * @docsExtends PoGaugeBaseComponent
 *
 * @example
 *
 * <example name="po-gauge-basic" title="PO Gauge Basic">
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.html"> </file>
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.ts"> </file>
 * </example>
 * <example name="po-gauge-labs" title="PO Gauge Labs">
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.html"> </file>
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.ts"> </file>
 * </example>
 * <example name="po-gauge-summary" title="PO Gauge Summary">
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.html"> </file>
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.ts"> </file>
 * </example>
 */
class PoGaugeComponent extends PoGaugeBaseComponent {
    colorService;
    changeDetector;
    descriptionEl;
    legendEl;
    titleEl;
    svgEl;
    svgContainer;
    isLoaded = false;
    constructor(colorService, changeDetector) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
    }
    get hasElementRef() {
        return !!this.svgEl?.nativeElement.offsetWidth;
    }
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElementRef) {
            this.isLoaded = true;
            this.svgContainerSize();
        }
    }
    svgContainerSize() {
        if (this.svgEl?.nativeElement.offsetWidth) {
            this.changeDetector.detectChanges();
            const titleHeight = this.titleEl.nativeElement?.offsetHeight ?? 0;
            const legendHeight = this.legendEl.nativeElement?.offsetHeight ?? 0;
            const descriptionHeight = this.descriptionEl.nativeElement?.offsetHeight ?? 0;
            const height = this.height - titleHeight - legendHeight - descriptionHeight - PoGaugePadding * 2;
            const width = this.svgEl.nativeElement.offsetWidth;
            this.svgContainer = { width, height };
        }
    }
    static ɵfac = function PoGaugeComponent_Factory(t) { return new (t || PoGaugeComponent)(i0.ɵɵdirectiveInject(PoColorService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeComponent, selectors: [["po-gauge"]], viewQuery: function PoGaugeComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$s, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$a, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$3, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$2, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.descriptionEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.legendEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgEl = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 11, consts: [[1, "po-gauge-wrapper"], [3, "p-title"], ["titleEl", ""], [3, "p-description", "p-description-width", "p-has-ranges", "p-value"], ["descriptionEl", ""], [3, "p-container", "p-ranges", "p-value"], ["svgEl", ""], [3, "p-ranges"], ["legendEl", ""]], template: function PoGaugeComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-gauge-title", 1, 2)(3, "po-gauge-description", 3, 4)(5, "po-gauge-svg", 5, 6)(7, "po-gauge-legend", 7, 8);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-title", ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-description", ctx.description)("p-description-width", ctx.height)("p-has-ranges", ctx.hasRanges)("p-value", ctx.value);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-container", ctx.svgContainer)("p-ranges", ctx.ranges)("p-value", ctx.value);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-ranges", ctx.ranges);
        } }, dependencies: [PoGaugeTitleComponent, PoGaugeLegendComponent, PoGaugeSvgComponent, PoGaugeDescriptionComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeComponent, [{
        type: Component,
        args: [{ selector: 'po-gauge', template: "<div class=\"po-gauge-wrapper\" [style.height.px]=\"height\">\n  <po-gauge-title #titleEl [p-title]=\"title\"></po-gauge-title>\n\n  <po-gauge-description\n    #descriptionEl\n    [p-description]=\"description\"\n    [p-description-width]=\"height\"\n    [p-has-ranges]=\"hasRanges\"\n    [p-value]=\"value\"\n  ></po-gauge-description>\n\n  <po-gauge-svg #svgEl [p-container]=\"svgContainer\" [p-ranges]=\"ranges\" [p-value]=\"value\"></po-gauge-svg>\n\n  <po-gauge-legend #legendEl [p-ranges]=\"ranges\"> </po-gauge-legend>\n</div>\n" }]
    }], () => [{ type: PoColorService }, { type: i0.ChangeDetectorRef }], { descriptionEl: [{
            type: ViewChild,
            args: ['descriptionEl', { read: ElementRef }]
        }], legendEl: [{
            type: ViewChild,
            args: ['legendEl', { read: ElementRef }]
        }], titleEl: [{
            type: ViewChild,
            args: ['titleEl', { read: ElementRef }]
        }], svgEl: [{
            type: ViewChild,
            args: ['svgEl', { read: ElementRef }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGaugeComponent, { className: "PoGaugeComponent", filePath: "lib/components/po-gauge/po-gauge.component.ts", lineNumber: 32 }); })();

/**
 * @description
 * Módulo do componente po-gauge.
 */
class PoGaugeModule {
    static ɵfac = function PoGaugeModule_Factory(t) { return new (t || PoGaugeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGaugeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoTooltipModule],
                declarations: [
                    PoGaugeComponent,
                    PoGaugeTitleComponent,
                    PoGaugeLegendComponent,
                    PoGaugeSvgComponent,
                    PoGaugePathComponent,
                    PoGaugeDescriptionComponent,
                    PoGaugePointerComponent
                ],
                exports: [PoGaugeComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoGaugeModule, { declarations: [PoGaugeComponent,
        PoGaugeTitleComponent,
        PoGaugeLegendComponent,
        PoGaugeSvgComponent,
        PoGaugePathComponent,
        PoGaugeDescriptionComponent,
        PoGaugePointerComponent], imports: [CommonModule, PoTooltipModule], exports: [PoGaugeComponent] }); })();

class PoGridCellActionComponent {
    position = '';
    value;
    constructor() { }
    onKeyDownContent(event) {
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
        }
    }
    static ɵfac = function PoGridCellActionComponent_Factory(t) { return new (t || PoGridCellActionComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridCellActionComponent, selectors: [["po-grid-cell-action"]], inputs: { position: [i0.ɵɵInputFlags.None, "p-position", "position"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, decls: 5, vars: 2, consts: [["tabindex", "0", 1, "po-grid-cell-action-content", 3, "id", "keydown"], ["contentElement", ""]], template: function PoGridCellActionComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0, 1);
            i0.ɵɵlistener("keydown", function PoGridCellActionComponent_Template_div_keydown_1_listener($event) { return ctx.onKeyDownContent($event); });
            i0.ɵɵelementStart(3, "span");
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("id", ctx.position);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.value || "\u00A0");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridCellActionComponent, [{
        type: Component,
        args: [{ selector: 'po-grid-cell-action', template: "<div>\n  <div\n    #contentElement\n    [id]=\"position\"\n    class=\"po-grid-cell-action-content\"\n    tabindex=\"0\"\n    (keydown)=\"onKeyDownContent($event)\"\n  >\n    <span>{{ value || '&nbsp;' }}</span>\n  </div>\n</div>\n" }]
    }], () => [], { position: [{
            type: Input,
            args: ['p-position']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGridCellActionComponent, { className: "PoGridCellActionComponent", filePath: "lib/components/po-grid/po-grid-cell-action/po-grid-cell-action.component.ts", lineNumber: 7 }); })();

const _c0$r = ["inputElement"];
const _c1$9 = ["contentElement"];
function PoGridCellComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoGridCellComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3, 4);
    i0.ɵɵlistener("keydown", function PoGridCellComponent_ng_template_2_Template_div_keydown_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onKeyDownContent($event)); })("dblclick", function PoGridCellComponent_ng_template_2_Template_div_dblclick_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.dblclick($event)); });
    i0.ɵɵelementStart(2, "span");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate2("po-grid-cell-content po-grid-cell-", ctx_r1.align, " ", !ctx_r1.value && ctx_r1.required ? "po-grid-cell-required" : "", "");
    i0.ɵɵpropertyInterpolate("tabindex", ctx_r1.readonly ? -1 : 0);
    i0.ɵɵproperty("id", ctx_r1.position);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r1.value || "\u00A0");
} }
function PoGridCellComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "input", 5, 6);
    i0.ɵɵtwoWayListener("ngModelChange", function PoGridCellComponent_ng_template_4_Template_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); i0.ɵɵtwoWayBindingSet(ctx_r10.editValue, $event) || (ctx_r10.editValue = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("keydown.arrowup", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowup_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowdown", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowdown_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowleft", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowleft_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowright", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowright_0_listener($event) { return $event.stopPropagation(); })("keydown", function PoGridCellComponent_ng_template_4_Template_input_keydown_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onKeyDownInput($event)); })("blur", function PoGridCellComponent_ng_template_4_Template_input_blur_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.onBlurInput()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("id", ctx_r3.position);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r3.editValue);
} }
class PoGridCellComponent {
    changeDetectorRef;
    align = 'left';
    freeze = false;
    tabIndex = -1;
    position = '';
    readonly = false;
    required = false;
    valueChange = new EventEmitter();
    inputElement;
    contentElement;
    _value = '';
    edit = false;
    editValue = '';
    _width;
    set width(value) {
        this._width = value;
        if (this.freeze && !this._width) {
            this._width = 100;
        }
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    set value(value) {
        this._value = value;
        this.valueChange.emit(this._value);
    }
    get value() {
        return this._value;
    }
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
    }
    onKeyDownContent(event) {
        // BACKSPACE / DELETE
        if (!event.ctrlKey && (event.keyCode === 8 || event.keyCode === 46)) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
        }
    }
    dblclick(event) {
        event.preventDefault();
        this.onEditCell(this.value);
    }
    onBlurInput() {
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    }
    onKeyDownInput(event) {
        // ENTER
        if (event.keyCode === 13) {
            event.target.blur();
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    }
    onEditCell(value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    }
    static ɵfac = function PoGridCellComponent_Factory(t) { return new (t || PoGridCellComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridCellComponent, selectors: [["po-grid-cell"]], viewQuery: function PoGridCellComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$r, 5);
            i0.ɵɵviewQuery(_c1$9, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
        } }, inputs: { align: [i0.ɵɵInputFlags.None, "p-align", "align"], freeze: [i0.ɵɵInputFlags.None, "p-freeze", "freeze"], tabIndex: [i0.ɵɵInputFlags.None, "p-tab-index", "tabIndex"], position: [i0.ɵɵInputFlags.None, "p-position", "position"], readonly: [i0.ɵɵInputFlags.None, "p-readonly", "readonly"], required: [i0.ɵɵInputFlags.None, "p-required", "required"], width: [i0.ɵɵInputFlags.None, "p-width", "width"], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, outputs: { valueChange: "p-valueChange" }, decls: 6, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["content", ""], ["input", ""], [3, "id", "tabindex", "keydown", "dblclick"], ["contentElement", ""], [1, "po-grid-cell-input", 3, "id", "ngModel", "ngModelChange", "keydown.arrowup", "keydown.arrowdown", "keydown.arrowleft", "keydown.arrowright", "keydown", "blur"], ["inputElement", ""]], template: function PoGridCellComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵtemplate(1, PoGridCellComponent_ng_container_1_Template, 1, 0, "ng-container", 0)(2, PoGridCellComponent_ng_template_2_Template, 4, 7, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor)(4, PoGridCellComponent_ng_template_4_Template, 2, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(3);
            const _r4 = i0.ɵɵreference(5);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.edit)("ngIfThen", _r4)("ngIfElse", _r2);
        } }, dependencies: [i1.NgIf, i2$1.DefaultValueAccessor, i2$1.NgControlStatus, i2$1.NgModel], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridCellComponent, [{
        type: Component,
        args: [{ selector: 'po-grid-cell', template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div\n      #contentElement\n      [id]=\"position\"\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=\"dblclick($event)\"\n    >\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement\n      class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput()\"\n    />\n  </ng-template>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { align: [{
            type: Input,
            args: ['p-align']
        }], freeze: [{
            type: Input,
            args: ['p-freeze']
        }], tabIndex: [{
            type: Input,
            args: ['p-tab-index']
        }], position: [{
            type: Input,
            args: ['p-position']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], valueChange: [{
            type: Output,
            args: ['p-valueChange']
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement']
        }], contentElement: [{
            type: ViewChild,
            args: ['contentElement']
        }], width: [{
            type: Input,
            args: ['p-width']
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGridCellComponent, { className: "PoGridCellComponent", filePath: "lib/components/po-grid/po-grid-cell/po-grid-cell.component.ts", lineNumber: 7 }); })();

class PoGridHeadComponent {
    align = 'left';
    boolean = false;
    position = '';
    tabIndex = -1;
    title;
    _width;
    set width(value) {
        this._width = value;
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    static ɵfac = function PoGridHeadComponent_Factory(t) { return new (t || PoGridHeadComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridHeadComponent, selectors: [["po-grid-head"]], inputs: { align: [i0.ɵɵInputFlags.None, "p-align", "align"], boolean: [i0.ɵɵInputFlags.None, "p-freeze", "boolean"], position: [i0.ɵɵInputFlags.None, "p-position", "position"], tabIndex: [i0.ɵɵInputFlags.None, "p-tab-index", "tabIndex"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], width: [i0.ɵɵInputFlags.None, "p-width", "width"] }, decls: 4, vars: 6, consts: [[3, "id", "tabindex"]], template: function PoGridHeadComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0)(2, "span");
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵclassMapInterpolate1("po-grid-head-content po-grid-head-", ctx.align, "");
            i0.ɵɵpropertyInterpolate("tabindex", ctx.title ? 0 : -1);
            i0.ɵɵproperty("id", ctx.position);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.title || "\u00A0");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridHeadComponent, [{
        type: Component,
        args: [{ selector: 'po-grid-head', template: "<div>\n  <div [id]=\"position\" class=\"po-grid-head-content po-grid-head-{{ align }}\" tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n" }]
    }], null, { align: [{
            type: Input,
            args: ['p-align']
        }], boolean: [{
            type: Input,
            args: ['p-freeze']
        }], position: [{
            type: Input,
            args: ['p-position']
        }], tabIndex: [{
            type: Input,
            args: ['p-tab-index']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], width: [{
            type: Input,
            args: ['p-width']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGridHeadComponent, { className: "PoGridHeadComponent", filePath: "lib/components/po-grid/po-grid-head/po-grid-head.component.ts", lineNumber: 7 }); })();

const _c0$q = ["table"];
const _c1$8 = ["wrapper"];
function PoGridComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelement(2, "br");
    i0.ɵɵtext(3);
    i0.ɵɵelement(4, "br");
    i0.ɵɵtext(5);
    i0.ɵɵelement(6, "br")(7, "hr");
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "json");
    i0.ɵɵelement(10, "hr");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate2(" lastCell: ", ctx_r1.lastCell, " | currencyCell: ", ctx_r1.currencyCell, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate2(" lastRow: ", ctx_r1.lastRow, " | currencyRow: ", ctx_r1.currencyRow, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate2(" lastColumn: ", ctx_r1.lastColumn, " | currencyColumn: ", ctx_r1.currencyColumn, " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" currencyObj: ", i0.ɵɵpipeBind1(9, 7, ctx_r1.currencyObj), " ");
} }
function PoGridComponent_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoGridComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtemplate(1, PoGridComponent_div_7_ng_container_1_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(12);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
} }
function PoGridComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoGridComponent_div_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoGridComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtemplate(1, PoGridComponent_div_10_ng_container_1_Template, 1, 0, "ng-container", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r11 = i0.ɵɵreference(16);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r11);
} }
function PoGridComponent_ng_template_11_po_grid_head_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-grid-head", 21);
} if (rf & 2) {
    const column_r16 = ctx.$implicit;
    const i_r17 = ctx.index;
    i0.ɵɵstyleProp("width", column_r16.cssWidth)("max-width", column_r16.cssWidth)("min-width", column_r16.cssWidth);
    i0.ɵɵpropertyInterpolate("p-position", "0-" + i_r17);
    i0.ɵɵproperty("p-width", column_r16.width)("p-align", column_r16.align)("p-title", column_r16.label);
} }
function PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-grid-cell", 24);
    i0.ɵɵtwoWayListener("p-valueChange", function PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template_po_grid_cell_p_valueChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r25); const column_r21 = restoredCtx.$implicit; const row_r18 = i0.ɵɵnextContext().$implicit; i0.ɵɵtwoWayBindingSet(row_r18[column_r21.property], $event) || (row_r18[column_r21.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r21 = ctx.$implicit;
    const i_r22 = ctx.index;
    const ctx_r26 = i0.ɵɵnextContext();
    const j_r19 = ctx_r26.index;
    const row_r18 = ctx_r26.$implicit;
    i0.ɵɵstyleProp("width", column_r21.cssWidth)("max-width", column_r21.cssWidth)("min-width", column_r21.cssWidth);
    i0.ɵɵpropertyInterpolate("p-position", j_r19 + 1 + "-" + i_r22);
    i0.ɵɵproperty("p-align", column_r21.align)("p-readonly", column_r21.readonly)("p-required", column_r21.required)("p-width", column_r21.width);
    i0.ɵɵtwoWayProperty("p-value", row_r18[column_r21.property]);
} }
function PoGridComponent_ng_template_11_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 22);
    i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_11_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r28); const row_r18 = restoredCtx.$implicit; const ctx_r27 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r27.removeRow($event, row_r18)); })("keydown.esc", function PoGridComponent_ng_template_11_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r28); const row_r18 = restoredCtx.$implicit; const ctx_r29 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r29.cancelRow($event, row_r18)); });
    i0.ɵɵtemplate(1, PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template, 1, 12, "po-grid-cell", 23);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r15.freezeColumns);
} }
function PoGridComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16)(1, "div", 17)(2, "div", 18);
    i0.ɵɵtemplate(3, PoGridComponent_ng_template_11_po_grid_head_3_Template, 1, 10, "po-grid-head", 19);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtemplate(5, PoGridComponent_ng_template_11_div_5_Template, 2, 1, "div", 20);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r6.freezeColumns);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r6.data);
} }
function PoGridComponent_ng_template_13_po_grid_head_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-grid-head", 27);
} if (rf & 2) {
    const column_r32 = ctx.$implicit;
    const i_r33 = ctx.index;
    const ctx_r30 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("width", column_r32.cssWidth)("max-width", column_r32.cssWidth)("min-width", column_r32.cssWidth);
    i0.ɵɵpropertyInterpolate("p-position", "0-" + (i_r33 + ctx_r30.freezeColumns.length));
    i0.ɵɵproperty("p-align", column_r32.align)("p-title", column_r32.label)("p-width", column_r32.width);
} }
function PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template(rf, ctx) { if (rf & 1) {
    const _r41 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-grid-cell", 29);
    i0.ɵɵtwoWayListener("p-valueChange", function PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template_po_grid_cell_p_valueChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r41); const column_r37 = restoredCtx.$implicit; const row_r34 = i0.ɵɵnextContext().$implicit; i0.ɵɵtwoWayBindingSet(row_r34[column_r37.property], $event) || (row_r34[column_r37.property] = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r37 = ctx.$implicit;
    const i_r38 = ctx.index;
    const ctx_r42 = i0.ɵɵnextContext();
    const j_r35 = ctx_r42.index;
    const row_r34 = ctx_r42.$implicit;
    const ctx_r36 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("width", column_r37.cssWidth)("max-width", column_r37.cssWidth)("min-width", column_r37.cssWidth);
    i0.ɵɵpropertyInterpolate("p-position", j_r35 + 1 + "-" + (i_r38 + ctx_r36.freezeColumns.length));
    i0.ɵɵproperty("p-align", column_r37.align)("p-readonly", column_r37.readonly)("p-required", column_r37.required);
    i0.ɵɵtwoWayProperty("p-value", row_r34[column_r37.property]);
    i0.ɵɵproperty("p-width", column_r37.width);
} }
function PoGridComponent_ng_template_13_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r44 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 22);
    i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_13_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r34 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r43.removeRow($event, row_r34)); })("keydown.esc", function PoGridComponent_ng_template_13_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r34 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r45.cancelRow($event, row_r34)); });
    i0.ɵɵtemplate(1, PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template, 1, 12, "po-grid-cell", 28);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r31 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r31.columns);
} }
function PoGridComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25)(1, "div", 17)(2, "div", 18);
    i0.ɵɵtemplate(3, PoGridComponent_ng_template_13_po_grid_head_3_Template, 1, 10, "po-grid-head", 26);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtemplate(5, PoGridComponent_ng_template_13_div_5_Template, 2, 1, "div", 20);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r8.columns);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r8.data);
} }
function PoGridComponent_ng_template_15_po_grid_head_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-grid-head", 32);
} if (rf & 2) {
    const column_r48 = ctx.$implicit;
    const i_r49 = ctx.index;
    const ctx_r46 = i0.ɵɵnextContext(2);
    i0.ɵɵpropertyInterpolate("p-position", "0-" + (i_r49 + ctx_r46.freezeColumns.length + ctx_r46.columns.length));
    i0.ɵɵproperty("p-title", column_r48.label)("p-align", column_r48.align);
} }
function PoGridComponent_ng_template_15_div_5_po_grid_cell_action_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-grid-cell-action", 34);
} if (rf & 2) {
    const column_r53 = ctx.$implicit;
    const i_r54 = ctx.index;
    const ctx_r55 = i0.ɵɵnextContext();
    const j_r51 = ctx_r55.index;
    const row_r50 = ctx_r55.$implicit;
    const ctx_r52 = i0.ɵɵnextContext(2);
    i0.ɵɵpropertyInterpolate("p-position", j_r51 + 1 + "-" + (i_r54 + ctx_r52.freezeColumns.length + ctx_r52.columns.length));
    i0.ɵɵproperty("p-value", row_r50[column_r53.property]);
} }
function PoGridComponent_ng_template_15_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r57 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 22);
    i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_15_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r57); const row_r50 = restoredCtx.$implicit; const ctx_r56 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r56.removeRow($event, row_r50)); })("keydown.esc", function PoGridComponent_ng_template_15_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r57); const row_r50 = restoredCtx.$implicit; const ctx_r58 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r58.cancelRow($event, row_r50)); });
    i0.ɵɵtemplate(1, PoGridComponent_ng_template_15_div_5_po_grid_cell_action_1_Template, 1, 2, "po-grid-cell-action", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r47 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r47.actionColumns);
} }
function PoGridComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 30)(1, "div", 17)(2, "div", 18);
    i0.ɵɵtemplate(3, PoGridComponent_ng_template_15_po_grid_head_3_Template, 1, 3, "po-grid-head", 31);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtemplate(5, PoGridComponent_ng_template_15_div_5_Template, 2, 1, "div", 20);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r10.actionColumns);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r10.data);
} }
/**
 * @description
 *
 * > Componente em desenvolvimento, podendo haver BREAKING CHANGES nas próximas versões.
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="PO Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
class PoGridComponent {
    changeDetectorRef;
    elRef;
    tableElement;
    tableWrapper;
    /**
     * @description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     */
    rowActions = {};
    /**
     * Lista com os dados que serão exibidos no grid.
     */
    data = [];
    lastCell = '0-0';
    lastRow = 0;
    lastColumn = 0;
    currencyCell = '0-0';
    currencyRow = 0;
    currencyColumn = 0;
    currencyObj;
    logger = false;
    width = '100%';
    widporeeze = 0;
    widthActions = 0;
    resizeListener;
    timeoutResize;
    _columns = [];
    /**
     * Colunas exibidas no grid.
     */
    set columns(value) {
        this._columns = [...value];
        this._columns.forEach(column => {
            column.label = column.label || column.property;
            if (column.freeze === true) {
                column.cssWidth = `${column.width || 100}px`;
            }
            else {
                column.cssWidth = column.width ? `${column.width}px` : '100%';
            }
        });
    }
    get columns() {
        return this._columns.filter(column => column.freeze !== true && column.action !== true);
    }
    constructor(changeDetectorRef, elRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    ngOnDestroy() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    get freezeColumns() {
        const freezeColumns = this._columns.filter(column => column.freeze === true);
        this.widporeeze = freezeColumns.reduce((prev, current) => prev + (current.width || 100), 0);
        return freezeColumns;
    }
    get actionColumns() {
        const actionsColumns = this._columns.filter(column => column.action === true);
        this.widthActions = actionsColumns.length > 0 ? 56 : 0;
        return actionsColumns;
    }
    cancelRow(event, row) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            return;
        }
        const [x] = el.id.split('-');
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(() => this.selectCell(this.currencyRow, this.currencyColumn));
        }
    }
    removeRow(event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        const index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if (this.data.length === 0 || index === this.data.length) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    }
    tableKeydown(event, direction) {
        let [row, col] = event.target.id.split('-');
        row = +row;
        col = +col;
        let prow = +row;
        let pcol = +col;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if (direction === 'up' && row > 0) {
            prow--;
        }
        else if (direction === 'left' && col > 0) {
            pcol--;
        }
        else if (direction === 'right' && col < this._columns.length - 1) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === `${prow}-${pcol}`) {
            return;
        }
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    }
    tableClick(event) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        const [row, col] = el.id.split('-');
        const prow = +row;
        const pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    }
    saveRow(row) {
        const obj = this.data[row - 1];
        if (!Object.keys(obj).some(prop => obj[prop] !== this.currencyObj[prop])) {
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        const requireds = [];
        this.columns.forEach(column => {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    }
    insertRow() {
        const obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    }
    isEmptyRow(row) {
        const obj = this.data[row - 1];
        if (!obj) {
            // title
            return false;
        }
        const filled = Object.keys(obj).some(property => obj[property]);
        return !filled;
    }
    selectCell(row, col) {
        const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);
        if (nextCell) {
            this.currencyCell = `${row}-${col}`;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;
            this.width = `${widthTableWrapper - (this.widporeeze + 8) - this.widthActions}px`;
        }, 100);
    }
    getEventPath(event) {
        // firefox do not have support to event.path
        return event.path || event.composedPath();
    }
    static ɵfac = function PoGridComponent_Factory(t) { return new (t || PoGridComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridComponent, selectors: [["po-grid"]], viewQuery: function PoGridComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$q, 7);
            i0.ɵɵviewQuery(_c1$8, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableWrapper = _t.first);
        } }, inputs: { rowActions: [i0.ɵɵInputFlags.None, "p-row-actions", "rowActions"], data: [i0.ɵɵInputFlags.None, "p-data", "data"], columns: [i0.ɵɵInputFlags.None, "p-columns", "columns"] }, decls: 17, vars: 10, consts: [[1, "po-grid-wrapper", "po-grid-row-wrapper"], ["wrapper", ""], [4, "ngIf"], [1, "po-grid"], [1, "po-grid-body"], [1, "po-grid-row", 3, "keydown.arrowup", "keydown.arrowdown", "keydown.arrowleft", "keydown.arrowright", "keydown.tab", "keydown.shift.tab", "click", "contextmenu", "dblclick"], ["table", ""], ["class", "po-grid-cell po-grid-cell-freeze", 4, "ngIf"], [1, "po-grid-cell", "po-grid-cell-normal"], [4, "ngTemplateOutlet"], ["class", "po-grid-cell po-grid-cell-action", 4, "ngIf"], ["divFreezeColumns", ""], ["divColumns", ""], ["divActionColumns", ""], [1, "po-grid-cell", "po-grid-cell-freeze"], [1, "po-grid-cell", "po-grid-cell-action"], [1, "po-grid", "po-grid-freeze"], [1, "po-grid-header-group"], [1, "po-grid-row"], ["class", "po-grid-title", "p-freeze", "true", 3, "width", "max-width", "min-width", "p-position", "p-width", "p-align", "p-title", 4, "ngFor", "ngForOf"], ["class", "po-grid-row", 3, "keydown.control.delete", "keydown.esc", 4, "ngFor", "ngForOf"], ["p-freeze", "true", 1, "po-grid-title", 3, "p-position", "p-width", "p-align", "p-title"], [1, "po-grid-row", 3, "keydown.control.delete", "keydown.esc"], ["class", "po-grid-cell", "p-freeze", "true", 3, "width", "max-width", "min-width", "p-align", "p-readonly", "p-required", "p-position", "p-width", "p-value", "p-valueChange", 4, "ngFor", "ngForOf"], ["p-freeze", "true", 1, "po-grid-cell", 3, "p-align", "p-readonly", "p-required", "p-position", "p-width", "p-value", "p-valueChange"], [1, "po-grid", "po-grid-normal"], ["class", "po-grid-title", 3, "width", "max-width", "min-width", "p-align", "p-position", "p-title", "p-width", 4, "ngFor", "ngForOf"], [1, "po-grid-title", 3, "p-align", "p-position", "p-title", "p-width"], ["class", "po-grid-cell", 3, "width", "max-width", "min-width", "p-align", "p-readonly", "p-required", "p-position", "p-value", "p-width", "p-valueChange", 4, "ngFor", "ngForOf"], [1, "po-grid-cell", 3, "p-align", "p-readonly", "p-required", "p-position", "p-value", "p-width", "p-valueChange"], [1, "po-grid", "po-grid-actions"], ["class", "po-grid-title", 3, "p-position", "p-title", "p-align", 4, "ngFor", "ngForOf"], [1, "po-grid-title", 3, "p-position", "p-title", "p-align"], ["class", "po-grid-cell", 3, "p-position", "p-value", 4, "ngFor", "ngForOf"], [1, "po-grid-cell", 3, "p-position", "p-value"]], template: function PoGridComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoGridComponent_div_2_Template, 11, 9, "div", 2);
            i0.ɵɵelementStart(3, "div", 3)(4, "div", 4)(5, "div", 5, 6);
            i0.ɵɵlistener("keydown.arrowup", function PoGridComponent_Template_div_keydown_arrowup_5_listener($event) { return ctx.tableKeydown($event, "up"); })("keydown.arrowdown", function PoGridComponent_Template_div_keydown_arrowdown_5_listener($event) { return ctx.tableKeydown($event, "down"); })("keydown.arrowleft", function PoGridComponent_Template_div_keydown_arrowleft_5_listener($event) { return ctx.tableKeydown($event, "left"); })("keydown.arrowright", function PoGridComponent_Template_div_keydown_arrowright_5_listener($event) { return ctx.tableKeydown($event, "right"); })("keydown.tab", function PoGridComponent_Template_div_keydown_tab_5_listener($event) { return ctx.tableKeydown($event, "next"); })("keydown.shift.tab", function PoGridComponent_Template_div_keydown_shift_tab_5_listener($event) { return ctx.tableKeydown($event, "prior"); })("click", function PoGridComponent_Template_div_click_5_listener($event) { return ctx.tableClick($event); })("contextmenu", function PoGridComponent_Template_div_contextmenu_5_listener($event) { return ctx.tableClick($event); })("dblclick", function PoGridComponent_Template_div_dblclick_5_listener($event) { return ctx.tableClick($event); });
            i0.ɵɵtemplate(7, PoGridComponent_div_7_Template, 2, 1, "div", 7);
            i0.ɵɵelementStart(8, "div", 8);
            i0.ɵɵtemplate(9, PoGridComponent_ng_container_9_Template, 1, 0, "ng-container", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoGridComponent_div_10_Template, 2, 1, "div", 10);
            i0.ɵɵelementEnd()()()();
            i0.ɵɵtemplate(11, PoGridComponent_ng_template_11_Template, 6, 2, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor)(13, PoGridComponent_ng_template_13_Template, 6, 2, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor)(15, PoGridComponent_ng_template_15_Template, 6, 2, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r9 = i0.ɵɵreference(14);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.logger);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("ngIf", ctx.freezeColumns.length > 0);
            i0.ɵɵadvance();
            i0.ɵɵstyleProp("width", ctx.width)("max-width", ctx.width)("min-width", ctx.width);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngTemplateOutlet", _r9);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.actionColumns.length > 0);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoGridCellActionComponent, PoGridCellComponent, PoGridHeadComponent, i1.JsonPipe], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridComponent, [{
        type: Component,
        args: [{ selector: 'po-grid', template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br />\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br />\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br />\n    <hr />\n    currencyObj: {{ currencyObj | json }}\n    <hr />\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\"\n      >\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div\n          class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\"\n          [style.max-width]=\"width\"\n          [style.min-width]=\"width\"\n        >\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n  <div class=\"po-grid po-grid-actions\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-title\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-align]=\"column.align\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell-action\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-cell\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-value]=\"row[column.property]\"\n        >\n        </po-grid-cell-action>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }], { tableElement: [{
            type: ViewChild,
            args: ['table', { static: true }]
        }], tableWrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }], rowActions: [{
            type: Input,
            args: ['p-row-actions']
        }], data: [{
            type: Input,
            args: ['p-data']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoGridComponent, { className: "PoGridComponent", filePath: "lib/components/po-grid/po-grid.component.ts", lineNumber: 38 }); })();

/**
 * @description
 *
 * Módulo do componente po-grid.
 */
class PoGridModule {
    static ɵfac = function PoGridModule_Factory(t) { return new (t || PoGridModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGridModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, PoFieldModule],
                declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent],
                exports: [PoGridComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoGridModule, { declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent], imports: [CommonModule, FormsModule, PoFieldModule], exports: [PoGridComponent] }); })();

const poListViewLiteralsDefault = {
    en: {
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    },
    es: {
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    },
    pt: {
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    },
    ru: {
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
class PoListViewBaseComponent {
    /** Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será usado como link para o título. */
    propertyLink;
    /** Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será exibido como o título de cada item. */
    propertyTitle;
    /**
     * @optional
     *
     * @description
     *
     * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
     *
     * > Caso nenhuma ação for definida o mesmo não ficará visível.
     */
    showMore = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que será executada ao clicar no título.
     *
     * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
     */
    titleAction = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que será executada ao clicar no botão exibir detalhes.
     *
     * Ao ser disparado, o método passa como parâmetros os detalhes que serão exibidos.
     */
    showDetail = new EventEmitter();
    popupTarget;
    selectAll = false;
    showHeader = false;
    _actions;
    _height;
    _hideSelectAll;
    _items;
    _literals;
    _select;
    _showMoreDisabled;
    language = poLocaleDefault;
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações que serão exibidas no componente.
     */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-list-view` em *pixels*.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todos os itens.
     *
     * @default `false`
     */
    set hideSelectAll(hideSelectAll) {
        this._hideSelectAll = convertToBoolean(hideSelectAll);
        this.showMainHeader();
    }
    get hideSelectAll() {
        return this._hideSelectAll;
    }
    /** Lista de itens que serão exibidos no componente. */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-list-view`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    hideDetail: 'Ocultar detalhes completamente',
     *    loadMoreData: 'Mais dados',
     *    showDetail: 'Mostrar mais detalhes',
     *    selectAll: 'Selecionar todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    showDetail: 'Mostrar mais detalhes'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-list-view
     *   [p-literals]="customLiterals">
     * </po-list-view>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poListViewLiteralsDefault[poLocaleDefault],
                ...poListViewLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poListViewLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListViewLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
     * item está selecionado, por exemplo:
     *
     * ```
     *  item.$selected
     *
     *  // ou
     *
     *  item['$selected']
     * ```
     *
     * @default `false`
     */
    set select(select) {
        this._select = convertToBoolean(select);
        this.showMainHeader();
    }
    get select() {
        return this._select;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o botão `Carregar Mais Resultados` será desabilitado.
     */
    set showMoreDisabled(value) {
        this._showMoreDisabled = convertToBoolean(value);
    }
    get showMoreDisabled() {
        return this._showMoreDisabled;
    }
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    onClickAction(listViewAction, item) {
        const cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    }
    onShowMore() {
        this.showMore.emit();
    }
    runTitleAction(listItem) {
        const itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    }
    selectAllListItems() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
        }
    }
    selectListItem(row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    }
    deleteInternalAttrs(item) {
        const itemCopy = item ? { ...item } : undefined;
        for (const key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    }
    checkIfItemsAreSelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    showMainHeader() {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    }
    static ɵfac = function PoListViewBaseComponent_Factory(t) { return new (t || PoListViewBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewBaseComponent, inputs: { propertyLink: [i0.ɵɵInputFlags.None, "p-property-link", "propertyLink"], propertyTitle: [i0.ɵɵInputFlags.None, "p-property-title", "propertyTitle"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], hideSelectAll: [i0.ɵɵInputFlags.None, "p-hide-select-all", "hideSelectAll"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], select: [i0.ɵɵInputFlags.None, "p-select", "select"], showMoreDisabled: [i0.ɵɵInputFlags.None, "p-show-more-disabled", "showMoreDisabled"] }, outputs: { showMore: "p-show-more", titleAction: "p-title-action", showDetail: "p-show-detail" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { propertyLink: [{
            type: Input,
            args: ['p-property-link']
        }], propertyTitle: [{
            type: Input,
            args: ['p-property-title']
        }], showMore: [{
            type: Output,
            args: ['p-show-more']
        }], titleAction: [{
            type: Output,
            args: ['p-title-action']
        }], showDetail: [{
            type: Output,
            args: ['p-show-detail']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], select: [{
            type: Input,
            args: ['p-select']
        }], showMoreDisabled: [{
            type: Input,
            args: ['p-show-more-disabled']
        }] }); })();

/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
class PoListViewContentTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     */
    title;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoListViewContentTemplateDirective_Factory(t) { return new (t || PoListViewContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewContentTemplateDirective, selectors: [["", "p-list-view-content-template", ""]], inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewContentTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-list-view-content-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { title: [{
            type: Input,
            args: ['p-title']
        }] }); })();

/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
class PoListViewDetailTemplateDirective {
    templateRef;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     */
    showDetail;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoListViewDetailTemplateDirective_Factory(t) { return new (t || PoListViewDetailTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewDetailTemplateDirective, selectors: [["", "p-list-view-detail-template", ""]], inputs: { showDetail: [i0.ɵɵInputFlags.None, "p-show-detail", "showDetail"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewDetailTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-list-view-detail-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], { showDetail: [{
            type: Input,
            args: ['p-show-detail']
        }] }); })();

const _c0$p = ["popup"];
function PoListViewComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 7)(1, "div", 8)(2, "div", 9)(3, "po-checkbox", 10);
    i0.ɵɵtwoWayListener("ngModelChange", function PoListViewComponent_div_1_Template_po_checkbox_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); i0.ɵɵtwoWayBindingSet(ctx_r5.selectAll, $event) || (ctx_r5.selectAll = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoListViewComponent_div_1_Template_po_checkbox_p_change_3_listener() { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.selectAllListItems()); })("click", function PoListViewComponent_div_1_Template_po_checkbox_click_3_listener() { i0.ɵɵrestoreView(_r6); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.selectAllListItems()); });
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r0.selectAll);
    i0.ɵɵproperty("p-label", ctx_r0.literals.selectAll);
} }
function PoListViewComponent_po_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-container", 11)(1, "div", 12)(2, "span");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-no-padding", true);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.literals.noData, " ");
} }
function PoListViewComponent_ng_container_4_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 25)(1, "po-checkbox", 26);
    i0.ɵɵtwoWayListener("ngModelChange", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; i0.ɵɵtwoWayBindingSet(item_r9.$selected, $event) || (item_r9.$selected = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_p_change_1_listener() { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r23 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r23.selectListItem(item_r9)); })("click", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_click_1_listener() { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.selectListItem(item_r9)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance();
    i0.ɵɵtwoWayProperty("ngModel", item_r9.$selected);
} }
function PoListViewComponent_ng_container_4_a_6_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 27);
    i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_a_6_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r30); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r28 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r28.runTitleAction(item_r9)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵproperty("href", item_r9[ctx_r12.propertyLink], i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r12.getItemTitle(item_r9), " ");
} }
function PoListViewComponent_ng_container_4_a_7_Template(rf, ctx) { if (rf & 1) {
    const _r34 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 28);
    i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_a_7_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r34); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r32 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r32.runTitleAction(item_r9)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵproperty("routerLink", item_r9[ctx_r13.propertyLink]);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r13.getItemTitle(item_r9), " ");
} }
function PoListViewComponent_ng_container_4_span_8_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 29);
    i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_span_8_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r37); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.titleHasAction && ctx_r36.runTitleAction(item_r9)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-list-view-title-link", ctx_r14.titleHasAction);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r14.getItemTitle(item_r9), " ");
} }
function PoListViewComponent_ng_container_4_div_9_po_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 32);
    i0.ɵɵlistener("p-click", function PoListViewComponent_ng_container_4_div_9_po_button_1_Template_po_button_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r43); const action_r41 = restoredCtx.$implicit; const item_r9 = i0.ɵɵnextContext(2).$implicit; const ctx_r42 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r42.onClickAction(action_r41, item_r9)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const action_r41 = ctx.$implicit;
    const item_r9 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r40 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r40.returnBooleanValue(action_r41, item_r9, "disabled"))("p-icon", action_r41.icon)("p-label", action_r41.label)("p-danger", action_r41.type === "danger");
} }
function PoListViewComponent_ng_container_4_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 30);
    i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_9_po_button_1_Template, 1, 4, "po-button", 31);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r15.visibleActions);
} }
function PoListViewComponent_ng_container_4_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r49 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 33)(1, "div", 34, 35);
    i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_div_10_Template_div_click_1_listener() { i0.ɵɵrestoreView(_r49); const _r46 = i0.ɵɵreference(2); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.togglePopup(item_r9, _r46)); });
    i0.ɵɵelement(3, "po-icon", 36);
    i0.ɵɵelementEnd()();
} }
function PoListViewComponent_ng_container_4_div_11_ng_template_1_Template(rf, ctx) { }
const _c1$7 = (a0, a1) => ({ $implicit: a0, index: a1 });
function PoListViewComponent_ng_container_4_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_11_ng_template_1_Template, 0, 0, "ng-template", 38);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = i0.ɵɵnextContext();
    const item_r9 = ctx_r51.$implicit;
    const index_r10 = ctx_r51.index;
    const ctx_r17 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r17.listViewContentTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1$7, item_r9, index_r10));
} }
function PoListViewComponent_ng_container_4_div_12_ng_template_1_Template(rf, ctx) { }
function PoListViewComponent_ng_container_4_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r55 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 39);
    i0.ɵɵlistener("@showHideDetail.start", function PoListViewComponent_ng_container_4_div_12_Template_div_animation_showHideDetail_start_0_listener($event) { i0.ɵɵrestoreView(_r55); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView(item_r9.$showDetail ? ctx_r53.onAnimationEvent($event, item_r9) : "undefined"); });
    i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_12_ng_template_1_Template, 0, 0, "ng-template", 38);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r56 = i0.ɵɵnextContext();
    const item_r9 = ctx_r56.$implicit;
    const index_r10 = ctx_r56.index;
    const ctx_r18 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@showHideDetail", undefined);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r18.listViewDetailTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c1$7, item_r9, index_r10));
} }
function PoListViewComponent_ng_container_4_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 40)(1, "po-button", 41);
    i0.ɵɵlistener("p-click", function PoListViewComponent_ng_container_4_div_13_Template_po_button_p_click_1_listener() { i0.ɵɵrestoreView(_r59); const item_r9 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(item_r9.$showDetail = !item_r9.$showDetail); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r19 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-label", item_r9.$showDetail ? ctx_r19.literals.hideDetails : ctx_r19.literals.showDetails);
} }
function PoListViewComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-container", 11)(2, "div", 13)(3, "div", 14)(4, "div", 15);
    i0.ɵɵtemplate(5, PoListViewComponent_ng_container_4_div_5_Template, 2, 1, "div", 16)(6, PoListViewComponent_ng_container_4_a_6_Template, 2, 2, "a", 17)(7, PoListViewComponent_ng_container_4_a_7_Template, 2, 2, "a", 18)(8, PoListViewComponent_ng_container_4_span_8_Template, 2, 3, "span", 19);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, PoListViewComponent_ng_container_4_div_9_Template, 2, 1, "div", 20)(10, PoListViewComponent_ng_container_4_div_10_Template, 4, 0, "div", 21);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(11, PoListViewComponent_ng_container_4_div_11_Template, 2, 5, "div", 22)(12, PoListViewComponent_ng_container_4_div_12_Template, 2, 6, "div", 23);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, PoListViewComponent_ng_container_4_div_13_Template, 2, 1, "div", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-no-padding", true);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngSwitch", ctx_r2.checkTitleType(item_r9));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.select);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "externalLink");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "internalLink");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngSwitchCase", "noLink");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.showButtonsActions);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.showPopupActions);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.hasContentTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.hasDetailTemplate && item_r9.$showDetail);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.hasDetailTemplate);
} }
function PoListViewComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r62 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 42)(1, "po-button", 43);
    i0.ɵɵlistener("p-click", function PoListViewComponent_div_5_Template_po_button_p_click_1_listener() { i0.ɵɵrestoreView(_r62); const ctx_r61 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r61.onShowMore()); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-disabled", ctx_r3.showMoreDisabled)("p-label", ctx_r3.literals.loadMoreData);
} }
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
class PoListViewComponent extends PoListViewBaseComponent {
    changeDetector;
    listViewContentTemplate;
    listViewDetailTemplate;
    poPopupComponent;
    differ;
    constructor(changeDetector, differs, languageService) {
        super(languageService);
        this.changeDetector = changeDetector;
        this.differ = differs.find([]).create(null);
    }
    get hasContentTemplate() {
        return !!this.listViewContentTemplate;
    }
    get hasDetailTemplate() {
        return !!this.listViewDetailTemplate;
    }
    get displayShowMoreButton() {
        return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
    }
    get showButtonsActions() {
        return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
    }
    get showPopupActions() {
        return this.visibleActions && this.visibleActions.length > 2;
    }
    get titleHasAction() {
        return this.titleAction.observers.length > 0;
    }
    get visibleActions() {
        return (this.actions &&
            this.actions.filter(action => this.returnBooleanValue(action, action.visible, 'visible') !== false));
    }
    ngAfterContentInit() {
        this.initShowDetail();
    }
    ngDoCheck() {
        this.checkItemsChange();
    }
    checkTitleType(item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    getItemTitle(item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title
            ? this.listViewContentTemplate.title(item)
            : item[this.propertyTitle];
    }
    hasItems() {
        return this.items && this.items.length > 0;
    }
    returnBooleanValue(listViewAction, item, property) {
        return isTypeof(listViewAction[property], 'function')
            ? listViewAction[property](item)
            : listViewAction[property];
    }
    trackBy(index) {
        return index;
    }
    togglePopup(item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    }
    onAnimationEvent(event, detail) {
        this.showDetail.emit(detail);
    }
    checkItemsChange() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    }
    initShowDetail() {
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(item => (item.$showDetail = this.listViewDetailTemplate.showDetail(item)));
        }
    }
    static ɵfac = function PoListViewComponent_Factory(t) { return new (t || PoListViewComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoListViewComponent, selectors: [["po-list-view"]], contentQueries: function PoListViewComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoListViewContentTemplateDirective, 7);
            i0.ɵɵcontentQuery(dirIndex, PoListViewDetailTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listViewContentTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listViewDetailTemplate = _t.first);
        } }, viewQuery: function PoListViewComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$p, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPopupComponent = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 13, consts: [["class", "po-list-view-main-header", 4, "ngIf"], [1, "po-list-view-main-content"], [3, "p-no-padding", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-mb-2 po-text-center", 4, "ngIf"], [3, "p-actions", "p-target"], ["popup", ""], [1, "po-list-view-main-header"], [1, "po-checkbox-group-item"], [1, "po-list-view-main-select"], ["name", "selectAll", 3, "ngModel", "p-label", "ngModelChange", "p-change", "click"], [3, "p-no-padding"], [1, "po-list-view-container-no-data", "po-text-center"], [1, "po-list-view-container"], [1, "po-list-view-header"], [1, "po-list-view-title", 3, "ngSwitch"], ["class", "po-list-view-select", 4, "ngIf"], ["class", "po-list-view-title-link", "target", "_blank", 3, "href", "click", 4, "ngSwitchCase"], ["class", "po-list-view-title-link", 3, "routerLink", "click", 4, "ngSwitchCase"], ["class", "po-list-view-title-no-link", 3, "po-list-view-title-link", "click", 4, "ngSwitchCase"], ["class", "po-list-view-actions", 4, "ngIf"], ["class", "po-list-view-more-actions", 4, "ngIf"], ["class", "po-list-view-content", 4, "ngIf"], ["class", "po-list-view-detail", 4, "ngIf"], ["class", "po-list-view-detail-button", 4, "ngIf"], [1, "po-list-view-select"], ["name", "checkbox", 3, "ngModel", "ngModelChange", "p-change", "click"], ["target", "_blank", 1, "po-list-view-title-link", 3, "href", "click"], [1, "po-list-view-title-link", 3, "routerLink", "click"], [1, "po-list-view-title-no-link", 3, "click"], [1, "po-list-view-actions"], [3, "p-disabled", "p-icon", "p-label", "p-danger", "p-click", 4, "ngFor", "ngForOf"], [3, "p-disabled", "p-icon", "p-label", "p-danger", "p-click"], [1, "po-list-view-more-actions"], [1, "po-list-view-more-icon", "po-clickable", 3, "click"], ["popupTarget", ""], ["p-icon", "ICON_MORE"], [1, "po-list-view-content"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-list-view-detail"], [1, "po-list-view-detail-button"], ["p-kind", "tertiary", 3, "p-label", "p-click"], [1, "po-mb-2", "po-text-center"], [3, "p-disabled", "p-label", "p-click"]], template: function PoListViewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵtemplate(1, PoListViewComponent_div_1_Template, 4, 2, "div", 0);
            i0.ɵɵelementStart(2, "div", 1);
            i0.ɵɵtemplate(3, PoListViewComponent_po_container_3_Template, 4, 2, "po-container", 2)(4, PoListViewComponent_ng_container_4_Template, 14, 11, "ng-container", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(5, PoListViewComponent_div_5_Template, 2, 2, "div", 4);
            i0.ɵɵelement(6, "po-popup", 5, 6);
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵclassProp("po-list-view-main-container-header", ctx.showHeader)("po-list-view-main-container", !ctx.showHeader);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showHeader);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hasItems());
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.items)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.displayShowMoreButton);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", ctx.popupTarget);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i2$1.NgControlStatus, i2$1.NgModel, i2.RouterLink, PoButtonComponent, PoIconComponent, PoPopupComponent, PoCheckboxComponent, PoContainerComponent], encapsulation: 2, data: { animation: [
                trigger('showHideDetail', [
                    state('*', style({ 'overflow-y': 'visible' })),
                    state('void', style({ 'overflow-y': 'hidden' })),
                    transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                    transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
                ])
            ] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewComponent, [{
        type: Component,
        args: [{ selector: 'po-list-view', animations: [
                    trigger('showHideDetail', [
                        state('*', style({ 'overflow-y': 'visible' })),
                        state('void', style({ 'overflow-y': 'hidden' })),
                        transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                        transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
                    ])
                ], template: "<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\"\n>\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <po-checkbox\n          name=\"selectAll\"\n          [(ngModel)]=\"selectAll\"\n          [p-label]=\"literals.selectAll\"\n          (p-change)=\"selectAllListItems()\"\n          (click)=\"selectAllListItems()\"\n        ></po-checkbox>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <po-container [p-no-padding]=\"true\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </po-container>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <po-container [p-no-padding]=\"true\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <po-checkbox\n                  [(ngModel)]=\"item.$selected\"\n                  name=\"checkbox\"\n                  (p-change)=\"selectListItem(item)\"\n                  (click)=\"selectListItem(item)\"\n                ></po-checkbox>\n              </div>\n              <a\n                *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <a\n                *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <span\n                *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button\n                *ngFor=\"let action of visibleActions\"\n                [p-disabled]=\"returnBooleanValue(action, item, 'disabled')\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-danger]=\"action.type === 'danger'\"\n                (p-click)=\"onClickAction(action, item)\"\n              >\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <div #popupTarget class=\"po-list-view-more-icon po-clickable\" (click)=\"togglePopup(item, popupTarget)\">\n                <po-icon p-icon=\"ICON_MORE\"></po-icon>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n\n          <div\n            @showHideDetail\n            (@showHideDetail.start)=\"item.$showDetail ? onAnimationEvent($event, item) : 'undefined'\"\n            *ngIf=\"hasDetailTemplate && item.$showDetail\"\n            class=\"po-list-view-detail\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <po-button\n            p-kind=\"tertiary\"\n            [p-label]=\"item.$showDetail ? literals.hideDetails : literals.showDetails\"\n            (p-click)=\"item.$showDetail = !item.$showDetail\"\n          >\n          </po-button>\n        </div>\n      </po-container>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: PoLanguageService }], { listViewContentTemplate: [{
            type: ContentChild,
            args: [PoListViewContentTemplateDirective, { static: true }]
        }], listViewDetailTemplate: [{
            type: ContentChild,
            args: [PoListViewDetailTemplateDirective, { static: true }]
        }], poPopupComponent: [{
            type: ViewChild,
            args: ['popup', { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoListViewComponent, { className: "PoListViewComponent", filePath: "lib/components/po-list-view/po-list-view.component.ts", lineNumber: 54 }); })();

/**
 * @description
 *
 * Módulo do componente `po-list-view`.
 *
 * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoListViewModule {
    static ɵfac = function PoListViewModule_Factory(t) { return new (t || PoListViewModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoListViewModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            FormsModule,
            RouterModule,
            PoButtonModule,
            PoIconModule,
            PoPopupModule,
            PoCheckboxModule,
            PoContainerModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoButtonModule,
                    PoIconModule,
                    PoPopupModule,
                    PoCheckboxModule,
                    PoContainerModule
                ],
                declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoListViewModule, { declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective], imports: [CommonModule,
        FormsModule,
        RouterModule,
        PoButtonModule,
        PoIconModule,
        PoPopupModule,
        PoCheckboxModule,
        PoContainerModule], exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective] }); })();

function PoLogoComponent_a_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 2);
    i0.ɵɵelement(1, "img", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassMap(ctx_r0.className);
    i0.ɵɵproperty("alt", ctx_r0.logoAlt)("src", ctx_r0.logo, i0.ɵɵsanitizeUrl)("title", ctx_r0.logoAlt);
} }
function PoLogoComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 3);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.className);
    i0.ɵɵproperty("alt", ctx_r1.logoAlt)("src", ctx_r1.logo, i0.ɵɵsanitizeUrl)("title", ctx_r1.logoAlt);
} }
const poLogoLiteralsDefault = {
    en: {
        logomarcaHome: 'Home logo'
    },
    es: {
        logomarcaHome: 'Logomarca inicio'
    },
    pt: {
        logomarcaHome: 'Logomarca início'
    },
    ru: {
        logomarcaHome: 'Дом Логомарка'
    }
};
const MAX_LENGHT = 125;
class PoLogoComponent {
    poLanguageService;
    literals;
    _logo;
    _logoAlt;
    /**
     * Define uma classe para o elemento `img` do componente.
     *
     * > **Importante**
     * > A classe deve ser definida apenas quando houver necessidade de ajustar o componente dentro de outro componente.
     *
     */
    className = 'po-logo';
    /**
     * Define se o componente terá o elemento âncora para a página inicial.
     *
     * > Caso seja definido como false, o componente apenas renderizará o elemento `img`.
     * O valor inicial é `true`.
     *
     */
    link = true;
    /**
     * Definie o caminho para a imagem, que será exibida como logomarca.
     *
     */
    set logo(value) {
        this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    get logo() {
        return this._logo;
    }
    /**
     * Define o texto alternativo para a logomarca.
     *
     * > **Importante**
     * > Caso esta propriedade não seja definida o texto padrão será "Logomarca início".
     */
    set logoAlt(value) {
        this._logoAlt = isTypeof(value, 'string') && value.trim() ? this.maxLength(value) : this.literals.logomarcaHome;
    }
    get logoAlt() {
        return this._logoAlt;
    }
    constructor(poLanguageService) {
        this.poLanguageService = poLanguageService;
        this.literals = {
            ...poLogoLiteralsDefault[this.poLanguageService?.getLanguageDefault()],
            ...poLogoLiteralsDefault[this.poLanguageService?.getShortLanguage()]
        };
        this._logoAlt = this.literals.logomarcaHome;
    }
    maxLength(value) {
        return value.length > MAX_LENGHT ? value.toString().substring(0, MAX_LENGHT) : value;
    }
    static ɵfac = function PoLogoComponent_Factory(t) { return new (t || PoLogoComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLogoComponent, selectors: [["po-logo"]], inputs: { className: [i0.ɵɵInputFlags.None, "p-class", "className"], link: [i0.ɵɵInputFlags.None, "p-link", "link"], logo: [i0.ɵɵInputFlags.None, "p-logo", "logo"], logoAlt: [i0.ɵɵInputFlags.None, "p-logo-alt", "logoAlt"] }, decls: 3, vars: 2, consts: [["href", "/", 4, "ngIf", "ngIfElse"], ["noLink", ""], ["href", "/"], [3, "alt", "src", "title"]], template: function PoLogoComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoLogoComponent_a_0_Template, 2, 5, "a", 0)(1, PoLogoComponent_ng_template_1_Template, 1, 5, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx.link)("ngIfElse", _r2);
        } }, dependencies: [i1.NgIf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLogoComponent, [{
        type: Component,
        args: [{ selector: 'po-logo', template: "<a *ngIf=\"link; else noLink\" href=\"/\">\n  <img [alt]=\"logoAlt\" [class]=\"className\" [src]=\"logo\" [title]=\"logoAlt\" />\n</a>\n\n<ng-template #noLink>\n  <img [alt]=\"logoAlt\" [class]=\"className\" [src]=\"logo\" [title]=\"logoAlt\" />\n</ng-template>\n" }]
    }], () => [{ type: PoLanguageService }], { className: [{
            type: Input,
            args: ['p-class']
        }], link: [{
            type: Input,
            args: ['p-link']
        }], logo: [{
            type: Input,
            args: ['p-logo']
        }], logoAlt: [{
            type: Input,
            args: ['p-logo-alt']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoLogoComponent, { className: "PoLogoComponent", filePath: "lib/components/po-logo/po-logo.component.ts", lineNumber: 27 }); })();

class PoLogoModule {
    static ɵfac = function PoLogoModule_Factory(t) { return new (t || PoLogoModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLogoModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLogoModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PoLogoComponent],
                exports: [PoLogoComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoLogoModule, { declarations: [PoLogoComponent], imports: [CommonModule], exports: [PoLogoComponent] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a comunicação entre os items do po-menu-panel.
 */
class PoMenuPanelItemsService {
    subjectChild = new Subject();
    subjectParent = new Subject();
    // Recebe do po-menu-panel-item sua informação de click.
    receiveFromChildMenuClicked() {
        return this.subjectChild.asObservable();
    }
    // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
    receiveFromParentMenuClicked() {
        return this.subjectParent.asObservable();
    }
    // Envia informações do click do po-menu-panel-item para o po-menu
    sendToParentMenuClicked(menu) {
        this.subjectChild.next(menu);
    }
    // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
    sendToChildMenuClicked(menu) {
        this.subjectParent.next(menu);
    }
    static ɵfac = function PoMenuPanelItemsService_Factory(t) { return new (t || PoMenuPanelItemsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuPanelItemsService, factory: PoMenuPanelItemsService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelItemsService, [{
        type: Injectable
    }], null, null); })();

function PoMenuPanelItemComponent_a_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuPanelItemComponent_a_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 4);
    i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_0_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(4);
    i0.ɵɵproperty("routerLink", ctx_r0.menuItemInternal.link);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function PoMenuPanelItemComponent_a_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuPanelItemComponent_a_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 6);
    i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_1_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(4);
    i0.ɵɵproperty("href", ctx_r1.menuItemInternal.link, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function PoMenuPanelItemComponent_a_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuPanelItemComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 7);
    i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(4);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function PoMenuPanelItemComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵlistener("click", function PoMenuPanelItemComponent_ng_template_3_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.clickMenuItem($event)); });
    i0.ɵɵelement(1, "span");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-menu-panel-item-selected", ctx_r3.menuItemInternal.isSelected);
    i0.ɵɵproperty("p-tooltip", ctx_r3.menuItemInternal.label);
    i0.ɵɵadvance();
    i0.ɵɵclassMapInterpolate1("po-icon ", ctx_r3.menuItemInternal.icon, "");
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu-panel.
 */
class PoMenuPanelItemComponent {
    menuItemsService;
    menuItemInternal;
    itemsSubscription;
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    ngOnDestroy() {
        this.itemsSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.subscribeMenuClickedFromParent();
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
        }
    }
    activateMenu(menu) {
        this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
    }
    processMenuItem(menu) {
        if (this.menuItemInternal.type === 'internalLink') {
            this.activateMenu(menu.active);
        }
    }
    subscribeMenuClickedFromParent() {
        this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
    static ɵfac = function PoMenuPanelItemComponent_Factory(t) { return new (t || PoMenuPanelItemComponent)(i0.ɵɵdirectiveInject(PoMenuPanelItemsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuPanelItemComponent, selectors: [["po-menu-panel-item"]], inputs: { menuItemInternal: [i0.ɵɵInputFlags.None, "p-menu-item-internal", "menuItemInternal"] }, decls: 5, vars: 3, consts: [[3, "routerLink", 4, "ngIf"], [3, "href", 4, "ngIf"], ["href", "javascript:;", 4, "ngIf"], ["menuItemTemplate", ""], [3, "routerLink"], [4, "ngTemplateOutlet"], [3, "href"], ["href", "javascript:;"], ["p-tooltip-position", "right", 1, "po-menu-panel-item", 3, "p-tooltip", "click"]], template: function PoMenuPanelItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuPanelItemComponent_a_0_Template, 2, 2, "a", 0)(1, PoMenuPanelItemComponent_a_1_Template, 2, 2, "a", 1)(2, PoMenuPanelItemComponent_a_2_Template, 2, 1, "a", 2)(3, PoMenuPanelItemComponent_ng_template_3_Template, 2, 6, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "internalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "noLink");
        } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, i2.RouterLink, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelItemComponent, [{
        type: Component,
        args: [{ selector: 'po-menu-panel-item', template: "<!-- menu com link interno -->\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu com link externo -->\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu sem link -->\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-panel-item\"\n    p-tooltip-position=\"right\"\n    [class.po-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\n    [p-tooltip]=\"menuItemInternal.label\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <span class=\"po-icon {{ menuItemInternal.icon }}\"></span>\n  </div>\n</ng-template>\n" }]
    }], () => [{ type: PoMenuPanelItemsService }], { menuItemInternal: [{
            type: Input,
            args: ['p-menu-item-internal']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuPanelItemComponent, { className: "PoMenuPanelItemComponent", filePath: "lib/components/po-menu-panel/po-menu-panel-item/po-menu-panel-item.component.ts", lineNumber: 19 }); })();

const poDefaultLogo = 'https://po-ui.io/assets/po-logos/po_black.svg';
/**
 * @description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
class PoMenuPanelBaseComponent {
    _menus;
    _logo = poDefaultLogo;
    /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.setMenuExtraProperties(this._menus);
        this.validateMenus(this._menus);
    }
    get menus() {
        return this._menus;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca localizada na parte superior do menu.
     *
     * > **Importante**
     * > Caso seja indefinida será aplicada a imagem default do PO UI.
     */
    set logo(src) {
        this._logo = src ?? poDefaultLogo;
    }
    get logo() {
        return this._logo;
    }
    /**
     * Define o texto alternativo para a logomarca.
     *
     * > **Importante**
     * > Caso esta propriedade não seja definida o texto padrão será "Logomarca início".
     *
     * @default `Logomarca início`
     */
    logoAlt;
    setMenuExtraProperties(menus) {
        menus.forEach(menuItem => this.setMenuItemProperties(menuItem));
    }
    setMenuItemProperties(menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    }
    setMenuType(menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    validateMenu(menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
        }
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
    static ɵfac = function PoMenuPanelBaseComponent_Factory(t) { return new (t || PoMenuPanelBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuPanelBaseComponent, inputs: { menus: [i0.ɵɵInputFlags.None, "p-menus", "menus"], logo: [i0.ɵɵInputFlags.None, "p-logo", "logo"], logoAlt: [i0.ɵɵInputFlags.None, "p-logo-alt", "logoAlt"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelBaseComponent, [{
        type: Directive
    }], null, { menus: [{
            type: Input,
            args: ['p-menus']
        }], logo: [{
            type: Input,
            args: ['p-logo']
        }], logoAlt: [{
            type: Input,
            args: ['p-logo-alt']
        }] }); })();

function PoMenuPanelComponent_po_logo_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-logo", 6);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-logo", ctx_r0.logo)("p-logo-alt", ctx_r0.logoAlt);
} }
function PoMenuPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵelement(1, "po-menu-panel-item", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const menu_r2 = ctx.$implicit;
    const menuIndex_r3 = ctx.index;
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-menu-panel-item-first", menuIndex_r3 === 0);
    i0.ɵɵproperty("p-menu-item-internal", menu_r2);
} }
/**
 * @docsExtends PoMenuPanelBaseComponent
 *
 * @description
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ```
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-panel-basic" title="PO Menu Panel Basic">
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-labs" title="PO Menu Panel Labs">
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-customer" title="PO Menu Panel - Customers">
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
 * </example>
 */
class PoMenuPanelComponent extends PoMenuPanelBaseComponent {
    location;
    menuItemsService;
    router;
    activeMenuItem;
    linkActive;
    routeSubscription;
    itemSubscription;
    constructor(viewRef, location, menuItemsService, router) {
        super();
        this.location = location;
        this.menuItemsService = menuItemsService;
        this.router = router;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            return menus.some(menu => {
                if (getFormattedLink(menu.link) === urlPath) {
                    this.activateMenuItem(menu);
                    return true;
                }
            });
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = getFormattedLink(menu.link);
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            menu.action(menu);
        }
        if (menu.type === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu.type === 'internalLink') {
            this.activateMenuItem(menu);
        }
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(rounterEvent => {
            if (rounterEvent instanceof NavigationEnd) {
                this.checkActiveMenuByUrl(this.location.path());
            }
        });
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService
            .receiveFromChildMenuClicked()
            .subscribe((menu) => this.clickMenuItem(menu));
    }
    static ɵfac = function PoMenuPanelComponent_Factory(t) { return new (t || PoMenuPanelComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.Location), i0.ɵɵdirectiveInject(PoMenuPanelItemsService), i0.ɵɵdirectiveInject(i2.Router)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuPanelComponent, selectors: [["po-menu-panel"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 2, consts: [[1, "po-menu-panel"], [1, "po-menu-panel-logo-container"], ["p-class", "po-menu-panel-logo", 3, "p-logo", "p-logo-alt", 4, "ngIf"], [1, "po-menu-panel-container"], [1, "po-menu-panel-inner"], ["class", "po-menu-panel-item-wrapper", 4, "ngFor", "ngForOf"], ["p-class", "po-menu-panel-logo", 3, "p-logo", "p-logo-alt"], [1, "po-menu-panel-item-wrapper"], [3, "p-menu-item-internal"]], template: function PoMenuPanelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoMenuPanelComponent_po_logo_2_Template, 1, 2, "po-logo", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "nav", 3)(4, "div", 4);
            i0.ɵɵtemplate(5, PoMenuPanelComponent_div_5_Template, 2, 3, "div", 5);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.logo);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngForOf", ctx.menus);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoLogoComponent, PoMenuPanelItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelComponent, [{
        type: Component,
        args: [{ selector: 'po-menu-panel', template: "<div class=\"po-menu-panel\">\n  <div class=\"po-menu-panel-logo-container\">\n    <po-logo *ngIf=\"logo\" p-class=\"po-menu-panel-logo\" [p-logo]=\"logo\" [p-logo-alt]=\"logoAlt\"></po-logo>\n  </div>\n\n  <nav class=\"po-menu-panel-container\">\n    <div class=\"po-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus; let menuIndex = index\" class=\"po-menu-panel-item-wrapper\">\n        <po-menu-panel-item\n          [class.po-menu-panel-item-first]=\"menuIndex === 0\"\n          [p-menu-item-internal]=\"menu\"\n        ></po-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n" }]
    }], () => [{ type: i0.ViewContainerRef }, { type: i1.Location }, { type: PoMenuPanelItemsService }, { type: i2.Router }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuPanelComponent, { className: "PoMenuPanelComponent", filePath: "lib/components/po-menu-panel/po-menu-panel.component.ts", lineNumber: 86 }); })();

/**
 * @description
 *
 * Módulo do componente po-menu-panel.
 */
class PoMenuPanelModule {
    static ɵfac = function PoMenuPanelModule_Factory(t) { return new (t || PoMenuPanelModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoMenuPanelModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoMenuPanelItemsService], imports: [CommonModule, RouterModule, PoFieldModule, PoLogoModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule, PoFieldModule, PoLogoModule, PoTooltipModule],
                declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent],
                exports: [PoMenuPanelComponent],
                providers: [PoMenuPanelItemsService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoMenuPanelModule, { declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent], imports: [CommonModule, RouterModule, PoFieldModule, PoLogoModule, PoTooltipModule], exports: [PoMenuPanelComponent] }); })();

const poBadgeColors = Object.values(PoColorPaletteEnum);
const PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * @description
 *
 * Utilizado para exibir a quantidade de notificações.
 */
class PoBadgeBaseComponent {
    badgeValue;
    customColor;
    _color = PO_BADGE_COLOR_DEFAULT;
    _value;
    _status;
    _ariaLabel;
    /**
     * @description
     *
     * Define um `aria-label` para o `po-badge`
     */
    set ariaLabel(value) {
        if (value === undefined) {
            this._ariaLabel = '';
        }
        this._ariaLabel = value;
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Determina a cor do `po-badge`. As maneiras de customizar as cores são:
     * - Hexadeximal, por exemplo `#c64840`;
     * - RGB, como `rgb(0, 0, 165)`;
     * - O nome da cor, por exemplo `blue`;
     * - Usando uma das cores do tema do PO:
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * @default `color-07`
     */
    set color(value) {
        if (value !== undefined && value.includes('color')) {
            this._color = poBadgeColors.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
        }
        else {
            CSS.supports('background-color', value) ? (this.customColor = value) : (this.customColor = undefined);
        }
    }
    get color() {
        return this._color;
    }
    /**
     * @optional
     *
     * @description
     * Ícone exibido no `po-badge`.
     *
     * Para exibir icone do status atual declare a propriedade `p-icon`. conforme exemplo abaixo:
     * ```
     * <po-badge [p-icon]="true"></po-badge>
     * ```
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-badge p-icon="po-icon-user"></po-badge>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-badge p-icon="fa fa-podcast"></po-badge>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-badge [p-icon]="template"></po-badge>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     */
    icon;
    /**
     * @description
     *
     * Define o estado do `po-badge`
     *
     * Valores válidos:
     * - `positive`: Define a cor do `po-badge` com a cor de feedback positivo.;
     * - `negative`: Define a cor do `po-badge` com a cor de feedback negative.;
     * - `warning`: Define a cor do `po-badge` com a cor de feedback warning.;
     * - `disabled`: Define a cor do `po-badge` com a cor de feedback disabled;
     *
     */
    set status(value) {
        this._status = ['positive', 'negative', 'warning', 'disabled'].includes(value) ? value : undefined;
    }
    get status() {
        return this._status;
    }
    /**
     * @description
     *
     * Define o tamanho do `po-badge`
     *
     * Valores válidos:
     * - `small`: o `po-badge` fica do tamanho padrão, com 8px de altura.;
     * - `medium`: o `po-badge` fica do tamanho padrão, com 16px de altura.;
     * - `large`: o `po-badge` fica do tamanho padrão, com 24px de altura.;
     *
     * @default `medium`
     */
    size = 'medium';
    /**
     * @description
     *
     * Exibe uma borda para o `po-badge`
     *
     * > Pode personalizar cor da bordar com a propriedade `p-color-border`
     */
    showBorder = false;
    /**
     * @description
     *
     * Número exibido no componente, caso o mesmo seja maior que 9 o valor exibido será 9+.
     */
    set value(value) {
        this._value = value <= 0 ? 0 : convertToInt(value);
    }
    get value() {
        return this._value;
    }
    static ɵfac = function PoBadgeBaseComponent_Factory(t) { return new (t || PoBadgeBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBadgeBaseComponent, hostVars: 1, hostBindings: function PoBadgeBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("p-status", ctx.status);
        } }, inputs: { ariaLabel: [i0.ɵɵInputFlags.None, "p-aria-label", "ariaLabel"], color: [i0.ɵɵInputFlags.None, "p-color", "color"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], status: [i0.ɵɵInputFlags.None, "p-status", "status"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], showBorder: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-show-border", "showBorder", convertToBoolean], value: [i0.ɵɵInputFlags.None, "p-value", "value"] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeBaseComponent, [{
        type: Directive
    }], null, { ariaLabel: [{
            type: Input,
            args: ['p-aria-label']
        }], color: [{
            type: Input,
            args: ['p-color']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], status: [{
            type: HostBinding,
            args: ['attr.p-status']
        }, {
            type: Input,
            args: ['p-status']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], showBorder: [{
            type: Input,
            args: [{ alias: 'p-show-border', transform: convertToBoolean }]
        }], value: [{
            type: Input,
            args: ['p-value']
        }] }); })();

const PoBadgeLiteralsDefault = {
    en: {
        notification: 'new notification',
        notifications: 'new notifications'
    },
    es: {
        notification: 'nueva notificación',
        notifications: 'nuevas notificaciones'
    },
    pt: {
        notification: 'nova notificação',
        notifications: 'nova notificaçoes'
    },
    ru: {
        notification: 'новое уведомление',
        notifications: 'новые уведомления'
    }
};

function PoBadgeComponent_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 3);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-icon", ctx_r0.badgeIcon);
} }
function PoBadgeComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 4);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r1.badgeValue);
} }
const _c0$o = a0 => ({ "background-color": a0 });
const _c1$6 = () => ({});
const PO_BADGE_MAX_NOTIFICATIONS = 9;
/**
 * @docsExtends PoBadgeBaseComponent
 *
 * @example
 *
 * <example name="po-badge-basic" title="PO Badge Basic">
 *  <file name="sample-po-badge-basic/sample-po-badge-basic.component.html"> </file>
 *  <file name="sample-po-badge-basic/sample-po-badge-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-badge-labs" title="PO Badge Labs">
 *  <file name="sample-po-badge-labs/sample-po-badge-labs.component.html"> </file>
 *  <file name="sample-po-badge-labs/sample-po-badge-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-badge-message" title="PO Badge Message">
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.html"> </file>
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.css"> </file>
 *  <file name="sample-po-badge-message/sample-po-badge-message.component.ts"> </file>
 * </example>
 */
class PoBadgeComponent extends PoBadgeBaseComponent {
    isNotification = false;
    notificationLabel = '';
    literals;
    badgeIcon = '';
    isValidValue = false;
    poLanguageService = inject(PoLanguageService);
    ngOnInit() {
        this.literals = PoBadgeLiteralsDefault[this.poLanguageService.getShortLanguage()];
        this.initialize();
    }
    ngOnChanges(changes) {
        if (changes['status'] || changes['icon']) {
            this.setStatus();
        }
        if (changes['value']) {
            this.setBadgeValue();
            this.setBadgeNotification(changes['value'].currentValue);
            this.setLiterals();
        }
    }
    initialize() {
        this.setStatus();
        this.setLiterals();
        this.setBadgeValue();
        this.setBadgeNotification(this.value);
    }
    getChangeStyle() {
        if ((this.color === 'color-07' && !this.customColor) || this.status) {
            return 'po-badge-default';
        }
        else if (this.color) {
            return `po-${this.color}`;
        }
    }
    setLiterals() {
        if (this.value) {
            this.notificationLabel =
                this.value > 1
                    ? `${this.ariaLabel ?? ''} ${this.value} ${this.literals?.notifications}`
                    : `${this.ariaLabel ?? ''} ${this.value} ${this.literals?.notification}`;
        }
        else {
            this.notificationLabel = `${this.ariaLabel ?? ''} ${this.literals?.notification}`;
        }
    }
    setStatus() {
        this.isNotification = false;
        this.badgeValue = null;
        this.switchIconStatus();
    }
    switchIconStatus() {
        if (typeof this.icon === 'boolean' && this.icon) {
            this.badgeIcon = '';
            if (['positive', 'negative', 'warning', 'disabled'].includes(this.status)) {
                switch (this.status) {
                    case 'positive':
                        this.badgeIcon = 'ICON_OK';
                        break;
                    case 'negative':
                        this.badgeIcon = 'ICON_MINUS';
                        break;
                    case 'warning':
                        this.badgeIcon = 'ICON_WARNING';
                        break;
                }
            }
        }
        else {
            this.badgeIcon = this.icon;
        }
    }
    setBadgeNotification(value) {
        if (value > 1 && !this.status) {
            this.isNotification = true;
            return true;
        }
        else {
            this.isNotification = false;
            this.badgeValue = null;
            return false;
        }
    }
    setBadgeValue() {
        if (this.value) {
            this.checkBadgeValue(this.value);
        }
    }
    checkBadgeValue(value) {
        this.isValidValue = Number.isInteger(value) && value >= 1;
        this.badgeValue = this.isValidValue ? this.formatBadgeValue(value) : '';
    }
    formatBadgeValue(value) {
        return value > PO_BADGE_MAX_NOTIFICATIONS ? '9+' : value.toString();
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoBadgeComponent_BaseFactory; return function PoBadgeComponent_Factory(t) { return (ɵPoBadgeComponent_BaseFactory || (ɵPoBadgeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoBadgeComponent)))(t || PoBadgeComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBadgeComponent, selectors: [["po-badge"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 3, vars: 16, consts: [[3, "ariaLabel", "ngStyle"], [3, "p-icon", 4, "ngIf"], ["class", "po-badge-value", "aria-hidden", "true", 4, "ngIf"], [3, "p-icon"], ["aria-hidden", "true", 1, "po-badge-value"]], template: function PoBadgeComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoBadgeComponent_po_icon_1_Template, 1, 1, "po-icon", 1)(2, PoBadgeComponent_span_2_Template, 2, 1, "span", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate2("", ctx.getChangeStyle(), " po-badge po-badge-", ctx.size ? ctx.size : "medium", "");
            i0.ɵɵclassProp("po-badge-notification", ctx.isNotification && !ctx.status)("po-badge-border", ctx.showBorder);
            i0.ɵɵproperty("ariaLabel", ctx.notificationLabel)("ngStyle", ctx.customColor && !ctx.status ? i0.ɵɵpureFunction1(13, _c0$o, ctx.customColor) : i0.ɵɵpureFunction0(15, _c1$6));
            i0.ɵɵattribute("data-status", ctx.status);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.isNotification && ctx.size !== "small" && ctx.badgeIcon && ctx.status !== "disabled");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.value > 1);
        } }, dependencies: [i1.NgIf, i1.NgStyle, PoIconComponent], styles: ["[_nghost-%COMP%]{display:inline-block;vertical-align:middle}"] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeComponent, [{
        type: Component,
        args: [{ selector: 'po-badge', template: "<div\n  class=\"{{ getChangeStyle() }} po-badge po-badge-{{ size ? size : 'medium' }}\"\n  [class.po-badge-notification]=\"isNotification && !status\"\n  [class.po-badge-border]=\"showBorder\"\n  [attr.data-status]=\"status\"\n  [ariaLabel]=\"notificationLabel\"\n  [ngStyle]=\"customColor && !status ? { 'background-color': customColor } : {}\"\n>\n  <po-icon\n    *ngIf=\"!isNotification && size !== 'small' && badgeIcon && status !== 'disabled'\"\n    [p-icon]=\"badgeIcon\"\n  ></po-icon>\n  <span *ngIf=\"value > 1\" class=\"po-badge-value\" aria-hidden=\"true\">{{ badgeValue }}</span>\n</div>\n", styles: [":host{display:inline-block;vertical-align:middle}\n"] }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoBadgeComponent, { className: "PoBadgeComponent", filePath: "lib/components/po-badge/po-badge.component.ts", lineNumber: 36 }); })();

/**
 * @description
 *
 * Módulo do componente po-badge.
 */
class PoBadgeModule {
    static ɵfac = function PoBadgeModule_Factory(t) { return new (t || PoBadgeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoBadgeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule],
                declarations: [PoBadgeComponent],
                exports: [PoBadgeComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoBadgeModule, { declarations: [PoBadgeComponent], imports: [CommonModule, PoIconModule], exports: [PoBadgeComponent] }); })();

const _c0$n = ["inputFilter"];
function PoMenuFilterComponent_po_icon_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 8);
} }
function PoMenuFilterComponent_po_loading_icon_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-loading-icon", 9);
} }
const poMenuFilterLiteralsDefault = {
    en: { search: 'Search' },
    es: { search: 'Buscar' },
    pt: { search: 'Pesquisar' },
    ru: { search: 'Поиск' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que apresenta o campo de pesquisa no po-menu.
 */
class PoMenuFilterComponent {
    languageService;
    loading;
    enableCollapse = false;
    // utilizado para repassar ao po-clean
    inputFilterElement;
    filter = new EventEmitter();
    literals;
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = {
            ...poMenuFilterLiteralsDefault[this.languageService?.getLanguageDefault()],
            ...poMenuFilterLiteralsDefault[this.languageService?.getShortLanguage()]
        };
    }
    filterItems(search) {
        this.filter.emit(search);
    }
    static ɵfac = function PoMenuFilterComponent_Factory(t) { return new (t || PoMenuFilterComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuFilterComponent, selectors: [["po-menu-filter"]], viewQuery: function PoMenuFilterComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$n, 7, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputFilterElement = _t.first);
        } }, inputs: { loading: [i0.ɵɵInputFlags.None, "p-loading", "loading"], enableCollapse: [i0.ɵɵInputFlags.None, "p-enable-collapse", "enableCollapse"] }, outputs: { filter: "p-filter" }, decls: 8, vars: 6, consts: [[1, "po-menu-filter-container"], ["type", "text", 1, "po-menu-filter", 3, "placeholder", "keyup"], ["inputFilter", ""], [1, "po-menu-filter-search-icon-container"], ["p-icon", "ICON_SEARCH po-field-icon", "class", "po-menu-filter-icon", 4, "ngIf"], ["p-size", "sm", 4, "ngIf"], [1, "po-menu-filter-close-icon-container"], [3, "p-element-ref", "p-change-event"], ["p-icon", "ICON_SEARCH po-field-icon", 1, "po-menu-filter-icon"], ["p-size", "sm"]], template: function PoMenuFilterComponent_Template(rf, ctx) { if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0)(1, "input", 1, 2);
            i0.ɵɵlistener("keyup", function PoMenuFilterComponent_Template_input_keyup_1_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(2); return i0.ɵɵresetView(ctx.filterItems(_r0.value)); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoMenuFilterComponent_po_icon_4_Template, 1, 0, "po-icon", 4)(5, PoMenuFilterComponent_po_loading_icon_5_Template, 1, 0, "po-loading-icon", 5);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6)(7, "po-clean", 7);
            i0.ɵɵlistener("p-change-event", function PoMenuFilterComponent_Template_po_clean_p_change_event_7_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(2); return i0.ɵɵresetView(ctx.filterItems(_r0.value)); });
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵclassProp("po-menu-filter-container-hidden", ctx.enableCollapse);
            i0.ɵɵadvance();
            i0.ɵɵproperty("placeholder", ctx.literals.search);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !ctx.loading);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.loading);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-element-ref", ctx.inputFilterElement);
        } }, dependencies: [i1.NgIf, PoCleanComponent, PoLoadingIconComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuFilterComponent, [{
        type: Component,
        args: [{ selector: 'po-menu-filter', template: "<div class=\"po-menu-filter-container\" [class.po-menu-filter-container-hidden]=\"enableCollapse\">\n  <input\n    #inputFilter\n    type=\"text\"\n    class=\"po-menu-filter\"\n    [placeholder]=\"literals.search\"\n    (keyup)=\"filterItems(inputFilter.value)\"\n  />\n\n  <div class=\"po-menu-filter-search-icon-container\">\n    <po-icon p-icon=\"ICON_SEARCH po-field-icon\" *ngIf=\"!loading\" class=\"po-menu-filter-icon\"></po-icon>\n    <po-loading-icon *ngIf=\"loading\" p-size=\"sm\"></po-loading-icon>\n  </div>\n  <div class=\"po-menu-filter-close-icon-container\">\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\n  </div>\n</div>\n" }]
    }], () => [{ type: PoLanguageService }], { loading: [{
            type: Input,
            args: ['p-loading']
        }], enableCollapse: [{
            type: Input,
            args: ['p-enable-collapse']
        }], inputFilterElement: [{
            type: ViewChild,
            args: ['inputFilter', { read: ElementRef, static: true }]
        }], filter: [{
            type: Output,
            args: ['p-filter']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuFilterComponent, { className: "PoMenuFilterComponent", filePath: "lib/components/po-menu/po-menu-filter/po-menu-filter.component.ts", lineNumber: 23 }); })();

/**
 * @usedBy PoMenuComponent
 *
 * @description
 *
 * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
 * [`po-menu`](/documentation/po-menu).
 *
 * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `p-menu-header-template` dentro da *tag* do
 * [`po-menu`](/documentation/po-menu). Podendo ser utilizada de duas formas:
 *
 * Com `ng-template`
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <ng-template p-menu-header-template>
 *     ...
 *   </ng-template>
 * </po-menu>
 * ...
 * ```
 *
 * ou com *syntax sugar*
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <div *p-menu-header-template>
 *     ...
 *   </div>
 * </po-menu>
 * ...
 * ```
 *
 * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
 */
class PoMenuHeaderTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoMenuHeaderTemplateDirective_Factory(t) { return new (t || PoMenuHeaderTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuHeaderTemplateDirective, selectors: [["", "p-menu-header-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuHeaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-menu-header-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a comunicação entre os items do po-menu.
 */
class PoMenuItemsService {
    subjectParent = new Subject();
    subjectChild = new Subject();
    // Envia informações do click do po-menu-item para o po-menu
    sendToParentMenuClicked(menu) {
        this.subjectChild.next(menu);
    }
    // Recebe do po-menu-item sua informação de click.
    receiveFromChildMenuClicked() {
        return this.subjectChild.asObservable();
    }
    // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
    sendToChildMenuClicked(menu) {
        this.subjectParent.next(menu);
    }
    // Recebe do po-menu as informações processadas do click de um po-menu-item.
    receiveFromParentMenuClicked() {
        return this.subjectParent.asObservable();
    }
    static ɵfac = function PoMenuItemsService_Factory(t) { return new (t || PoMenuItemsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuItemsService, factory: PoMenuItemsService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuItemsService, [{
        type: Injectable
    }], null, null); })();

const _c0$m = ["menuSubItems"];
function PoMenuItemComponent_a_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuItemComponent_a_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 6);
    i0.ɵɵlistener("keydown.enter", function PoMenuItemComponent_a_0_Template_a_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.clickMenuItem($event)); })("keydown.space", function PoMenuItemComponent_a_0_Template_a_keydown_space_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.clickMenuItem($event)); });
    i0.ɵɵtemplate(1, PoMenuItemComponent_a_0_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵproperty("routerLink", ctx_r0.link)("p-tooltip", ctx_r0.collapsedMenu && ctx_r0.shortLabel ? ctx_r0.shortLabel : undefined)("p-append-in-body", true);
    i0.ɵɵattribute("aria-label", ctx_r0.label);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoMenuItemComponent_a_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuItemComponent_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 8);
    i0.ɵɵlistener("keydown.enter", function PoMenuItemComponent_a_1_Template_a_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.clickMenuItem($event)); })("keydown.space", function PoMenuItemComponent_a_1_Template_a_keydown_space_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.clickMenuItem($event)); });
    i0.ɵɵtemplate(1, PoMenuItemComponent_a_1_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵproperty("href", ctx_r1.link, i0.ɵɵsanitizeUrl)("p-tooltip", ctx_r1.collapsedMenu && ctx_r1.shortLabel ? ctx_r1.shortLabel : undefined)("p-append-in-body", true);
    i0.ɵɵattribute("aria-label", ctx_r1.label);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoMenuItemComponent_a_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuItemComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 9);
    i0.ɵɵlistener("keydown.enter", function PoMenuItemComponent_a_2_Template_a_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.clickMenuItem($event)); })("keydown.space", function PoMenuItemComponent_a_2_Template_a_keydown_space_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.clickMenuItem($event)); });
    i0.ɵɵtemplate(1, PoMenuItemComponent_a_2_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵproperty("p-tooltip", ctx_r2.collapsedMenu && ctx_r2.shortLabel ? ctx_r2.shortLabel : undefined)("p-append-in-body", true);
    i0.ɵɵattribute("aria-label", ctx_r2.label);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoMenuItemComponent_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuItemComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtemplate(1, PoMenuItemComponent_div_3_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function PoMenuItemComponent_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuItemComponent_div_4_li_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 16);
    i0.ɵɵelement(1, "po-menu-item", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const subItem_r23 = ctx.$implicit;
    i0.ɵɵattribute("aria-level", subItem_r23.level);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", subItem_r23.action)("p-badge-alert", subItem_r23.badgeAlert)("p-badge-color", subItem_r23.badge ? subItem_r23.badge.color : undefined)("p-badge-value", subItem_r23.badge ? subItem_r23.badge.value : undefined)("p-id", subItem_r23.id)("p-label", subItem_r23.label)("p-level", subItem_r23.level)("p-link", subItem_r23.link)("p-sub-items", subItem_r23.subItems)("p-type", subItem_r23.type);
} }
function PoMenuItemComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtemplate(1, PoMenuItemComponent_div_4_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementStart(2, "div", 12, 13)(4, "ul", 14);
    i0.ɵɵtemplate(5, PoMenuItemComponent_div_4_li_5_Template, 2, 11, "li", 15);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(6);
    i0.ɵɵattribute("aria-expanded", ctx_r4.isOpened ? true : false);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
    i0.ɵɵadvance();
    i0.ɵɵstyleProp("max-height", ctx_r4.maxHeight, "px");
    i0.ɵɵproperty("hidden", ctx_r4.collapsedMenu || !ctx_r4.isOpened);
    i0.ɵɵattribute("aria-expanded", ctx_r4.isOpened ? true : false)("aria-hidden", !ctx_r4.isOpened ? true : false);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r4.subItems);
} }
function PoMenuItemComponent_ng_template_5_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 23);
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-icon", ctx_r24.icon);
} }
function PoMenuItemComponent_ng_template_5_po_icon_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-icon", 24);
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-icon", ctx_r25.isOpened ? "ICON_ARROW_UP po-field-icon" : "ICON_ARROW_DOWN po-field-icon");
} }
function PoMenuItemComponent_ng_template_5_po_badge_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-badge", 25);
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", !ctx_r26.collapsedMenu ? "po-menu-badge-align" : "po-menu-badge-align-collapsed")("p-color", ctx_r26.badgeColor)("p-value", ctx_r26.badgeValue);
} }
function PoMenuItemComponent_ng_template_5_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 26);
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", !ctx_r27.collapsedMenu ? "po-menu-badge-alert" : "po-menu-badge-alert-collapsed");
} }
function PoMenuItemComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵlistener("click", function PoMenuItemComponent_ng_template_5_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r28.clickMenuItem($event)); })("keydown.enter", function PoMenuItemComponent_ng_template_5_Template_div_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r30 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r30.clickMenuItem($event)); })("keydown.space", function PoMenuItemComponent_ng_template_5_Template_div_keydown_space_0_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r31 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r31.clickMenuItem($event)); });
    i0.ɵɵtemplate(1, PoMenuItemComponent_ng_template_5_po_icon_1_Template, 1, 1, "po-icon", 19)(2, PoMenuItemComponent_ng_template_5_po_icon_2_Template, 1, 1, "po-icon", 20);
    i0.ɵɵelementStart(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, PoMenuItemComponent_ng_template_5_po_badge_5_Template, 1, 3, "po-badge", 21)(6, PoMenuItemComponent_ng_template_5_span_6_Template, 1, 1, "span", 22);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-menu-icon-container", ctx_r5.level === 1 && ctx_r5.icon)("po-menu-item-selected", ctx_r5.isSelected)("po-menu-item-level-two", ctx_r5.level === 2)("po-menu-item-level-three", ctx_r5.level === 3)("po-menu-item-level-four", ctx_r5.level === 4)("po-menu-item-grouper-up", ctx_r5.type === "subItems" && ctx_r5.isOpened)("po-menu-item-grouper-down", ctx_r5.type === "subItems" && !ctx_r5.isOpened)("po-menu-item-no-data", ctx_r5.type === "noData")("po-menu-sub-item-selected", ctx_r5.isSelectedSubItem);
    i0.ɵɵproperty("p-tooltip", ctx_r5.type === "subItems" && ctx_r5.collapsedMenu && ctx_r5.shortLabel ? ctx_r5.shortLabel : undefined)("p-append-in-body", true)("tabindex", ctx_r5.type === "subItems" ? 0 : -1);
    i0.ɵɵattribute("aria-label", ctx_r5.label)("aria-hidden", ctx_r5.type === "subItems" ? false : true)("role", ctx_r5.type === "subItems" ? "menuitem" : undefined);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.level === 1 && ctx_r5.icon);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.type === "subItems" && !ctx_r5.collapsedMenu);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-menu-icon-label", ctx_r5.level === 1 && ctx_r5.icon);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r5.label, " ");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.canShowBadge);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.badgeAlert);
} }
// valor para que caibam 3 linhas de `label`
const poMenuItemSubItemSize = 98;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu.
 */
class PoMenuItemComponent {
    menuItemsService;
    // Ação que será chamada ao clicar no item.
    action;
    // Indica se contém algum item filho com o badge.
    badgeAlert;
    // Cor do badge.
    badgeColor;
    // Indica se o menu está colapsado
    collapsedMenu;
    // Ícone de menu
    icon;
    // Identificador do item.
    id;
    // Indica se o item está aberto (menu agrupado)
    isOpened;
    // Texto que aparecerá representando o item.
    label;
    // Indica qual em nível do po-menu encontra-se.
    level;
    // Link do item.
    link;
    // Texto que aparecerá representando o item.
    shortLabel;
    // Indica o tipo de item, como 'internalLink' ou 'subItems'.
    type;
    menuSubItems;
    isSelectedSubItem;
    maxHeight = 0;
    itemSubscription;
    _badgeValue;
    _isSelected = false;
    _isSubItem = false;
    _subItems;
    // Valor do badge.
    set badgeValue(badgeValue) {
        this._badgeValue = convertToInt(badgeValue);
    }
    get badgeValue() {
        return this._badgeValue;
    }
    // Indica se o item está selecionado.
    set isSelected(value) {
        this._isSelected = convertToBoolean(value);
        this.isSelectedSubItem = this.isSelected && this.isSubItem;
    }
    get isSelected() {
        return this._isSelected;
    }
    // Indica se o item é um sub item
    set isSubItem(value) {
        this._isSubItem = convertToBoolean(value);
    }
    get isSubItem() {
        return this._isSubItem;
    }
    // Lista de sub-items.
    set subItems(subitems) {
        this._subItems = subitems;
        if (this.isOpened) {
            this.calcMenuSubItemsMaxHeight();
        }
    }
    get subItems() {
        return this._subItems;
    }
    get canShowBadge() {
        return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
    }
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    }
    accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened']
                ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    }
    activateMenu(menu) {
        this.isSelected = menu && this.id === menu.id;
    }
    calcMenuSubItemsMaxHeight() {
        setTimeout(() => {
            const subItems = Array.from(this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
            subItems.forEach((menuItem) => (this.maxHeight += menuItem.offsetHeight));
        });
    }
    getMinimumHeight(minimumHeight, menuItem, menuActive) {
        minimumHeight += poMenuItemSubItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (let index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    }
    groupedMenu(menuActive, menuOpened, activatedByRoute = false) {
        const hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    }
    hasSubItem(subItems, id) {
        if (subItems) {
            return subItems.some(item => (item['id'] === id ? true : this.hasSubItem(item.subItems, id)));
        }
    }
    isMenuOpened(menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    }
    processMenuItem(menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
        }
    }
    static ɵfac = function PoMenuItemComponent_Factory(t) { return new (t || PoMenuItemComponent)(i0.ɵɵdirectiveInject(PoMenuItemsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuItemComponent, selectors: [["po-menu-item"]], viewQuery: function PoMenuItemComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$m, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuSubItems = _t.first);
        } }, inputs: { action: [i0.ɵɵInputFlags.None, "p-action", "action"], badgeAlert: [i0.ɵɵInputFlags.None, "p-badge-alert", "badgeAlert"], badgeColor: [i0.ɵɵInputFlags.None, "p-badge-color", "badgeColor"], collapsedMenu: [i0.ɵɵInputFlags.None, "p-collapsed-menu", "collapsedMenu"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], id: [i0.ɵɵInputFlags.None, "p-id", "id"], isOpened: [i0.ɵɵInputFlags.None, "p-is-opened", "isOpened"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], level: [i0.ɵɵInputFlags.None, "p-level", "level"], link: [i0.ɵɵInputFlags.None, "p-link", "link"], shortLabel: [i0.ɵɵInputFlags.None, "p-short-label", "shortLabel"], type: [i0.ɵɵInputFlags.None, "p-type", "type"], badgeValue: [i0.ɵɵInputFlags.None, "p-badge-value", "badgeValue"], isSelected: [i0.ɵɵInputFlags.None, "p-is-selected", "isSelected"], isSubItem: [i0.ɵɵInputFlags.None, "p-is-sub-item", "isSubItem"], subItems: [i0.ɵɵInputFlags.None, "p-sub-items", "subItems"] }, decls: 7, vars: 5, consts: [["class", "po-menu-item-link", "role", "menuitem", "p-tooltip-position", "right", 3, "routerLink", "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space", 4, "ngIf"], ["class", "po-menu-item-link", "role", "menuitem", "p-tooltip-position", "right", 3, "href", "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space", 4, "ngIf"], ["class", "po-menu-item-link", "href", "javascript:;", "role", "menuitem", "p-tooltip-position", "right", 3, "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space", 4, "ngIf"], ["class", "po-menu-item-link", "role", "none", 4, "ngIf"], ["class", "po-menu-item-link po-clickable", "role", "menuitem", 4, "ngIf"], ["menuItemTemplate", ""], ["role", "menuitem", "p-tooltip-position", "right", 1, "po-menu-item-link", 3, "routerLink", "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space"], [4, "ngTemplateOutlet"], ["role", "menuitem", "p-tooltip-position", "right", 1, "po-menu-item-link", 3, "href", "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space"], ["href", "javascript:;", "role", "menuitem", "p-tooltip-position", "right", 1, "po-menu-item-link", 3, "p-tooltip", "p-append-in-body", "keydown.enter", "keydown.space"], ["role", "none", 1, "po-menu-item-link"], ["role", "menuitem", 1, "po-menu-item-link", "po-clickable"], ["role", "group", 1, "po-menu-sub-items", 3, "hidden"], ["menuSubItems", ""], [1, "po-menu-sub-items-list"], ["class", "po-menu-sub-items-list-item", 4, "ngFor", "ngForOf"], [1, "po-menu-sub-items-list-item"], ["p-is-sub-item", "", 3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-id", "p-label", "p-level", "p-link", "p-sub-items", "p-type"], ["p-tooltip-position", "right", 1, "po-menu-item", 3, "p-tooltip", "p-append-in-body", "tabindex", "click", "keydown.enter", "keydown.space"], ["aria-hidden", "true", "class", "po-menu-icon-item", 3, "p-icon", 4, "ngIf"], ["class", "po-menu-group-icon", 3, "p-icon", 4, "ngIf"], ["aria-hidden", "true", 3, "ngClass", "p-color", "p-value", 4, "ngIf"], ["aria-hidden", "true", "class", "po-color-07", 3, "ngClass", 4, "ngIf"], ["aria-hidden", "true", 1, "po-menu-icon-item", 3, "p-icon"], [1, "po-menu-group-icon", 3, "p-icon"], ["aria-hidden", "true", 3, "ngClass", "p-color", "p-value"], ["aria-hidden", "true", 1, "po-color-07", 3, "ngClass"]], template: function PoMenuItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuItemComponent_a_0_Template, 2, 5, "a", 0)(1, PoMenuItemComponent_a_1_Template, 2, 5, "a", 1)(2, PoMenuItemComponent_a_2_Template, 2, 4, "a", 2)(3, PoMenuItemComponent_div_3_Template, 2, 1, "div", 3)(4, PoMenuItemComponent_div_4_Template, 6, 8, "div", 4)(5, PoMenuItemComponent_ng_template_5_Template, 7, 31, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.type === "internalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "noLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "noData");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.type === "subItems");
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2.RouterLink, PoBadgeComponent, PoIconComponent, PoTooltipDirective, PoMenuItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuItemComponent, [{
        type: Component,
        args: [{ selector: 'po-menu-item', template: "<!-- menu com link interno -->\n<a\n  *ngIf=\"type === 'internalLink'\"\n  class=\"po-menu-item-link\"\n  role=\"menuitem\"\n  [attr.aria-label]=\"label\"\n  [routerLink]=\"link\"\n  (keydown.enter)=\"clickMenuItem($event)\"\n  (keydown.space)=\"clickMenuItem($event)\"\n  p-tooltip-position=\"right\"\n  [p-tooltip]=\"collapsedMenu && shortLabel ? shortLabel : undefined\"\n  [p-append-in-body]=\"true\"\n>\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a\n  *ngIf=\"type === 'externalLink'\"\n  class=\"po-menu-item-link\"\n  role=\"menuitem\"\n  [attr.aria-label]=\"label\"\n  [href]=\"link\"\n  (keydown.enter)=\"clickMenuItem($event)\"\n  (keydown.space)=\"clickMenuItem($event)\"\n  p-tooltip-position=\"right\"\n  [p-tooltip]=\"collapsedMenu && shortLabel ? shortLabel : undefined\"\n  [p-append-in-body]=\"true\"\n>\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a\n  *ngIf=\"type === 'noLink'\"\n  class=\"po-menu-item-link\"\n  href=\"javascript:;\"\n  role=\"menuitem\"\n  [attr.aria-label]=\"label\"\n  (keydown.enter)=\"clickMenuItem($event)\"\n  (keydown.space)=\"clickMenuItem($event)\"\n  p-tooltip-position=\"right\"\n  [p-tooltip]=\"collapsedMenu && shortLabel ? shortLabel : undefined\"\n  [p-append-in-body]=\"true\"\n>\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem dados -->\n<div *ngIf=\"type === 'noData'\" class=\"po-menu-item-link\" role=\"none\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</div>\n<!-- menu com sub itens -->\n<div\n  *ngIf=\"type === 'subItems'\"\n  class=\"po-menu-item-link po-clickable\"\n  role=\"menuitem\"\n  [attr.aria-expanded]=\"isOpened ? true : false\"\n>\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n\n  <div\n    #menuSubItems\n    class=\"po-menu-sub-items\"\n    [hidden]=\"collapsedMenu || !isOpened\"\n    [attr.aria-expanded]=\"isOpened ? true : false\"\n    [attr.aria-hidden]=\"!isOpened ? true : false\"\n    role=\"group\"\n    [style.maxHeight.px]=\"maxHeight\"\n  >\n    <ul class=\"po-menu-sub-items-list\">\n      <li class=\"po-menu-sub-items-list-item\" *ngFor=\"let subItem of subItems\" [attr.aria-level]=\"subItem.level\">\n        <po-menu-item\n          p-is-sub-item\n          [p-action]=\"subItem.action\"\n          [p-badge-alert]=\"subItem.badgeAlert\"\n          [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n          [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n          [p-id]=\"subItem.id\"\n          [p-label]=\"subItem.label\"\n          [p-level]=\"subItem.level\"\n          [p-link]=\"subItem.link\"\n          [p-sub-items]=\"subItem.subItems\"\n          [p-type]=\"subItem.type\"\n        ></po-menu-item>\n      </li>\n    </ul>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div\n    p-tooltip-position=\"right\"\n    [p-tooltip]=\"type === 'subItems' && collapsedMenu && shortLabel ? shortLabel : undefined\"\n    [p-append-in-body]=\"true\"\n    class=\"po-menu-item\"\n    [tabindex]=\"type === 'subItems' ? 0 : -1\"\n    [attr.aria-label]=\"label\"\n    [attr.aria-hidden]=\"type === 'subItems' ? false : true\"\n    [attr.role]=\"type === 'subItems' ? 'menuitem' : undefined\"\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\n    [class.po-menu-item-selected]=\"isSelected\"\n    [class.po-menu-item-level-two]=\"level === 2\"\n    [class.po-menu-item-level-three]=\"level === 3\"\n    [class.po-menu-item-level-four]=\"level === 4\"\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.po-menu-item-no-data]=\"type === 'noData'\"\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event)\"\n    (keydown.enter)=\"clickMenuItem($event)\"\n    (keydown.space)=\"clickMenuItem($event)\"\n  >\n    <po-icon *ngIf=\"level === 1 && icon\" aria-hidden=\"true\" class=\"po-menu-icon-item\" [p-icon]=\"icon\"></po-icon>\n\n    <po-icon\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"po-menu-group-icon\"\n      [p-icon]=\"isOpened ? 'ICON_ARROW_UP po-field-icon' : 'ICON_ARROW_DOWN po-field-icon'\"\n    ></po-icon>\n\n    <span [class.po-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </span>\n\n    <po-badge\n      *ngIf=\"canShowBadge\"\n      aria-hidden=\"true\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\n      [p-color]=\"badgeColor\"\n      [p-value]=\"badgeValue\"\n    ></po-badge>\n\n    <span\n      *ngIf=\"badgeAlert\"\n      aria-hidden=\"true\"\n      class=\"po-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\n    ></span>\n  </div>\n</ng-template>\n" }]
    }], () => [{ type: PoMenuItemsService }], { action: [{
            type: Input,
            args: ['p-action']
        }], badgeAlert: [{
            type: Input,
            args: ['p-badge-alert']
        }], badgeColor: [{
            type: Input,
            args: ['p-badge-color']
        }], collapsedMenu: [{
            type: Input,
            args: ['p-collapsed-menu']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], id: [{
            type: Input,
            args: ['p-id']
        }], isOpened: [{
            type: Input,
            args: ['p-is-opened']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], level: [{
            type: Input,
            args: ['p-level']
        }], link: [{
            type: Input,
            args: ['p-link']
        }], shortLabel: [{
            type: Input,
            args: ['p-short-label']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], menuSubItems: [{
            type: ViewChild,
            args: ['menuSubItems']
        }], badgeValue: [{
            type: Input,
            args: ['p-badge-value']
        }], isSelected: [{
            type: Input,
            args: ['p-is-selected']
        }], isSubItem: [{
            type: Input,
            args: ['p-is-sub-item']
        }], subItems: [{
            type: Input,
            args: ['p-sub-items']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuItemComponent, { className: "PoMenuItemComponent", filePath: "lib/components/po-menu/po-menu-item/po-menu-item.component.ts", lineNumber: 24 }); })();

class PoMenuGlobalService {
    applicationMenu = new Subject();
    menus = new Subject();
    removedApplicationMenu = new Subject();
    // eslint-disable-next-line @typescript-eslint/member-ordering
    receiveApplicationMenu$ = this.applicationMenu.asObservable();
    // eslint-disable-next-line @typescript-eslint/member-ordering
    receiveMenus$ = this.menus.asObservable();
    // eslint-disable-next-line @typescript-eslint/member-ordering
    receiveRemovedApplicationMenu$ = this.removedApplicationMenu.asObservable();
    sendApplicationMenu(menu) {
        this.applicationMenu.next(menu);
    }
    sendMenus(menus) {
        this.menus.next(menus);
    }
    sendRemovedApplicationMenu(id) {
        this.removedApplicationMenu.next(id);
    }
    static ɵfac = function PoMenuGlobalService_Factory(t) { return new (t || PoMenuGlobalService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuGlobalService, factory: PoMenuGlobalService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuGlobalService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a interface `PoMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `po-menu`.
 */
class PoMenuService {
    http;
    _url;
    get url() {
        return this._url;
    }
    constructor(http) {
        this.http = http;
    }
    configProperties(url) {
        this._url = url;
    }
    getFilteredData(search, params) {
        const filterParams = {
            search,
            ...params
        };
        return this.http
            .get(this.url, { params: filterParams })
            .pipe(map((response) => response && response.items));
    }
    static ɵfac = function PoMenuService_Factory(t) { return new (t || PoMenuService)(i0.ɵɵinject(i1$2.HttpClient)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuService, factory: PoMenuService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuService, [{
        type: Injectable
    }], () => [{ type: i1$2.HttpClient }], null); })();

const poMenuLiteralsDefault = {
    en: {
        itemNotFound: 'Item not found',
        emptyLabelError: 'Attribute PoMenuItem.label can not be empty',
        close: 'Close menu',
        open: 'Open menu'
    },
    es: {
        itemNotFound: 'Elemento no encontrado',
        emptyLabelError: 'El atributo PoMenuItem.label no puede ser vacío',
        close: 'Cerrar menú',
        open: 'Abrir menú'
    },
    pt: {
        itemNotFound: 'Item não encontrado',
        emptyLabelError: 'O atributo PoMenuItem.label não pode ser vazio',
        close: 'Fechar menu',
        open: 'Abrir menu'
    },
    ru: {
        itemNotFound: 'Предмет не найден',
        emptyLabelError: 'Атрибут PoMenuItem.label не может быть пустым',
        close: 'Закрыть меню',
        open: 'Открыть меню'
    }
};
/**
 * @description
 *
 * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
 *
 * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
 * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                    |
 * |----------------------------------------|-------------------------------------------------------|-------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                 |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                       |
 * | `--border-color`                       | Cor da borda                                          | `var(--color-neutral-light-20)`                 |
 * | `--background-color`                   | Cor de background                                     | `Var(----color-neutral-light-05)`               |
 * | **Menu Footer**                        |                                                       |                                                 |
 * | `--color`                              | Cor principla do menu footer                          | `var(--color-action-default)`                   |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--line-height`                        | Tamanho da label                                      | `var(--line-height-md)`                         |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | `--font-weight-lvl0`                   | Peso da fonte                                         | `var(--font-weight-bold)`                       |
 * | **po-menu-item**                       |                                                       |                                                 |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                      |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                      |
 * | `--line-height`                        | Tamanho da label                                      | `var(--line-height-md)`                         |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                       |
 * | `--color`                              | Cor principal do item                                 | `var(--color-action-default)`                   |
 * | `--background-color`                   | Cor do background                                     | `transparent`                                   |
 * | **Hover**                              |                                                       |                                                 |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-darkest)`                 |
 * | `--background-color-hover`             | Cor de background no estado hover                     | `var(--color-brand-01-lighter)`                 |
 * | **Focused**                            |                                                       |                                                 |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                     |
 * | **Pressed**                            |                                                       |                                                 |
 * | `--background-color-pressed` &nbsp;    | Cor de background no estado de pressionado&nbsp;      | `var(--color-brand-01-light)`                   |
 * | **Actived**                            |                                                       |                                                 |
 * | `--background-color-actived`           | Cor de background no estado actived                   | `var(--color-brand-01-darkest)`                 |
 * | `--color-actived`                      | Cor principal no estado actived                       | `var(--color-brand-01-lighter)`                 |
 * | **Font**                               |                                                       |                                                 |
 * | `--font-weight-lvl0`                   | Peso da fonte bold                                    | `var(--font-weight-bold)`                       |
 * | `--font-weight-lvl1`                   | Peso da fonte                                         | `var(--font-weight-normal)`                     |
 *
 * <br>
 */
class PoMenuBaseComponent {
    menuGlobalService;
    menuService;
    languageService;
    allowIcons;
    allowCollapseMenu;
    allowCollapseHover;
    filteredItems;
    filterService;
    literals;
    _collapsed = false;
    _filter = false;
    _level;
    _maxLevel = 4;
    _menus = [];
    _params;
    _service;
    /**
     * @optional
     *
     * @description
     *
     * Expande e Colapsa (retrai) o menu automaticamente.
     *
     * @default `false`
     */
    automaticToggle = false;
    /**
     * @optional
     *
     * @description
     *
     * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
     *
     * > Utilize esta propriedade para iniciar o menu colapsado.
     *
     * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
     * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
     *
     * **Importante:**
     *
     * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     *
     * @default `false`
     */
    set collapsed(collapsed) {
        this._collapsed = convertToBoolean(collapsed);
        this.allowCollapseHover = this._collapsed;
        this.validateCollapseClass();
    }
    get collapsed() {
        return this._collapsed;
    }
    /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.menuGlobalService.sendMenus(menus);
        setTimeout(() => {
            const urlRouter = this.checkingRouterChildrenFragments();
            this.checkActiveMenuByUrl(urlRouter);
        });
    }
    get menus() {
        return this._menus;
    }
    get maxLevel() {
        return this._maxLevel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um campo para pesquisa no menu.
     * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
     * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
     *
     * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
     *
     * @default `false`
     */
    set filter(filter) {
        this._filter = filter === '' ? true : convertToBoolean(filter);
        this.filteredItems = [...this._menus];
    }
    get filter() {
        return this._filter;
    }
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
     * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
     * serviço implementando a interface `PoMenuFilter`.
     *
     * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
     * [Guia de implementação de APIs](https://po-ui.io/guides/api) do PO UI.
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
     * no parâmetro `search`, veja exemplo:
     *
     * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
     *
     * ```
     * <po-menu p-service="/api/v1/fnd/menu">
     * </po-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas
     * ```
     *
     * > É necessário que propriedade `p-filter` esteja habilitada.
     */
    set service(value) {
        this._service = value || undefined;
        this.configService(this.service);
    }
    get service() {
        return this._service;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
     *
     * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
     * será passado como parâmetro, na função `getFilteredData`.
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
     * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
     *
     * ```
     * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
     * </po-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
     * ```
     */
    set params(value) {
        this._params = value && isTypeof(value, 'object') ? value : undefined;
    }
    get params() {
        return this._params;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     */
    logo;
    /**
     * @optional
     *
     * @description
     *
     * Define o texto alternativo para a logomarca.
     *
     * > **Importante**
     * > Caso esta propriedade não seja definida o texto padrão será "Logomarca início".
     *
     * @default `Logomarca início`
     */
    logoAlt;
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
     * espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
     */
    shortLogo;
    constructor(menuGlobalService, menuService, languageService) {
        this.menuGlobalService = menuGlobalService;
        this.menuService = menuService;
        this.languageService = languageService;
        this.literals = {
            ...poMenuLiteralsDefault[this.languageService?.getLanguageDefault()],
            ...poMenuLiteralsDefault[this.languageService?.getShortLanguage()]
        };
    }
    setMenuExtraProperties() {
        this.allowIcons = !!this.menus.length;
        this.allowCollapseMenu = !!this.menus.length;
        this.menus.forEach(menuItem => {
            this._level = 1;
            this.allowIcons = this.allowIcons ? validValue(menuItem.icon) : false;
            this.allowCollapseMenu = this.allowCollapseMenu && this.allowIcons ? validValue(menuItem.shortLabel) : false;
            this.removeBadgeAlert(menuItem);
            this.setMenuItemProperties(menuItem);
            if (menuItem.subItems) {
                this._level++;
                this.processSubItems(menuItem);
            }
        });
    }
    setMenuItemProperties(menuItem) {
        menuItem['id'] = menuItem['id'] || uuid();
        menuItem['level'] = this._level;
        menuItem['type'] = this.setMenuType(menuItem);
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
    setMenuType(menuItem) {
        if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
            return 'subItems';
        }
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    configService(service) {
        if (typeof service === 'string' && service.trim()) {
            // service url
            this.menuService.configProperties(service);
            this.filterService = this.menuService;
        }
        else if (typeof service === 'object' && service.getFilteredData) {
            // custom service
            this.filterService = service;
        }
        else {
            this.filterService = undefined;
        }
    }
    processSubItems(menu) {
        menu.subItems.forEach((menuItem, index, menuItems) => {
            const previousItem = menuItems[index - 1];
            if (previousItem && previousItem.subItems) {
                this._level = previousItem['level'];
            }
            if (this._level <= this.maxLevel) {
                this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    this._level++;
                    this.processSubItems(menuItem);
                }
            }
            if (!menu['badgeAlert']) {
                menu = this.setMenuBadgeAlert(menu, menuItem);
            }
        });
        menu.subItems = Object.assign([], menu.subItems);
    }
    removeBadgeAlert(menuItem) {
        if (menuItem['badgeAlert']) {
            delete menuItem['badgeAlert'];
        }
        if (menuItem.subItems) {
            menuItem.subItems.forEach(subItem => this.removeBadgeAlert(subItem));
        }
    }
    setMenuBadgeAlert(parent, child) {
        const childHasSubItems = child.subItems && child.subItems.length;
        const childHasBadgeAlert = child['badgeAlert'];
        const childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
        parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
        return parent;
    }
    validateMenu(menuItem) {
        if (!menuItem.label || menuItem.label.trim() === '') {
            throw new Error(this.literals.emptyLabelError);
        }
        else if (menuItem.subItems) {
            menuItem.subItems.forEach(subItem => {
                this.validateMenu(subItem);
            });
        }
    }
    static ɵfac = function PoMenuBaseComponent_Factory(t) { return new (t || PoMenuBaseComponent)(i0.ɵɵdirectiveInject(PoMenuGlobalService), i0.ɵɵdirectiveInject(PoMenuService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuBaseComponent, inputs: { automaticToggle: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-automatic-toggle", "automaticToggle", convertToBoolean], collapsed: [i0.ɵɵInputFlags.None, "p-collapsed", "collapsed"], menus: [i0.ɵɵInputFlags.None, "p-menus", "menus"], filter: [i0.ɵɵInputFlags.None, "p-filter", "filter"], service: [i0.ɵɵInputFlags.None, "p-service", "service"], params: [i0.ɵɵInputFlags.None, "p-params", "params"], logo: [i0.ɵɵInputFlags.None, "p-logo", "logo"], logoAlt: [i0.ɵɵInputFlags.None, "p-logo-alt", "logoAlt"], shortLogo: [i0.ɵɵInputFlags.None, "p-short-logo", "shortLogo"] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuBaseComponent, [{
        type: Directive
    }], () => [{ type: PoMenuGlobalService }, { type: PoMenuService }, { type: PoLanguageService }], { automaticToggle: [{
            type: Input,
            args: [{ alias: 'p-automatic-toggle', transform: convertToBoolean }]
        }], collapsed: [{
            type: Input,
            args: ['p-collapsed']
        }], menus: [{
            type: Input,
            args: ['p-menus']
        }], filter: [{
            type: Input,
            args: ['p-filter']
        }], service: [{
            type: Input,
            args: ['p-service']
        }], params: [{
            type: Input,
            args: ['p-params']
        }], logo: [{
            type: Input,
            args: ['p-logo']
        }], logoAlt: [{
            type: Input,
            args: ['p-logo-alt']
        }], shortLogo: [{
            type: Input,
            args: ['p-short-logo']
        }] }); })();

function PoMenuComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17);
    i0.ɵɵlistener("click", function PoMenuComponent_div_0_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.toggleMenuMobile()); });
    i0.ɵɵelementEnd();
} }
function PoMenuComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵelement(1, "po-logo", 19);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-class", ctx_r1.enableCollapse ? "po-menu-short-logo" : "po-menu-logo")("p-logo", ctx_r1.enableCollapse ? ctx_r1.shortLogo || ctx_r1.logo : ctx_r1.logo)("p-logo-alt", ctx_r1.logoAlt);
} }
function PoMenuComponent_div_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵtemplate(1, PoMenuComponent_div_8_ng_container_1_Template, 1, 0, "ng-container", 21);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.menuHeaderTemplate.templateRef);
} }
function PoMenuComponent_po_menu_filter_9_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-menu-filter", 22);
    i0.ɵɵlistener("p-filter", function PoMenuComponent_po_menu_filter_9_Template_po_menu_filter_p_filter_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.debounceFilter($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-enable-collapse", ctx_r3.enableCollapse)("p-loading", ctx_r3.filterLoading);
} }
function PoMenuComponent_li_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 23);
    i0.ɵɵelement(1, "po-menu-item", 24);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-level", 1)("p-label", ctx_r4.literals.itemNotFound)("p-short-label", ctx_r4.literals.itemNotFound);
} }
function PoMenuComponent_li_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 23);
    i0.ɵɵelement(1, "po-menu-item", 25);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const menu_r12 = ctx.$implicit;
    const menuIndex_r13 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-menu-item-first", menuIndex_r13 === 0);
    i0.ɵɵattribute("aria-level", menu_r12.level);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", menu_r12.action)("p-badge-alert", menu_r12.badgeAlert)("p-badge-color", menu_r12.badge ? menu_r12.badge.color : undefined)("p-badge-value", menu_r12.badge ? menu_r12.badge.value : undefined)("p-collapsed-menu", ctx_r5.enableCollapse)("p-icon", ctx_r5.allowIcons ? menu_r12.icon : null)("p-id", menu_r12.id)("p-label", menu_r12.label)("p-level", menu_r12.level)("p-link", menu_r12.link)("p-short-label", menu_r12.shortLabel)("p-sub-items", menu_r12.subItems)("p-type", menu_r12.type);
} }
function PoMenuComponent_div_17_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 30);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r14.literals.close);
} }
function PoMenuComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 26)(1, "button", 27);
    i0.ɵɵlistener("click", function PoMenuComponent_div_17_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.toggle()); });
    i0.ɵɵtemplate(2, PoMenuComponent_div_17_span_2_Template, 2, 1, "span", 28);
    i0.ɵɵelement(3, "po-icon", 29);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵattribute("aria-label", ctx_r6.enableCollapseButton ? ctx_r6.literals.close : ctx_r6.literals.open);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r6.enableCollapseButton);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-icon", ctx_r6.enableCollapse ? "ICON_MENU_OPEN" : "ICON_MENU_CLOSE");
} }
const _c0$l = a0 => ({ "po-menu-animation": a0 });
const poMenuDebounceTime = 400;
const poMenuMinLength = 3;
const poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ```
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="PO Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="PO Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
class PoMenuComponent extends PoMenuBaseComponent {
    changeDetector;
    element;
    renderer;
    router;
    menuItemsService;
    menuHeaderTemplate;
    activeMenuItem;
    collapsedMobile;
    filterLoading = false;
    groupedMenuItem;
    id = uuid();
    linkActive;
    mobileOpened = false;
    noData = false;
    timeoutFilter;
    filteringItems = false;
    menuInitialized = false;
    menuPrevious = null;
    resizeListener;
    itemSubscription;
    routeSubscription;
    constructor(changeDetector, element, renderer, router, menuItemsService, menuGlobalService, menuService, languageService) {
        super(menuGlobalService, menuService, languageService);
        this.changeDetector = changeDetector;
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.menuItemsService = menuItemsService;
    }
    get isActiveItemMenuSubMenu() {
        return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
    }
    get enableCollapse() {
        return this.isCollapsed && !this.collapsedMobile;
    }
    get enableCollapseButton() {
        return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
    }
    get hasFooter() {
        return this.enableCollapseButton || this.enableCollapse;
    }
    get isCollapsed() {
        return this.allowCollapseMenu && this.collapsed;
    }
    ngDoCheck() {
        if (this.filteringItems && this.filter) {
            return;
        }
        const menuCurrent = this.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
        this.menuGlobalService.sendRemovedApplicationMenu(this.id);
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    ngAfterViewInit() {
        this.menuGlobalService.sendApplicationMenu(this);
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            const urlPathWithoutLastFragment = urlPath.substr(0, urlPath.lastIndexOf('/'));
            return menus.some(menu => {
                const formattedMenuLink = getFormattedLink(menu.link);
                const menuLinkPath = `${urlPathWithoutLastFragment}${formattedMenuLink.substr(formattedMenuLink.lastIndexOf('/'))}`;
                if (menuLinkPath === urlPath && menuLinkPath === formattedMenuLink) {
                    this.linkActive = formattedMenuLink;
                    this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    collapse() {
        this.validateToggleMenu(true);
    }
    debounceFilter(filter) {
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(() => {
            this.filterProcess(filter);
        }, poMenuDebounceTime);
    }
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    expand() {
        this.validateToggleMenu(false);
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu) => {
            this.clickMenuItem(menu);
        });
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkingRouterChildrenFragments();
                this.checkActiveMenuByUrl(urlRouter);
            }
        });
    }
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    toggle() {
        this.validateToggleMenu(!this.collapsed);
    }
    toggleMenuMobile() {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    }
    onMouseEnter() {
        if (this.collapsed && this.automaticToggle) {
            this.collapsed = false;
            this.allowCollapseHover = true;
        }
    }
    onMouseLeave() {
        if (!this.collapsed && this.allowCollapseHover && this.automaticToggle) {
            this.collapsed = true;
        }
    }
    checkingRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    validateCollapseClass(collapsedMobile = false) {
        const wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    }
    activateCollapseSubMenuItem() {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({
            active: this.activeMenuItem,
            grouped: this.groupedMenuItem,
            activatedByRoute: true
        });
    }
    areSubMenus(menus) {
        return menus.every(menu => menu['level'] > poMenuRootLevel);
    }
    clearGroupMenuIfFirstLevel(activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    }
    convertToMenuItemFiltered(menuItem = { label: '', link: '', action: () => { } }) {
        const { label, link, action } = menuItem;
        const menuItemFiltered = { label, link, action };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    }
    createResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.toggleResize();
            this.resizeListener();
        });
    }
    executeMenuAction(menu) {
        menu.action(menu);
    }
    async filterItems(filter) {
        const trimFilter = filter && filter.trim();
        if (trimFilter) {
            this.filteredItems = [];
            this.filteredItems = this.filterService
                ? await this.filterOnService(trimFilter)
                : this.filterLocalItems(trimFilter);
            this.filteringItems = true;
        }
        else {
            this.filteredItems = [...this.menus];
            this.filteringItems = false;
        }
    }
    filterLocalItems(filter) {
        const filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    }
    filterProcess(filter) {
        this.filterLoading = true;
        this.filterItems(filter)
            .then(() => {
            this.filterLoading = false;
            this.showNoData();
            this.changeDetector.detectChanges();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        })
            .catch(error => {
            this.filterLoading = false;
            Promise.reject(error);
        });
    }
    async filterOnService(search = '') {
        if (search.length >= poMenuMinLength) {
            return await this.filterService
                .getFilteredData(search, this.params)
                .pipe(map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem))))
                .toPromise();
        }
        else {
            return this.filteredItems;
        }
    }
    findItems(menus, filter, filteredItems) {
        menus.forEach(menu => {
            const hasAction = menu.action || menu.link;
            const labelHasFilter = menu.label.toLowerCase().includes(filter);
            if (labelHasFilter && hasAction) {
                const newMenu = { ...menu };
                if (newMenu.subItems?.length) {
                    delete newMenu.subItems;
                    newMenu['type'] = this.setMenuType(newMenu);
                }
                filteredItems.push(newMenu);
            }
            if (menu.subItems) {
                this.findItems(menu.subItems, filter, filteredItems);
            }
        });
    }
    findParent(menus, menuItem) {
        const getParent = function (menuItems, id) {
            if (menuItems) {
                for (let index = 0; index < menuItems.length; index++) {
                    const menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {
                        return menu;
                    }
                    const found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    }
    findRootParent(menus, menu) {
        const findParent = this.findParent;
        const getRootParent = function (menuItems, menuItem) {
            let parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    }
    getActiveMenuParent(menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    }
    groupMenuItem(menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem &&
            menu['isOpened'] &&
            this.isActiveItemMenuSubMenu &&
            this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    }
    isRootMenuEqualGroupedMenu(menus, activeMenuItem, groupedMenuItem) {
        const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    }
    openParentMenu(childMenu) {
        const parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    }
    showNoData() {
        this.noData = this.filteredItems.length === 0;
    }
    stringify(menus) {
        // não faz o stringify da propriedade icon, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(this.menus, (key, value) => {
            if (key !== 'icon') {
                return value;
            }
        });
    }
    toggleGroupedMenuItem() {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    }
    toggleMenuCollapse(collapsed = false) {
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem =
                this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        }
        this.updateMenu();
    }
    toggleResize() {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    }
    validateToggleMenu(collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    }
    updateMenu() {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = [...this.menus];
        this.menuPrevious = this.stringify(this.menus);
        this.validateMenus(this.menus);
    }
    static ɵfac = function PoMenuComponent_Factory(t) { return new (t || PoMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoMenuItemsService), i0.ɵɵdirectiveInject(PoMenuGlobalService), i0.ɵɵdirectiveInject(PoMenuService), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuComponent, selectors: [["po-menu"]], contentQueries: function PoMenuComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoMenuHeaderTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuHeaderTemplate = _t.first);
        } }, features: [i0.ɵɵProvidersFeature([PoMenuItemsService, PoMenuService]), i0.ɵɵInheritDefinitionFeature], decls: 18, vars: 11, consts: [["class", "po-menu-overlay", 3, "click", 4, "ngIf"], [1, "po-menu-mobile", "po-clickable", 3, "click"], ["p-icon", "ICON_MENU"], [1, "po-menu", 3, "ngClass"], [1, "po-menu-container", 3, "mouseenter", "mouseleave"], [1, "po-menu-header"], ["class", "po-menu-header-container-logo", 4, "ngIf"], ["class", "po-menu-header-template", 4, "ngIf"], [3, "p-enable-collapse", "p-loading", "p-filter", 4, "ngIf"], [1, "po-menu-body"], [1, "po-menu-outer"], [1, "po-menu-inner"], [1, "po-menu-nav"], ["role", "menu", 1, "po-menu-list"], ["class", "po-menu-list-item", "role", "presentation", 4, "ngIf"], ["class", "po-menu-list-item", "role", "presentation", 3, "po-menu-item-first", 4, "ngFor", "ngForOf"], ["class", "po-menu-footer", 4, "ngIf"], [1, "po-menu-overlay", 3, "click"], [1, "po-menu-header-container-logo"], [3, "p-class", "p-logo", "p-logo-alt"], [1, "po-menu-header-template"], [4, "ngTemplateOutlet"], [3, "p-enable-collapse", "p-loading", "p-filter"], ["role", "presentation", 1, "po-menu-list-item"], ["p-icon", "ICON_INFO", "p-type", "noData", 3, "p-level", "p-label", "p-short-label"], [3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-collapsed-menu", "p-icon", "p-id", "p-label", "p-level", "p-link", "p-short-label", "p-sub-items", "p-type"], [1, "po-menu-footer"], ["type", "button", 1, "po-menu-collapse-button-icon", 3, "click"], ["aria-hidden", "true", 4, "ngIf"], [3, "p-icon"], ["aria-hidden", "true"]], template: function PoMenuComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuComponent_div_0_Template, 1, 0, "div", 0);
            i0.ɵɵelementStart(1, "div")(2, "div", 1);
            i0.ɵɵlistener("click", function PoMenuComponent_Template_div_click_2_listener() { return ctx.toggleMenuMobile(); });
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵlistener("mouseenter", function PoMenuComponent_Template_div_mouseenter_5_listener() { return ctx.onMouseEnter(); })("mouseleave", function PoMenuComponent_Template_div_mouseleave_5_listener() { return ctx.onMouseLeave(); });
            i0.ɵɵelementStart(6, "div", 5);
            i0.ɵɵtemplate(7, PoMenuComponent_div_7_Template, 2, 3, "div", 6)(8, PoMenuComponent_div_8_Template, 2, 1, "div", 7)(9, PoMenuComponent_po_menu_filter_9_Template, 1, 2, "po-menu-filter", 8);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "div", 9)(11, "div", 10)(12, "div", 11)(13, "nav", 12)(14, "ul", 13);
            i0.ɵɵtemplate(15, PoMenuComponent_li_15_Template, 2, 3, "li", 14)(16, PoMenuComponent_li_16_Template, 2, 16, "li", 15);
            i0.ɵɵelementEnd()()()()()();
            i0.ɵɵtemplate(17, PoMenuComponent_div_17_Template, 4, 3, "div", 16);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.mobileOpened);
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0$l, ctx.mobileOpened));
            i0.ɵɵattribute("aria-expanded", !ctx.collapsed);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.logo || ctx.shortLogo && ctx.enableCollapse);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.enableCollapse && ctx.menuHeaderTemplate);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.filter);
            i0.ɵɵadvance(6);
            i0.ɵɵproperty("ngIf", ctx.noData);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.filteredItems);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasFooter);
        } }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoLogoComponent, PoIconComponent, PoMenuFilterComponent, PoMenuItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuComponent, [{
        type: Component,
        args: [{ selector: 'po-menu', providers: [PoMenuItemsService, PoMenuService], template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n\n<div>\n  <div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n    <po-icon p-icon=\"ICON_MENU\"></po-icon>\n  </div>\n\n  <div class=\"po-menu\" [attr.aria-expanded]=\"!collapsed\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n    <div class=\"po-menu-container\" (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n      <div class=\"po-menu-header\">\n        <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n          <po-logo\n            [p-class]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n            [p-logo]=\"enableCollapse ? shortLogo || logo : logo\"\n            [p-logo-alt]=\"logoAlt\"\n          ></po-logo>\n        </div>\n\n        <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n          <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n        </div>\n\n        <po-menu-filter\n          *ngIf=\"filter\"\n          [p-enable-collapse]=\"enableCollapse\"\n          [p-loading]=\"filterLoading\"\n          (p-filter)=\"debounceFilter($event)\"\n        ></po-menu-filter>\n      </div>\n\n      <div class=\"po-menu-body\">\n        <div class=\"po-menu-outer\">\n          <div class=\"po-menu-inner\">\n            <nav class=\"po-menu-nav\">\n              <ul class=\"po-menu-list\" role=\"menu\">\n                <li *ngIf=\"noData\" class=\"po-menu-list-item\" role=\"presentation\">\n                  <po-menu-item\n                    p-icon=\"ICON_INFO\"\n                    p-type=\"noData\"\n                    [p-level]=\"1\"\n                    [p-label]=\"literals.itemNotFound\"\n                    [p-short-label]=\"literals.itemNotFound\"\n                  ></po-menu-item>\n                </li>\n                <li\n                  *ngFor=\"let menu of filteredItems; let menuIndex = index\"\n                  class=\"po-menu-list-item\"\n                  role=\"presentation\"\n                  [attr.aria-level]=\"menu.level\"\n                  [class.po-menu-item-first]=\"menuIndex === 0\"\n                >\n                  <po-menu-item\n                    [p-action]=\"menu.action\"\n                    [p-badge-alert]=\"menu.badgeAlert\"\n                    [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n                    [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n                    [p-collapsed-menu]=\"enableCollapse\"\n                    [p-icon]=\"allowIcons ? menu.icon : null\"\n                    [p-id]=\"menu.id\"\n                    [p-label]=\"menu.label\"\n                    [p-level]=\"menu.level\"\n                    [p-link]=\"menu.link\"\n                    [p-short-label]=\"menu.shortLabel\"\n                    [p-sub-items]=\"menu.subItems\"\n                    [p-type]=\"menu.type\"\n                  ></po-menu-item>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n      <button\n        class=\"po-menu-collapse-button-icon\"\n        type=\"button\"\n        [attr.aria-label]=\"enableCollapseButton ? literals.close : literals.open\"\n        (click)=\"toggle()\"\n      >\n        <span *ngIf=\"enableCollapseButton\" aria-hidden=\"true\">{{ literals.close }}</span>\n\n        <po-icon [p-icon]=\"enableCollapse ? 'ICON_MENU_OPEN' : 'ICON_MENU_CLOSE'\"></po-icon>\n      </button>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.Router }, { type: PoMenuItemsService }, { type: PoMenuGlobalService }, { type: PoMenuService }, { type: PoLanguageService }], { menuHeaderTemplate: [{
            type: ContentChild,
            args: [PoMenuHeaderTemplateDirective, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoMenuComponent, { className: "PoMenuComponent", filePath: "lib/components/po-menu/po-menu.component.ts", lineNumber: 120 }); })();

/**
 * @description
 *
 * Módulo do componente po-menu.
 */
class PoMenuModule {
    static ɵfac = function PoMenuModule_Factory(t) { return new (t || PoMenuModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoMenuModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            RouterModule,
            PoBadgeModule,
            PoFieldModule,
            PoLoadingModule,
            PoLogoModule,
            PoIconModule,
            PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    PoBadgeModule,
                    PoFieldModule,
                    PoLoadingModule,
                    PoLogoModule,
                    PoIconModule,
                    PoTooltipModule
                ],
                declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent],
                exports: [PoMenuComponent, PoMenuHeaderTemplateDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoMenuModule, { declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent], imports: [CommonModule,
        RouterModule,
        PoBadgeModule,
        PoFieldModule,
        PoLoadingModule,
        PoLogoModule,
        PoIconModule,
        PoTooltipModule], exports: [PoMenuComponent, PoMenuHeaderTemplateDirective] }); })();

class PoNavbarActionComponent {
    router;
    action;
    icon;
    label;
    link;
    tooltip;
    constructor(viewContainerRef, router) {
        this.router = router;
    }
    click() {
        if (this.action) {
            this.action();
            return;
        }
        if (this.link) {
            return this.openUrl(this.link);
        }
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    static ɵfac = function PoNavbarActionComponent_Factory(t) { return new (t || PoNavbarActionComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.Router)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionComponent, selectors: [["po-navbar-action"]], inputs: { action: [i0.ɵɵInputFlags.None, "p-action", "action"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], link: [i0.ɵɵInputFlags.None, "p-link", "link"], tooltip: [i0.ɵɵInputFlags.None, "p-tooltip-text", "tooltip"] }, decls: 1, vars: 2, consts: [["tabindex", "0", 1, "po-navbar-action-content", "po-clickable", 3, "p-icon", "p-tooltip", "click"]], template: function PoNavbarActionComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-icon", 0);
            i0.ɵɵlistener("click", function PoNavbarActionComponent_Template_po_icon_click_0_listener() { return ctx.click(); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-icon", ctx.icon)("p-tooltip", ctx.tooltip);
        } }, dependencies: [PoTooltipDirective, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-action', template: "<po-icon\n  tabindex=\"0\"\n  class=\"po-navbar-action-content po-clickable\"\n  [p-icon]=\"icon\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"click()\"\n></po-icon>\n" }]
    }], () => [{ type: i0.ViewContainerRef }, { type: i2.Router }], { action: [{
            type: Input,
            args: ['p-action']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], link: [{
            type: Input,
            args: ['p-link']
        }], tooltip: [{
            type: Input,
            args: ['p-tooltip-text']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarActionComponent, { className: "PoNavbarActionComponent", filePath: "lib/components/po-navbar/po-navbar-actions/po-navbar-action/po-navbar-action.component.ts", lineNumber: 10 }); })();

class PoNavbarActionPopupComponent {
    iconActions;
    getLastIconAction() {
        if (this.iconActions && this.iconActions.length) {
            return this.iconActions[this.iconActions.length - 1].icon;
        }
    }
    static ɵfac = function PoNavbarActionPopupComponent_Factory(t) { return new (t || PoNavbarActionPopupComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionPopupComponent, selectors: [["po-navbar-action-popup"]], inputs: { iconActions: [i0.ɵɵInputFlags.None, "p-icon-actions", "iconActions"] }, decls: 5, vars: 5, consts: [["tabindex", "0", 1, "po-navbar-action-popup-content", "po-clickable", 3, "click"], ["target", ""], [3, "p-actions", "p-target"], ["popup", ""]], template: function PoNavbarActionPopupComponent_Template(rf, ctx) { if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoNavbarActionPopupComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelement(2, "span");
            i0.ɵɵelementEnd();
            i0.ɵɵelement(3, "po-popup", 2, 3);
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-icon ", ctx.getLastIconAction(), "");
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.iconActions)("p-target", _r0);
        } }, dependencies: [PoPopupComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionPopupComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-action-popup', template: "<div tabindex=\"0\" #target class=\"po-navbar-action-popup-content po-clickable\" (click)=\"popup.toggle()\">\n  <span class=\"po-icon {{ getLastIconAction() }}\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"iconActions\" [p-target]=\"target\"> </po-popup>\n" }]
    }], null, { iconActions: [{
            type: Input,
            args: ['p-icon-actions']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarActionPopupComponent, { className: "PoNavbarActionPopupComponent", filePath: "lib/components/po-navbar/po-navbar-actions/po-navbar-action-popup/po-navbar-action-popup.component.ts", lineNumber: 9 }); })();

function PoNavbarActionsComponent_po_navbar_action_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-navbar-action", 2);
} if (rf & 2) {
    const iconAction_r1 = ctx.$implicit;
    i0.ɵɵproperty("p-action", iconAction_r1.action)("p-icon", iconAction_r1.icon)("p-label", iconAction_r1.label)("p-link", iconAction_r1.link)("p-tooltip-text", iconAction_r1.tooltip);
} }
class PoNavbarActionsComponent {
    _iconActions;
    set iconActions(actions) {
        this._iconActions = actions.map(action => ({ ...action, separator: true, url: action.link }));
    }
    get iconActions() {
        return this._iconActions;
    }
    static ɵfac = function PoNavbarActionsComponent_Factory(t) { return new (t || PoNavbarActionsComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionsComponent, selectors: [["po-navbar-actions"]], inputs: { iconActions: [i0.ɵɵInputFlags.None, "p-icon-actions", "iconActions"] }, decls: 2, vars: 2, consts: [["class", "po-navbar-action", 3, "p-action", "p-icon", "p-label", "p-link", "p-tooltip-text", 4, "ngFor", "ngForOf"], [1, "po-navbar-action-popup", 3, "p-icon-actions"], [1, "po-navbar-action", 3, "p-action", "p-icon", "p-label", "p-link", "p-tooltip-text"]], template: function PoNavbarActionsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoNavbarActionsComponent_po_navbar_action_0_Template, 1, 5, "po-navbar-action", 0);
            i0.ɵɵelement(1, "po-navbar-action-popup", 1);
        } if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.iconActions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
        } }, dependencies: [i1.NgForOf, PoNavbarActionComponent, PoNavbarActionPopupComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionsComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-actions', template: "<po-navbar-action\n  *ngFor=\"let iconAction of iconActions\"\n  class=\"po-navbar-action\"\n  [p-action]=\"iconAction.action\"\n  [p-icon]=\"iconAction.icon\"\n  [p-label]=\"iconAction.label\"\n  [p-link]=\"iconAction.link\"\n  [p-tooltip-text]=\"iconAction.tooltip\"\n>\n</po-navbar-action>\n\n<po-navbar-action-popup class=\"po-navbar-action-popup\" [p-icon-actions]=\"iconActions\"> </po-navbar-action-popup>\n" }]
    }], null, { iconActions: [{
            type: Input,
            args: ['p-icon-actions']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarActionsComponent, { className: "PoNavbarActionsComponent", filePath: "lib/components/po-navbar/po-navbar-actions/po-navbar-actions.component.ts", lineNumber: 9 }); })();

class PoNavbarActionsModule {
    static ɵfac = function PoNavbarActionsModule_Factory(t) { return new (t || PoNavbarActionsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarActionsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule],
                declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent],
                exports: [PoNavbarActionsComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarActionsModule, { declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent], imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule], exports: [PoNavbarActionsComponent] }); })();

const _c0$k = (a0, a1) => ({ "po-navbar-item-navigation-icon-disabled": a0, "po-clickable": a1 });
class PoNavbarItemNavigationIconComponent {
    disabled;
    icon;
    click = new EventEmitter();
    static ɵfac = function PoNavbarItemNavigationIconComponent_Factory(t) { return new (t || PoNavbarItemNavigationIconComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemNavigationIconComponent, selectors: [["po-navbar-item-navigation-icon"]], inputs: { disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], icon: [i0.ɵɵInputFlags.None, "p-icon", "icon"] }, outputs: { click: "p-click" }, decls: 2, vars: 5, consts: [["tabindex", "0", 3, "ngClass", "click"], [3, "p-icon"]], template: function PoNavbarItemNavigationIconComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoNavbarItemNavigationIconComponent_Template_div_click_0_listener() { return ctx.disabled ? undefined : ctx.click.emit(ctx.icon); });
            i0.ɵɵelement(1, "po-icon", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c0$k, ctx.disabled, !ctx.disabled));
            i0.ɵɵadvance();
            i0.ɵɵpropertyInterpolate1("p-icon", "ICON_ARROW_", ctx.icon, "");
        } }, dependencies: [i1.NgClass, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationIconComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-item-navigation-icon', template: "<div\n  [ngClass]=\"{ 'po-navbar-item-navigation-icon-disabled': disabled, 'po-clickable': !disabled }\"\n  tabindex=\"0\"\n  (click)=\"disabled ? undefined : click.emit(icon)\"\n>\n  <po-icon p-icon=\"ICON_ARROW_{{ icon }}\"></po-icon>\n</div>\n" }]
    }], null, { disabled: [{
            type: Input,
            args: ['p-disabled']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarItemNavigationIconComponent, { className: "PoNavbarItemNavigationIconComponent", filePath: "lib/components/po-navbar/po-navbar-item-navigation/po-navbar-item-navigation-icon/po-navbar-item-navigation-icon.component.ts", lineNumber: 7 }); })();

class PoNavbarItemNavigationComponent {
    disableLeft;
    disableRight;
    click = new EventEmitter();
    static ɵfac = function PoNavbarItemNavigationComponent_Factory(t) { return new (t || PoNavbarItemNavigationComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemNavigationComponent, selectors: [["po-navbar-item-navigation"]], inputs: { disableLeft: [i0.ɵɵInputFlags.None, "p-disable-left", "disableLeft"], disableRight: [i0.ɵɵInputFlags.None, "p-disable-right", "disableRight"] }, outputs: { click: "p-click" }, decls: 2, vars: 2, consts: [["p-icon", "left", 1, "po-navbar-item-navigation-icon", 3, "p-disabled", "p-click"], ["p-icon", "right", 1, "po-navbar-item-navigation-icon", 3, "p-disabled", "p-click"]], template: function PoNavbarItemNavigationComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-navbar-item-navigation-icon", 0);
            i0.ɵɵlistener("p-click", function PoNavbarItemNavigationComponent_Template_po_navbar_item_navigation_icon_p_click_0_listener($event) { return ctx.click.emit($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(1, "po-navbar-item-navigation-icon", 1);
            i0.ɵɵlistener("p-click", function PoNavbarItemNavigationComponent_Template_po_navbar_item_navigation_icon_p_click_1_listener($event) { return ctx.click.emit($event); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disableLeft);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-disabled", ctx.disableRight);
        } }, dependencies: [PoNavbarItemNavigationIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-item-navigation', template: "<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"left\"\n  [p-disabled]=\"disableLeft\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n\n<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"right\"\n  [p-disabled]=\"disableRight\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n" }]
    }], null, { disableLeft: [{
            type: Input,
            args: ['p-disable-left']
        }], disableRight: [{
            type: Input,
            args: ['p-disable-right']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarItemNavigationComponent, { className: "PoNavbarItemNavigationComponent", filePath: "lib/components/po-navbar/po-navbar-item-navigation/po-navbar-item-navigation.component.ts", lineNumber: 7 }); })();

class PoNavbarItemNavigationModule {
    static ɵfac = function PoNavbarItemNavigationModule_Factory(t) { return new (t || PoNavbarItemNavigationModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarItemNavigationModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule, PoIconModule],
                declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent],
                exports: [PoNavbarItemNavigationComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarItemNavigationModule, { declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent], imports: [CommonModule, RouterModule, PoIconModule], exports: [PoNavbarItemNavigationComponent] }); })();

function PoNavbarItemComponent_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 3);
    i0.ɵɵlistener("click", function PoNavbarItemComponent_a_1_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.itemClick()); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-clickable", ctx_r0.clickable);
    i0.ɵɵproperty("href", ctx_r0.link, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r0.label, " ");
} }
function PoNavbarItemComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 4);
    i0.ɵɵlistener("click", function PoNavbarItemComponent_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.itemClick(ctx_r4.label, ctx_r4.link)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-clickable", ctx_r1.clickable);
    i0.ɵɵproperty("routerLink", ctx_r1.link);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r1.label, " ");
} }
class PoNavbarItemComponent {
    action;
    clickable;
    label;
    link;
    click = new EventEmitter();
    get type() {
        return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
    }
    itemClick(label, link) {
        if (this.action) {
            this.action({ label, link });
        }
        this.click.emit();
    }
    static ɵfac = function PoNavbarItemComponent_Factory(t) { return new (t || PoNavbarItemComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemComponent, selectors: [["po-navbar-item"]], inputs: { action: [i0.ɵɵInputFlags.None, "p-action", "action"], clickable: [i0.ɵɵInputFlags.None, "p-clickable", "clickable"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], link: [i0.ɵɵInputFlags.None, "p-link", "link"] }, outputs: { click: "p-click" }, decls: 3, vars: 3, consts: [[3, "ngSwitch"], ["class", "po-navbar-item-link", "target", "_blank", 3, "po-clickable", "href", "click", 4, "ngSwitchCase"], ["class", "po-navbar-item-link", 3, "po-clickable", "routerLink", "click", 4, "ngSwitchCase"], ["target", "_blank", 1, "po-navbar-item-link", 3, "href", "click"], [1, "po-navbar-item-link", 3, "routerLink", "click"]], template: function PoNavbarItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementContainerStart(0, 0);
            i0.ɵɵtemplate(1, PoNavbarItemComponent_a_1_Template, 2, 4, "a", 1)(2, PoNavbarItemComponent_a_2_Template, 2, 4, "a", 2);
            i0.ɵɵelementContainerEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
        } }, dependencies: [i1.NgSwitch, i1.NgSwitchCase, i2.RouterLink], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-item', template: "<ng-container [ngSwitch]=\"type\">\n  <a\n    *ngSwitchCase=\"'externalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [href]=\"link\"\n    target=\"_blank\"\n    (click)=\"itemClick()\"\n  >\n    {{ label }}\n  </a>\n\n  <a\n    *ngSwitchCase=\"'internalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [routerLink]=\"link\"\n    (click)=\"itemClick(label, link)\"\n  >\n    {{ label }}\n  </a>\n</ng-container>\n" }]
    }], null, { action: [{
            type: Input,
            args: ['p-action']
        }], clickable: [{
            type: Input,
            args: ['p-clickable']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], link: [{
            type: Input,
            args: ['p-link']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarItemComponent, { className: "PoNavbarItemComponent", filePath: "lib/components/po-navbar/po-navbar-items/po-navbar-item/po-navbar-item.component.ts", lineNumber: 11 }); })();

const _c0$j = ["navbarItemsContainer"];
function PoNavbarItemsComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 3);
    i0.ɵɵelement(1, "po-navbar-item", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-navbar-item-selected", ctx_r1.selectedItem === item_r2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", item_r2.action)("p-clickable", ctx_r1.selectedItem !== item_r2)("p-label", item_r2.label)("p-link", item_r2.link);
} }
class PoNavbarItemsComponent {
    router;
    navbarItemsContainer;
    allNavbarItems;
    items;
    selectedItem;
    routeSubscription;
    constructor(router) {
        this.router = router;
    }
    ngOnDestroy() {
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToRoute();
    }
    checkActiveItemByUrl(urlRouter) {
        const urlArray = urlRouter.split('/');
        let counter = urlArray.length;
        while (counter >= 0) {
            const url = urlArray.slice(0, counter).join('/');
            this.selectedItem = this.items.find(item => item.link === url);
            if (this.selectedItem) {
                break;
            }
            counter--;
        }
    }
    checkRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '/';
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkRouterChildrenFragments();
                this.checkActiveItemByUrl(urlRouter);
            }
        });
    }
    static ɵfac = function PoNavbarItemsComponent_Factory(t) { return new (t || PoNavbarItemsComponent)(i0.ɵɵdirectiveInject(i2.Router)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemsComponent, selectors: [["po-navbar-items"]], viewQuery: function PoNavbarItemsComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$j, 7, ElementRef);
            i0.ɵɵviewQuery(PoNavbarItemComponent, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.allNavbarItems = _t);
        } }, inputs: { items: [i0.ɵɵInputFlags.None, "p-items", "items"] }, decls: 4, vars: 1, consts: [[1, "po-navbar-items-container"], ["navbarItemsContainer", ""], ["class", "po-navbar-item", 3, "po-navbar-item-selected", 4, "ngFor", "ngForOf"], [1, "po-navbar-item"], [3, "p-action", "p-clickable", "p-label", "p-link"]], template: function PoNavbarItemsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "nav")(1, "ul", 0, 1);
            i0.ɵɵtemplate(3, PoNavbarItemsComponent_li_3_Template, 2, 6, "li", 2);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngForOf", ctx.items);
        } }, dependencies: [i1.NgForOf, PoNavbarItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemsComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-items', template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n      >\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n" }]
    }], () => [{ type: i2.Router }], { navbarItemsContainer: [{
            type: ViewChild,
            args: ['navbarItemsContainer', { read: ElementRef, static: true }]
        }], allNavbarItems: [{
            type: ViewChildren,
            args: [PoNavbarItemComponent, { read: ElementRef }]
        }], items: [{
            type: Input,
            args: ['p-items']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarItemsComponent, { className: "PoNavbarItemsComponent", filePath: "lib/components/po-navbar/po-navbar-items/po-navbar-items.component.ts", lineNumber: 13 }); })();

class PoNavbarItemsModule {
    static ɵfac = function PoNavbarItemsModule_Factory(t) { return new (t || PoNavbarItemsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarItemsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule],
                declarations: [PoNavbarItemComponent, PoNavbarItemsComponent],
                exports: [PoNavbarItemsComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarItemsModule, { declarations: [PoNavbarItemComponent, PoNavbarItemsComponent], imports: [CommonModule, RouterModule], exports: [PoNavbarItemsComponent] }); })();

function PoNavbarLogoComponent_po_logo_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-logo", 1);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-logo", ctx_r0.logo)("p-logo-alt", ctx_r0.logoAlt);
} }
class PoNavbarLogoComponent {
    logo;
    logoAlt;
    static ɵfac = function PoNavbarLogoComponent_Factory(t) { return new (t || PoNavbarLogoComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarLogoComponent, selectors: [["po-navbar-logo"]], inputs: { logo: [i0.ɵɵInputFlags.None, "p-logo", "logo"], logoAlt: [i0.ɵɵInputFlags.None, "p-logo-alt", "logoAlt"] }, decls: 1, vars: 1, consts: [["p-class", "po-navbar-logo-image", 3, "p-logo", "p-logo-alt", 4, "ngIf"], ["p-class", "po-navbar-logo-image", 3, "p-logo", "p-logo-alt"]], template: function PoNavbarLogoComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoNavbarLogoComponent_po_logo_0_Template, 1, 2, "po-logo", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.logo);
        } }, dependencies: [i1.NgIf, PoLogoComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarLogoComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar-logo', template: "<po-logo *ngIf=\"logo\" p-class=\"po-navbar-logo-image\" [p-logo]=\"logo\" [p-logo-alt]=\"logoAlt\"></po-logo>\n" }]
    }], null, { logo: [{
            type: Input,
            args: ['p-logo']
        }], logoAlt: [{
            type: Input,
            args: ['p-logo-alt']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarLogoComponent, { className: "PoNavbarLogoComponent", filePath: "lib/components/po-navbar/po-navbar-logo/po-navbar-logo.component.ts", lineNumber: 7 }); })();

const poNavbarLiteralsDefault = {
    en: {
        navbarLinks: 'Navbar links'
    },
    es: {
        navbarLinks: 'Navbar links'
    },
    pt: {
        navbarLinks: 'Navbar links'
    },
    ru: {
        navbarLinks: 'Navbar связи'
    }
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 *
 * Quando utilizado em uma resolução menor que `768px`, o componente utilizará o menu corrente da aplicação para
 * incluir seus itens.
 *
 * Ao utilizar Navbar com Menu e ambos tiverem logo, será mantido o logo do Navbar.
 */
class PoNavbarBaseComponent {
    // Menu que esta sendo exibido na pagina corrente.
    applicationMenu;
    _iconActions = [];
    _items = [];
    _literals;
    _logo;
    _shadow = false;
    language = poLocaleDefault;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value) {
        this._iconActions = Array.isArray(value) ? value : [];
    }
    get iconActions() {
        return this._iconActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poNavbarLiteralsDefault[poLocaleDefault],
                ...poNavbarLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poNavbarLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poNavbarLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value) {
        this._logo = value;
        if (this.applicationMenu) {
            this.validateMenuLogo();
        }
    }
    get logo() {
        return this._logo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o texto alternativo para a logomarca.
     *
     * > **Importante**
     * > Caso esta propriedade não seja definida o texto padrão será "Logomarca início".
     *
     * @default `Logomarca início`
     */
    logoAlt;
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value) {
        this._shadow = convertToBoolean(value);
    }
    get shadow() {
        return this._shadow;
    }
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoNavbarBaseComponent_Factory(t) { return new (t || PoNavbarBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoNavbarBaseComponent, inputs: { iconActions: [i0.ɵɵInputFlags.None, "p-icon-actions", "iconActions"], items: [i0.ɵɵInputFlags.None, "p-items", "items"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], logo: [i0.ɵɵInputFlags.None, "p-logo", "logo"], logoAlt: [i0.ɵɵInputFlags.None, "p-logo-alt", "logoAlt"], shadow: [i0.ɵɵInputFlags.None, "p-shadow", "shadow"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { iconActions: [{
            type: Input,
            args: ['p-icon-actions']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], logo: [{
            type: Input,
            args: ['p-logo']
        }], logoAlt: [{
            type: Input,
            args: ['p-logo-alt']
        }], shadow: [{
            type: Input,
            args: ['p-shadow']
        }] }); })();

function PoNavbarComponent_po_navbar_item_navigation_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-navbar-item-navigation", 6);
    i0.ɵɵlistener("p-click", function PoNavbarComponent_po_navbar_item_navigation_3_Template_po_navbar_item_navigation_p_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.navigateItems($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disable-left", ctx_r0.navbarItemNavigationDisableLeft)("p-disable-right", ctx_r0.navbarItemNavigationDisableRight);
} }
function PoNavbarComponent_po_menu_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-menu", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-menus", ctx_r1.items);
} }
const _c0$i = a0 => ({ "po-navbar-shadow": a0 });
const _c1$5 = (a0, a1) => ({ "po-navbar-logo-menu": a0, "po-navbar-no-logo": a1 });
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
class PoNavbarComponent extends PoNavbarBaseComponent {
    renderer;
    builder;
    changeDetector;
    menuGlobalService;
    navbarItemsElement;
    navbarItems;
    disableRight;
    showItemsNavigation = false;
    windowResizeListener;
    _menuComponent;
    isNavbarUpdateMenu = false;
    id = uuid();
    mediaQuery;
    offset = 0;
    player;
    menuItems;
    previousMenuComponentId;
    previousMenusItems = [];
    applicationMenuSubscription;
    menusSubscription;
    removedMenuSubscription;
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    set menuComponent(menu) {
        this._menuComponent = menu;
        this.previousMenuComponentId = menu?.id || this.previousMenuComponentId;
    }
    get isCollapsedMedia() {
        return window.innerWidth < poNavbarMenuMedia;
    }
    constructor(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
        super(poLanguageService);
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.menuGlobalService = menuGlobalService;
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    ngOnInit() {
        // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
        // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
        // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
        // o navbar links apos a adição dos itens de menu da aplicação.
        this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(newMenus => {
            const previousMenusiIsNavbarLinks = this.previousMenusItems?.length === 1 && this.previousMenusItems[0].id === this.id;
            if (this.applicationMenu && this.isCollapsedMedia && this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                this.isNavbarUpdateMenu = false;
                this.applicationMenu.menus = [
                    { label: this.literals.navbarLinks, subItems: this.items, id: this.id },
                    ...newMenus
                ];
            }
            this.isNavbarUpdateMenu = false;
            this.previousMenusItems = newMenus;
        });
        this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(removedMenuId => {
            // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
            // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
            // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
            this.applicationMenu =
                this.applicationMenu && this.previousMenuComponentId === removedMenuId ? this.applicationMenu : undefined;
            this.changeDetector.detectChanges();
            if (!this.applicationMenu && this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        });
        this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
            .pipe(delay(100))
            .subscribe(newMenu => {
            this.applicationMenu = this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
            this.changeDetector.detectChanges();
            if (this.applicationMenu) {
                this.initNavbarMenu();
            }
        });
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
    }
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
        this.removedMenuSubscription?.unsubscribe();
        this.applicationMenuSubscription?.unsubscribe();
        this.menusSubscription?.unsubscribe();
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    validateMenuLogo() {
        if (this.applicationMenu.logo && this.logo) {
            this.applicationMenu.logo = undefined;
            this.changeDetector.detectChanges();
        }
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))]);
    }
    changeNavbarMenuItems(isCollapsedMedia, navbarItems, label) {
        if (isCollapsedMedia) {
            this.applicationMenu.menus = [{ label, subItems: navbarItems, id: this.id }, ...this.applicationMenu.menus];
        }
        else {
            this.applicationMenu.menus = this.applicationMenu.menus.filter(m => m.id !== this.id);
        }
        this.isNavbarUpdateMenu = true;
        this.changeDetector.detectChanges();
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        if (this.isCollapsedMedia) {
            this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    onMediaQueryChange = changed => {
        this.changeNavbarMenuItems(changed.matches, this.items, this.literals.navbarLinks);
    };
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
    static ɵfac = function PoNavbarComponent_Factory(t) { return new (t || PoNavbarComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2$3.AnimationBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoMenuGlobalService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarComponent, selectors: [["po-navbar"]], viewQuery: function PoNavbarComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7, ElementRef);
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7);
            i0.ɵɵviewQuery(PoMenuComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItems = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuComponent = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[1, "po-navbar", 3, "ngClass"], [1, "po-navbar-logo", 3, "ngClass", "p-logo"], [1, "po-navbar-items", 3, "p-items"], ["class", "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click", 4, "ngIf"], [1, "po-navbar-actions", 3, "p-icon-actions"], [3, "p-menus", 4, "ngIf"], [1, "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click"], [3, "p-menus"]], template: function PoNavbarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "header", 0);
            i0.ɵɵelement(1, "po-navbar-logo", 1)(2, "po-navbar-items", 2);
            i0.ɵɵtemplate(3, PoNavbarComponent_po_navbar_item_navigation_3_Template, 1, 2, "po-navbar-item-navigation", 3);
            i0.ɵɵelement(4, "po-navbar-actions", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoNavbarComponent_po_menu_5_Template, 1, 1, "po-menu", 5);
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0$i, ctx.shadow));
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c1$5, !!ctx.applicationMenu, !ctx.logo))("p-logo", ctx.logo);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-items", ctx.items);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showItemsNavigation);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.applicationMenu);
        } }, dependencies: [i1.NgClass, i1.NgIf, PoMenuComponent, PoNavbarActionsComponent, PoNavbarItemNavigationComponent, PoNavbarItemsComponent, PoNavbarLogoComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar', template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\n    [p-logo]=\"logo\"\n  >\n  </po-navbar-logo>\n\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\n\n  <po-navbar-item-navigation\n    *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\"\n  >\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\n</header>\n\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\n" }]
    }], () => [{ type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2$3.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: PoMenuGlobalService }], { navbarItemsElement: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { read: ElementRef, static: true }]
        }], navbarItems: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { static: true }]
        }], menuComponent: [{
            type: ViewChild,
            args: [PoMenuComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoNavbarComponent, { className: "PoNavbarComponent", filePath: "lib/components/po-navbar/po-navbar.component.ts", lineNumber: 38 }); })();

/**
 * @description
 *
 * Módulo do componente `po-navbar`.
 *
 * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoNavbarModule {
    static ɵfac = function PoNavbarModule_Factory(t) { return new (t || PoNavbarModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            PoIconModule,
            PoLogoModule,
            PoMenuModule,
            PoNavbarActionsModule,
            PoNavbarItemNavigationModule,
            PoNavbarItemsModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    PoIconModule,
                    PoLogoModule,
                    PoMenuModule,
                    PoNavbarActionsModule,
                    PoNavbarItemNavigationModule,
                    PoNavbarItemsModule
                ],
                declarations: [PoNavbarComponent, PoNavbarLogoComponent],
                exports: [PoNavbarComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarModule, { declarations: [PoNavbarComponent, PoNavbarLogoComponent], imports: [CommonModule,
        PoIconModule,
        PoLogoModule,
        PoMenuModule,
        PoNavbarActionsModule,
        PoNavbarItemNavigationModule,
        PoNavbarItemsModule], exports: [PoNavbarComponent] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
 */
class PoPageContentBaseComponent {
    resizeListener;
}

const _c0$h = ["*"];
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
class PoPageContentComponent extends PoPageContentBaseComponent {
    renderer;
    contentOpacity = 0;
    height = '90%';
    overflowY = 'none';
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
    static ɵfac = function PoPageContentComponent_Factory(t) { return new (t || PoPageContentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageContentComponent, selectors: [["po-page-content"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$h, decls: 2, vars: 6, consts: [[1, "po-page-content"]], template: function PoPageContentComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height)("opacity", ctx.contentOpacity)("overflow-y", ctx.overflowY);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageContentComponent, [{
        type: Component,
        args: [{ selector: 'po-page-content', template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n" }]
    }], () => [{ type: i0.Renderer2 }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageContentComponent, { className: "PoPageContentComponent", filePath: "lib/components/po-page/po-page-content/po-page-content.component.ts", lineNumber: 14 }); })();

const poPageDefaultLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-default` é utilizado como o container principal para as telas sem um template definido.
 */
class PoPageDefaultBaseComponent {
    poPageContent;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb;
    visibleActions = [];
    language;
    _actions = [];
    _literals;
    _title;
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-default`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDefaultLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDefaultLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-default
     *   [p-literals]="customLiterals">
     * </po-page-default>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageDefaultLiteralsDefault[poLocaleDefault],
                ...poPageDefaultLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageDefaultLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDefaultLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageDefaultBaseComponent_Factory(t) { return new (t || PoPageDefaultBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDefaultBaseComponent, viewQuery: function PoPageDefaultBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDefaultBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
 * e para as ações dos componentes po-page-edit e po-page-detail.
 *
 * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o po-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
class PoPageBaseComponent {
}

const _c0$g = ["*"];
/**
 * @docsPrivate
 *
 * @docsExtends PoPageBaseComponent
 */
class PoPageComponent extends PoPageBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoPageComponent_BaseFactory; return function PoPageComponent_Factory(t) { return (ɵPoPageComponent_BaseFactory || (ɵPoPageComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageComponent)))(t || PoPageComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageComponent, selectors: [["po-page"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$g, decls: 2, vars: 0, consts: [[1, "po-page"]], template: function PoPageComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageComponent, [{
        type: Component,
        args: [{ selector: 'po-page', template: "<div class=\"po-page\">\n  <ng-content> </ng-content>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageComponent, { className: "PoPageComponent", filePath: "lib/components/po-page/po-page.component.ts", lineNumber: 14 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
 * po-page-list e po-page-base.
 */
class PoPageHeaderBaseComponent {
    /** Título da página. */
    title;
    /** Subtítulo da página. */
    subtitle;
    _breadcrumb;
    /** Objeto com propriedades do breadcrumb. */
    set breadcrumb(value) {
        this._breadcrumb = value;
    }
    get breadcrumb() {
        return this._breadcrumb;
    }
    static ɵfac = function PoPageHeaderBaseComponent_Factory(t) { return new (t || PoPageHeaderBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageHeaderBaseComponent, inputs: { title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"], breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageHeaderBaseComponent, [{
        type: Directive
    }], null, { title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }] }); })();

function PoPageHeaderComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵelement(1, "po-breadcrumb", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-favorite-service", ctx_r0.breadcrumb.favorite)("p-items", ctx_r0.breadcrumb.items)("p-params-service", ctx_r0.breadcrumb.params);
} }
function PoPageHeaderComponent_div_3_h1_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h1", 9);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r2.title, " ");
} }
function PoPageHeaderComponent_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r3.subtitle, " ");
} }
function PoPageHeaderComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtemplate(1, PoPageHeaderComponent_div_3_h1_1_Template, 2, 1, "h1", 7)(2, PoPageHeaderComponent_div_3_div_2_Template, 2, 1, "div", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.title);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.subtitle);
} }
const _c0$f = ["*"];
/**
 * @docsPrivate
 * @docsExtends PoPageHeaderBaseComponent
 */
class PoPageHeaderComponent extends PoPageHeaderBaseComponent {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoPageHeaderComponent_BaseFactory; return function PoPageHeaderComponent_Factory(t) { return (ɵPoPageHeaderComponent_BaseFactory || (ɵPoPageHeaderComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageHeaderComponent)))(t || PoPageHeaderComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageHeaderComponent, selectors: [["po-page-header"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$f, decls: 5, vars: 2, consts: [[1, "po-page-header"], ["class", "po-page-header-breadcrumb", 4, "ngIf"], [1, "po-page-header-container"], ["class", "po-page-header-title-container", 4, "ngIf"], [1, "po-page-header-breadcrumb"], [3, "p-favorite-service", "p-items", "p-params-service"], [1, "po-page-header-title-container"], ["class", "po-page-header-title", 4, "ngIf"], ["class", "po-page-header-subtitle", 4, "ngIf"], [1, "po-page-header-title"], [1, "po-page-header-subtitle"]], template: function PoPageHeaderComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoPageHeaderComponent_div_1_Template, 2, 3, "div", 1);
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtemplate(3, PoPageHeaderComponent_div_3_Template, 3, 2, "div", 3);
            i0.ɵɵprojection(4);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.breadcrumb && ctx.breadcrumb.items.length);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.title || ctx.subtitle);
        } }, dependencies: [i1.NgIf, PoBreadcrumbComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageHeaderComponent, [{
        type: Component,
        args: [{ selector: 'po-page-header', template: "<div class=\"po-page-header\">\n  <!-- Breadcrumb -->\n  <div class=\"po-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\n    <po-breadcrumb\n      [p-favorite-service]=\"breadcrumb.favorite\"\n      [p-items]=\"breadcrumb.items\"\n      [p-params-service]=\"breadcrumb.params\"\n    >\n    </po-breadcrumb>\n  </div>\n\n  <div class=\"po-page-header-container\">\n    <!-- Titulo e SubTitulo-->\n    <div class=\"po-page-header-title-container\" *ngIf=\"title || subtitle\">\n      <h1 class=\"po-page-header-title\" *ngIf=\"title\">\n        {{ title }}\n      </h1>\n      <div class=\"po-page-header-subtitle\" *ngIf=\"subtitle\">\n        {{ subtitle }}\n      </div>\n    </div>\n\n    <!-- Opera\u00E7\u00F5es -->\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageHeaderComponent, { className: "PoPageHeaderComponent", filePath: "lib/components/po-page/po-page-header/po-page-header.component.ts", lineNumber: 13 }); })();

function PoPageDefaultComponent_po_page_header_1_po_dropdown_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-dropdown", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-label", ctx_r1.literals.otherActions)("p-actions", ctx_r1.dropdownActions);
} }
function PoPageDefaultComponent_po_page_header_1_po_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 8);
    i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.callAction(ctx_r5.visibleActions[2])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-danger", ctx_r2.visibleActions[2].type === "danger")("p-disabled", ctx_r2.actionIsDisabled(ctx_r2.visibleActions[2]))("p-label", ctx_r2.visibleActions[2].label);
} }
function PoPageDefaultComponent_po_page_header_1_po_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 9);
    i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_4_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.callAction(ctx_r7.visibleActions[1])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-disabled", ctx_r3.actionIsDisabled(ctx_r3.visibleActions[1]))("p-label", ctx_r3.visibleActions[1].label)("p-danger", ctx_r3.visibleActions[1].type === "danger");
} }
function PoPageDefaultComponent_po_page_header_1_po_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 10);
    i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_5_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.callAction(ctx_r9.visibleActions[0])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-danger", ctx_r4.visibleActions[0].type === "danger")("p-disabled", ctx_r4.actionIsDisabled(ctx_r4.visibleActions[0]))("p-icon", ctx_r4.visibleActions[0].icon)("p-label", ctx_r4.visibleActions[0].label);
} }
function PoPageDefaultComponent_po_page_header_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-page-header", 1)(1, "div", 2);
    i0.ɵɵtemplate(2, PoPageDefaultComponent_po_page_header_1_po_dropdown_2_Template, 1, 2, "po-dropdown", 3)(3, PoPageDefaultComponent_po_page_header_1_po_button_3_Template, 1, 3, "po-button", 4)(4, PoPageDefaultComponent_po_page_header_1_po_button_4_Template, 1, 3, "po-button", 5)(5, PoPageDefaultComponent_po_page_header_1_po_button_5_Template, 1, 4, "po-button", 6);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title)("p-subtitle", ctx_r0.subtitle);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length > ctx_r0.limitPrimaryActions);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length === 3 && ctx_r0.visibleActions[2] && !ctx_r0.isMobile);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[1] && (ctx_r0.visibleActions.length === 2 || !ctx_r0.isMobile));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[0]);
} }
const _c0$e = ["*"];
/**
 * @docsExtends PoPageDefaultBaseComponent
 *
 * @example
 *
 * <example name="po-page-default-basic" title="PO Page Default Basic">
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.html"> </file>
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-labs" title="PO Page Default Labs">
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.html"> </file>
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-dashboard" title="PO Page Default - Dashboard">
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.html"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.ts"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.service.ts"> </file>
 * </example>
 */
class PoPageDefaultComponent extends PoPageDefaultBaseComponent {
    renderer;
    router;
    limitPrimaryActions = 3;
    dropdownActions;
    isMobile;
    maxWidthMobile = 480;
    constructor(viewRef, languageService, renderer, router) {
        super(languageService);
        this.renderer = renderer;
        this.router = router;
    }
    ngAfterContentInit() {
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listen('window', 'resize', (event) => {
            this.onResize(event);
        });
    }
    ngOnChanges(changes) {
        this.setDropdownActions();
    }
    actionIsDisabled(action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    }
    callAction(item) {
        if (item.url) {
            isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
        }
        else if (item.action) {
            item.action();
        }
    }
    hasPageHeader() {
        return !!(this.title ||
            (this.visibleActions && this.visibleActions.length) ||
            (this.breadcrumb && this.breadcrumb.items.length));
    }
    setDropdownActions() {
        if (this.visibleActions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
        }
    }
    onResize(event) {
        const width = event.target.innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    }
    setIsMobile() {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    }
    static ɵfac = function PoPageDefaultComponent_Factory(t) { return new (t || PoPageDefaultComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDefaultComponent, selectors: [["po-page-default"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$e, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", "p-subtitle", 4, "ngIf"], [3, "p-breadcrumb", "p-title", "p-subtitle"], [1, "po-page-header-actions"], [3, "p-label", "p-actions", 4, "ngIf"], [3, "p-danger", "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-disabled", "p-label", "p-danger", "p-click", 4, "ngIf"], ["p-kind", "primary", 3, "p-danger", "p-disabled", "p-icon", "p-label", "p-click", 4, "ngIf"], [3, "p-label", "p-actions"], [3, "p-danger", "p-disabled", "p-label", "p-click"], [3, "p-disabled", "p-label", "p-danger", "p-click"], ["p-kind", "primary", 3, "p-danger", "p-disabled", "p-icon", "p-label", "p-click"]], template: function PoPageDefaultComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageDefaultComponent_po_page_header_1_Template, 6, 7, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        } }, dependencies: [i1.NgIf, PoButtonComponent, PoDropdownComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDefaultComponent, [{
        type: Component,
        args: [{ selector: 'po-page-default', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\" [p-subtitle]=\"subtitle\">\n    <!-- OPERATIONS -->\n    <div class=\"po-page-header-actions\">\n      <po-dropdown\n        *ngIf=\"visibleActions.length > limitPrimaryActions\"\n        [p-label]=\"literals.otherActions\"\n        [p-actions]=\"dropdownActions\"\n      >\n      </po-dropdown>\n\n      <po-button\n        *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\n        [p-danger]=\"visibleActions[2].type === 'danger'\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\n        [p-label]=\"visibleActions[2].label\"\n        (p-click)=\"callAction(visibleActions[2])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[1])\"\n        [p-label]=\"visibleActions[1].label\"\n        [p-danger]=\"visibleActions[1].type === 'danger'\"\n        (p-click)=\"callAction(visibleActions[1])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"visibleActions[0]\"\n        p-kind=\"primary\"\n        [p-danger]=\"visibleActions[0].type === 'danger'\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[0])\"\n        [p-icon]=\"visibleActions[0].icon\"\n        [p-label]=\"visibleActions[0].label\"\n        (p-click)=\"callAction(visibleActions[0])\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n" }]
    }], () => [{ type: i0.ViewContainerRef }, { type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2.Router }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageDefaultComponent, { className: "PoPageDefaultComponent", filePath: "lib/components/po-page/po-page-default/po-page-default.component.ts", lineNumber: 36 }); })();

const poPageDetailLiteralsDefault = {
    en: {
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    },
    es: {
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    },
    pt: {
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    },
    ru: {
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }
};
/**
 * @description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de
 * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
 */
class PoPageDetailBaseComponent {
    poPageContent;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb;
    /**
     * Evento que será disparado ao clicar no botão de "Voltar".
     *
     * ```
     * <po-page-detail (p-back)="myBackFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
     */
    back = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Editar".
     *
     * ```
     * <po-page-detail (p-edit)="myEditFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
     */
    edit = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Remover".
     *
     * ```
     * <po-page-detail (p-remove)="myRemoveFunction()">
     * </po-page-detail>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
     */
    remove = new EventEmitter();
    _literals;
    _title;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-detail
     *   [p-literals]="customLiterals">
     * </po-page-detail>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageDetailLiteralsDefault[poLocaleDefault],
                ...poPageDetailLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageDetailLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDetailLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageDetailBaseComponent_Factory(t) { return new (t || PoPageDetailBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDetailBaseComponent, viewQuery: function PoPageDetailBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] }, outputs: { back: "p-back", edit: "p-edit", remove: "p-remove" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDetailBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], back: [{
            type: Output,
            args: ['p-back']
        }], edit: [{
            type: Output,
            args: ['p-edit']
        }], remove: [{
            type: Output,
            args: ['p-remove']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();

function PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 7);
    i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.back.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-icon", ctx_r2.hasEditOrRemoveFn("icon"))("p-label", ctx_r2.literals.back)("p-kind", ctx_r2.hasEditOrRemoveFn("type"));
} }
function PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 8);
    i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r7.remove.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-icon", ctx_r3.hasEditFn("icon"))("p-label", ctx_r3.literals.remove)("p-kind", ctx_r3.hasEditFn("type"));
} }
function PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 9);
    i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r9.edit.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-label", ctx_r4.literals.edit);
} }
function PoPageDetailComponent_po_page_header_1_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template, 1, 3, "po-button", 4)(2, PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template, 1, 3, "po-button", 5)(3, PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template, 1, 1, "po-button", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("back"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("remove"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("edit"));
} }
function PoPageDetailComponent_po_page_header_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-page-header", 1);
    i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_div_1_Template, 4, 3, "div", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title)("p-subtitle", ctx_r0.subtitle);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.hasAnyAction());
} }
const _c0$d = ["*"];
/**
 * @docsExtends PoPageDetailBaseComponent
 *
 * @example
 *
 * <example name="po-page-detail-basic" title="PO Page Detail Basic">
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.html"> </file>
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-labs" title="PO Page Detail Labs">
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.html"> </file>
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-user" title="PO Page Detail - User">
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.html"> </file>
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.ts"> </file>
 * </example>
 */
class PoPageDetailComponent extends PoPageDetailBaseComponent {
    hasAnyAction() {
        return this.hasEvent('back') || this.hasEvent('edit') || this.hasEvent('remove');
    }
    hasEditFn(property) {
        if (property === 'icon') {
            return this.hasEvent('edit') ? '' : 'ICON_DELETE';
        }
        else if (property === 'type') {
            return this.hasEvent('edit') ? 'secondary' : 'primary';
        }
        else {
            return '';
        }
    }
    hasEditOrRemoveFn(property) {
        if (property === 'icon') {
            return this.hasEvent('edit') || this.hasEvent('remove') ? '' : 'ICON_ARROW_LEFT';
        }
        else if (property === 'type') {
            return this.hasEvent('edit') || this.hasEvent('remove') ? 'secondary' : 'primary';
        }
        else {
            return '';
        }
    }
    hasEvent(event) {
        return !!this[event].observers.length;
    }
    hasPageHeader() {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoPageDetailComponent_BaseFactory; return function PoPageDetailComponent_Factory(t) { return (ɵPoPageDetailComponent_BaseFactory || (ɵPoPageDetailComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageDetailComponent)))(t || PoPageDetailComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDetailComponent, selectors: [["po-page-detail"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$d, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", "p-subtitle", 4, "ngIf"], [3, "p-breadcrumb", "p-title", "p-subtitle"], ["class", "po-page-header-actions", 4, "ngIf"], [1, "po-page-header-actions"], [3, "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], ["p-danger", "", 3, "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], ["p-icon", "ICON_EDIT", "p-kind", "primary", 3, "p-label", "p-click", 4, "ngIf"], [3, "p-icon", "p-label", "p-kind", "p-click"], ["p-danger", "", 3, "p-icon", "p-label", "p-kind", "p-click"], ["p-icon", "ICON_EDIT", "p-kind", "primary", 3, "p-label", "p-click"]], template: function PoPageDetailComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_Template, 2, 4, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        } }, dependencies: [i1.NgIf, PoButtonComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDetailComponent, [{
        type: Component,
        args: [{ selector: 'po-page-detail', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\" [p-subtitle]=\"subtitle\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('back')\"\n        [p-icon]=\"hasEditOrRemoveFn('icon')\"\n        [p-label]=\"literals.back\"\n        [p-kind]=\"hasEditOrRemoveFn('type')\"\n        (p-click)=\"back.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('remove')\"\n        p-danger\n        [p-icon]=\"hasEditFn('icon')\"\n        [p-label]=\"literals.remove\"\n        [p-kind]=\"hasEditFn('type')\"\n        (p-click)=\"remove.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('edit')\"\n        p-icon=\"ICON_EDIT\"\n        p-kind=\"primary\"\n        [p-label]=\"literals.edit\"\n        (p-click)=\"edit.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageDetailComponent, { className: "PoPageDetailComponent", filePath: "lib/components/po-page/po-page-detail/po-page-detail.component.ts", lineNumber: 29 }); })();

const poPageEditLiteralsDefault = {
    en: {
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    },
    es: {
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    },
    ru: {
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }
};
/**
 * @description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
class PoPageEditBaseComponent {
    poPageContent;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb;
    /** Desabilita botões de submissão (save e saveNew) */
    disableSubmit;
    /**
     * Evento que será disparado ao clicar no botão de "Cancelar".
     *
     * ```
     * <po-page-edit (p-cancel)="myCancelFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
     */
    cancel = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Salvar".
     *
     * ```
     * <po-page-edit (p-save)="mySaveFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
     */
    save = new EventEmitter();
    /**
     * Evento que será disparado ao clicar no botão de "Salvar e Novo".
     *
     * ```
     * <po-page-edit (p-save-new)="mySaveNewFunction()">
     * </po-page-edit>
     * ```
     *
     * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
     */
    saveNew = new EventEmitter();
    _literals;
    _title;
    language;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-edit
     *   [p-literals]="customLiterals">
     * </po-page-edit>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageEditLiteralsDefault[poLocaleDefault],
                ...poPageEditLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageEditLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageEditLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageEditBaseComponent_Factory(t) { return new (t || PoPageEditBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageEditBaseComponent, viewQuery: function PoPageEditBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], disableSubmit: [i0.ɵɵInputFlags.None, "p-disable-submit", "disableSubmit"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] }, outputs: { cancel: "p-cancel", save: "p-save", saveNew: "p-save-new" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageEditBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], disableSubmit: [{
            type: Input,
            args: ['p-disable-submit']
        }], cancel: [{
            type: Output,
            args: ['p-cancel']
        }], save: [{
            type: Output,
            args: ['p-save']
        }], saveNew: [{
            type: Output,
            args: ['p-save-new']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();

function PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 7);
    i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.cancel.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-icon", ctx_r2.getIcon("cancel"))("p-label", ctx_r2.literals.cancel)("p-kind", ctx_r2.getType("cancel"));
} }
function PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 8);
    i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r7.saveNew.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-disabled", ctx_r3.disableSubmit)("p-icon", ctx_r3.getIcon("saveNew"))("p-label", ctx_r3.literals.saveNew)("p-kind", ctx_r3.getType("saveNew"));
} }
function PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 9);
    i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r9.save.emit()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("p-disabled", ctx_r4.disableSubmit)("p-label", ctx_r4.literals.save);
} }
function PoPageEditComponent_po_page_header_1_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template, 1, 3, "po-button", 4)(2, PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template, 1, 4, "po-button", 5)(3, PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template, 1, 2, "po-button", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("cancel"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("saveNew"));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("save"));
} }
function PoPageEditComponent_po_page_header_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-page-header", 1);
    i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_div_1_Template, 4, 3, "div", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title)("p-subtitle", ctx_r0.subtitle);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.hasAnyAction());
} }
const _c0$c = ["*"];
/**
 * @docsExtends PoPageEditBaseComponent
 *
 * @example
 *
 * <example name="po-page-edit-basic" title="PO Page Edit Basic">
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-labs" title="PO Page Edit Labs">
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.html"> </file>
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-user" title="PO Page Edit - User">
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.html"> </file>
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.ts"> </file>
 * </example>
 */
class PoPageEditComponent extends PoPageEditBaseComponent {
    getIcon(icon) {
        if (icon === 'cancel') {
            return this.isPrimaryAction('cancel') ? 'ICON_CLOSE' : '';
        }
        if (icon === 'saveNew') {
            return this.isPrimaryAction('saveNew') ? 'ICON_OK' : '';
        }
        return '';
    }
    getType(type) {
        const isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
        const isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
        return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'secondary';
    }
    hasAnyAction() {
        return this.hasEvent('cancel') || this.hasEvent('saveNew') || this.hasEvent('save');
    }
    hasPageHeader() {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    }
    hasEvent(event) {
        return !!this[event].observers.length;
    }
    isPrimaryAction(action) {
        const hasSaveAction = this.hasEvent('save');
        if (action === 'saveNew') {
            return !hasSaveAction;
        }
        if (action === 'cancel') {
            const hasSaveNewAction = this.hasEvent('saveNew');
            return !hasSaveNewAction && !hasSaveAction;
        }
        return false;
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoPageEditComponent_BaseFactory; return function PoPageEditComponent_Factory(t) { return (ɵPoPageEditComponent_BaseFactory || (ɵPoPageEditComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageEditComponent)))(t || PoPageEditComponent); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageEditComponent, selectors: [["po-page-edit"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$c, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", "p-subtitle", 4, "ngIf"], [3, "p-breadcrumb", "p-title", "p-subtitle"], ["class", "po-page-header-actions", 4, "ngIf"], [1, "po-page-header-actions"], [3, "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], ["p-icon", "ICON_OK", "p-kind", "primary", 3, "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-icon", "p-label", "p-kind", "p-click"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click"], ["p-icon", "ICON_OK", "p-kind", "primary", 3, "p-disabled", "p-label", "p-click"]], template: function PoPageEditComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_Template, 2, 4, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        } }, dependencies: [i1.NgIf, PoButtonComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageEditComponent, [{
        type: Component,
        args: [{ selector: 'po-page-edit', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\" [p-subtitle]=\"subtitle\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('cancel')\"\n        [p-icon]=\"getIcon('cancel')\"\n        [p-label]=\"literals.cancel\"\n        [p-kind]=\"getType('cancel')\"\n        (p-click)=\"cancel.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('saveNew')\"\n        [p-disabled]=\"disableSubmit\"\n        [p-icon]=\"getIcon('saveNew')\"\n        [p-label]=\"literals.saveNew\"\n        [p-kind]=\"getType('saveNew')\"\n        (p-click)=\"saveNew.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('save')\"\n        p-icon=\"ICON_OK\"\n        p-kind=\"primary\"\n        [p-disabled]=\"disableSubmit\"\n        [p-label]=\"literals.save\"\n        (p-click)=\"save.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n" }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageEditComponent, { className: "PoPageEditComponent", filePath: "lib/components/po-page/po-page-edit/po-page-edit.component.ts", lineNumber: 29 }); })();

const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
class PoPageListBaseComponent {
    poPageContent;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoBreadcrumb`.
     */
    breadcrumb;
    /**
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoPageFilter`.
     */
    filter;
    /**
     * @optional
     *
     * @description
     *
     * Valor padrão na busca rápida ao inicializar o componente
     *
     */
    quickSearchValue;
    visibleActions = [];
    language;
    resizeListener;
    _actions = [];
    _disclaimerGroup;
    _literals;
    _title;
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poPageListLiteralsDefault[poLocaleDefault],
                ...poPageListLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Subtitulo do Header da página
     */
    subtitle;
    constructor(languageService) {
        this.language = languageService.getShortLanguage();
    }
    static ɵfac = function PoPageListBaseComponent_Factory(t) { return new (t || PoPageListBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageListBaseComponent, viewQuery: function PoPageListBaseComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        } }, inputs: { breadcrumb: [i0.ɵɵInputFlags.None, "p-breadcrumb", "breadcrumb"], filter: [i0.ɵɵInputFlags.None, "p-filter", "filter"], quickSearchValue: [i0.ɵɵInputFlags.None, "p-quick-search-value", "quickSearchValue"], actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], disclaimerGroup: [i0.ɵɵInputFlags.None, "p-disclaimer-group", "disclaimerGroup"], literals: [i0.ɵɵInputFlags.None, "p-literals", "literals"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], subtitle: [i0.ɵɵInputFlags.None, "p-subtitle", "subtitle"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageListBaseComponent, [{
        type: Directive
    }], () => [{ type: PoLanguageService }], { poPageContent: [{
            type: ViewChild,
            args: [PoPageContentComponent, { static: true }]
        }], breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], filter: [{
            type: Input,
            args: ['p-filter']
        }], quickSearchValue: [{
            type: Input,
            args: ['p-quick-search-value']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], disclaimerGroup: [{
            type: Input,
            args: ['p-disclaimer-group']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], subtitle: [{
            type: Input,
            args: ['p-subtitle']
        }] }); })();

const _c0$b = ["filterInput"];
function PoPageListComponent_po_page_header_1_po_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 10);
    i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_4_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.callAction(ctx_r7.visibleActions[0])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-danger", ctx_r1.visibleActions[0].type === "danger")("p-disabled", ctx_r1.actionIsDisabled(ctx_r1.actions[0]))("p-icon", ctx_r1.visibleActions[0].icon)("p-label", ctx_r1.visibleActions[0].label);
} }
function PoPageListComponent_po_page_header_1_po_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 11);
    i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_5_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.callAction(ctx_r9.visibleActions[1])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-danger", ctx_r2.visibleActions[1].type === "danger")("p-disabled", ctx_r2.actionIsDisabled(ctx_r2.actions[1]))("p-label", ctx_r2.visibleActions[1].label);
} }
function PoPageListComponent_po_page_header_1_po_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 11);
    i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_6_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r11.callAction(ctx_r11.visibleActions[2])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-danger", ctx_r3.visibleActions[2].type === "danger")("p-disabled", ctx_r3.actionIsDisabled(ctx_r3.visibleActions[2]))("p-label", ctx_r3.visibleActions[2].label);
} }
function PoPageListComponent_po_page_header_1_po_dropdown_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-dropdown", 12);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-actions", ctx_r4.dropdownActions)("p-label", ctx_r4.literals.otherActions);
} }
function PoPageListComponent_po_page_header_1_div_8_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 20)(1, "span", 21);
    i0.ɵɵlistener("click", function PoPageListComponent_po_page_header_1_div_8_div_6_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r15.callActionFilter("advancedAction")); })("keydown.enter", function PoPageListComponent_po_page_header_1_div_8_div_6_Template_span_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r17.callActionFilter("advancedAction")); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r14.advancedSearch, " ");
} }
function PoPageListComponent_po_page_header_1_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 13)(1, "div", 14)(2, "div", 15)(3, "po-icon", 16);
    i0.ɵɵlistener("click", function PoPageListComponent_po_page_header_1_div_8_Template_po_icon_click_3_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r18.callActionFilter("action")); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "input", 17, 18);
    i0.ɵɵlistener("keypress", function PoPageListComponent_po_page_header_1_div_8_Template_input_keypress_4_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r20 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r20.onkeypress($event.keyCode)); });
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(6, PoPageListComponent_po_page_header_1_div_8_div_6_Template, 3, 1, "div", 19);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r5.hasCustomFilterSize() ? ctx_r5.filterSizeClass(ctx_r5.filter.width) : "");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", ctx_r5.hasCustomFilterSize() ? ctx_r5.filter.advancedAction ? "po-page-filter-input-variable-size" : "po-page-filter-input-variable-size-wo-adv-search" : "");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("placeholder", ctx_r5.filter.placeholder || "")("value", ctx_r5.quickSearchValue || "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.filter.advancedAction);
} }
function PoPageListComponent_po_page_header_1_po_disclaimer_group_9_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer-group", 22);
    i0.ɵɵlistener("p-change", function PoPageListComponent_po_page_header_1_po_disclaimer_group_9_Template_po_disclaimer_group_p_change_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.onChangeDisclaimerGroup($event)); })("p-remove", function PoPageListComponent_po_page_header_1_po_disclaimer_group_9_Template_po_disclaimer_group_p_remove_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.onRemoveDisclaimer($event)); })("p-remove-all", function PoPageListComponent_po_page_header_1_po_disclaimer_group_9_Template_po_disclaimer_group_p_remove_all_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r24 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r24.onRemoveAllDisclaimers($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-page-list-disclaimer-group", !!(ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.disclaimers == null ? null : ctx_r6.disclaimerGroup.disclaimers.length));
    i0.ɵɵproperty("p-disclaimers", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.disclaimers)("p-hide-remove-all", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.hideRemoveAll)("p-title", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.title);
} }
function PoPageListComponent_po_page_header_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-page-header", 1)(1, "div", 2)(2, "div", 3)(3, "div", 4);
    i0.ɵɵtemplate(4, PoPageListComponent_po_page_header_1_po_button_4_Template, 1, 4, "po-button", 5)(5, PoPageListComponent_po_page_header_1_po_button_5_Template, 1, 3, "po-button", 6)(6, PoPageListComponent_po_page_header_1_po_button_6_Template, 1, 3, "po-button", 6)(7, PoPageListComponent_po_page_header_1_po_dropdown_7_Template, 1, 2, "po-dropdown", 7);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(8, PoPageListComponent_po_page_header_1_div_8_Template, 7, 5, "div", 8);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, PoPageListComponent_po_page_header_1_po_disclaimer_group_9_Template, 1, 5, "po-disclaimer-group", 9);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-page-list-header-padding", ctx_r0.filter && !ctx_r0.visibleActions.length);
    i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title)("p-subtitle", ctx_r0.subtitle);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("po-page-list-actions-padding", ctx_r0.filter);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[0]);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[1] && (ctx_r0.visibleActions.length === 2 || !ctx_r0.isMobile));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length === 3 && ctx_r0.visibleActions[2] && !ctx_r0.isMobile);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length > ctx_r0.limitPrimaryActions);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.filter);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !!ctx_r0.disclaimerGroup);
} }
const _c1$4 = ["*"];
/**
 * @docsExtends PoPageListBaseComponent
 *
 * @example
 *
 * <example name="po-page-list-basic" title="PO Page List Basic">
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.html"> </file>
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-labs" title="PO Page List Labs">
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.html"> </file>
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-hiring-processes" title="PO Page List - Hiring Processes">
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.service.ts"> </file>
 * </example>
 */
class PoPageListComponent extends PoPageListBaseComponent {
    renderer;
    router;
    changeDetector;
    filterInput;
    advancedSearch;
    dropdownActions;
    isMobile;
    limitPrimaryActions = 3;
    callFunction = callFunction;
    isRecalculate = true;
    maxWidthMobile = 480;
    /* istanbul ignore next */
    constructor(viewRef, languageService, renderer, router, changeDetector) {
        super(languageService);
        this.renderer = renderer;
        this.router = router;
        this.changeDetector = changeDetector;
        this.initializeListeners();
    }
    ngOnInit() {
        this.advancedSearch = this.initializeFixedLiterals();
    }
    ngAfterContentInit() {
        this.setIsMobile();
        this.setDropdownActions();
    }
    ngOnChanges(changes) {
        this.setDropdownActions();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    actionIsDisabled(action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    }
    callAction(item) {
        if (item.url) {
            isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
        }
        else if (item.action) {
            item.action();
        }
    }
    hasPageHeader() {
        return !!(this.title ||
            (this.visibleActions && this.visibleActions.length) ||
            (this.breadcrumb && this.breadcrumb.items.length));
    }
    hasCustomFilterSize() {
        if (!this.filter) {
            return false;
        }
        return this.filter.width >= 1 && this.filter.width <= 6;
    }
    filterSizeClass(width) {
        const smWidth = Math.max(this.filter?.advancedAction ? 6 : 2, width);
        const mdWidth = Math.max(this.filter?.advancedAction ? 4 : 1, width);
        if (this.filter?.advancedAction) {
            width = Math.max(width, 2);
        }
        return `po-sm-${smWidth} po-md-${mdWidth} po-lg-${width} po-xl-${width}`;
    }
    setDropdownActions() {
        if (this.visibleActions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
        }
    }
    callActionFilter(field) {
        this.filter[field](this.filterInput.nativeElement.value);
        this.changeDetector.detectChanges();
    }
    /**
     * Limpa o campo de pesquisa.
     */
    clearInputSearch() {
        this.filterInput.nativeElement.value = null;
    }
    onkeypress(key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    }
    // Recebe evento change do disclaimer e recalcula tela
    onChangeDisclaimerGroup(disclaimers) {
        if ((disclaimers && disclaimers.length && this.isRecalculate) ||
            (disclaimers.length === 0 && !this.isRecalculate)) {
            this.poPageContent.recalculateHeaderSize();
            this.isRecalculate = !this.isRecalculate;
        }
        if (this.disclaimerGroup && this.disclaimerGroup.change) {
            this.disclaimerGroup.change(disclaimers);
        }
    }
    onRemoveDisclaimer(removeData) {
        if (this.disclaimerGroup.remove) {
            this.disclaimerGroup.remove(removeData);
        }
    }
    onRemoveAllDisclaimers(removedDisclaimers) {
        if (this.disclaimerGroup.removeAll) {
            this.disclaimerGroup.removeAll(removedDisclaimers);
        }
    }
    initializeFixedLiterals() {
        const literal = {
            pt: {
                advancedSearch: 'Busca avançada'
            },
            en: {
                advancedSearch: 'Advanced search'
            },
            es: {
                advancedSearch: 'Búsqueda avanzada'
            },
            ru: {
                advancedSearch: 'полный поиск'
            }
        };
        return literal[this.language].advancedSearch;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.onResize(event);
        });
    }
    removeListeners() {
        this.resizeListener();
    }
    onResize(event) {
        const width = event.target.innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    }
    setIsMobile() {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    }
    static ɵfac = function PoPageListComponent_Factory(t) { return new (t || PoPageListComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageListComponent, selectors: [["po-page-list"]], viewQuery: function PoPageListComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$b, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterInput = _t.first);
        } }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1$4, decls: 4, vars: 1, consts: [[3, "po-page-list-header-padding", "p-breadcrumb", "p-title", "p-subtitle", 4, "ngIf"], [3, "p-breadcrumb", "p-title", "p-subtitle"], [1, "po-page-list-container"], [1, "po-page-list-operations"], [1, "po-page-list-actions"], ["p-kind", "primary", 3, "p-danger", "p-disabled", "p-icon", "p-label", "p-click", 4, "ngIf"], [3, "p-danger", "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-actions", "p-label", 4, "ngIf"], ["class", "po-page-list-filter-wrapper", 3, "ngClass", 4, "ngIf"], [3, "po-page-list-disclaimer-group", "p-disclaimers", "p-hide-remove-all", "p-title", "p-change", "p-remove", "p-remove-all", 4, "ngIf"], ["p-kind", "primary", 3, "p-danger", "p-disabled", "p-icon", "p-label", "p-click"], [3, "p-danger", "p-disabled", "p-label", "p-click"], [3, "p-actions", "p-label"], [1, "po-page-list-filter-wrapper", 3, "ngClass"], [1, "po-field-container-content", "po-page-filter-content", 3, "ngClass"], [1, "po-field-icon-container-right"], ["p-icon", "ICON_SEARCH", 1, "po-field-icon", "po-icon-input", 3, "click"], ["name", "model", "type", "text", 1, "po-input", "po-input-icon-right", 3, "placeholder", "value", "keypress"], ["filterInput", ""], ["class", "po-page-list-filter-search", 4, "ngIf"], [1, "po-page-list-filter-search"], ["tabindex", "0", 1, "po-page-list-filter-search-link", 3, "click", "keydown.enter"], [3, "p-disclaimers", "p-hide-remove-all", "p-title", "p-change", "p-remove", "p-remove-all"]], template: function PoPageListComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageListComponent_po_page_header_1_Template, 10, 13, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        } }, dependencies: [i1.NgClass, i1.NgIf, PoButtonComponent, PoDisclaimerGroupComponent, PoDropdownComponent, PoIconComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageListComponent, [{
        type: Component,
        args: [{ selector: 'po-page-list', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [class.po-page-list-header-padding]=\"filter && !visibleActions.length\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\"\n    [p-subtitle]=\"subtitle\"\n  >\n    <div class=\"po-page-list-container\">\n      <!-- OPERATIONS -->\n      <div class=\"po-page-list-operations\">\n        <div class=\"po-page-list-actions\" [class.po-page-list-actions-padding]=\"filter\">\n          <po-button\n            *ngIf=\"visibleActions[0]\"\n            p-kind=\"primary\"\n            [p-danger]=\"visibleActions[0].type === 'danger'\"\n            [p-disabled]=\"actionIsDisabled(actions[0])\"\n            [p-icon]=\"visibleActions[0].icon\"\n            [p-label]=\"visibleActions[0].label\"\n            (p-click)=\"callAction(visibleActions[0])\"\n          >\n          </po-button>\n\n          <po-button\n            *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\n            [p-danger]=\"visibleActions[1].type === 'danger'\"\n            [p-disabled]=\"actionIsDisabled(actions[1])\"\n            [p-label]=\"visibleActions[1].label\"\n            (p-click)=\"callAction(visibleActions[1])\"\n          >\n          </po-button>\n\n          <po-button\n            *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\n            [p-danger]=\"visibleActions[2].type === 'danger'\"\n            [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\n            [p-label]=\"visibleActions[2].label\"\n            (p-click)=\"callAction(visibleActions[2])\"\n          >\n          </po-button>\n\n          <po-dropdown\n            *ngIf=\"visibleActions.length > limitPrimaryActions\"\n            [p-actions]=\"dropdownActions\"\n            [p-label]=\"literals.otherActions\"\n          >\n          </po-dropdown>\n        </div>\n\n        <!-- FILTER -->\n        <div\n          class=\"po-page-list-filter-wrapper\"\n          *ngIf=\"filter\"\n          [ngClass]=\"hasCustomFilterSize() ? filterSizeClass(filter.width) : ''\"\n        >\n          <div\n            class=\"po-field-container-content po-page-filter-content\"\n            [ngClass]=\"\n              hasCustomFilterSize()\n                ? filter.advancedAction\n                  ? 'po-page-filter-input-variable-size'\n                  : 'po-page-filter-input-variable-size-wo-adv-search'\n                : ''\n            \"\n          >\n            <div class=\"po-field-icon-container-right\">\n              <po-icon p-icon=\"ICON_SEARCH\" class=\"po-field-icon po-icon-input\" (click)=\"callActionFilter('action')\">\n              </po-icon>\n            </div>\n\n            <input\n              #filterInput\n              class=\"po-input po-input-icon-right\"\n              name=\"model\"\n              type=\"text\"\n              [placeholder]=\"filter.placeholder || ''\"\n              (keypress)=\"onkeypress($event.keyCode)\"\n              [value]=\"quickSearchValue || ''\"\n            />\n          </div>\n\n          <div class=\"po-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\n            <span\n              class=\"po-page-list-filter-search-link\"\n              tabindex=\"0\"\n              (click)=\"callActionFilter('advancedAction')\"\n              (keydown.enter)=\"callActionFilter('advancedAction')\"\n            >\n              {{ advancedSearch }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- DISCLAIMER -->\n      <po-disclaimer-group\n        *ngIf=\"!!disclaimerGroup\"\n        [class.po-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\n        [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n        [p-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\n        [p-title]=\"disclaimerGroup?.title\"\n        (p-change)=\"onChangeDisclaimerGroup($event)\"\n        (p-remove)=\"onRemoveDisclaimer($event)\"\n        (p-remove-all)=\"onRemoveAllDisclaimers($event)\"\n      >\n      </po-disclaimer-group>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n" }]
    }], () => [{ type: i0.ViewContainerRef }, { type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2.Router }, { type: i0.ChangeDetectorRef }], { filterInput: [{
            type: ViewChild,
            args: ['filterInput']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoPageListComponent, { className: "PoPageListComponent", filePath: "lib/components/po-page/po-page-list/po-page-list.component.ts", lineNumber: 50 }); })();

/**
 * @description
 * Módulo dos componentes po-page-default, po-page-detail, po-page-edit,
 * po-page-list e po-page-slide.
 */
class PoPageModule {
    static ɵfac = function PoPageModule_Factory(t) { return new (t || PoPageModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPageModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
            FormsModule,
            RouterModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoDisclaimerGroupModule,
            PoDropdownModule,
            PoFieldModule,
            PoIconModule,
            PoLanguageModule,
            PoModalModule,
            PoPageSlideModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoDisclaimerGroupModule,
                    PoDropdownModule,
                    PoFieldModule,
                    PoIconModule,
                    PoLanguageModule,
                    PoModalModule,
                    PoPageSlideModule
                ],
                declarations: [
                    PoPageComponent,
                    PoPageContentComponent,
                    PoPageDefaultComponent,
                    PoPageDetailComponent,
                    PoPageEditComponent,
                    PoPageHeaderComponent,
                    PoPageListComponent
                ],
                exports: [
                    PoPageDefaultComponent,
                    PoPageDetailComponent,
                    PoPageEditComponent,
                    PoPageListComponent,
                    PoPageSlideComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPageModule, { declarations: [PoPageComponent,
        PoPageContentComponent,
        PoPageDefaultComponent,
        PoPageDetailComponent,
        PoPageEditComponent,
        PoPageHeaderComponent,
        PoPageListComponent], imports: [CommonModule,
        FormsModule,
        RouterModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoDisclaimerGroupModule,
        PoDropdownModule,
        PoFieldModule,
        PoIconModule,
        PoLanguageModule,
        PoModalModule,
        PoPageSlideModule], exports: [PoPageDefaultComponent,
        PoPageDetailComponent,
        PoPageEditComponent,
        PoPageListComponent,
        PoPageSlideComponent] }); })();

function PoSlideCirclesComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 2);
    i0.ɵɵlistener("click", function PoSlideCirclesComponent_ng_container_1_Template_div_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const index_r2 = restoredCtx.index; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.click.emit(index_r2)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const index_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-slide-active-circle", index_r2 === ctx_r0.currentSlideIndex);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para o conjunto de círculos que faz a passagem de itens do `po-slide`.
 */
class PoSlideCirclesComponent {
    /** Index do slide atual. */
    currentSlideIndex;
    /** Itens do slide. */
    items;
    /** Evento emitido ao clicar em um controle. */
    click = new EventEmitter();
    static ɵfac = function PoSlideCirclesComponent_Factory(t) { return new (t || PoSlideCirclesComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideCirclesComponent, selectors: [["po-slide-circles"]], inputs: { currentSlideIndex: [i0.ɵɵInputFlags.None, "p-current-slide-index", "currentSlideIndex"], items: [i0.ɵɵInputFlags.None, "p-items", "items"] }, outputs: { click: "p-click" }, decls: 2, vars: 1, consts: [[1, "po-slide-circles"], [4, "ngFor", "ngForOf"], [1, "po-slide-circle", 3, "click"]], template: function PoSlideCirclesComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoSlideCirclesComponent_ng_container_1_Template, 2, 2, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngForOf", ctx.items);
        } }, dependencies: [i1.NgForOf], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideCirclesComponent, [{
        type: Component,
        args: [{ selector: 'po-slide-circles', template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\"\n    ></div>\n  </ng-container>\n</div>\n" }]
    }], null, { currentSlideIndex: [{
            type: Input,
            args: ['p-current-slide-index']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSlideCirclesComponent, { className: "PoSlideCirclesComponent", filePath: "lib/components/po-slide/po-slide-circles/po-slide-circles.component.ts", lineNumber: 14 }); })();

const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
class PoSlideBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define a exibição das setas de navegação.
     *
     * @default `false`
     */
    hideArrows = false;
    _interval = poSlideIntervalDefault;
    _height;
    _slides;
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
    static ɵfac = function PoSlideBaseComponent_Factory(t) { return new (t || PoSlideBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSlideBaseComponent, inputs: { hideArrows: [i0.ɵɵInputFlags.HasDecoratorInputTransform, "p-hide-arrows", "hideArrows", convertToBoolean], height: [i0.ɵɵInputFlags.None, "p-height", "height"], interval: [i0.ɵɵInputFlags.None, "p-interval", "interval"], slides: [i0.ɵɵInputFlags.None, "p-slides", "slides"] }, features: [i0.ɵɵInputTransformsFeature] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideBaseComponent, [{
        type: Directive
    }], null, { hideArrows: [{
            type: Input,
            args: [{ alias: 'p-hide-arrows', transform: convertToBoolean }]
        }], height: [{
            type: Input,
            args: ['p-height']
        }], interval: [{
            type: Input,
            args: ['p-interval']
        }], slides: [{
            type: Input,
            args: ['p-slides']
        }] }); })();

/**
 * @usedBy PoSlideComponent
 *
 * @description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-slide
 *   [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
 *
 *   <ng-template p-slide-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-slide
 *    [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
 *
 *    <div *p-slide-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-slide>
 * ...
 *
 * ```
 */
class PoSlideContentTemplateDirective {
    templateRef;
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = function PoSlideContentTemplateDirective_Factory(t) { return new (t || PoSlideContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSlideContentTemplateDirective, selectors: [["", "p-slide-content-template", ""]] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideContentTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-slide-content-template]'
            }]
    }], () => [{ type: i0.TemplateRef }], null); })();

const _c0$a = ["slideItem"];
const _c1$3 = (a0, a1) => ({ alt: a0, image: a1 });
const _c2$2 = a0 => ({ item: a0 });
function PoSlideItemComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 8);
    i0.ɵɵelementContainer(1, 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("routerLink", ctx_r1.link);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r7)("ngTemplateOutletContext", i0.ɵɵpureFunction1(6, _c2$2, i0.ɵɵpureFunction2(3, _c1$3, ctx_r1.alt, ctx_r1.image)));
} }
function PoSlideItemComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 10);
    i0.ɵɵelementContainer(1, 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("href", ctx_r2.link, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r7)("ngTemplateOutletContext", i0.ɵɵpureFunction1(6, _c2$2, i0.ɵɵpureFunction2(3, _c1$3, ctx_r2.alt, ctx_r2.image)));
} }
const _c3$1 = (a0, a1, a2) => ({ alt: a0, image: a1, data: a2 });
function PoSlideItemComponent_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 11);
    i0.ɵɵlistener("click", function PoSlideItemComponent_a_4_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.action ? ctx_r8.action(ctx_r8.data) : undefined); });
    i0.ɵɵelementContainer(1, 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("ngClass", ctx_r3.action ? "po-slide-item-link" : "po-slide-item-no-link");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r3.template ? _r5 : _r7)("ngTemplateOutletContext", i0.ɵɵpureFunction1(7, _c2$2, i0.ɵɵpureFunction3(3, _c3$1, ctx_r3.alt, ctx_r3.image, ctx_r3.data)));
} }
function PoSlideItemComponent_ng_template_5_div_0_ng_template_1_Template(rf, ctx) { }
const _c4 = (a0, a1) => ({ $implicit: a0, index: a1 });
function PoSlideItemComponent_ng_template_5_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵtemplate(1, PoSlideItemComponent_ng_template_5_div_0_ng_template_1_Template, 0, 0, "ng-template", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext();
    const item_r10 = ctx_r14.item;
    const index_r11 = ctx_r14.index;
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r12.template.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c4, item_r10.data, index_r11));
} }
function PoSlideItemComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoSlideItemComponent_ng_template_5_div_0_Template, 2, 5, "div", 12);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r4.template);
} }
function PoSlideItemComponent_ng_template_7_img_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 15);
} if (rf & 2) {
    const item_r15 = i0.ɵɵnextContext().item;
    const ctx_r16 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("height", ctx_r16.imageHeight, "px");
    i0.ɵɵproperty("alt", item_r15.alt)("src", item_r15.image, i0.ɵɵsanitizeUrl);
} }
function PoSlideItemComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoSlideItemComponent_ng_template_7_img_0_Template, 1, 4, "img", 14);
} if (rf & 2) {
    const item_r15 = ctx.item;
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", item_r15.image && !ctx_r6.isIEOrEdge);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para cada item do po-slide.
 */
class PoSlideItemComponent {
    itemElement;
    /** Ação executada ao clicar em uma imagem */
    action;
    /** Texto alternativo quando a imagem não é encontrada */
    alt;
    /** Dados para o template customizado */
    data;
    /** Caminho da imagem */
    image;
    /** Altura da imagem */
    imageHeight;
    /** Template customizado */
    template;
    /** Link executado ao clicar em uma imagem */
    link;
    isIEOrEdge = isIEOrEdge();
    setLinkType() {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    static ɵfac = function PoSlideItemComponent_Factory(t) { return new (t || PoSlideItemComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideItemComponent, selectors: [["po-slide-item"]], viewQuery: function PoSlideItemComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$a, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemElement = _t.first);
        } }, inputs: { action: [i0.ɵɵInputFlags.None, "p-action", "action"], alt: [i0.ɵɵInputFlags.None, "p-alt", "alt"], data: [i0.ɵɵInputFlags.None, "p-data", "data"], image: [i0.ɵɵInputFlags.None, "p-image", "image"], imageHeight: [i0.ɵɵInputFlags.None, "p-image-height", "imageHeight"], template: [i0.ɵɵInputFlags.None, "p-template", "template"], link: [i0.ɵɵInputFlags.None, "p-link", "link"] }, decls: 9, vars: 8, consts: [[1, "po-slide-item", 3, "ngSwitch"], ["slideItem", ""], ["class", "po-slide-item-link", 3, "routerLink", 4, "ngSwitchCase"], ["class", "po-slide-item-link", 3, "href", 4, "ngSwitchCase"], [3, "ngClass", "click", 4, "ngSwitchCase"], [";", ""], ["slideItemTemplate", ""], ["slideItemImage", ""], [1, "po-slide-item-link", 3, "routerLink"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-slide-item-link", 3, "href"], [3, "ngClass", "click"], ["class", "po-slide-item-content", 4, "ngIf"], [1, "po-slide-item-content"], ["class", "po-slide-image", 3, "alt", "src", "height", 4, "ngIf"], [1, "po-slide-image", 3, "alt", "src"]], template: function PoSlideItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoSlideItemComponent_a_2_Template, 2, 8, "a", 2)(3, PoSlideItemComponent_a_3_Template, 2, 8, "a", 3)(4, PoSlideItemComponent_a_4_Template, 2, 9, "a", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoSlideItemComponent_ng_template_5_Template, 1, 1, "ng-template", 5, 6, i0.ɵɵtemplateRefExtractor)(7, PoSlideItemComponent_ng_template_7_Template, 1, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            i0.ɵɵstyleProp("background-image", !ctx.template && ctx.isIEOrEdge ? "url(" + ctx.image + ")" : "");
            i0.ɵɵclassProp("po-slide-item-background-image", !ctx.template && ctx.isIEOrEdge);
            i0.ɵɵproperty("ngSwitch", ctx.setLinkType());
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngSwitchCase", "noLink");
        } }, dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i2.RouterLink], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideItemComponent, [{
        type: Component,
        args: [{ selector: 'po-slide-item', template: "<div\n  #slideItem\n  class=\"po-slide-item\"\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\"\n>\n  <!-- slide com link interno -->\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-slide-item-link\" [routerLink]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-slide-item-link\" [href]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a\n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data } }\"\n    >\n    </ng-container>\n  </a>\n</div>\n\n<ng-template #slideItemTemplate let-item=\"item\" ; let-index=\"index\">\n  <div *ngIf=\"template\" class=\"po-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"\n    >\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item=\"item\">\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"po-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\"\n  />\n</ng-template>\n" }]
    }], null, { itemElement: [{
            type: ViewChild,
            args: ['slideItem', { static: true }]
        }], action: [{
            type: Input,
            args: ['p-action']
        }], alt: [{
            type: Input,
            args: ['p-alt']
        }], data: [{
            type: Input,
            args: ['p-data']
        }], image: [{
            type: Input,
            args: ['p-image']
        }], imageHeight: [{
            type: Input,
            args: ['p-image-height']
        }], template: [{
            type: Input,
            args: ['p-template']
        }], link: [{
            type: Input,
            args: ['p-link']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSlideItemComponent, { className: "PoSlideItemComponent", filePath: "lib/components/po-slide/po-slide-item/po-slide-item.component.ts", lineNumber: 18 }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a seta que controla a passagem de itens do `po-slide`.
 */
class PoSlideControlComponent {
    /** Tipo de controle que aceita os valores: 'previous' e 'next'. */
    control;
    /** Evento emitido ao clicar em um controle. */
    click = new EventEmitter();
    static ɵfac = function PoSlideControlComponent_Factory(t) { return new (t || PoSlideControlComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideControlComponent, selectors: [["po-slide-control"]], inputs: { control: [i0.ɵɵInputFlags.None, "p-control", "control"] }, outputs: { click: "p-click" }, decls: 3, vars: 6, consts: [[1, "po-slide-arrow-circle", 3, "click"]], template: function PoSlideControlComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0);
            i0.ɵɵlistener("click", function PoSlideControlComponent_Template_div_click_1_listener() { return ctx.click.emit(); });
            i0.ɵɵelement(2, "div");
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-slide-control-", ctx.control, "");
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-slide-arrow po-slide-arrow-", ctx.control, "");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideControlComponent, [{
        type: Component,
        args: [{ selector: 'po-slide-control', template: "<div class=\"po-slide-control-{{ control }}\">\n  <div class=\"po-slide-arrow-circle\" (click)=\"click.emit()\">\n    <div class=\"po-slide-arrow po-slide-arrow-{{ control }}\"></div>\n  </div>\n</div>\n" }]
    }], null, { control: [{
            type: Input,
            args: ['p-control']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSlideControlComponent, { className: "PoSlideControlComponent", filePath: "lib/components/po-slide/po-slide-control/po-slide-control.component.ts", lineNumber: 14 }); })();

const _c0$9 = ["slide"];
function PoSlideComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "po-slide-item", 8);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-action", item_r5.action)("p-data", item_r5)("p-image", item_r5.image)("p-image-height", ctx_r1.imageHeight)("p-template", ctx_r1.slideContentTemplate)("p-alt", item_r5.alt)("p-link", item_r5.link);
} }
function PoSlideComponent_po_slide_control_5_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-control", 9);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_5_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.previousControl()); });
    i0.ɵɵelementEnd();
} }
function PoSlideComponent_po_slide_control_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-control", 10);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_6_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.nextControl()); });
    i0.ɵɵelementEnd();
} }
function PoSlideComponent_po_slide_circles_7_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-slide-circles", 11);
    i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_circles_7_Template_po_slide_circles_p_click_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.goToItem($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-current-slide-index", ctx_r4.currentSlideIndex)("p-items", ctx_r4.slideItems);
} }
const poSlideDefaultHeight = 336;
const poSlideIntervalMin = 1000;
const poSlideMinHeight = 192;
const poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-external-controls" title="PO Slide - External Controls">
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
 * </example>
 */
class PoSlideComponent extends PoSlideBaseComponent {
    builder;
    slideContentTemplate;
    slide;
    itemsElements;
    currentSlideIndex = 0;
    imageHeight;
    slideItems = [];
    slideItemWidth;
    isLoaded = false;
    player;
    setInterval;
    resize$ = new Subject();
    resizeSubscription;
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    constructor(builder) {
        super();
        this.builder = builder;
    }
    onResize() {
        this.resize$.next({});
    }
    ngOnInit() {
        this.resizeSubscription = this.resize$.pipe(debounceTime$1(150)).subscribe(() => {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        });
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    }
    ngOnDestroy() {
        this.resizeSubscription?.unsubscribe();
    }
    /**
     * Método que retorna o index do slide atual
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *  myFunction() {
     *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
     * }
     *
     * ```
     */
    getCurrentSlideIndex() {
        return this.currentSlideIndex;
    }
    goToItem(index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    nextControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * Método para chamar o próximo slide.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.next();
     * }
     * ```
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * Método para chamar o slide anterior.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.previous();
     * }
     * ```
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    previousControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    setSlideHeight(height) {
        this.setHeight(height);
    }
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(() => {
                    this.next();
                }, this.interval)
                : undefined;
    }
    animate(offset) {
        if (this.hasElements) {
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))]);
    }
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    createArrayFromSlides(slides) {
        const isStringArray = slides.every(item => typeof item === 'string');
        if (isStringArray) {
            slides.forEach(element => this.slideItems.push({ image: `${element}` }));
        }
        else {
            this.slideItems = [...slides];
        }
    }
    setDefaultHeight(height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = `${poSlideDefaultHeight}px`;
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    setHeight(height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
    static ɵfac = function PoSlideComponent_Factory(t) { return new (t || PoSlideComponent)(i0.ɵɵdirectiveInject(i2$3.AnimationBuilder)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideComponent, selectors: [["po-slide"]], contentQueries: function PoSlideComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoSlideContentTemplateDirective, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slideContentTemplate = _t.first);
        } }, viewQuery: function PoSlideComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$9, 7);
            i0.ɵɵviewQuery(PoSlideItemComponent, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slide = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsElements = _t);
        } }, hostBindings: function PoSlideComponent_HostBindings(rf, ctx) { if (rf & 1) {
            i0.ɵɵlistener("resize", function PoSlideComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        } }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 8, vars: 4, consts: [[1, "po-slide-wrapper"], [1, "po-slide-outer"], [1, "po-slide-inner"], ["slide", ""], [4, "ngFor", "ngForOf"], ["p-control", "previous", 3, "p-click", 4, "ngIf"], ["p-control", "next", 3, "p-click", 4, "ngIf"], [3, "p-current-slide-index", "p-items", "p-click", 4, "ngIf"], [3, "p-action", "p-data", "p-image", "p-image-height", "p-template", "p-alt", "p-link"], ["p-control", "previous", 3, "p-click"], ["p-control", "next", 3, "p-click"], [3, "p-current-slide-index", "p-items", "p-click"]], template: function PoSlideComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵtemplate(4, PoSlideComponent_ng_container_4_Template, 2, 7, "ng-container", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoSlideComponent_po_slide_control_5_Template, 1, 0, "po-slide-control", 5)(6, PoSlideComponent_po_slide_control_6_Template, 1, 0, "po-slide-control", 6);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoSlideComponent_po_slide_circles_7_Template, 1, 2, "po-slide-circles", 7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngForOf", ctx.slideItems);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasSlides && ctx.slides.length > 1);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoSlideCirclesComponent, PoSlideControlComponent, PoSlideItemComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideComponent, [{
        type: Component,
        args: [{ selector: 'po-slide', template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\n      p-control=\"previous\"\n      (p-click)=\"previousControl()\"\n    >\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n" }]
    }], () => [{ type: i2$3.AnimationBuilder }], { slideContentTemplate: [{
            type: ContentChild,
            args: [PoSlideContentTemplateDirective, { static: true }]
        }], slide: [{
            type: ViewChild,
            args: ['slide', { static: true }]
        }], itemsElements: [{
            type: ViewChildren,
            args: [PoSlideItemComponent]
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoSlideComponent, { className: "PoSlideComponent", filePath: "lib/components/po-slide/po-slide.component.ts", lineNumber: 64 }); })();

/**
 * @description
 *
 * Módulo do componente `po-slide`.
 *
 * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoSlideModule {
    static ɵfac = function PoSlideModule_Factory(t) { return new (t || PoSlideModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoSlideModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule, PoContainerModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule, PoContainerModule],
                declarations: [
                    PoSlideCirclesComponent,
                    PoSlideComponent,
                    PoSlideControlComponent,
                    PoSlideContentTemplateDirective,
                    PoSlideItemComponent
                ],
                exports: [PoSlideComponent, PoSlideContentTemplateDirective],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoSlideModule, { declarations: [PoSlideCirclesComponent,
        PoSlideComponent,
        PoSlideControlComponent,
        PoSlideContentTemplateDirective,
        PoSlideItemComponent], imports: [CommonModule, RouterModule, PoContainerModule], exports: [PoSlideComponent, PoSlideContentTemplateDirective] }); })();

/**
 * @usedBy PoStepperComponent
 *
 * @description
 *
 * <a id="stepperStatus"></a>
 *
 * *Enums* para os status do `po-stepper` quando utilizada a propriedade `p-steps`.
 */
var PoStepperStatus;
(function (PoStepperStatus) {
    /** Define o estado do *step* como ativo. */
    PoStepperStatus["Active"] = "active";
    /** Define o estado do *step* como padrão. */
    PoStepperStatus["Default"] = "default";
    /** Define o estado do *step* como desabilitado. */
    PoStepperStatus["Disabled"] = "disabled";
    /** Define o estado do *step* como concluído. */
    PoStepperStatus["Done"] = "done";
    /** Define o estado do *step* com erro. */
    PoStepperStatus["Error"] = "error";
})(PoStepperStatus || (PoStepperStatus = {}));

const _c0$8 = ["*"];
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
class PoStepComponent {
    elementRef;
    /**
     * @optional
     *
     * @description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,
     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir
     * ao próximo *step*.
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     */
    canActiveNextStep;
    /** Título que será exibido descrevendo o passo (*step*). */
    label;
    // ID do step
    id = uuid();
    _status = PoStepperStatus.Disabled;
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
    static ɵfac = function PoStepComponent_Factory(t) { return new (t || PoStepComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepComponent, selectors: [["po-step"]], inputs: { canActiveNextStep: [i0.ɵɵInputFlags.None, "p-can-active-next-step", "canActiveNextStep"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], status: [i0.ɵɵInputFlags.None, "p-status", "status"] }, ngContentSelectors: _c0$8, decls: 1, vars: 0, template: function PoStepComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepComponent, [{
        type: Component,
        args: [{ selector: 'po-step', template: "<ng-content></ng-content>\n" }]
    }], () => [{ type: i0.ElementRef }], { canActiveNextStep: [{
            type: Input,
            args: ['p-can-active-next-step']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], status: [{
            type: Input,
            args: ['p-status']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepComponent, { className: "PoStepComponent", filePath: "lib/components/po-stepper/po-step/po-step.component.ts", lineNumber: 49 }); })();

function PoStepperCircleComponent_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-icon", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-icon", ctx_r0.icons || ctx_r0.isDone)("po-stepper-circle-content-lg", ctx_r0.isLargeStep)("po-stepper-circle-content-md", ctx_r0.isMediumStep);
    i0.ɵɵproperty("p-icon", ctx_r0.icons && ctx_r0.isError ? "ICON_EXCLAMATION" : ctx_r0.icons && (ctx_r0.isActive || ctx_r0.isDefault || ctx_r0.isDisabled) ? "ICON_INFO" : ctx_r0.isDone ? "ICON_OK" : "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", !ctx_r0.icons && !ctx_r0.isDone ? ctx_r0.content : "", " ");
} }
function PoStepperCircleComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 4);
} }
const poMediumStepSize = 32;
const poLargeStepSize = 48;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir os círculos dos *steps*.
 */
class PoStepperCircleComponent {
    // Conteúdo que irá aparecer no círculo do *step*.
    content;
    // Define se serão exibidos ícones no lugar de números nos steps.
    icons;
    // Tamanho do *step-circle*.
    size;
    // Status do *step*.
    status;
    get isActive() {
        return this.status === PoStepperStatus.Active;
    }
    get isDefault() {
        return this.status === PoStepperStatus.Default;
    }
    get isDisabled() {
        return this.status === PoStepperStatus.Disabled;
    }
    get isDone() {
        return this.status === PoStepperStatus.Done;
    }
    get isError() {
        return this.status === PoStepperStatus.Error;
    }
    get isLargeStep() {
        return this.size >= poLargeStepSize;
    }
    get isMediumStep() {
        return this.size >= poMediumStepSize && !this.isLargeStep;
    }
    static ɵfac = function PoStepperCircleComponent_Factory(t) { return new (t || PoStepperCircleComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperCircleComponent, selectors: [["po-stepper-circle"]], inputs: { content: [i0.ɵɵInputFlags.None, "p-content", "content"], icons: [i0.ɵɵInputFlags.None, "p-icons", "icons"], size: [i0.ɵɵInputFlags.None, "p-size", "size"], status: [i0.ɵɵInputFlags.None, "p-status", "status"] }, decls: 3, vars: 7, consts: [[1, "po-stepper-circle", 3, "tabindex"], ["class", "po-stepper-circle-content", 3, "po-icon", "p-icon", "po-stepper-circle-content-lg", "po-stepper-circle-content-md", 4, "ngIf"], ["class", "po-stepper-circle-active", 4, "ngIf"], [1, "po-stepper-circle-content", 3, "p-icon"], [1, "po-stepper-circle-active"]], template: function PoStepperCircleComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoStepperCircleComponent_po_icon_1_Template, 2, 8, "po-icon", 1)(2, PoStepperCircleComponent_div_2_Template, 1, 0, "div", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.size, "px")("width", ctx.size, "px");
            i0.ɵɵproperty("tabindex", ctx.isDisabled ? -1 : 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", !ctx.isActive);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isActive || ctx.isError);
        } }, dependencies: [i1.NgIf, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperCircleComponent, [{
        type: Component,
        args: [{ selector: 'po-stepper-circle', template: "<div class=\"po-stepper-circle\" [style.height.px]=\"size\" [style.width.px]=\"size\" [tabindex]=\"isDisabled ? -1 : 0\">\n  <po-icon\n    *ngIf=\"!isActive\"\n    class=\"po-stepper-circle-content\"\n    [class.po-icon]=\"icons || isDone\"\n    [p-icon]=\"\n      icons && isError\n        ? 'ICON_EXCLAMATION'\n        : icons && (isActive || isDefault || isDisabled)\n          ? 'ICON_INFO'\n          : isDone\n            ? 'ICON_OK'\n            : ''\n    \"\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.po-stepper-circle-content-md]=\"isMediumStep\"\n  >\n    {{ !icons && !isDone ? content : '' }}\n  </po-icon>\n\n  <div *ngIf=\"isActive || isError\" class=\"po-stepper-circle-active\"></div>\n</div>\n" }]
    }], null, { content: [{
            type: Input,
            args: ['p-content']
        }], icons: [{
            type: Input,
            args: ['p-icons']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], status: [{
            type: Input,
            args: ['p-status']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepperCircleComponent, { className: "PoStepperCircleComponent", filePath: "lib/components/po-stepper/po-stepper-circle/po-stepper-circle.component.ts", lineNumber: 19 }); })();

/**
 *
 * @usedBy PoStepperComponent
 *
 * @description
 *
 * <a id="stepperOrientation"></a>
 *
 * *Enums* para definição da orientação do `po-stepper`.
 */
var PoStepperOrientation;
(function (PoStepperOrientation) {
    /** Define a exibição do componente na horizontal. */
    PoStepperOrientation["Horizontal"] = "horizontal";
    /** Define a exibição do componente na vertical. */
    PoStepperOrientation["Vertical"] = "vertical";
})(PoStepperOrientation || (PoStepperOrientation = {}));

const poStepperOrientationDefault = PoStepperOrientation.Horizontal;
/**
 * @description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
class PoStepperBaseComponent {
    /**
     *
     * @optional
     *
     * @description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * @default `false`
     */
    stepIcons;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * @default `24`
     */
    stepSize;
    /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
    onChangeStep = new EventEmitter();
    _orientation = poStepperOrientationDefault;
    _sequential = true;
    _step = 1;
    _steps = [];
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `po-stepper`.
     *
     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
     *
     * @default `PoStepperOrientation.Horizontal`
     */
    set orientation(value) {
        this._orientation = Object.values(PoStepperOrientation).includes(value)
            ? value
            : poStepperOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `po-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     *
     * @default `1`
     */
    set step(step) {
        if (step >= 1 && step <= this.steps.length) {
            this._step = step;
            this._steps[this._step - 1].status = PoStepperStatus.Active;
        }
    }
    get step() {
        return this._step;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     */
    set steps(steps) {
        this._steps = Array.isArray(steps) ? steps : [];
        this._steps.forEach(step => (step.status = PoStepperStatus.Default));
        this.step = 1;
    }
    get steps() {
        return this._steps;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o `po-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
     *
     * @default `true`
     */
    set sequential(sequential) {
        this._sequential = convertToBoolean(sequential);
    }
    get sequential() {
        return this._sequential;
    }
    static ɵfac = function PoStepperBaseComponent_Factory(t) { return new (t || PoStepperBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoStepperBaseComponent, inputs: { stepIcons: [i0.ɵɵInputFlags.None, "p-step-icons", "stepIcons"], stepSize: [i0.ɵɵInputFlags.None, "p-step-size", "stepSize"], orientation: [i0.ɵɵInputFlags.None, "p-orientation", "orientation"], step: [i0.ɵɵInputFlags.None, "p-step", "step"], steps: [i0.ɵɵInputFlags.None, "p-steps", "steps"], sequential: [i0.ɵɵInputFlags.None, "p-sequential", "sequential"] }, outputs: { onChangeStep: "p-change-step" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperBaseComponent, [{
        type: Directive
    }], null, { stepIcons: [{
            type: Input,
            args: ['p-step-icons']
        }], stepSize: [{
            type: Input,
            args: ['p-step-size']
        }], onChangeStep: [{
            type: Output,
            args: ['p-change-step']
        }], orientation: [{
            type: Input,
            args: ['p-orientation']
        }], step: [{
            type: Input,
            args: ['p-step']
        }], steps: [{
            type: Input,
            args: ['p-steps']
        }], sequential: [{
            type: Input,
            args: ['p-sequential']
        }] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir as legendas dos *steps*.
 */
class PoStepperLabelComponent {
    // Conteúdo da label.
    content;
    static ɵfac = function PoStepperLabelComponent_Factory(t) { return new (t || PoStepperLabelComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperLabelComponent, selectors: [["po-stepper-label"]], inputs: { content: [i0.ɵɵInputFlags.None, "p-content", "content"] }, decls: 2, vars: 1, consts: [[1, "po-stepper-label"]], template: function PoStepperLabelComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵtextInterpolate1(" ", ctx.content, "\n");
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperLabelComponent, [{
        type: Component,
        args: [{ selector: 'po-stepper-label', template: "<div class=\"po-stepper-label\">\n  {{ content }}\n</div>\n" }]
    }], null, { content: [{
            type: Input,
            args: ['p-content']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepperLabelComponent, { className: "PoStepperLabelComponent", filePath: "lib/components/po-stepper/po-stepper-label/po-stepper-label.component.ts", lineNumber: 14 }); })();

const poStepperStepSizeDefault = 24;
const poStepperStepSizeMax = 64;
const poStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
 */
class PoStepperStepComponent {
    // Conteúdo que será repassado para o componente `p-circle-content` através da propriedade `p-content`.
    circleContent;
    // Define a orientação de exibição.
    orientation;
    // Informa o status da proxima etapa.
    nextStatus;
    // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
    activated = new EventEmitter();
    // Evento que será emitido ao clicar no *step*.
    click = new EventEmitter();
    // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
    enter = new EventEmitter();
    literals = {
        ...poStepLiteralsDefault[poLocaleDefault],
        ...poStepLiteralsDefault[getShortBrowserLanguage()]
    };
    _label;
    _status;
    _stepIcons = false;
    _stepSize = poStepperStepSizeDefault;
    // Label do *step*.
    set label(value) {
        this._label = isTypeof(value, 'string') ? value : `${this.literals.label} ${this.circleContent}`;
    }
    get label() {
        return this._label;
    }
    // Define o estado de exibição.
    set status(value) {
        this._status = value ? value : undefined;
        if (this.status === PoStepperStatus.Active) {
            this.activated.emit();
        }
    }
    get status() {
        return this._status;
    }
    set stepIcons(stepIcons) {
        this._stepIcons = convertToBoolean(stepIcons);
    }
    get stepIcons() {
        return this._stepIcons;
    }
    // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
    // O valor informado deve ser entre `24` e `64`.
    set stepSize(value) {
        this._stepSize =
            value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax ? value : poStepperStepSizeDefault;
    }
    get stepSize() {
        return this._stepSize;
    }
    get halfStepSize() {
        return this.stepSize / 2;
    }
    get isVerticalOrientation() {
        return this.orientation === PoStepperOrientation.Vertical;
    }
    get marginHorizontalBar() {
        return this.isVerticalOrientation ? undefined : this.halfStepSize;
    }
    getStatusClass(status) {
        switch (status) {
            case PoStepperStatus.Active:
                return 'po-stepper-step-default';
            case PoStepperStatus.Disabled:
                return 'po-stepper-step-disabled';
            case PoStepperStatus.Done:
                return 'po-stepper-step-default';
            case PoStepperStatus.Error:
                return 'po-stepper-step-error';
            default:
                return 'po-stepper-step-default';
        }
    }
    onClick() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.click.emit();
        }
    }
    onEnter() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.enter.emit();
        }
    }
    static ɵfac = function PoStepperStepComponent_Factory(t) { return new (t || PoStepperStepComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperStepComponent, selectors: [["po-stepper-step"]], inputs: { circleContent: [i0.ɵɵInputFlags.None, "p-circle-content", "circleContent"], orientation: [i0.ɵɵInputFlags.None, "p-orientation", "orientation"], nextStatus: [i0.ɵɵInputFlags.None, "p-next-status", "nextStatus"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], status: [i0.ɵɵInputFlags.None, "p-status", "status"], stepIcons: [i0.ɵɵInputFlags.None, "p-step-icons", "stepIcons"], stepSize: [i0.ɵɵInputFlags.None, "p-step-size", "stepSize"] }, outputs: { activated: "p-activated", click: "p-click", enter: "p-enter" }, decls: 6, vars: 24, consts: [[1, "po-stepper-step", 3, "ngClass", "click", "keydown.enter"], [1, "po-stepper-step-container"], [3, "p-content", "p-icons", "p-size", "p-status"], [1, "po-stepper-step-label-position", 3, "p-content"]], template: function PoStepperStepComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoStepperStepComponent_Template_div_click_0_listener() { return ctx.onClick(); })("keydown.enter", function PoStepperStepComponent_Template_div_keydown_enter_0_listener() { return ctx.onEnter(); });
            i0.ɵɵelementStart(1, "div", 1);
            i0.ɵɵelement(2, "div")(3, "po-stepper-circle", 2)(4, "div");
            i0.ɵɵelementEnd();
            i0.ɵɵelement(5, "po-stepper-label", 3);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngClass", ctx.getStatusClass(ctx.status));
            i0.ɵɵadvance();
            i0.ɵɵstyleProp("width", ctx.isVerticalOrientation ? ctx.stepSize : undefined, "px");
            i0.ɵɵadvance();
            i0.ɵɵstyleProp("margin-right", ctx.marginHorizontalBar, "px");
            i0.ɵɵclassProp("po-stepper-step-bar-top", ctx.isVerticalOrientation)("po-stepper-step-bar-left", !ctx.isVerticalOrientation);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-content", ctx.circleContent)("p-icons", ctx.stepIcons)("p-size", ctx.stepSize)("p-status", ctx.status);
            i0.ɵɵadvance();
            i0.ɵɵstyleProp("margin-left", ctx.marginHorizontalBar, "px");
            i0.ɵɵclassProp("po-stepper-step-bar-bottom", ctx.isVerticalOrientation)("po-stepper-step-bar-right", !ctx.isVerticalOrientation)("po-stepper-step-dashed-border", ctx.nextStatus === "disabled" && !ctx.isVerticalOrientation)("po-stepper-step-dashed-border-vertical", ctx.nextStatus === "disabled" && ctx.isVerticalOrientation);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-content", ctx.label);
        } }, dependencies: [i1.NgClass, PoStepperCircleComponent, PoStepperLabelComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperStepComponent, [{
        type: Component,
        args: [{ selector: 'po-stepper-step', template: "<div class=\"po-stepper-step\" [ngClass]=\"getStatusClass(status)\" (click)=\"onClick()\" (keydown.enter)=\"onEnter()\">\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\"\n    ></div>\n\n    <po-stepper-circle [p-content]=\"circleContent\" [p-icons]=\"stepIcons\" [p-size]=\"stepSize\" [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [class.po-stepper-step-dashed-border]=\"nextStatus === 'disabled' && !isVerticalOrientation\"\n      [class.po-stepper-step-dashed-border-vertical]=\"nextStatus === 'disabled' && isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\"\n    ></div>\n  </div>\n\n  <po-stepper-label class=\"po-stepper-step-label-position\" [p-content]=\"label\"> </po-stepper-label>\n</div>\n" }]
    }], null, { circleContent: [{
            type: Input,
            args: ['p-circle-content']
        }], orientation: [{
            type: Input,
            args: ['p-orientation']
        }], nextStatus: [{
            type: Input,
            args: ['p-next-status']
        }], activated: [{
            type: Output,
            args: ['p-activated']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], enter: [{
            type: Output,
            args: ['p-enter']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], status: [{
            type: Input,
            args: ['p-status']
        }], stepIcons: [{
            type: Input,
            args: ['p-step-icons']
        }], stepSize: [{
            type: Input,
            args: ['p-step-size']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepperStepComponent, { className: "PoStepperStepComponent", filePath: "lib/components/po-stepper/po-stepper-step/po-stepper-step.component.ts", lineNumber: 27 }); })();

function PoStepperComponent_po_stepper_step_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-stepper-step", 3);
    i0.ɵɵlistener("p-activated", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_activated_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const step_r2 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onStepActive(step_r2)); })("p-click", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeStep(index_r3, step_r2)); })("p-enter", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_enter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.changeStep(index_r3, step_r2)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r2 = ctx.$implicit;
    const index_r3 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    let tmp_6_0;
    i0.ɵɵproperty("p-circle-content", index_r3 + 1)("p-label", step_r2.label)("p-orientation", ctx_r0.orientation)("p-status", step_r2.status)("p-step-icons", ctx_r0.stepIcons)("p-step-size", ctx_r0.stepSize)("p-next-status", (tmp_6_0 = ctx_r0.poSteps.get(index_r3 + 1)) == null ? null : tmp_6_0.status);
} }
function PoStepperComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} }
const _c0$7 = ["*"];
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-active" title="PO Stepper - Active">
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.html"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.ts"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.service.ts"> </file>
 * </example>
 */
class PoStepperComponent extends PoStepperBaseComponent {
    changeDetector;
    poSteps;
    currentActiveStep;
    get currentStepIndex() {
        return this.step - 1;
    }
    get stepList() {
        return (this.usePoSteps && this.poSteps) || this.steps;
    }
    get usePoSteps() {
        return !!this.poSteps.length;
    }
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    ngAfterContentInit() {
        this.activeFirstStep();
        this.poSteps.changes.subscribe(() => {
            this.controlStepsStatus(0, this.poSteps.first);
        });
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index) {
        if (!this.usePoSteps) {
            return;
        }
        const stepsArray = this.getPoSteps();
        const step = stepsArray[index];
        this.changeStep(index, step);
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first() {
        if (!this.usePoSteps) {
            return;
        }
        const firstStep = this.poSteps.first;
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const nextIndex = stepIndex + 1;
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const previousIndex = stepIndex - 1;
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    changeStep(stepIndex, step) {
        this.allowNextStep(stepIndex)
            .pipe(take(1))
            .subscribe(nextStepAllowed => {
            if (nextStepAllowed) {
                const isDifferentStep = !this.currentActiveStep || step.id !== this.currentActiveStep.id;
                if (this.usePoSteps && isDifferentStep) {
                    this.controlStepsStatus(stepIndex, step);
                    this.onChangeStep.emit(step);
                }
                else if (!this.usePoSteps && stepIndex !== this.currentStepIndex) {
                    // if para tratamento do modelo antigo do po-stepper
                    this.onChangeStep.emit(stepIndex + 1);
                }
            }
        });
    }
    onStepActive(step) {
        this.currentActiveStep = step;
        const { stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        this.poSteps.forEach((stepChild, i) => {
            if (i < stepIndex) {
                stepChild.status = PoStepperStatus.Done;
            }
        });
    }
    trackByFn(step) {
        return step.id;
    }
    activeFirstStep() {
        const hasStepActive = this.poSteps.some(poStep => poStep.status === PoStepperStatus.Active);
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    }
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return of(true);
        }
        const isAllowNextStep$ = this.usePoSteps
            ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
            : this.steps.slice(this.step, nextStepIndex).every(step => step.status === PoStepperStatus.Done);
        return typeof isAllowNextStep$ === 'boolean' ? of(isAllowNextStep$) : isAllowNextStep$;
    }
    canActiveNextStep(currentActiveStep = {}) {
        if (!currentActiveStep.canActiveNextStep) {
            return of(true);
        }
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        const canActiveNextStep$ = canActiveNextStep instanceof Observable ? canActiveNextStep : of(canActiveNextStep);
        return canActiveNextStep$.pipe(tap(isCanActiveNextStep => {
            currentActiveStep.status = this.getStepperStatusByCanActive(isCanActiveNextStep);
        }), catchError(err => {
            currentActiveStep.status = PoStepperStatus.Error;
            return throwError(err);
        }));
    }
    controlStepsStatus(stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    }
    getStepsAndIndex(step = {}) {
        const steps = this.getPoSteps();
        const stepIndex = steps.findIndex(poStep => poStep.id === step.id);
        return { steps, stepIndex };
    }
    getPoSteps() {
        return this.poSteps.toArray();
    }
    isBeforeStep(stepIndex) {
        const currentActiveStepIndex = () => this.getPoSteps().findIndex(step => step.id === this.currentActiveStep.id);
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    setFinalSteppersAsDisabled(stepIndex) {
        this.getPoSteps()
            .filter((step, index) => step && index >= stepIndex + 2)
            .forEach(step => (step.status = PoStepperStatus.Disabled));
    }
    setStepAsActive(step) {
        step.status = PoStepperStatus.Active;
    }
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    }
    static ɵfac = function PoStepperComponent_Factory(t) { return new (t || PoStepperComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperComponent, selectors: [["po-stepper"]], contentQueries: function PoStepperComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoStepComponent, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poSteps = _t);
        } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$7, decls: 4, vars: 6, consts: [[1, "po-stepper-container"], ["class", "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-stepper-content", 4, "ngIf"], [1, "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter"], [1, "po-stepper-content"]], template: function PoStepperComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div")(1, "div", 0);
            i0.ɵɵtemplate(2, PoStepperComponent_po_stepper_step_2_Template, 1, 7, "po-stepper-step", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoStepperComponent_div_3_Template, 2, 0, "div", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-stepper po-stepper-", ctx.orientation, "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.stepList)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.usePoSteps);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoStepperStepComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperComponent, [{
        type: Component,
        args: [{ selector: 'po-stepper', template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n  <div class=\"po-stepper-container\">\n    <po-stepper-step\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index + 1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      [p-next-status]=\"poSteps.get(index + 1)?.status\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\"\n    >\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }], { poSteps: [{
            type: ContentChildren,
            args: [PoStepComponent]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoStepperComponent, { className: "PoStepperComponent", filePath: "lib/components/po-stepper/po-stepper.component.ts", lineNumber: 41 }); })();

/**
 * @description
 * Módulo do componente po-stepper
 */
class PoStepperModule {
    static ɵfac = function PoStepperModule_Factory(t) { return new (t || PoStepperModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoStepperModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoIconModule],
                declarations: [
                    PoStepComponent,
                    PoStepperCircleComponent,
                    PoStepperComponent,
                    PoStepperLabelComponent,
                    PoStepperStepComponent
                ],
                exports: [PoStepComponent, PoStepperComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoStepperModule, { declarations: [PoStepComponent,
        PoStepperCircleComponent,
        PoStepperComponent,
        PoStepperLabelComponent,
        PoStepperStepComponent], imports: [CommonModule, PoIconModule], exports: [PoStepComponent, PoStepperComponent] }); })();

const _c0$6 = ["tabButtom"];
const _c1$2 = a0 => ({ "po-tab-focusable": a0 });
const _c2$1 = (a0, a1) => ({ "po-tab-border-active": a0, "po-tab-border-disabled": a1 });
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por manipular os botões de aba.
 */
class PoTabButtonComponent {
    elementRef;
    changeDetector;
    tabButtom;
    // Desabilita o botão
    disabled;
    // Identificador do componente
    id;
    // Rótulo do botão
    label;
    // Diminui o tamanho do botão
    small;
    // Função sera emitida quando a tab ficar ativada
    activated = new EventEmitter();
    // Função sera emitida quando a tab ficar desabilitada ou escondida
    changeState = new EventEmitter();
    // Método recebido do usuário para ser disparado quando clicar na aba
    click = new EventEmitter();
    _active;
    _hide;
    widthButton;
    // Ativa o botão
    set active(value) {
        this._active = value;
        this.emitActivated();
    }
    get active() {
        return this._active;
    }
    // Oculta o botão
    set hide(value) {
        this._hide = convertToBoolean(value);
        this.setDisplayOnHide();
    }
    get hide() {
        return this._hide;
    }
    constructor(elementRef, changeDetector) {
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
    }
    ngAfterViewInit() {
        this.widthButton = this.tabButtom.nativeElement.offsetWidth;
        this.changeDetector.detectChanges();
    }
    ngOnChanges(changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    }
    onClick() {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    }
    emitActivated() {
        if (this.active) {
            this.activated.emit(this);
        }
    }
    setDisplayOnHide() {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    }
    static ɵfac = function PoTabButtonComponent_Factory(t) { return new (t || PoTabButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabButtonComponent, selectors: [["po-tab-button"]], viewQuery: function PoTabButtonComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$6, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabButtom = _t.first);
        } }, inputs: { disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], id: [i0.ɵɵInputFlags.None, "p-id", "id"], label: [i0.ɵɵInputFlags.None, "p-label", "label"], small: [i0.ɵɵInputFlags.None, "p-small", "small"], active: [i0.ɵɵInputFlags.None, "p-active", "active"], hide: [i0.ɵɵInputFlags.None, "p-hide", "hide"] }, outputs: { activated: "p-activated", changeState: "p-change-state", click: "p-click" }, features: [i0.ɵɵNgOnChangesFeature], decls: 5, vars: 16, consts: [["role", "tab", "p-tooltip-position", "top", 1, "po-tab-button-default", 3, "p-tooltip", "id", "ngClass", "click", "keyup.enter"], ["tabButtom", ""], [1, "po-tab-button-label", "po-text-ellipsis"], [3, "ngClass"]], template: function PoTabButtonComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoTabButtonComponent_Template_div_click_0_listener() { return ctx.onClick(); })("keyup.enter", function PoTabButtonComponent_Template_div_keyup_enter_0_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "div", 3);
        } if (rf & 2) {
            i0.ɵɵclassProp("po-tab-button-active", ctx.active)("po-tab-button-disabled", ctx.disabled);
            i0.ɵɵproperty("p-tooltip", ctx.widthButton > 239 ? ctx.label : "")("id", ctx.id)("ngClass", i0.ɵɵpureFunction1(11, _c1$2, !ctx.disabled && !ctx.hide));
            i0.ɵɵattribute("tabindex", ctx.disabled ? null : 0)("aria-selected", ctx.active);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(13, _c2$1, ctx.active, !ctx.active));
        } }, dependencies: [i1.NgClass, PoTooltipDirective], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabButtonComponent, [{
        type: Component,
        args: [{ selector: 'po-tab-button', template: "<div\n  #tabButtom\n  role=\"tab\"\n  [p-tooltip]=\"widthButton > 239 ? label : ''\"\n  p-tooltip-position=\"top\"\n  class=\"po-tab-button-default\"\n  [id]=\"id\"\n  [ngClass]=\"{ 'po-tab-focusable': !disabled && !hide }\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [attr.aria-selected]=\"active\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\"\n>\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{ label }}\n  </span>\n</div>\n<div [ngClass]=\"{ 'po-tab-border-active': active, 'po-tab-border-disabled': !active }\"></div>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { tabButtom: [{
            type: ViewChild,
            args: ['tabButtom', { static: true }]
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], id: [{
            type: Input,
            args: ['p-id']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], activated: [{
            type: Output,
            args: ['p-activated']
        }], changeState: [{
            type: Output,
            args: ['p-change-state']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], active: [{
            type: Input,
            args: ['p-active']
        }], hide: [{
            type: Input,
            args: ['p-hide']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabButtonComponent, { className: "PoTabButtonComponent", filePath: "lib/components/po-tabs/po-tab-button/po-tab-button.component.ts", lineNumber: 27 }); })();

/**
 * @description
 *
 * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
 */
class PoTabBaseComponent {
    /** Rótulo da aba. */
    label;
    /** Método disparado ao clicar na aba. */
    click = new EventEmitter();
    // ID da aba
    id = uuid();
    _active = false;
    _disabled = false;
    _hide = false;
    widthButton;
    /**
     * @optional
     *
     * @description
     *
     * Ativa a aba exibindo seu conteúdo.
     *
     * > Sugere-se utilizar na aba de conteúdo inicial.
     *
     * @default `false`
     */
    set active(active) {
        this._active = convertToBoolean(active);
        this.setDisplayOnActive();
    }
    get active() {
        return this._active;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a aba.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta a aba.
     *
     * @default `false`
     */
    set hide(hide) {
        this._hide = convertToBoolean(hide);
    }
    get hide() {
        return this._hide;
    }
    static ɵfac = function PoTabBaseComponent_Factory(t) { return new (t || PoTabBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTabBaseComponent, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], active: [i0.ɵɵInputFlags.None, "p-active", "active"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], hide: [i0.ɵɵInputFlags.None, "p-hide", "hide"] }, outputs: { click: "p-click" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], active: [{
            type: Input,
            args: ['p-active']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], hide: [{
            type: Input,
            args: ['p-hide']
        }] }); })();

class PoTabsService {
    onChangesTriggeredSource = new Subject();
    onChangesTriggeredActiveSource = new Subject();
    onChangesTriggered$ = this.onChangesTriggeredSource.asObservable();
    triggerActiveOnChanges$ = this.onChangesTriggeredActiveSource.asObservable();
    triggerOnChanges() {
        this.onChangesTriggeredSource.next();
    }
    triggerActiveOnChanges(tab) {
        this.onChangesTriggeredActiveSource.next(tab);
    }
    static ɵfac = function PoTabsService_Factory(t) { return new (t || PoTabsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTabsService, factory: PoTabsService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsService, [{
        type: Injectable
    }], null, null); })();

const _c0$5 = ["*"];
/**
 * @docsExtends PoTabBaseComponent
 */
class PoTabComponent extends PoTabBaseComponent {
    elementRef;
    tabsService;
    constructor(elementRef, tabsService) {
        super();
        this.elementRef = elementRef;
        this.tabsService = tabsService;
    }
    ngAfterContentInit() {
        this.setDisplayOnActive();
    }
    ngOnChanges(changes) {
        setTimeout(() => {
            this.tabsService.triggerOnChanges();
            if (changes?.active?.currentValue) {
                this.tabsService.triggerActiveOnChanges(this);
            }
        }, 100);
    }
    setDisplayOnActive() {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    }
    static ɵfac = function PoTabComponent_Factory(t) { return new (t || PoTabComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoTabsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabComponent, selectors: [["po-tab"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$5, decls: 1, vars: 0, template: function PoTabComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabComponent, [{
        type: Component,
        args: [{ selector: 'po-tab', template: "<ng-content></ng-content>\n" }]
    }], () => [{ type: i0.ElementRef }, { type: PoTabsService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabComponent, { className: "PoTabComponent", filePath: "lib/components/po-tabs/po-tab/po-tab.component.ts", lineNumber: 13 }); })();

const _c0$4 = ["popover"];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para agrupamento de componentes `po-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
class PoTabDropdownComponent {
    popover;
    button;
    // Rótulo do `po-tab-button`
    label;
    // Diminui o tamanho do botão
    small;
    // Lista de abas
    tabs = [];
    // Evento que será emitido ao ativar uma aba
    activated = new EventEmitter();
    // Evento que será emitido a aba for desabilitada ou ocultada
    changeState = new EventEmitter();
    // Evento de click
    click = new EventEmitter();
    closeAndReturnToButtom() {
        this.popover.close();
        this.button.focus();
    }
    get buttonElement() {
        return this.button.buttonElement;
    }
    static ɵfac = function PoTabDropdownComponent_Factory(t) { return new (t || PoTabDropdownComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabDropdownComponent, selectors: [["po-tab-dropdown"]], viewQuery: function PoTabDropdownComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$4, 7);
            i0.ɵɵviewQuery(PoButtonComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.button = _t.first);
        } }, inputs: { label: [i0.ɵɵInputFlags.None, "p-label", "label"], small: [i0.ɵɵInputFlags.None, "p-small", "small"], tabs: [i0.ɵɵInputFlags.None, "p-tabs", "tabs"] }, outputs: { activated: "p-activated", changeState: "p-change-state", click: "p-click" }, decls: 9, vars: 4, consts: [[1, "po-tab-dropdown-content", "po-tab-button-default"], ["p-kind", "tertiary", "p-icon", "ICON_ARROW_DOWN", 3, "p-aria-label"], ["button", ""], ["p-hide-arrow", "", "p-position", "bottom", 3, "p-target"], ["popover", ""], [1, "po-tab-dropdown-container"], ["p-type", "action", 3, "p-items", "p-is-tabs", "p-activated-tabs", "p-change-state-tabs", "p-click-tabs", "p-close"], ["listbox", "", "poListBoxRef", ""]], template: function PoTabDropdownComponent_Template(rf, ctx) { if (rf & 1) {
            const _r4 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-button", 1, 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "po-popover", 3, 4)(5, "div", 5)(6, "po-listbox", 6, 7);
            i0.ɵɵlistener("p-activated-tabs", function PoTabDropdownComponent_Template_po_listbox_p_activated_tabs_6_listener($event) { return ctx.activated.emit($event); })("p-change-state-tabs", function PoTabDropdownComponent_Template_po_listbox_p_change_state_tabs_6_listener($event) { return ctx.changeState.emit($event); })("p-click-tabs", function PoTabDropdownComponent_Template_po_listbox_p_click_tabs_6_listener($event) { i0.ɵɵrestoreView(_r4); const _r1 = i0.ɵɵreference(4); _r1.close(); return i0.ɵɵresetView(ctx.click.emit($event)); })("p-close", function PoTabDropdownComponent_Template_po_listbox_p_close_6_listener() { return ctx.closeAndReturnToButtom(); });
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-aria-label", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-target", ctx.buttonElement);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-items", ctx.tabs)("p-is-tabs", true);
        } }, dependencies: [PoPopoverComponent, PoButtonComponent, PoListBoxComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabDropdownComponent, [{
        type: Component,
        args: [{ selector: 'po-tab-dropdown', template: "<div class=\"po-tab-dropdown-content po-tab-button-default\">\n  <po-button #button p-kind=\"tertiary\" [p-aria-label]=\"label\" p-icon=\"ICON_ARROW_DOWN\"> </po-button>\n</div>\n\n<po-popover #popover p-hide-arrow p-position=\"bottom\" [p-target]=\"buttonElement\">\n  <div class=\"po-tab-dropdown-container\">\n    <po-listbox\n      #listbox\n      #poListBoxRef\n      p-type=\"action\"\n      [p-items]=\"tabs\"\n      [p-is-tabs]=\"true\"\n      (p-activated-tabs)=\"activated.emit($event)\"\n      (p-change-state-tabs)=\"changeState.emit($event)\"\n      (p-click-tabs)=\"popover.close(); click.emit($event)\"\n      (p-close)=\"closeAndReturnToButtom()\"\n    >\n    </po-listbox>\n  </div>\n</po-popover>\n" }]
    }], null, { popover: [{
            type: ViewChild,
            args: ['popover', { static: true }]
        }], button: [{
            type: ViewChild,
            args: [PoButtonComponent, { static: true }]
        }], label: [{
            type: Input,
            args: ['p-label']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], tabs: [{
            type: Input,
            args: ['p-tabs']
        }], activated: [{
            type: Output,
            args: ['p-activated']
        }], changeState: [{
            type: Output,
            args: ['p-change-state']
        }], click: [{
            type: Output,
            args: ['p-click']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabDropdownComponent, { className: "PoTabDropdownComponent", filePath: "lib/components/po-tabs/po-tab-dropdown/po-tab-dropdown.component.ts", lineNumber: 19 }); })();

/**
 * @description
 *
 * O componente `po-tabs` é responsável por agrupar [abas](/documentation/po-tab) dispostas numa linha horizontal,
 * ideal para facilitar a organização de conteúdos.
 *
 * O componente exibirá as abas enquanto houver espaço na tela, caso a aba ultrapasse o limite da tela a mesma será agrupada em um dropdown.
 *
 * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão.
 *
 * É possível realizar a navegação entre as abas através da tecla SETAS(direita e esquerda) do teclado.
 * Caso uma aba estiver desabilitada, não receberá foco de navegação.
 *
 * #### Boas práticas
 *
 * - Evite utilizar um `po-tabs` dentro de outro `po-tabs`;
 * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
 * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretas, curtas e intuitivas.
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                            | Descrição                                             | Valor Padrão                                      |
 * |----------------------------------------|-------------------------------------------------------|---------------------------------------------------|
 * | **Default Values**                     |                                                       |                                                   |
 * | `--background`                         | Cor de background                                     | `var(--color-neutral-light-00)`                   |
 * | `--border-radius`                      | Contém o valor do raio dos cantos do elemento&nbsp;   | `var(--border-radius-md)`                         |
 * | `--color-baseline`                     | Cor para box-shadow                                   | `var(--color-neutral-light-20)`                   |
 * | `--font-family`                        | Família tipográfica usada                             | `var(--font-family-theme)`                        |
 * | `--font-size`                          | Tamanho da fonte                                      | `var(--font-size-default)`                        |
 * | `--font-weight`                        | Peso da fonte                                         | `var(--font-weight-bold)`                         |
 * | **Disabled**                           |                                                       |                                                   |
 * | `--color-disabled`                     | Cor da fonte no estado disabilitado                   | `var(--color-action-disabled)`                    |
 * | `--background-item-disabled`&nbsp;     | Cor de background do item desabilitado                | `var(--color-neutral-light-10)`                   |
 * | **Focused**                            |                                                       |                                                   |
 * | `--outline-color-focused`              | Cor do outline do estado de focus                     | `var(--color-action-focus)`                       |
 * | **Hover**                              |                                                       |                                                   |
 * | `--color-hover`                        | Cor principal no estado hover                         | `var(--color-brand-01-darkest)`                   |
 * | `--background-item-hover`              | Cor de background no estado de hover                  | `var(--color-brand-01-lightest)`                  |
 * | **Selected**                           |                                                       |                                                   |
 * | `--background-item-selected`           | Cor de background do ítem selecionado                 | `var(--color-neutral-light-10)`                   |
 *
 */
class PoTabsBaseComponent {
    _small = false;
    /**
     * @deprecated 17.x.x
     *
     * @optinal
     *
     * @description
     *
     * Diminui o tamanho das abas.
     *
     * @default `false`
     */
    set small(value) {
        this._small = convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    static ɵfac = function PoTabsBaseComponent_Factory(t) { return new (t || PoTabsBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTabsBaseComponent, inputs: { small: [i0.ɵɵInputFlags.None, "p-small", "small"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsBaseComponent, [{
        type: Directive
    }], null, { small: [{
            type: Input,
            args: ['p-small']
        }] }); })();

const _c0$3 = ["tabDropdown"];
const _c1$1 = ["containerTabs"];
const _c2 = ["tabButton"];
function PoTabsComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "po-tab-button", 7, 8);
    i0.ɵɵlistener("keyup.enter", function PoTabsComponent_ng_container_4_Template_po_tab_button_keyup_enter_1_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.closePopover()); })("p-activated", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_activated_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onTabActive(tab_r3)); })("p-change-state", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_change_state_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onTabChangeState(tab_r3)); })("p-click", function PoTabsComponent_ng_container_4_Template_po_tab_button_p_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const tab_r3 = restoredCtx.$implicit; const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.selectedTab(tab_r3)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r3 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-active", tab_r3.active)("p-disabled", tab_r3.disabled)("p-hide", tab_r3.hide)("p-id", tab_r3.id)("hidden", tab_r3.hide)("p-label", tab_r3.label)("p-small", ctx_r1.small)("id", tab_r3.id);
    i0.ɵɵattribute("disabled", tab_r3.disabled);
} }
function PoTabsComponent_po_tab_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-tab-dropdown", 9, 10);
    i0.ɵɵlistener("p-change-state", function PoTabsComponent_po_tab_dropdown_5_Template_po_tab_dropdown_p_change_state_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.onTabChangeState($event)); })("p-click", function PoTabsComponent_po_tab_dropdown_5_Template_po_tab_dropdown_p_click_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onTabActiveByDropdown($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-tab-dropdown-device", !(ctx_r2.tabsDefault == null ? null : ctx_r2.tabsDefault.length));
    i0.ɵɵproperty("p-label", ctx_r2.literals.moreTabs)("p-small", ctx_r2.small)("p-tabs", ctx_r2.overflowedTabs);
} }
const _c3 = ["*"];
const poTabsLiterals = {
    en: {
        moreTabs: 'More'
    },
    es: {
        moreTabs: 'Más'
    },
    pt: {
        moreTabs: 'Mais'
    },
    ru: {
        moreTabs: 'Ещё'
    }
};
const poTabsMaxNumberOfTabs = 5;
/**
 * @docsExtends PoTabsBaseComponent
 *
 * @example
 *
 * <example name="po-tabs-basic" title="PO Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="PO Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="PO Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
class PoTabsComponent extends PoTabsBaseComponent {
    changeDetector;
    languageService;
    tabsService;
    // Tabs utilizados no ng-content
    tabsChildren;
    tabButton;
    tabDropdown;
    containerTabs;
    maxNumberOfTabs = poTabsMaxNumberOfTabs;
    literals;
    tabsDefault = [];
    tabsDropdown = [];
    initializeCalculation = true;
    initializeComponent = false;
    quantityTabsButton;
    defaultLastTabWidth;
    previousActiveTab;
    subscription = new Subscription();
    subscriptionTabsService = new Subscription();
    subscriptionTabActive = new Subscription();
    constructor(changeDetector, languageService, tabsService) {
        super();
        this.changeDetector = changeDetector;
        this.languageService = languageService;
        this.tabsService = tabsService;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTabsLiterals[language]
        };
    }
    ngOnInit() {
        this.subscriptionTabsService = this.tabsService.onChangesTriggered$.subscribe(() => {
            this.updateTabsState();
            if (this.initializeComponent) {
                this.handleKeyboardNavigationTab();
            }
        });
        this.subscriptionTabActive = this.tabsService.triggerActiveOnChanges$.subscribe(tab => {
            const isTabInDropdown = this.tabsDropdown.some(t => t.id === tab.id);
            if (isTabInDropdown) {
                this.onTabActiveByDropdown(tab);
            }
        });
    }
    ngAfterViewInit() {
        this.calculateTabs(this.initializeCalculation);
        this.initializeCalculation = false;
        this.updateTabsState();
        this.changeDetector.detectChanges();
        this.handleKeyboardNavigationTab();
        this.initializeComponent = true;
    }
    ngAfterContentInit() {
        this.updateTabsState(true);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.subscriptionTabsService.unsubscribe();
        this.subscriptionTabActive.unsubscribe();
    }
    get isShowTabDropdown() {
        return this.tabsChildren['_results'].slice(this.quantityTabsButton).filter(item => !item.hide).length;
    }
    // tabs que serão apresentadas na aba "Mais"
    get overflowedTabs() {
        return this.tabsChildren['_results'].slice(this.quantityTabsButton);
    }
    get tabs() {
        return this.tabsChildren['_results'].slice(0, this.quantityTabsButton);
    }
    get tabsChildrenArray() {
        return this.tabsChildren.toArray();
    }
    closePopover() {
        const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    }
    isVisibleTab(tab) {
        return !tab.hide;
    }
    onTabActiveByDropdown(tab) {
        this.changeTabPositionByDropdown(tab);
        const lastTabWidth = this.defaultLastTabWidth > 0
            ? this.defaultLastTabWidth
            : this.tabsChildren.find(e => e === this.tabsChildrenArray[this.quantityTabsButton - 1])?.widthButton;
        this.reorderTabs(tab);
        tab.widthButton = lastTabWidth;
        this.tabButton.last.nativeElement.style.width = `${lastTabWidth}px`;
        this.handleKeyboardNavigationTab();
    }
    // Função disparada quando alguma tab ficar ativa
    onTabActive(tab) {
        this.previousActiveTab = this.tabsChildren.find(tabChild => tabChild.active && tabChild.id !== tab.id);
        this.deactivateTab();
    }
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    onTabChangeState(tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    }
    reorderTabs(tabToReorder) {
        const tabsArray = this.tabsChildrenArray;
        const tabIndex = tabsArray.findIndex(item => item.id === tabToReorder.id);
        if (tabIndex !== -1) {
            const [tab] = tabsArray.splice(tabIndex, 1);
            tabsArray.splice(this.quantityTabsButton - 1, 0, tab);
        }
        this.tabsChildren.reset(tabsArray);
        this.changeDetector.detectChanges();
    }
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    selectedTab(tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        const isTabInDropdown = this.tabsDropdown.some(t => t.id === tab.id);
        if (isTabInDropdown) {
            this.onTabActiveByDropdown(tab);
        }
        this.changeDetector.detectChanges();
    }
    trackByFn(_i, tab) {
        return tab.id;
    }
    // ativa a previousActiveTab ou primeira tab encontrada.
    activeDistinctTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    }
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    activeFirstTab() {
        this.tabs.some(tabChild => {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    }
    // Movimenta a tab da visão de tabs para o dropdown, e vice-versa.
    changeTabPositionByDropdown(tabToActivate) {
        const lastTab = this.tabsDefault[this.tabsDefault.length - 1];
        this.tabsDefault = this.tabsDefault.filter(tab => tab.id !== lastTab.id);
        this.tabsDefault.push(tabToActivate);
        const _tabsDropdown = this.tabsDropdown.filter(tab => tab.id !== tabToActivate.id);
        _tabsDropdown.unshift(lastTab);
        this.tabsDropdown = _tabsDropdown;
        tabToActivate.active = true;
        this.onTabActive(tabToActivate);
    }
    // desativa previousActiveTab e dispara a detecção de mudança.
    deactivateTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    }
    updateTabsState(initialState = false) {
        this.defaultLastTabWidth = this.tabButton?.last?.nativeElement?.getBoundingClientRect().width;
        if (this.defaultLastTabWidth <= 0) {
            return;
        }
        const lastTabChildren = this.tabsChildrenArray[this.quantityTabsButton - 1];
        if (lastTabChildren) {
            lastTabChildren.widthButton = this.defaultLastTabWidth;
        }
        if (this.tabsChildren) {
            const _tabsChildren = this.tabsChildrenArray;
            if (initialState) {
                this.tabsDefault = _tabsChildren;
                this.tabsDropdown = _tabsChildren;
            }
            else {
                this.tabsDefault = _tabsChildren.slice(0, this.quantityTabsButton);
                this.tabsDropdown = _tabsChildren.slice(this.quantityTabsButton);
            }
        }
    }
    calculateTabs(initializeCalculation) {
        if (initializeCalculation) {
            let sumOfWidth = 150;
            const screenSize = this.containerTabs.nativeElement.offsetWidth;
            const listTabButton = [];
            if (this.tabButton?.length) {
                this.tabButton.forEach(element => {
                    const width = element.nativeElement.offsetWidth;
                    if (sumOfWidth + width <= screenSize || screenSize < 1) {
                        listTabButton.push(element);
                    }
                    sumOfWidth += width;
                });
            }
            this.quantityTabsButton = listTabButton.length;
        }
    }
    handleKeyboardNavigationTab(initialIndex = 0) {
        this.subscription.unsubscribe();
        this.subscription = new Subscription();
        if (this.tabButton?.length) {
            const tabFocusable = this.tabButton
                .filter((element, index) => element.nativeElement.children[0]?.id === this.tabsChildren['_results'][index]?.id)
                .map(el => {
                if (el.nativeElement.children[0].classList.contains('po-tab-focusable')) {
                    return el.nativeElement.children[0];
                }
            })
                .filter(Boolean);
            if (tabFocusable) {
                this.initializeTabAccessibilityElements(tabFocusable, initialIndex);
            }
        }
    }
    /**
     * Função que atribui o número de tabs fora do dropdown.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTabsComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('poTab', { static: true }) poTab: PoTabsComponent;
     *
     * changeQuantityTabs() {
     *   this.poTab.setQuantityTabsButton(1); //Número de tabs
     * }
     * ```
     */
    setQuantityTabsButton(number) {
        this.quantityTabsButton = number;
    }
    initializeTabAccessibilityElements(tabRemoveElements, initialIndex) {
        tabRemoveElements.forEach((tabRemoveElement, index) => {
            if (index === initialIndex) {
                this.setTabIndex(tabRemoveElements[initialIndex], 0);
            }
            else if (tabRemoveElements.length === initialIndex) {
                this.setTabIndex(tabRemoveElements[initialIndex - 1], 0);
            }
            else {
                this.setTabIndex(tabRemoveElement, -1);
            }
            this.subscription.add(fromEvent(tabRemoveElement, 'keydown').subscribe((event) => {
                this.handleKeyDown(event, tabRemoveElements, index);
            }));
            if (index !== 0) {
                this.subscription.add(fromEvent(tabRemoveElements, 'blur').subscribe(() => {
                    this.setTabIndex(tabRemoveElements[index], -1);
                    this.setTabIndex(tabRemoveElements[0], 0);
                }));
            }
        });
    }
    setTabIndex(element, tabIndex) {
        element.setAttribute('tabindex', tabIndex);
    }
    handleKeyDown(event, tabRemoveElements, index) {
        const KEY_SPACE = 'Space';
        const KEY_ARROW_LEFT = 'ArrowLeft';
        const KEY_ARROW_RIGHT = 'ArrowRight';
        const KEY_HOME = 'Home';
        const KEY_END = 'End';
        if (event.code === KEY_SPACE || event.code === KEY_HOME || event.code === KEY_END) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (event.key === KEY_ARROW_LEFT) {
            this.handleArrowLeft(tabRemoveElements, index);
        }
        else if (event.key === KEY_ARROW_RIGHT) {
            this.handleArrowRight(tabRemoveElements, index);
        }
        else if (event.key === KEY_HOME) {
            this.handleHomeKey(tabRemoveElements, index);
        }
        else if (event.key === KEY_END) {
            this.handleEndKey(tabRemoveElements, index);
        }
    }
    handleArrowLeft(tabRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[index - 1].focus();
            this.setTabIndex(tabRemoveElements[index - 1], 0);
        }
        else {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[tabRemoveElements.length - 1].focus();
            this.setTabIndex(tabRemoveElements[tabRemoveElements.length - 1], 0);
        }
    }
    handleHomeKey(tabRemoveElements, index) {
        if (index > 0) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[0].focus();
            this.setTabIndex(tabRemoveElements[0], 0);
        }
    }
    handleEndKey(tabRemoveElements, index) {
        if (index < tabRemoveElements.length - 1) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[tabRemoveElements.length - 1].focus();
            this.setTabIndex(tabRemoveElements[tabRemoveElements.length - 1], 0);
        }
    }
    handleArrowRight(tabRemoveElements, index) {
        if (index < tabRemoveElements.length - 1) {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[index + 1].focus();
            this.setTabIndex(tabRemoveElements[index + 1], 0);
        }
        else {
            this.setTabIndex(tabRemoveElements[index], -1);
            tabRemoveElements[0].focus();
            this.setTabIndex(tabRemoveElements[0], 0);
        }
    }
    static ɵfac = function PoTabsComponent_Factory(t) { return new (t || PoTabsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(PoTabsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabsComponent, selectors: [["po-tabs"]], contentQueries: function PoTabsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoTabComponent, 4);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabsChildren = _t);
        } }, viewQuery: function PoTabsComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$3, 7);
            i0.ɵɵviewQuery(_c1$1, 7, ElementRef);
            i0.ɵɵviewQuery(_c2, 5, ElementRef);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabDropdown = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerTabs = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabButton = _t);
        } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 8, vars: 3, consts: [[1, "po-tabs-container"], [1, "po-tabs-header"], ["containerTabs", ""], ["role", "tablist", 1, "po-tabs-button-wrapper"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-tab-dropdown", 3, "po-tab-dropdown-device", "p-label", "p-small", "p-tabs", "p-change-state", "p-click", 4, "ngIf"], [1, "po-tabs-content"], [1, "po-tab-button", 3, "p-active", "p-disabled", "p-hide", "p-id", "hidden", "p-label", "p-small", "id", "keyup.enter", "p-activated", "p-change-state", "p-click"], ["tabButton", ""], [1, "po-tab-dropdown", 3, "p-label", "p-small", "p-tabs", "p-change-state", "p-click"], ["tabDropdown", ""]], template: function PoTabsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1, 2)(3, "div", 3);
            i0.ɵɵtemplate(4, PoTabsComponent_ng_container_4_Template, 3, 9, "ng-container", 4)(5, PoTabsComponent_po_tab_dropdown_5_Template, 2, 5, "po-tab-dropdown", 5);
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵprojection(7);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngForOf", ctx.tabs)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isShowTabDropdown);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoTabButtonComponent, PoTabDropdownComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsComponent, [{
        type: Component,
        args: [{ selector: 'po-tabs', template: "<div class=\"po-tabs-container\">\n  <div #containerTabs class=\"po-tabs-header\">\n    <div class=\"po-tabs-button-wrapper\" role=\"tablist\">\n      <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n        <po-tab-button\n          #tabButton\n          class=\"po-tab-button\"\n          [p-active]=\"tab.active\"\n          [p-disabled]=\"tab.disabled\"\n          [p-hide]=\"tab.hide\"\n          [p-id]=\"tab.id\"\n          [hidden]=\"tab.hide\"\n          [attr.disabled]=\"tab.disabled\"\n          [p-label]=\"tab.label\"\n          [p-small]=\"small\"\n          [id]=\"tab.id\"\n          (keyup.enter)=\"closePopover()\"\n          (p-activated)=\"onTabActive(tab)\"\n          (p-change-state)=\"onTabChangeState(tab)\"\n          (p-click)=\"selectedTab(tab)\"\n        >\n        </po-tab-button>\n      </ng-container>\n\n      <po-tab-dropdown\n        #tabDropdown\n        *ngIf=\"isShowTabDropdown\"\n        class=\"po-tab-dropdown\"\n        [class.po-tab-dropdown-device]=\"!tabsDefault?.length\"\n        [p-label]=\"literals.moreTabs\"\n        [p-small]=\"small\"\n        [p-tabs]=\"overflowedTabs\"\n        (p-change-state)=\"onTabChangeState($event)\"\n        (p-click)=\"onTabActiveByDropdown($event)\"\n      >\n      </po-tab-dropdown>\n    </div>\n  </div>\n</div>\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n" }]
    }], () => [{ type: i0.ChangeDetectorRef }, { type: PoLanguageService }, { type: PoTabsService }], { tabsChildren: [{
            type: ContentChildren,
            args: [PoTabComponent]
        }], tabButton: [{
            type: ViewChildren,
            args: ['tabButton', { read: ElementRef }]
        }], tabDropdown: [{
            type: ViewChild,
            args: ['tabDropdown', { static: true }]
        }], containerTabs: [{
            type: ViewChild,
            args: ['containerTabs', { read: ElementRef, static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTabsComponent, { className: "PoTabsComponent", filePath: "lib/components/po-tabs/po-tabs.component.ts", lineNumber: 69 }); })();

/**
 * @description
 * Módulo do componente po-tabs
 */
class PoTabsModule {
    static ɵfac = function PoTabsModule_Factory(t) { return new (t || PoTabsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTabsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoTabsService], imports: [CommonModule, PoPopoverModule, PoDropdownModule, PoTooltipModule, PoButtonModule, PoListBoxModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoPopoverModule, PoDropdownModule, PoTooltipModule, PoButtonModule, PoListBoxModule],
                declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent],
                exports: [PoTabComponent, PoTabsComponent],
                providers: [PoTabsService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTabsModule, { declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent], imports: [CommonModule, PoPopoverModule, PoDropdownModule, PoTooltipModule, PoButtonModule, PoListBoxModule], exports: [PoTabComponent, PoTabsComponent] }); })();

const poToolbarActionsIconDefault = 'ICON_MORE';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
class PoToolbarActionsComponent {
    /** Define uma lista de ações. */
    actions;
    _actionsIcon = poToolbarActionsIconDefault;
    /** Define o ícone das ações. */
    set actionsIcon(icon) {
        this._actionsIcon = isTypeof(icon, 'string') || icon instanceof TemplateRef ? icon : poToolbarActionsIconDefault;
    }
    get actionsIcon() {
        return this._actionsIcon;
    }
    static ɵfac = function PoToolbarActionsComponent_Factory(t) { return new (t || PoToolbarActionsComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarActionsComponent, selectors: [["po-toolbar-actions"]], inputs: { actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], actionsIcon: [i0.ɵɵInputFlags.None, "p-actions-icon", "actionsIcon"] }, decls: 6, vars: 3, consts: [[1, "po-toolbar-actions", 3, "click"], ["toolbarActions", ""], [1, "po-toolbar-icon", "po-clickable", 3, "p-icon"], [3, "p-actions", "p-target"], ["popup", ""]], template: function PoToolbarActionsComponent_Template(rf, ctx) { if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoToolbarActionsComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelementStart(1, "span", null, 1);
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "po-popup", 3, 4);
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(2);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-icon", ctx.actionsIcon);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", _r0);
        } }, dependencies: [PoPopupComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarActionsComponent, [{
        type: Component,
        args: [{ selector: 'po-toolbar-actions', template: "<div class=\"po-toolbar-actions\" (click)=\"popup.toggle()\">\n  <span #toolbarActions>\n    <po-icon class=\"po-toolbar-icon po-clickable\" [p-icon]=\"actionsIcon\"></po-icon>\n  </span>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\n" }]
    }], null, { actions: [{
            type: Input,
            args: ['p-actions']
        }], actionsIcon: [{
            type: Input,
            args: ['p-actions-icon']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToolbarActionsComponent, { className: "PoToolbarActionsComponent", filePath: "lib/components/po-toolbar/po-toolbar-actions/po-toolbar-actions.component.ts", lineNumber: 22 }); })();

/**
 * @description
 *
 * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
class PoToolbarBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações que serão exibidas ao clicar no ícone declarado em `p-actions-icon`.
     */
    actions;
    /**
     * @optional
     *
     * @description
     *
     * Define um [ícone](/guides/icons) para a propriedade `p-actions`.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-toolbar p-actions-icon="po-icon-user" [p-actions]="actions"></po-toolbar>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-toolbar p-actions-icon="far fa-comment-alt" [p-actions]="actions"></po-toolbar>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-toolbar [p-actions-icon]="template" [p-actions]="actions"></po-toolbar>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     *
     * > Caso não haja ações definidas em `p-actions`, o ícone não será exibido.
     *
     * @default `po-icon-more`
     */
    actionsIcon;
    /** Define o objeto que será o cabeçalho da lista de ações com as informações do perfil. */
    profile;
    /** Define uma lista de ações que serão exibidas ao clicar no ícone do perfil. */
    profileActions;
    /** Se falso, oculta o ícone de notificações. */
    showNotification = true;
    /** Título do *toolbar* e aplicação. */
    title;
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações da notificação.
     */
    notificationActions;
    _notificationNumber;
    /**
     * @optional
     *
     * @description
     *
     * Número de notificações.
     */
    set notificationNumber(value) {
        this._notificationNumber = convertToInt(value, 0);
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
    get isShowProfile() {
        return !!(this.profile || this.profileActions);
    }
    static ɵfac = function PoToolbarBaseComponent_Factory(t) { return new (t || PoToolbarBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoToolbarBaseComponent, inputs: { actions: [i0.ɵɵInputFlags.None, "p-actions", "actions"], actionsIcon: [i0.ɵɵInputFlags.None, "p-actions-icon", "actionsIcon"], profile: [i0.ɵɵInputFlags.None, "p-profile", "profile"], profileActions: [i0.ɵɵInputFlags.None, "p-profile-actions", "profileActions"], showNotification: [i0.ɵɵInputFlags.None, "p-show-notification", "showNotification"], title: [i0.ɵɵInputFlags.None, "p-title", "title"], notificationActions: [i0.ɵɵInputFlags.None, "p-notification-actions", "notificationActions"], notificationNumber: [i0.ɵɵInputFlags.None, "p-notification-number", "notificationNumber"] } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarBaseComponent, [{
        type: Directive
    }], null, { actions: [{
            type: Input,
            args: ['p-actions']
        }], actionsIcon: [{
            type: Input,
            args: ['p-actions-icon']
        }], profile: [{
            type: Input,
            args: ['p-profile']
        }], profileActions: [{
            type: Input,
            args: ['p-profile-actions']
        }], showNotification: [{
            type: Input,
            args: ['p-show-notification']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], notificationActions: [{
            type: Input,
            args: ['p-notification-actions']
        }], notificationNumber: [{
            type: Input,
            args: ['p-notification-number']
        }] }); })();

function PoToolbarNotificationComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r1.notificationNumber, " ");
} }
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
 * como por exemplo um alerta de nova mensagem.
 *
 * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
 * ícone de notificações.
 */
class PoToolbarNotificationComponent {
    /** Define uma lista de ações. */
    notificationActions;
    _notificationNumber = 0;
    /** Define o número de notificações. */
    set notificationNumber(value) {
        this._notificationNumber = Number.isInteger(value) ? value : 0;
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
    static ɵfac = function PoToolbarNotificationComponent_Factory(t) { return new (t || PoToolbarNotificationComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarNotificationComponent, selectors: [["po-toolbar-notification"]], inputs: { notificationActions: [i0.ɵɵInputFlags.None, "p-notification-actions", "notificationActions"], notificationNumber: [i0.ɵɵInputFlags.None, "p-notification-number", "notificationNumber"] }, features: [i0.ɵɵProvidersFeature([PoControlPositionService])], decls: 6, vars: 3, consts: [[1, "po-toolbar-notification", "po-clickable", 3, "click"], ["p-icon", "ICON_NOTIFICATION", 1, "po-toolbar-icon"], ["notification", ""], ["class", "po-toolbar-notification-badge", 4, "ngIf"], [3, "p-actions", "p-target"], ["popup", ""], [1, "po-toolbar-notification-badge"]], template: function PoToolbarNotificationComponent_Template(rf, ctx) { if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoToolbarNotificationComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r3); const _r2 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r2.toggle()); });
            i0.ɵɵelement(1, "po-icon", 1, 2);
            i0.ɵɵtemplate(3, PoToolbarNotificationComponent_div_3_Template, 2, 1, "div", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(4, "po-popup", 4, 5);
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(2);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.notificationNumber);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.notificationActions)("p-target", _r0);
        } }, dependencies: [i1.NgIf, PoPopupComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarNotificationComponent, [{
        type: Component,
        args: [{ selector: 'po-toolbar-notification', providers: [PoControlPositionService], template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\n  <po-icon #notification p-icon=\"ICON_NOTIFICATION\" class=\"po-toolbar-icon\"></po-icon>\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\n    {{ notificationNumber }}\n  </div>\n</div>\n\n<po-popup #popup [p-actions]=\"notificationActions\" [p-target]=\"notification\"> </po-popup>\n" }]
    }], null, { notificationActions: [{
            type: Input,
            args: ['p-notification-actions']
        }], notificationNumber: [{
            type: Input,
            args: ['p-notification-number']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToolbarNotificationComponent, { className: "PoToolbarNotificationComponent", filePath: "lib/components/po-toolbar/po-toolbar-notification/po-toolbar-notification.component.ts", lineNumber: 25 }); })();

function PoToolbarProfileComponent_div_5_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r3.profile.subtitle, " ");
} }
function PoToolbarProfileComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵelement(1, "po-avatar", 7);
    i0.ɵɵelementStart(2, "div")(3, "div", 8);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, PoToolbarProfileComponent_div_5_div_5_Template, 2, 1, "div", 9);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-src", ctx_r2.profileAvatar);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r2.profile.title, " ");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.profile.subtitle);
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoToolbarProfileComponent
 *
 * @description
 *
 * Componente `po-toolbar-profile`.
 */
class PoToolbarProfileComponent {
    /** Objeto que implementa a interface `PoToolbarProfile`. */
    profile;
    /** Define uma lista de ações. */
    profileActions;
    get profileAvatar() {
        return this.profile ? this.profile.avatar : undefined;
    }
    static ɵfac = function PoToolbarProfileComponent_Factory(t) { return new (t || PoToolbarProfileComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarProfileComponent, selectors: [["po-toolbar-profile"]], inputs: { profile: [i0.ɵɵInputFlags.None, "p-profile", "profile"], profileActions: [i0.ɵɵInputFlags.None, "p-profile-actions", "profileActions"] }, features: [i0.ɵɵProvidersFeature([PoControlPositionService])], decls: 6, vars: 4, consts: [[1, "po-toolbar-profile", "po-clickable", 3, "click"], ["profileElement", ""], ["p-size", "xs", 3, "p-src"], [3, "p-actions", "p-target"], ["popup", ""], ["p-popup-header-template", "", "class", "po-toolbar-profile-item-header", 4, "ngIf"], ["p-popup-header-template", "", 1, "po-toolbar-profile-item-header"], ["p-size", "sm", 1, "po-toolbar-profile-item-avatar", 3, "p-src"], [1, "po-toolbar-profile-item-header-title"], ["class", "po-toolbar-profile-item-header-subtitle", 4, "ngIf"], [1, "po-toolbar-profile-item-header-subtitle"]], template: function PoToolbarProfileComponent_Template(rf, ctx) { if (rf & 1) {
            const _r4 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoToolbarProfileComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r4); const _r1 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelement(2, "po-avatar", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "po-popup", 3, 4);
            i0.ɵɵtemplate(5, PoToolbarProfileComponent_div_5_Template, 6, 3, "div", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-src", ctx.profileAvatar);
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-actions", ctx.profileActions)("p-target", _r0);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.profile == null ? null : ctx.profile.title);
        } }, dependencies: [i1.NgIf, PoAvatarComponent, PoPopupComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarProfileComponent, [{
        type: Component,
        args: [{ selector: 'po-toolbar-profile', providers: [PoControlPositionService], template: "<div #profileElement class=\"po-toolbar-profile po-clickable\" (click)=\"popup.toggle()\">\n  <po-avatar p-size=\"xs\" [p-src]=\"profileAvatar\"></po-avatar>\n</div>\n\n<po-popup #popup [p-actions]=\"profileActions\" [p-target]=\"profileElement\">\n  <div p-popup-header-template *ngIf=\"profile?.title\" class=\"po-toolbar-profile-item-header\">\n    <po-avatar class=\"po-toolbar-profile-item-avatar\" p-size=\"sm\" [p-src]=\"profileAvatar\"> </po-avatar>\n\n    <div>\n      <div class=\"po-toolbar-profile-item-header-title\">\n        {{ profile.title }}\n      </div>\n\n      <div *ngIf=\"profile.subtitle\" class=\"po-toolbar-profile-item-header-subtitle\">\n        {{ profile.subtitle }}\n      </div>\n    </div>\n  </div>\n</po-popup>\n" }]
    }], null, { profile: [{
            type: Input,
            args: ['p-profile']
        }], profileActions: [{
            type: Input,
            args: ['p-profile-actions']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToolbarProfileComponent, { className: "PoToolbarProfileComponent", filePath: "lib/components/po-toolbar/po-toolbar-profile/po-toolbar-profile.component.ts", lineNumber: 22 }); })();

function PoToolbarComponent_po_toolbar_actions_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-toolbar-actions", 6);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-actions", ctx_r0.actions)("p-actions-icon", ctx_r0.actionsIcon);
} }
function PoToolbarComponent_po_toolbar_notification_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-toolbar-notification", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-notification-actions", ctx_r1.notificationActions)("p-notification-number", ctx_r1.notificationNumber);
} }
function PoToolbarComponent_po_toolbar_profile_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-toolbar-profile", 8);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-profile", ctx_r2.profile)("p-profile-actions", ctx_r2.profileActions);
} }
/**
 * @docsExtends PoToolbarBaseComponent
 *
 * @example
 *
 * <example name="po-toolbar-basic" title="PO Toolbar Basic">
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.html"> </file>
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-labs" title="PO Toolbar Labs">
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.html"> </file>
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-logged" title="PO Toolbar - Logged">
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.html"> </file>
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.ts"> </file>
 * </example>
 */
class PoToolbarComponent extends PoToolbarBaseComponent {
    titleService;
    constructor(titleService, viewRef) {
        super();
        this.titleService = titleService;
    }
    ngOnInit() {
        this.setTitle(this.title);
    }
    setTitle(newTitle) {
        this.titleService.setTitle(newTitle);
    }
    static ɵfac = function PoToolbarComponent_Factory(t) { return new (t || PoToolbarComponent)(i0.ɵɵdirectiveInject(i1$1.Title), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarComponent, selectors: [["po-toolbar"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 4, consts: [[1, "po-toolbar"], [1, "po-toolbar-title"], [1, "po-toolbar-group-icon"], [3, "p-actions", "p-actions-icon", 4, "ngIf"], [3, "p-notification-actions", "p-notification-number", 4, "ngIf"], [3, "p-profile", "p-profile-actions", 4, "ngIf"], [3, "p-actions", "p-actions-icon"], [3, "p-notification-actions", "p-notification-number"], [3, "p-profile", "p-profile-actions"]], template: function PoToolbarComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "div", 2);
            i0.ɵɵtemplate(4, PoToolbarComponent_po_toolbar_actions_4_Template, 1, 2, "po-toolbar-actions", 3)(5, PoToolbarComponent_po_toolbar_notification_5_Template, 1, 2, "po-toolbar-notification", 4)(6, PoToolbarComponent_po_toolbar_profile_6_Template, 1, 2, "po-toolbar-profile", 5);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.actions && ctx.actions.length);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.showNotification && ctx.notificationActions);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.isShowProfile);
        } }, dependencies: [i1.NgIf, PoToolbarActionsComponent, PoToolbarNotificationComponent, PoToolbarProfileComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarComponent, [{
        type: Component,
        args: [{ selector: 'po-toolbar', template: "<div class=\"po-toolbar\">\n  <div class=\"po-toolbar-title\">{{ title }}</div>\n\n  <div class=\"po-toolbar-group-icon\">\n    <po-toolbar-actions *ngIf=\"actions && actions.length\" [p-actions]=\"actions\" [p-actions-icon]=\"actionsIcon\">\n    </po-toolbar-actions>\n\n    <po-toolbar-notification\n      *ngIf=\"showNotification && notificationActions\"\n      [p-notification-actions]=\"notificationActions\"\n      [p-notification-number]=\"notificationNumber\"\n    >\n    </po-toolbar-notification>\n\n    <po-toolbar-profile *ngIf=\"isShowProfile\" [p-profile]=\"profile\" [p-profile-actions]=\"profileActions\">\n    </po-toolbar-profile>\n  </div>\n</div>\n" }]
    }], () => [{ type: i1$1.Title }, { type: i0.ViewContainerRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoToolbarComponent, { className: "PoToolbarComponent", filePath: "lib/components/po-toolbar/po-toolbar.component.ts", lineNumber: 30 }); })();

/**
 * @description
 *
 * Módulo do componente po-toolbar
 *
 */
class PoToolbarModule {
    static ɵfac = function PoToolbarModule_Factory(t) { return new (t || PoToolbarModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoToolbarModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule],
                declarations: [
                    PoToolbarActionsComponent,
                    PoToolbarComponent,
                    PoToolbarNotificationComponent,
                    PoToolbarProfileComponent
                ],
                exports: [PoToolbarComponent],
                providers: [],
                schemas: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoToolbarModule, { declarations: [PoToolbarActionsComponent,
        PoToolbarComponent,
        PoToolbarNotificationComponent,
        PoToolbarProfileComponent], imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule], exports: [PoToolbarComponent] }); })();

const poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
class PoTreeViewBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao colapsar um item.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao expandir um item.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao selecionar um item.
     *
     * > Como parâmetro o componente envia o item selecionado.
     */
    selected = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao desfazer a seleção de um item.
     *
     * > Como parâmetro o componente envia o item que foi desmarcado.
     */
    unselected = new EventEmitter();
    _items = [];
    _selectable = false;
    _maxLevel = poTreeViewMaxLevel;
    _singleSelect = false;
    // armazena o value do item selecionado
    selectedValue;
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    inputedItems;
    set items(value) {
        this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value) {
        this._selectable = convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita a seleção para item único atráves de po-radio.
     *
     * @default false
     */
    set singleSelect(value) {
        this._singleSelect = convertToBoolean(value);
    }
    get singleSelect() {
        return this._singleSelect;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o máximo de níveis para o tree-view.
     *
     * > O valor padrão é 4
     *
     * @default 4
     */
    set maxLevel(value) {
        this._maxLevel = convertToInt(value, poTreeViewMaxLevel);
    }
    get maxLevel() {
        return this._maxLevel;
    }
    emitExpanded(treeViewItem) {
        const event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit({ ...treeViewItem });
    }
    emitSelected(treeViewItem) {
        const event = treeViewItem.selected ? 'selected' : 'unselected';
        this.selectedValue = treeViewItem.value;
        // Não emitir subItems quando for singleSelect
        const { subItems, ...rest } = treeViewItem;
        const treeViewToEmit = this.singleSelect ? { ...rest } : treeViewItem;
        this.updateItemsOnSelect(treeViewToEmit);
        this[event].emit({ ...treeViewToEmit });
    }
    addChildItemInParent(childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    }
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    addItem(items, childItem, parentItem, isNewItem) {
        if (parentItem) {
            if (isNewItem) {
                this.expandParentItem(childItem, parentItem);
            }
            this.addChildItemInParent(childItem, parentItem);
            if (!this.singleSelect) {
                this.selectItemBySubItems(parentItem);
            }
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    }
    selectAllItems(items, isSelected) {
        items.forEach(item => {
            if (item.subItems) {
                this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = item.isSelectable !== false ? isSelected : false;
        });
    }
    selectItemBySubItems(item) {
        item.selected = this.everyItemSelected(item.subItems);
    }
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    everyItemSelected(items = []) {
        const itemsLength = items.length;
        const lengthCheckedItems = items.filter(item => item.selected).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        const hasIndeterminateItems = items.filter(item => item.selected || item.selected === null).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    }
    // expande o item pai caso o filho estiver expandido.
    expandParentItem(childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    }
    getItemsByMaxLevel(items = [], level = 0, parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems, ...currentItem } = item;
            if (level === this.maxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    this.selectAllItems(subItems, currentItem.selected);
                }
                this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            if (item.selected) {
                this.selectedValue = currentItem.value;
            }
            this.addItem(newItems, currentItem, parentItem, true);
        });
        return newItems;
    }
    getItemsWithParentSelected(items = [], parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems, ...currentItem } = item;
            if (Array.isArray(subItems)) {
                this.getItemsWithParentSelected(subItems, currentItem);
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    updateItemsOnSelect(selectedItem) {
        if (selectedItem.subItems && !this.singleSelect) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    }
    static ɵfac = function PoTreeViewBaseComponent_Factory(t) { return new (t || PoTreeViewBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTreeViewBaseComponent, inputs: { inputedItems: [i0.ɵɵInputFlags.None, "p-items", "inputedItems"], selectable: [i0.ɵɵInputFlags.None, "p-selectable", "selectable"], singleSelect: [i0.ɵɵInputFlags.None, "p-single-select", "singleSelect"], maxLevel: [i0.ɵɵInputFlags.None, "p-max-level", "maxLevel"] }, outputs: { collapsed: "p-collapsed", expanded: "p-expanded", selected: "p-selected", unselected: "p-unselected" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewBaseComponent, [{
        type: Directive
    }], null, { collapsed: [{
            type: Output,
            args: ['p-collapsed']
        }], expanded: [{
            type: Output,
            args: ['p-expanded']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], unselected: [{
            type: Output,
            args: ['p-unselected']
        }], inputedItems: [{
            type: Input,
            args: ['p-items']
        }], selectable: [{
            type: Input,
            args: ['p-selectable']
        }], singleSelect: [{
            type: Input,
            args: ['p-single-select']
        }], maxLevel: [{
            type: Input,
            args: ['p-max-level']
        }] }); })();

class PoTreeViewService {
    expandedEvent = new Subject();
    selectedEvent = new Subject();
    emitExpandedEvent(treeViewItem) {
        return this.expandedEvent.next(treeViewItem);
    }
    emitSelectedEvent(treeViewItem) {
        return this.selectedEvent.next(treeViewItem);
    }
    onExpand() {
        return this.expandedEvent.asObservable();
    }
    onSelect() {
        return this.selectedEvent.asObservable();
    }
    static ɵfac = function PoTreeViewService_Factory(t) { return new (t || PoTreeViewService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTreeViewService, factory: PoTreeViewService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewService, [{
        type: Injectable
    }], null, null); })();

const _c0$2 = ["inputCheckbox"];
function PoTreeViewItemHeaderComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 7);
    i0.ɵɵlistener("click", function PoTreeViewItemHeaderComponent_button_1_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.expanded.emit($event)); });
    i0.ɵɵelement(1, "po-icon", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵclassProp("po-tree-view-item-header-button-icon-transform", ctx_r0.item.expanded);
} }
function PoTreeViewItemHeaderComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTreeViewItemHeaderComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 9);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-tree-view-item-header-padding", !ctx_r2.hasSubItems);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r2.item.label, " ");
} }
function PoTreeViewItemHeaderComponent_ng_template_5_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoTreeViewItemHeaderComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoTreeViewItemHeaderComponent_ng_template_5_ng_container_0_Template, 1, 0, "ng-container", 2);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    const _r9 = i0.ɵɵreference(10);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("ngIf", ctx_r4.singleSelect)("ngIfThen", _r9)("ngIfElse", _r7);
} }
function PoTreeViewItemHeaderComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-checkbox", 10);
    i0.ɵɵtwoWayListener("ngModelChange", function PoTreeViewItemHeaderComponent_ng_template_7_Template_po_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(); i0.ɵɵtwoWayBindingSet(ctx_r13.item.selected, $event) || (ctx_r13.item.selected = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change", function PoTreeViewItemHeaderComponent_ng_template_7_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.selected.emit(ctx_r15.item)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-tree-view-item-header-padding", !ctx_r6.hasSubItems);
    i0.ɵɵproperty("p-label", ctx_r6.item.label);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r6.item.selected);
    i0.ɵɵproperty("p-disabled", ctx_r6.item.isSelectable === false);
} }
function PoTreeViewItemHeaderComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-radio", 11, 12);
    i0.ɵɵtwoWayListener("ngModelChange", function PoTreeViewItemHeaderComponent_ng_template_9_Template_po_radio_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); i0.ɵɵtwoWayBindingSet(ctx_r17.item.selected, $event) || (ctx_r17.item.selected = $event); return i0.ɵɵresetView($event); });
    i0.ɵɵlistener("p-change-selected", function PoTreeViewItemHeaderComponent_ng_template_9_Template_po_radio_p_change_selected_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.selected.emit(ctx_r19.item)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-tree-view-item-header-padding", !ctx_r8.hasSubItems);
    i0.ɵɵproperty("name", ctx_r8.idRadio);
    i0.ɵɵtwoWayProperty("ngModel", ctx_r8.item.selected);
    i0.ɵɵproperty("p-label", ctx_r8.item.label)("p-value", ctx_r8.item.value)("p-checked", ctx_r8.item.value === ctx_r8.selectedValue)("p-disabled", ctx_r8.item.isSelectable === false);
} }
class PoTreeViewItemHeaderComponent {
    inputCheckbox;
    item;
    selectable = false;
    singleSelect;
    expanded = new EventEmitter();
    selected = new EventEmitter();
    selectedValue;
    idRadio = `po-radio[${uuid()}]`;
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    static ɵfac = function PoTreeViewItemHeaderComponent_Factory(t) { return new (t || PoTreeViewItemHeaderComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewItemHeaderComponent, selectors: [["po-tree-view-item-header"]], viewQuery: function PoTreeViewItemHeaderComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0$2, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);
        } }, inputs: { item: [i0.ɵɵInputFlags.None, "p-item", "item"], selectable: [i0.ɵɵInputFlags.None, "p-selectable", "selectable"], singleSelect: [i0.ɵɵInputFlags.None, "p-single-select", "singleSelect"], selectedValue: [i0.ɵɵInputFlags.None, "p-selected-value", "selectedValue"] }, outputs: { expanded: "p-expanded", selected: "p-selected" }, decls: 11, vars: 4, consts: [[1, "po-tree-view-item-header"], ["class", "po-tree-view-item-header-button", 3, "click", 4, "ngIf"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["labelTemplate", ""], ["selectionTemplate", ""], ["checkboxTemplate", ""], ["radioTemplate", ""], [1, "po-tree-view-item-header-button", 3, "click"], ["p-icon", "ICON_ARROW_DOWN", 1, "po-tree-view-item-header-button-icon"], [1, "po-tree-view-item-header-label"], [1, "po-tree-view-item-header-checkbox", 3, "p-label", "ngModel", "p-disabled", "ngModelChange", "p-change"], [1, "po-tree-view-item-header-checkbox", 3, "name", "ngModel", "p-label", "p-value", "p-checked", "p-disabled", "ngModelChange", "p-change-selected"], ["inputRadio", ""]], template: function PoTreeViewItemHeaderComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTreeViewItemHeaderComponent_button_1_Template, 2, 2, "button", 1)(2, PoTreeViewItemHeaderComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoTreeViewItemHeaderComponent_ng_template_3_Template, 2, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor)(5, PoTreeViewItemHeaderComponent_ng_template_5_Template, 1, 3, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor)(7, PoTreeViewItemHeaderComponent_ng_template_7_Template, 1, 5, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor)(9, PoTreeViewItemHeaderComponent_ng_template_9_Template, 2, 8, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r3 = i0.ɵɵreference(4);
            const _r5 = i0.ɵɵreference(6);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasSubItems);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.selectable)("ngIfThen", _r5)("ngIfElse", _r3);
        } }, dependencies: [i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoCheckboxComponent, PoRadioComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewItemHeaderComponent, [{
        type: Component,
        args: [{ selector: 'po-tree-view-item-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-tree-view-item-header\">\n  <button *ngIf=\"hasSubItems\" class=\"po-tree-view-item-header-button\" (click)=\"expanded.emit($event)\">\n    <po-icon\n      p-icon=\"ICON_ARROW_DOWN\"\n      class=\"po-tree-view-item-header-button-icon\"\n      [class.po-tree-view-item-header-button-icon-transform]=\"item.expanded\"\n    >\n    </po-icon>\n  </button>\n\n  <ng-container *ngIf=\"selectable; then selectionTemplate; else labelTemplate\"></ng-container>\n</div>\n\n<ng-template #labelTemplate>\n  <span class=\"po-tree-view-item-header-label\" [class.po-tree-view-item-header-padding]=\"!hasSubItems\">\n    {{ item.label }}\n  </span>\n</ng-template>\n\n<ng-template #selectionTemplate>\n  <ng-container *ngIf=\"singleSelect; then radioTemplate; else checkboxTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #checkboxTemplate>\n  <po-checkbox\n    class=\"po-tree-view-item-header-checkbox\"\n    [class.po-tree-view-item-header-padding]=\"!hasSubItems\"\n    [p-label]=\"item.label\"\n    [(ngModel)]=\"item.selected\"\n    (p-change)=\"selected.emit(item)\"\n    [p-disabled]=\"item.isSelectable === false\"\n  >\n  </po-checkbox>\n</ng-template>\n\n<ng-template #radioTemplate>\n  <po-radio\n    class=\"po-tree-view-item-header-checkbox\"\n    [class.po-tree-view-item-header-padding]=\"!hasSubItems\"\n    #inputRadio\n    [name]=\"idRadio\"\n    [(ngModel)]=\"item.selected\"\n    [p-label]=\"item.label\"\n    [p-value]=\"item.value\"\n    [p-checked]=\"item.value === selectedValue\"\n    (p-change-selected)=\"selected.emit(item)\"\n    [p-disabled]=\"item.isSelectable === false\"\n  >\n  </po-radio>\n</ng-template>\n" }]
    }], null, { inputCheckbox: [{
            type: ViewChild,
            args: ['inputCheckbox']
        }], item: [{
            type: Input,
            args: ['p-item']
        }], selectable: [{
            type: Input,
            args: ['p-selectable']
        }], singleSelect: [{
            type: Input,
            args: ['p-single-select']
        }], expanded: [{
            type: Output,
            args: ['p-expanded']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], selectedValue: [{
            type: Input,
            args: ['p-selected-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTreeViewItemHeaderComponent, { className: "PoTreeViewItemHeaderComponent", filePath: "lib/components/po-tree-view/po-tree-view-item-header/po-tree-view-item-header.component.ts", lineNumber: 11 }); })();

function PoTreeViewItemComponent_ul_2_po_tree_view_item_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tree-view-item", 5);
} if (rf & 2) {
    const subItem_r2 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-item", subItem_r2)("p-selectable", ctx_r1.selectable)("p-single-select", ctx_r1.singleSelect)("p-selected-value", ctx_r1.selectedValue);
} }
function PoTreeViewItemComponent_ul_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "ul", 3);
    i0.ɵɵtemplate(1, PoTreeViewItemComponent_ul_2_po_tree_view_item_1_Template, 1, 4, "po-tree-view-item", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@toggleBody", ctx_r0.item.expanded ? "expanded" : "collapsed");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r0.item.subItems)("ngForTrackBy", ctx_r0.trackByFunction);
} }
class PoTreeViewItemComponent {
    treeViewService;
    item;
    selectable;
    singleSelect;
    selectedValue;
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
    }
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.item.expanded = !this.item.expanded;
        this.treeViewService.emitExpandedEvent({ ...this.item });
    }
    onSelect(selectedItem) {
        this.treeViewService.emitSelectedEvent({ ...selectedItem });
    }
    trackByFunction(index) {
        return index;
    }
    static ɵfac = function PoTreeViewItemComponent_Factory(t) { return new (t || PoTreeViewItemComponent)(i0.ɵɵdirectiveInject(PoTreeViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewItemComponent, selectors: [["po-tree-view-item"]], inputs: { item: [i0.ɵɵInputFlags.None, "p-item", "item"], selectable: [i0.ɵɵInputFlags.None, "p-selectable", "selectable"], singleSelect: [i0.ɵɵInputFlags.None, "p-single-select", "singleSelect"], selectedValue: [i0.ɵɵInputFlags.None, "p-selected-value", "selectedValue"] }, decls: 3, vars: 5, consts: [[1, "po-tree-view-item"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value", "p-expanded", "p-selected"], ["class", "po-tree-view-item-group", 4, "ngIf"], [1, "po-tree-view-item-group"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value"]], template: function PoTreeViewItemComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "li", 0)(1, "po-tree-view-item-header", 1);
            i0.ɵɵlistener("p-expanded", function PoTreeViewItemComponent_Template_po_tree_view_item_header_p_expanded_1_listener($event) { return ctx.onClick($event); })("p-selected", function PoTreeViewItemComponent_Template_po_tree_view_item_header_p_selected_1_listener() { return ctx.onSelect(ctx.item); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoTreeViewItemComponent_ul_2_Template, 2, 3, "ul", 2);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-item", ctx.item)("p-selectable", ctx.selectable)("p-single-select", ctx.singleSelect)("p-selected-value", ctx.selectedValue);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasSubItems);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent], encapsulation: 2, data: { animation: [
                trigger('toggleBody', [
                    state('collapsed', style({
                        'overflow-y': 'hidden',
                        visibility: 'hidden',
                        opacity: 0,
                        height: '0'
                    })),
                    transition('expanded => collapsed', [
                        style({ height: '*' }),
                        animate(100, style({ opacity: 0 })),
                        animate(200, style({ height: 0 }))
                    ]),
                    transition('collapsed => expanded', [
                        style({ height: '0' }),
                        animate(100, style({ opacity: 1 })),
                        animate(200, style({ height: '*' }))
                    ])
                ])
            ] }, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewItemComponent, [{
        type: Component,
        args: [{ selector: 'po-tree-view-item', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                    trigger('toggleBody', [
                        state('collapsed', style({
                            'overflow-y': 'hidden',
                            visibility: 'hidden',
                            opacity: 0,
                            height: '0'
                        })),
                        transition('expanded => collapsed', [
                            style({ height: '*' }),
                            animate(100, style({ opacity: 0 })),
                            animate(200, style({ height: 0 }))
                        ]),
                        transition('collapsed => expanded', [
                            style({ height: '0' }),
                            animate(100, style({ opacity: 1 })),
                            animate(200, style({ height: '*' }))
                        ])
                    ])
                ], template: "<li class=\"po-tree-view-item\">\n  <po-tree-view-item-header\n    [p-item]=\"item\"\n    [p-selectable]=\"selectable\"\n    [p-single-select]=\"singleSelect\"\n    [p-selected-value]=\"selectedValue\"\n    (p-expanded)=\"onClick($event)\"\n    (p-selected)=\"onSelect(item)\"\n  >\n  </po-tree-view-item-header>\n\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\n    <po-tree-view-item\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\n      [p-item]=\"subItem\"\n      [p-selectable]=\"selectable\"\n      [p-single-select]=\"singleSelect\"\n      [p-selected-value]=\"selectedValue\"\n    >\n    </po-tree-view-item>\n  </ul>\n</li>\n" }]
    }], () => [{ type: PoTreeViewService }], { item: [{
            type: Input,
            args: ['p-item']
        }], selectable: [{
            type: Input,
            args: ['p-selectable']
        }], singleSelect: [{
            type: Input,
            args: ['p-single-select']
        }], selectedValue: [{
            type: Input,
            args: ['p-selected-value']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTreeViewItemComponent, { className: "PoTreeViewItemComponent", filePath: "lib/components/po-tree-view/po-tree-view-item/po-tree-view-item.component.ts", lineNumber: 35 }); })();

function PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-tree-view-item", 4);
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-item", item_r2)("p-selectable", ctx_r1.selectable)("p-single-select", ctx_r1.singleSelect)("p-selected-value", ctx_r1.selectedValue);
} }
function PoTreeViewComponent_po_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-container", 1)(1, "ul", 2);
    i0.ɵɵtemplate(2, PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template, 1, 4, "po-tree-view-item", 3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.items)("ngForTrackBy", ctx_r0.trackByFunction);
} }
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="PO Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="PO Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
class PoTreeViewComponent extends PoTreeViewBaseComponent {
    treeViewService;
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    ngOnChanges(changes) {
        if (changes?.['inputedItems']) {
            this.items = this.inputedItems;
        }
    }
    trackByFunction(index) {
        return index;
    }
    static ɵfac = function PoTreeViewComponent_Factory(t) { return new (t || PoTreeViewComponent)(i0.ɵɵdirectiveInject(PoTreeViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewComponent, selectors: [["po-tree-view"]], features: [i0.ɵɵProvidersFeature([PoTreeViewService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["p-no-padding", "", 4, "ngIf"], ["p-no-padding", ""], [1, "po-tree-view"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-item", "p-selectable", "p-single-select", "p-selected-value"]], template: function PoTreeViewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PoTreeViewComponent_po_container_0_Template, 3, 2, "po-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.hasItems);
        } }, dependencies: [i1.NgForOf, i1.NgIf, PoContainerComponent, PoTreeViewItemComponent], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewComponent, [{
        type: Component,
        args: [{ selector: 'po-tree-view', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PoTreeViewService], template: "<po-container *ngIf=\"hasItems\" p-no-padding>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item\n      *ngFor=\"let item of items; trackBy: trackByFunction\"\n      [p-item]=\"item\"\n      [p-selectable]=\"selectable\"\n      [p-single-select]=\"singleSelect\"\n      [p-selected-value]=\"selectedValue\"\n    >\n    </po-tree-view-item>\n  </ul>\n</po-container>\n" }]
    }], () => [{ type: PoTreeViewService }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoTreeViewComponent, { className: "PoTreeViewComponent", filePath: "lib/components/po-tree-view/po-tree-view.component.ts", lineNumber: 38 }); })();

/**
 * @description
 *
 * Módulo do componente `po-tree-view`.
 *
 * > Para o correto funcionamento do componente `po-tree-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoTreeViewModule {
    static ɵfac = function PoTreeViewModule_Factory(t) { return new (t || PoTreeViewModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTreeViewModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewModule, [{
        type: NgModule,
        args: [{
                declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent],
                exports: [PoTreeViewComponent],
                imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule, PoIconModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTreeViewModule, { declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent], imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule, PoIconModule], exports: [PoTreeViewComponent] }); })();

/**
 *
 * @description
 *
 * O componente `po-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas. São elas:
 * - Utiliza medidas relativas, para se adequar às preferências e necessidades de quem for utilizar o sistema.
 * - Desenvolvido com uso de controles padrões HTML, o que permite a identificação na interface por tecnologias assistivas. (WCAG [4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value))
 * - O foco é visível e possui uma espessura superior a 2 pixels CSS, não ficando escondido por outros elementos da tela. (WCAG [2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced))
 * - Quando selecionável, prevê interação por teclado, podendo ser selecionado através da tecla space (WCAG [2.4.1 - Keyboard](https://www.w3.org/WAI/WCAG21/Understanding/keyboard))
 *
 * #### Tokens customizáveis
 *
 * É possível alterar o estilo do componente usando os seguintes tokens (CSS):
 *
 * > Para maiores informações, acesse o guia [Personalizando o Tema Padrão com Tokens CSS](https://po-ui.io/guides/theme-customization).
 *
 * | Propriedade                                  | Descrição                                                        | Valor Padrão                                     |
 * |----------------------------------------------|------------------------------------------------------------------|--------------------------------------------------|
 * | **Default Values**                           |                                                                  |                                                  |
 * | `--padding`                                  | Preenchimento                                                    | `1rem`                                           |
 * | `--border-radius`                            | Contém o valor do raio dos cantos do elemento&nbsp;              | `var(--border-radius-md)`                        |
 * | `--border-width`                             | Contém o valor da largura dos cantos do elemento&nbsp;           | `var(--border-width-sm)`                         |
 * | `--border-color`                             | Cor da borda                                                     | `var(--color-neutral-light-20)`                  |
 * | `--background`                               | Cor de background                                                | `var(--color-neutral-light-00)`                  |
 * | `--shadow`                                   | Contém o valor da sombra do elemento                             | `var(--shadow-md)`                               |
 * | **Selected**                                 |                                                                  |                                                  |
 * | `--background-selected` &nbsp;               | Cor de background no estado selecionado &nbsp;                   | `var(--color-brand-01-lightest)`                 |
 * | `--border-color-selected` &nbsp;             | Cor da borda no estado selecionado                               | `var(--color-action-default)`                    |
 * | **Hover**                                    |                                                                  |                                                  |
 * | `--border-color-hover`                       | Cor da borda no estado hover                                     | `var(--color-brand-01-dark)`                     |
 * | `--shadow-hover`                             | Contém o valor da sombra do elemento no estado hover  &nbsp;     | `var(--shadow-lg)`                               |
 * | **Focused**                                  |                                                                  |                                                  |
 * | `--color-focused`                            | Cor principal no estado de focus                                 | `var(--color-action-default)`                    |
 * | `--outline-color-focused` &nbsp;             | Cor do outline do estado de focus                                | `var(--color-action-focus)`                      |
 *
 */
class PoWidgetBaseComponent {
    /** Descrição da segunda ação. */
    secondaryLabel;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será executada quando o usuário clicar sobre a área total do `po-widget`.
     */
    click = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada.
     */
    onDisabled = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será chamada na primeira ação.
     */
    primaryAction = new EventEmitter();
    /**
     * @optional
     *
     * @description
     *
     * Função que será chamada na segunda ação.
     */
    secondaryAction = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Função chamada ao clicar no ícone de configuração
     */
    setting = new EventEmitter();
    /**
     * @optional
     *
     * @description
     * Função que será chamada ao clicar no título.
     */
    titleAction = new EventEmitter();
    containerHeight = 'auto';
    id = uuid();
    _background;
    _disabled = false;
    _height;
    _help;
    _noShadow = false;
    _primary = false;
    _primaryLabel;
    _title;
    /**
     * @optional
     *
     * @description
     *
     * Aplicação de imagem de fundo.
     * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
     * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
     *
     */
    set background(value) {
        this._background = value && typeof value === 'string' ? value : undefined;
    }
    get background() {
        return this._background;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todas as ações do componente.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.onDisabled.emit(this.disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-widget`.
     * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
     * `p-setting`, `p-help` e `p-title`.
     * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
     */
    set height(value) {
        this._height = parseInt(value, 10);
        this.setHeight(this.height);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Link de ajuda
     */
    set help(value) {
        this._help = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get help() {
        return this._help;
    }
    /**
     *
     * @optional
     *
     * @description
     *
     * Desabilita a sombra do `po-widget` quando o mesmo for clicável.
     *
     * @default `true`
     */
    set noShadow(value) {
        this._noShadow = value === '' ? true : convertToBoolean(value);
        this.setHeight(this.height);
    }
    get noShadow() {
        return this._noShadow;
    }
    /**
     * @optional
     *
     * @description
     *
     * Opção para que o `po-widget` fique em destaque.
     *
     * @default `false`
     */
    set primary(value) {
        this._primary = value === '' ? true : convertToBoolean(value);
    }
    get primary() {
        return this._primary;
    }
    /**
     * @optional
     *
     * @description
     *
     * Descrição da primeira ação.
     *
     * @default `false`
     */
    set primaryLabel(value) {
        this._primaryLabel = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get primaryLabel() {
        return this._primaryLabel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Título do `po-widget`.
     *
     * @default `false`
     */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get title() {
        return this._title;
    }
    static ɵfac = function PoWidgetBaseComponent_Factory(t) { return new (t || PoWidgetBaseComponent)(); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoWidgetBaseComponent, inputs: { secondaryLabel: [i0.ɵɵInputFlags.None, "p-secondary-label", "secondaryLabel"], background: [i0.ɵɵInputFlags.None, "p-background", "background"], disabled: [i0.ɵɵInputFlags.None, "p-disabled", "disabled"], height: [i0.ɵɵInputFlags.None, "p-height", "height"], help: [i0.ɵɵInputFlags.None, "p-help", "help"], noShadow: [i0.ɵɵInputFlags.None, "p-no-shadow", "noShadow"], primary: [i0.ɵɵInputFlags.None, "p-primary", "primary"], primaryLabel: [i0.ɵɵInputFlags.None, "p-primary-label", "primaryLabel"], title: [i0.ɵɵInputFlags.None, "p-title", "title"] }, outputs: { click: "p-click", onDisabled: "p-on-disabled", primaryAction: "p-primary-action", secondaryAction: "p-secondary-action", setting: "p-setting", titleAction: "p-title-action" } });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetBaseComponent, [{
        type: Directive
    }], null, { secondaryLabel: [{
            type: Input,
            args: ['p-secondary-label']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], onDisabled: [{
            type: Output,
            args: ['p-on-disabled']
        }], primaryAction: [{
            type: Output,
            args: ['p-primary-action']
        }], secondaryAction: [{
            type: Output,
            args: ['p-secondary-action']
        }], setting: [{
            type: Output,
            args: ['p-setting']
        }], titleAction: [{
            type: Output,
            args: ['p-title-action']
        }], background: [{
            type: Input,
            args: ['p-background']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], noShadow: [{
            type: Input,
            args: ['p-no-shadow']
        }], primary: [{
            type: Input,
            args: ['p-primary']
        }], primaryLabel: [{
            type: Input,
            args: ['p-primary-label']
        }], title: [{
            type: Input,
            args: ['p-title']
        }] }); })();

function PoWidgetComponent_div_1_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 9);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_1_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.runTitleAction($event)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r2.title, " ");
} }
function PoWidgetComponent_div_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵtextInterpolate(ctx_r3.title);
} }
function PoWidgetComponent_div_1_div_4_po_icon_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 13);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_1_div_4_po_icon_1_Template_po_icon_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r10.settingOutput($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(3);
    i0.ɵɵpropertyInterpolate1("id", "settingAction-", ctx_r8.id, "");
} }
function PoWidgetComponent_div_1_div_4_po_icon_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-icon", 14);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_1_div_4_po_icon_2_Template_po_icon_click_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r12.openHelp($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(3);
    i0.ɵɵpropertyInterpolate1("id", "helpLink-", ctx_r9.id, "");
} }
function PoWidgetComponent_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtemplate(1, PoWidgetComponent_div_1_div_4_po_icon_1_Template, 1, 1, "po-icon", 11)(2, PoWidgetComponent_div_1_div_4_po_icon_2_Template, 1, 1, "po-icon", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.setting.observers[0]);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r5.help);
} }
function PoWidgetComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, PoWidgetComponent_div_1_span_1_Template, 2, 1, "span", 6)(2, PoWidgetComponent_div_1_ng_template_2_Template, 1, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor)(4, PoWidgetComponent_div_1_div_4_Template, 3, 2, "div", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = i0.ɵɵreference(3);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r0.showTitleAction)("ngIfElse", _r4);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.setting.observers[0] || ctx_r0.help);
} }
function PoWidgetComponent_div_5_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 18)(1, "a", 19);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_1_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r17.runPrimaryAction($event)); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵpropertyInterpolate1("id", "primaryAct-", ctx_r14.id, "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r14.primaryLabel);
} }
function PoWidgetComponent_div_5_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 20)(1, "a", 19);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_2_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r19.runPrimaryAction($event)); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵpropertyInterpolate1("id", "primaryAct-", ctx_r15.id, "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r15.primaryLabel);
} }
function PoWidgetComponent_div_5_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 20)(1, "a", 19);
    i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_3_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.runSecondaryAction($event)); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵpropertyInterpolate1("id", "secondaryAct-", ctx_r16.id, "");
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate(ctx_r16.secondaryLabel);
} }
function PoWidgetComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtemplate(1, PoWidgetComponent_div_5_div_1_Template, 3, 2, "div", 16)(2, PoWidgetComponent_div_5_div_2_Template, 3, 2, "div", 17)(3, PoWidgetComponent_div_5_div_3_Template, 3, 2, "div", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r1.secondaryLabel);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.secondaryLabel);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.secondaryLabel);
} }
const _c0$1 = ["*"];
/**
 * @docsExtends PoWidgetBaseComponent
 *
 * @example
 *
 * <example name="po-widget-basic" title="PO Widget Basic">
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.html"> </file>
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-labs" title="PO Widget Labs">
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.html"> </file>
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-finance-dashboard" title="PO Widget - Finance dashboard">
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-card" title="PO Widget - Card">
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.html"> </file>
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.ts"> </file>
 * </example>
 *
 */
class PoWidgetComponent extends PoWidgetBaseComponent {
    get showTitleAction() {
        return !!this.titleAction.observers[0];
    }
    constructor(viewRef) {
        super();
    }
    ngOnInit() {
        this.setHeight(this.height);
    }
    hasTitleHelpOrSetting() {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    }
    onClick(event) {
        if (this.click.observed && !this.disabled) {
            this.click.emit(event);
        }
    }
    onKeyDown(event) {
        if (this.click.observed &&
            !this.disabled &&
            (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space)) {
            this.click.emit(event);
            event.preventDefault();
        }
    }
    openHelp(event) {
        if (!this.disabled) {
            event.stopPropagation();
            window.open(this.help, '_blank');
        }
    }
    runPrimaryAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.primaryAction.emit();
        }
    }
    runSecondaryAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.secondaryAction.emit();
        }
    }
    runTitleAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.titleAction.emit();
        }
    }
    setHeight(height) {
        if (height) {
            let bodyHeight = height;
            const hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
            const footerBorder = 1;
            const footerHeight = 40;
            const settingHeight = 37;
            const shadowHeight = 2;
            const titleHeight = 50;
            if (this.noShadow) {
                bodyHeight -= shadowHeight;
            }
            if (hasSettingOrHelp && !this.title) {
                bodyHeight -= settingHeight;
            }
            if (this.title) {
                bodyHeight -= titleHeight;
            }
            if (this.primaryLabel) {
                bodyHeight -= footerHeight + footerBorder;
            }
            this.containerHeight = `${bodyHeight}px`;
        }
        else {
            this.containerHeight = `auto`;
        }
    }
    settingOutput(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.setting.emit();
        }
    }
    static ɵfac = function PoWidgetComponent_Factory(t) { return new (t || PoWidgetComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoWidgetComponent, selectors: [["po-widget"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1, decls: 6, vars: 16, consts: [[3, "tabindex", "click", "keydown"], ["class", "po-widget-header", 4, "ngIf"], ["p-no-border", "", 3, "p-height"], [1, "po-widget-body"], ["class", "po-widget-footer", 4, "ngIf"], [1, "po-widget-header"], ["class", "po-widget-title-action", 3, "click", 4, "ngIf", "ngIfElse"], ["noTitleAction", ""], ["class", "po-pull-right", 4, "ngIf"], [1, "po-widget-title-action", 3, "click"], [1, "po-pull-right"], ["p-icon", "ICON_SETTINGS", "class", "po-clickable", 3, "id", "click", 4, "ngIf"], ["p-icon", "ICON_HELP", "class", "po-clickable", 3, "id", "click", 4, "ngIf"], ["p-icon", "ICON_SETTINGS", 1, "po-clickable", 3, "id", "click"], ["p-icon", "ICON_HELP", 1, "po-clickable", 3, "id", "click"], [1, "po-widget-footer"], ["class", "po-widget-xl", 4, "ngIf"], ["class", "po-widget-md", 4, "ngIf"], [1, "po-widget-xl"], [1, "po-widget-action", 3, "id", "click"], [1, "po-widget-md"]], template: function PoWidgetComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoWidgetComponent_Template_div_click_0_listener($event) { return ctx.onClick($event); })("keydown", function PoWidgetComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵtemplate(1, PoWidgetComponent_div_1_Template, 5, 3, "div", 1);
            i0.ɵɵelementStart(2, "po-container", 2)(3, "div", 3);
            i0.ɵɵprojection(4);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(5, PoWidgetComponent_div_5_Template, 4, 3, "div", 4);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵstyleProp("background-image", ctx.background ? "url(" + ctx.background + ")" : undefined);
            i0.ɵɵclassProp("po-clickable", ctx.click.observers.length)("po-widget", !ctx.primary)("po-widget-disabled", ctx.disabled)("po-widget-primary", ctx.primary)("po-widget-no-shadow", ctx.click.observers.length && ctx.noShadow);
            i0.ɵɵproperty("tabindex", ctx.disabled || !ctx.click.observers.length ? -1 : 0);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngIf", ctx.hasTitleHelpOrSetting());
            i0.ɵɵadvance();
            i0.ɵɵproperty("p-height", ctx.containerHeight);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.primaryLabel);
        } }, dependencies: [i1.NgIf, PoContainerComponent, PoIconComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetComponent, [{
        type: Component,
        args: [{ selector: 'po-widget', template: "<div\n  [class.po-clickable]=\"click.observers.length\"\n  [class.po-widget]=\"!primary\"\n  [class.po-widget-disabled]=\"disabled\"\n  [class.po-widget-primary]=\"primary\"\n  [class.po-widget-no-shadow]=\"click.observers.length && noShadow\"\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\n  (click)=\"onClick($event)\"\n  (keydown)=\"onKeyDown($event)\"\n  [tabindex]=\"disabled || !click.observers.length ? -1 : 0\"\n>\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"po-widget-header\">\n    <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"po-widget-title-action\" (click)=\"runTitleAction($event)\">\n      {{ title }}\n    </span>\n    <ng-template #noTitleAction>{{ title }}</ng-template>\n\n    <div *ngIf=\"setting.observers[0] || help\" class=\"po-pull-right\">\n      <po-icon\n        id=\"settingAction-{{ id }}\"\n        *ngIf=\"setting.observers[0]\"\n        p-icon=\"ICON_SETTINGS\"\n        class=\"po-clickable\"\n        (click)=\"settingOutput($event)\"\n      >\n      </po-icon>\n      <po-icon id=\"helpLink-{{ id }}\" *ngIf=\"help\" p-icon=\"ICON_HELP\" (click)=\"openHelp($event)\" class=\"po-clickable\">\n      </po-icon>\n    </div>\n  </div>\n\n  <po-container p-no-border [p-height]=\"containerHeight\">\n    <div class=\"po-widget-body\">\n      <ng-content></ng-content>\n    </div>\n  </po-container>\n\n  <div *ngIf=\"primaryLabel\" class=\"po-widget-footer\">\n    <div class=\"po-widget-xl\" *ngIf=\"!secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct-{{ id }}\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct-{{ id }}\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"secondaryAct-{{ id }}\" (click)=\"runSecondaryAction($event)\">{{\n        secondaryLabel\n      }}</a>\n    </div>\n  </div>\n</div>\n" }]
    }], () => [{ type: i0.ViewContainerRef }], null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoWidgetComponent, { className: "PoWidgetComponent", filePath: "lib/components/po-widget/po-widget.component.ts", lineNumber: 36 }); })();

/**
 * @description
 *
 * Módulo do componente po-widget
 */
class PoWidgetModule {
    static ɵfac = function PoWidgetModule_Factory(t) { return new (t || PoWidgetModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoWidgetModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoContainerModule, PoIconModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoContainerModule, PoIconModule],
                exports: [PoWidgetComponent],
                declarations: [PoWidgetComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoWidgetModule, { declarations: [PoWidgetComponent], imports: [CommonModule, PoContainerModule, PoIconModule], exports: [PoWidgetComponent] }); })();

class PoComponentsModule {
    static ɵfac = function PoComponentsModule_Factory(t) { return new (t || PoComponentsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoComponentsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoAccordionModule,
            PoAvatarModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoButtonGroupModule,
            PoCalendarModule,
            PoChartModule,
            PoContainerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoDividerModule,
            PoDropdownModule,
            PoDynamicModule,
            PoFieldModule,
            PoGaugeModule,
            PoGridModule,
            PoIconModule,
            PoInfoModule,
            PoListViewModule,
            PoListBoxModule,
            PoLoadingModule,
            PoLogoModule,
            PoMenuModule,
            PoMenuPanelModule,
            PoModalModule,
            PoNavbarModule,
            PoOverlayModule,
            PoPageModule,
            PoPopoverModule,
            PoPopupModule,
            PoProgressModule,
            PoSlideModule,
            PoStepperModule,
            PoTableModule,
            PoTabsModule,
            PoTagModule,
            PoToolbarModule,
            PoTreeViewModule,
            PoWidgetModule,
            PoLinkModule,
            PoLabelModule,
            PoImageModule,
            PoPageSlideModule,
            PoSwitchModule,
            PoSearchModule,
            PoBadgeModule, PoAccordionModule,
            PoAvatarModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoButtonGroupModule,
            PoCalendarModule,
            PoChartModule,
            PoContainerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoDividerModule,
            PoDropdownModule,
            PoDynamicModule,
            PoFieldModule,
            PoGaugeModule,
            PoGridModule,
            PoIconModule,
            PoInfoModule,
            PoListViewModule,
            PoListBoxModule,
            PoLoadingModule,
            PoLogoModule,
            PoMenuModule,
            PoMenuPanelModule,
            PoModalModule,
            PoNavbarModule,
            PoOverlayModule,
            PoPageModule,
            PoPopoverModule,
            PoPopupModule,
            PoProgressModule,
            PoSlideModule,
            PoStepperModule,
            PoTableModule,
            PoTabsModule,
            PoTagModule,
            PoToolbarModule,
            PoTreeViewModule,
            PoWidgetModule,
            PoLinkModule,
            PoLabelModule,
            PoImageModule,
            PoPageSlideModule,
            PoSwitchModule,
            PoSearchModule,
            PoBadgeModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    PoAccordionModule,
                    PoAvatarModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoButtonGroupModule,
                    PoCalendarModule,
                    PoChartModule,
                    PoContainerModule,
                    PoDisclaimerGroupModule,
                    PoDisclaimerModule,
                    PoDividerModule,
                    PoDropdownModule,
                    PoDynamicModule,
                    PoFieldModule,
                    PoGaugeModule,
                    PoGridModule,
                    PoIconModule,
                    PoInfoModule,
                    PoListViewModule,
                    PoListBoxModule,
                    PoLoadingModule,
                    PoLogoModule,
                    PoMenuModule,
                    PoMenuPanelModule,
                    PoModalModule,
                    PoNavbarModule,
                    PoOverlayModule,
                    PoPageModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoProgressModule,
                    PoSlideModule,
                    PoStepperModule,
                    PoTableModule,
                    PoTabsModule,
                    PoTagModule,
                    PoToolbarModule,
                    PoTreeViewModule,
                    PoWidgetModule,
                    PoLinkModule,
                    PoLabelModule,
                    PoImageModule,
                    PoPageSlideModule,
                    PoSwitchModule,
                    PoSearchModule,
                    PoBadgeModule
                ],
                exports: [
                    PoAccordionModule,
                    PoAvatarModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoButtonGroupModule,
                    PoCalendarModule,
                    PoChartModule,
                    PoContainerModule,
                    PoDisclaimerGroupModule,
                    PoDisclaimerModule,
                    PoDividerModule,
                    PoDropdownModule,
                    PoDynamicModule,
                    PoFieldModule,
                    PoGaugeModule,
                    PoGridModule,
                    PoIconModule,
                    PoInfoModule,
                    PoListViewModule,
                    PoListBoxModule,
                    PoLoadingModule,
                    PoLogoModule,
                    PoMenuModule,
                    PoMenuPanelModule,
                    PoModalModule,
                    PoNavbarModule,
                    PoOverlayModule,
                    PoPageModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoProgressModule,
                    PoSlideModule,
                    PoStepperModule,
                    PoTableModule,
                    PoTabsModule,
                    PoTagModule,
                    PoToolbarModule,
                    PoTreeViewModule,
                    PoWidgetModule,
                    PoLinkModule,
                    PoLabelModule,
                    PoImageModule,
                    PoPageSlideModule,
                    PoSwitchModule,
                    PoSearchModule,
                    PoBadgeModule
                ],
                providers: [],
                bootstrap: [],
                declarations: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoComponentsModule, { imports: [PoAccordionModule,
        PoAvatarModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoButtonGroupModule,
        PoCalendarModule,
        PoChartModule,
        PoContainerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoDividerModule,
        PoDropdownModule,
        PoDynamicModule,
        PoFieldModule,
        PoGaugeModule,
        PoGridModule,
        PoIconModule,
        PoInfoModule,
        PoListViewModule,
        PoListBoxModule,
        PoLoadingModule,
        PoLogoModule,
        PoMenuModule,
        PoMenuPanelModule,
        PoModalModule,
        PoNavbarModule,
        PoOverlayModule,
        PoPageModule,
        PoPopoverModule,
        PoPopupModule,
        PoProgressModule,
        PoSlideModule,
        PoStepperModule,
        PoTableModule,
        PoTabsModule,
        PoTagModule,
        PoToolbarModule,
        PoTreeViewModule,
        PoWidgetModule,
        PoLinkModule,
        PoLabelModule,
        PoImageModule,
        PoPageSlideModule,
        PoSwitchModule,
        PoSearchModule,
        PoBadgeModule], exports: [PoAccordionModule,
        PoAvatarModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoButtonGroupModule,
        PoCalendarModule,
        PoChartModule,
        PoContainerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoDividerModule,
        PoDropdownModule,
        PoDynamicModule,
        PoFieldModule,
        PoGaugeModule,
        PoGridModule,
        PoIconModule,
        PoInfoModule,
        PoListViewModule,
        PoListBoxModule,
        PoLoadingModule,
        PoLogoModule,
        PoMenuModule,
        PoMenuPanelModule,
        PoModalModule,
        PoNavbarModule,
        PoOverlayModule,
        PoPageModule,
        PoPopoverModule,
        PoPopupModule,
        PoProgressModule,
        PoSlideModule,
        PoStepperModule,
        PoTableModule,
        PoTabsModule,
        PoTagModule,
        PoToolbarModule,
        PoTreeViewModule,
        PoWidgetModule,
        PoLinkModule,
        PoLabelModule,
        PoImageModule,
        PoPageSlideModule,
        PoSwitchModule,
        PoSearchModule,
        PoBadgeModule] }); })();

class PoDirectivesModule {
    static ɵfac = function PoDirectivesModule_Factory(t) { return new (t || PoDirectivesModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDirectivesModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoTooltipModule, PoTooltipModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDirectivesModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [PoTooltipModule],
                exports: [PoTooltipModule],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDirectivesModule, { imports: [PoTooltipModule], exports: [PoTooltipModule] }); })();

class PoGuardsModule {
    static ɵfac = function PoGuardsModule_Factory(t) { return new (t || PoGuardsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGuardsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGuardsModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [],
                exports: [],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();

const poHttpInterceptorDetailLiteralsDefault = {
    en: {
        closeButton: 'Close',
        details: 'Details',
        detail: 'Detail',
        error: 'Error',
        warning: 'Warning',
        information: 'Information',
        success: 'Success'
    },
    es: {
        closeButton: 'Cerrar',
        details: 'Detalles',
        detail: 'Detalle',
        error: 'Error',
        warning: 'Advertencia',
        information: 'Informacion',
        success: 'Éxito'
    },
    pt: {
        closeButton: 'Fechar',
        details: 'Detalhes',
        detail: 'Detalhe',
        error: 'Erro',
        warning: 'Aviso',
        information: 'Informação',
        success: 'Sucesso'
    },
    ru: {
        closeButton: 'Закрывать',
        details: 'Детали',
        detail: 'Деталь',
        error: 'Ошибка',
        warning: 'Предупреждение',
        information: 'Информация',
        success: 'Yспех'
    }
};

function PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_ng_template_1_Template(rf, ctx) { }
const _c0 = a0 => ({ detail: a0 });
function PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-accordion-item", 7);
    i0.ɵɵtemplate(1, PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_ng_template_1_Template, 0, 0, "ng-template", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r6 = ctx.$implicit;
    const ctx_r5 = i0.ɵɵnextContext(2);
    const _r4 = i0.ɵɵreference(6);
    i0.ɵɵproperty("p-label", ctx_r5.formatDetailItemTitle(detail_r6));
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0, detail_r6));
} }
function PoHttpInterceptorDetailComponent_po_accordion_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "po-accordion", 5);
    i0.ɵɵtemplate(1, PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_Template, 2, 5, "po-accordion-item", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r0.details);
} }
const _c1 = () => ({});
function PoHttpInterceptorDetailComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 8);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(6);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0, ctx_r1.details[0] || i0.ɵɵpureFunction0(2, _c1)));
} }
function PoHttpInterceptorDetailComponent_ng_template_5_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵelement(1, "po-tag", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const detail_r8 = i0.ɵɵnextContext().detail;
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("p-color", ctx_r9.typeColor(detail_r8.type))("p-value", ctx_r9.typeValue(detail_r8.type));
} }
function PoHttpInterceptorDetailComponent_ng_template_5_p_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p")(1, "strong");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const detail_r8 = i0.ɵɵnextContext().detail;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(detail_r8.code);
} }
function PoHttpInterceptorDetailComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoHttpInterceptorDetailComponent_ng_template_5_div_0_Template, 2, 2, "div", 9)(1, PoHttpInterceptorDetailComponent_ng_template_5_p_1_Template, 3, 1, "p", 10);
    i0.ɵɵelementStart(2, "div", 1)(3, "p");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const detail_r8 = ctx.detail;
    i0.ɵɵproperty("ngIf", detail_r8.type);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", detail_r8.detailTitle);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(detail_r8.detailedMessage);
} }
const colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
class PoHttpInterceptorDetailComponent {
    languageService;
    modal;
    closed = new EventEmitter();
    details = [];
    title;
    language;
    literals;
    // eslint-disable-next-line @typescript-eslint/member-ordering
    primaryAction;
    constructor(languageService) {
        this.languageService = languageService;
        this.language = this.languageService?.getShortLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
    }
    ngOnInit() {
        this.primaryAction = {
            action: () => this.close(),
            label: this.literals.closeButton
        };
    }
    set detail(details) {
        if (details && details.length) {
            this.details = this.filterByValidDetails(details);
        }
        this.title = this.formatTitle(this.details);
    }
    close() {
        this.modal.close();
        this.closed.emit();
    }
    formatDetailItemTitle(detail) {
        return detail.detailTitle
            ? detail.detailTitle
            : detail.code
                ? `${detail.code} - ${detail.message}`
                : detail.message;
    }
    open() {
        this.modal.open();
    }
    typeColor(type) {
        return colors[type];
    }
    typeValue(type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    }
    addValidDetail(newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    }
    getValidDetailProperties({ code, message, detailedMessage, type, detailTitle }) {
        return detailTitle
            ? { code, message, detailedMessage, type, detailTitle }
            : { code, message, detailedMessage, type };
    }
    filterByValidDetails(details) {
        return details.reduce((newDetails, detail) => this.addValidDetail(newDetails, detail), []);
    }
    formatTitle(details) {
        return details.length > 1
            ? `${this.literals.details} (${details.length})`
            : details.length === 1
                ? this.formatDetailItemTitle(details[0])
                : this.literals.detail;
    }
    static ɵfac = function PoHttpInterceptorDetailComponent_Factory(t) { return new (t || PoHttpInterceptorDetailComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoHttpInterceptorDetailComponent, selectors: [["po-http-interceptor-detail"]], viewQuery: function PoHttpInterceptorDetailComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
        } }, decls: 7, vars: 4, consts: [["p-hide-close", "", "p-size", "lg", 3, "p-primary-action", "p-title"], [1, "po-row"], ["class", "po-md-12 po-mt-1 po-mb-1", 4, "ngIf", "ngIfElse"], ["elseBlock", ""], ["body", ""], [1, "po-md-12", "po-mt-1", "po-mb-1"], [3, "p-label", 4, "ngFor", "ngForOf"], [3, "p-label"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "po-row po-mb-1", 4, "ngIf"], [4, "ngIf"], [1, "po-row", "po-mb-1"], [3, "p-color", "p-value"]], template: function PoHttpInterceptorDetailComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoHttpInterceptorDetailComponent_po_accordion_2_Template, 2, 1, "po-accordion", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, PoHttpInterceptorDetailComponent_ng_template_3_Template, 1, 5, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor)(5, PoHttpInterceptorDetailComponent_ng_template_5_Template, 5, 3, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        } if (rf & 2) {
            const _r2 = i0.ɵɵreference(4);
            i0.ɵɵproperty("p-primary-action", ctx.primaryAction)("p-title", ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.details.length > 1)("ngIfElse", _r2);
        } }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoAccordionComponent, PoAccordionItemComponent, PoModalComponent, PoTagComponent], encapsulation: 2 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorDetailComponent, [{
        type: Component,
        args: [{ selector: 'po-http-interceptor-detail', template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\" *ngIf=\"details.length > 1; else elseBlock\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <ng-template [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail }\"></ng-template>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n\n<ng-template #elseBlock>\n  <ng-container [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail: details[0] || {} }\"></ng-container>\n</ng-template>\n\n<ng-template #body let-detail=\"detail\">\n  <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n    <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n  </div>\n\n  <p *ngIf=\"detail.detailTitle\">\n    <strong>{{ detail.code }}</strong>\n  </p>\n\n  <div class=\"po-row\">\n    <p>{{ detail.detailedMessage }}</p>\n  </div>\n</ng-template>\n" }]
    }], () => [{ type: PoLanguageService }], { modal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(PoHttpInterceptorDetailComponent, { className: "PoHttpInterceptorDetailComponent", filePath: "lib/interceptors/po-http-interceptor/po-http-interceptor-detail/po-http-interceptor-detail.component.ts", lineNumber: 23 }); })();

const poHttpInterceptorLiterals = {
    pt: {
        help: 'Ajuda',
        details: 'Detalhes',
        serverNotResponse: 'Servidor não está respondendo'
    },
    en: {
        help: 'Help',
        details: 'Details',
        serverNotResponse: 'Server is not responding'
    },
    es: {
        help: 'Ayuda',
        details: 'Detalles',
        serverNotResponse: 'El servidor no está respondiendo'
    },
    ru: {
        help: 'Помогите',
        details: 'Детали',
        serverNotResponse: 'Сервер не отвечает'
    }
};

const NO_ERROR_HEADER_PARAM = 'X-PO-No-Error';
const NO_MESSAGE_HEADER_PARAM = 'X-PO-No-Message';
/**
 * @description
 *
 * O *interceptor* tem a finalidade de exibir notificações com mensagens na tela, baseado nas respostas das requisições HTTP.
 *
 * Pode ser utilizado para dar feedback das ações do usuário como, por exemplo: erro de autorização, mensagens de regras de negócio,
 * atualizações de registros, erro quando o servidor estiver indisponível e entre outros.
 *
 * ## Configuração
 *
 * Para o correto funcionamento do interceptor `po-http-interceptor`, deve ser importado o `BrowserAnimationsModule` no
 * módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * ## Como usar
 *
 * Para exibir as noticações é necessário informar a mensagem no retorno da requisição. A estrutura da mensagem
 * é feita com base no status da resposta, conforme será apresentado nos próximos tópicos.
 *
 * ### Estrutura das mensagens
 *
 * #### Mensagens de sucesso `2xx`
 *
 * Para exibir mensagens ao retornar uma lista ou um item, deve-se incluir a propriedade `_messages` no objeto de retorno.
 * Por exemplo:
 * ```
 * {
 *   "_messages": [
 *     {
 *       "type": "success" || "warning" || "error" || "information" (será exibido a `tag` apenas se esta propriedade possuir valor),
 *       "code": "título ou código da mensagem",
 *       "message": "texto da mensagem",
 *       "detailedMessage": "detalhamento da mensagem"
 *     }
 *   ]
 * }
 * ```
 *
 * #### Mensagens de erro `4xx` ou `5xx`
 *
 * Ao retornar erro, o objeto não necessita ter `_messages`, deve-se retornar o objeto diretamente:
 *
 * ```
 * {
 *    "code": "título ou código da mensagem",
 *    "message": "texto da mensagem",
 *    "detailedMessage": "detalhamento da mensagem"
 * }
 * ```
 *
 * Também é possível informar as seguintes propriedades:
 *
 * - `helpUrl`: link para a documentação do erro;
 *    - Caso for informado, será exibido uma ação de "Ajuda" na notificação, para isso não deverá ter a propriedade `detailedMessage`.
 * - `type`: É possível informar `error`, `warning` e `information`, sendo `error` o valor padrão.
 * - `details`: Uma lista de objetos de mensagem (recursiva) com mais detalhes sobre a mensagem principal.
 * - `detailTitle`: caso for informado, será apresentado como título dos detalhes substituindo o padrão `code - message`
 *
 * > Veja o [Guia de implementação de APIs](guides/api) para mais detalhes sobre a estrutura das mensagens.
 *
 * ### Cabeçalho
 *
 * É possível dispensar a notificação para o usuário utilizando no cabeçalho da requisição os parâmetros listados abaixo com o valor
 * igual a `true`:
 *
 * - `X-PO-No-Message`: Não exibe notificações de erro e/ou sucesso.
 *
 * - `X-PO-No-Error`: Não mostra notificações de erro com códigos `4xx` e `5xx`.
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Message': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 *
 * > Após a validação no *interceptor*, os parâmetros serão removidos do cabeçalho da requisição.
 *
 */
class PoHttpInterceptorBaseService {
    componentInjector;
    notification;
    languageService;
    notificationTypes = ['success', 'warning', 'error', 'information'];
    literals;
    httpInterceptorDetailComponent = undefined;
    constructor(componentInjector, notification, languageService) {
        this.componentInjector = componentInjector;
        this.notification = notification;
        this.languageService = languageService;
        this.literals = poHttpInterceptorLiterals[this.languageService?.getShortLanguage()];
    }
    intercept(request, next) {
        const cloneRequest = request.clone();
        request = request && this.hasParameters(request) ? this.cloneRequestWithoutParameters(request) : request;
        return next.handle(request).pipe(tap((response) => {
            if (response instanceof HttpResponse) {
                this.processResponse(response, cloneRequest);
            }
        }, (error) => {
            this.processErrorResponse(error, cloneRequest);
        }));
    }
    processResponse(response, request) {
        const hasNoMessageParam = this.hasNoMessageParam(request);
        if (!hasNoMessageParam && response.body && response.body._messages) {
            const messages = response.body._messages;
            if (messages instanceof Array) {
                messages.forEach((message) => {
                    this.showNotification(message);
                });
            }
            else {
                this.showNotification(messages);
            }
        }
    }
    processErrorResponse(response, request) {
        const errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: this.literals.serverNotResponse, detailedMessage: response.message };
        const hasNoErrorParam = this.hasNoErrorParam(request);
        const hasNoMessageParam = this.hasNoMessageParam(request);
        const errorResponseValidTypes = this.notificationTypes.slice(1);
        if (errorResponse && errorResponse.message && !hasNoErrorParam && !hasNoMessageParam) {
            this.showNotification({
                ...errorResponse,
                type: errorResponseValidTypes.includes(errorResponse.type) ? errorResponse.type : 'error'
            });
        }
    }
    cloneRequestWithoutParameters(request) {
        const headers = request.headers.delete(NO_ERROR_HEADER_PARAM).delete(NO_MESSAGE_HEADER_PARAM);
        return request.clone({ headers });
    }
    createModal(responseMessage) {
        const details = responseMessage.details ? [responseMessage, ...responseMessage.details] : [responseMessage];
        this.httpInterceptorDetailComponent = this.componentInjector.createComponentInApplication(PoHttpInterceptorDetailComponent);
        this.httpInterceptorDetailComponent.instance.detail = details;
        this.httpInterceptorDetailComponent.instance.closed.subscribe(() => this.destroyModal());
        this.httpInterceptorDetailComponent.instance.open();
    }
    destroyModal() {
        if (this.httpInterceptorDetailComponent) {
            this.componentInjector.destroyComponentInApplication(this.httpInterceptorDetailComponent);
            this.httpInterceptorDetailComponent = undefined;
        }
    }
    hasMessage(responseMessage) {
        const hasMessageProperties = responseMessage.message;
        return responseMessage && hasMessageProperties;
    }
    hasNoErrorParam(request) {
        const noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    }
    hasNoMessageParam(request) {
        const noMessageParam = request && request.headers.get(NO_MESSAGE_HEADER_PARAM);
        return noMessageParam && noMessageParam.toString().toLocaleLowerCase() === 'true';
    }
    hasParameters(request) {
        return request.headers.has(NO_ERROR_HEADER_PARAM) || request.headers.has(NO_MESSAGE_HEADER_PARAM);
    }
    showNotification(response) {
        if (!this.hasMessage(response)) {
            return;
        }
        const typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
        const notificationAction = this.generateNotificationAction(response);
        this.notification[typeNotification]({
            message: response.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    }
    generateDetailModal(responseMessage) {
        return () => {
            if (!this.httpInterceptorDetailComponent) {
                this.createModal(responseMessage);
            }
        };
    }
    generateNotificationAction(responseMessage) {
        let notificationAction;
        let notificationLabel;
        if (responseMessage.helpUrl && !(responseMessage.detailedMessage || responseMessage.details)) {
            notificationLabel = this.literals.help;
            notificationAction = this.generateUrlHelpFunction(responseMessage.helpUrl);
        }
        else if (responseMessage.detailedMessage || responseMessage.details) {
            notificationLabel = this.literals.details;
            notificationAction = this.generateDetailModal(responseMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    }
    generateUrlHelpFunction(helpUrl) {
        return () => {
            window.open(helpUrl, '_blank');
        };
    }
}

/**
 * @docsExtends PoHttpInterceptorBaseService
 *
 * @example
 * <example name='po-http-interceptor-labs' title='PO Http Interceptor Labs'>
 *  <file name='sample-po-http-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-interceptor-labs.component.html'> </file>
 * </example>
 */
class PoHttpInterceptorService extends PoHttpInterceptorBaseService {
    constructor(notification, componentInjector, languageService) {
        super(componentInjector, notification, languageService);
    }
    static ɵfac = function PoHttpInterceptorService_Factory(t) { return new (t || PoHttpInterceptorService)(i0.ɵɵinject(PoNotificationService), i0.ɵɵinject(PoComponentInjectorService), i0.ɵɵinject(PoLanguageService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpInterceptorService, factory: PoHttpInterceptorService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorService, [{
        type: Injectable
    }], () => [{ type: PoNotificationService }, { type: PoComponentInjectorService }, { type: PoLanguageService }], null); })();

class PoHttpInterceptorModule {
    static ɵfac = function PoHttpInterceptorModule_Factory(t) { return new (t || PoHttpInterceptorModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoHttpInterceptorModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
            PoHttpInterceptorService,
            PoNotificationService,
            {
                provide: HTTP_INTERCEPTORS,
                useClass: PoHttpInterceptorService,
                multi: true
            }
        ], imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule],
                declarations: [PoHttpInterceptorDetailComponent],
                providers: [
                    PoHttpInterceptorService,
                    PoNotificationService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: PoHttpInterceptorService,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoHttpInterceptorModule, { declarations: [PoHttpInterceptorDetailComponent], imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule] }); })();

/**
 * @docsPrivate
 *
 * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `PoHttpRequestInterceptorService`
 * gerenciando o seu estado.
 */
class PoHttpRequesControltService {
    controlHttpRequest = new Subject();
    getControlHttpRequest() {
        return this.controlHttpRequest.asObservable();
    }
    send(value = 0) {
        this.controlHttpRequest.next(value);
    }
    static ɵfac = function PoHttpRequesControltService_Factory(t) { return new (t || PoHttpRequesControltService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpRequesControltService, factory: PoHttpRequesControltService.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequesControltService, [{
        type: Injectable
    }], null, null); })();

const noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
const screenLock = 'X-PO-Screen-Lock';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
class PoHttpRequestInterceptorService {
    controlHttpRequest;
    poComponentInjector;
    loadingOverlayComponent = undefined;
    pendingRequests = 0;
    overlayRequests = 0;
    constructor(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
    }
    intercept(request, next) {
        const requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(finalize(() => {
            this.setCountPendingRequests(false, requestClone);
            this.setCountOverlayRequests(false, requestClone);
        }));
    }
    getCountPendingRequests() {
        return this.controlHttpRequest.getControlHttpRequest();
    }
    buildLoading() {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    }
    destroyLoading() {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    }
    requestCloneWithoutHeaderParam(headersParams, request) {
        let isRequestClone = false;
        headersParams.forEach(headerParam => {
            if (request.headers.has(headerParam)) {
                request = request.clone({ headers: request.headers.delete(headerParam) });
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    }
    setCountPendingRequests(isIncrement, request) {
        const hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        const headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    }
    setCountOverlayRequests(isIncrement, request) {
        const hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            const headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    }
    static ɵfac = function PoHttpRequestInterceptorService_Factory(t) { return new (t || PoHttpRequestInterceptorService)(i0.ɵɵinject(PoHttpRequesControltService), i0.ɵɵinject(PoComponentInjectorService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpRequestInterceptorService, factory: PoHttpRequestInterceptorService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequestInterceptorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: PoHttpRequesControltService }, { type: PoComponentInjectorService }], null); })();

class PoHttpRequestModule {
    static ɵfac = function PoHttpRequestModule_Factory(t) { return new (t || PoHttpRequestModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoHttpRequestModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
            PoHttpRequesControltService,
            PoHttpRequestInterceptorService,
            PoComponentInjectorService,
            {
                provide: HTTP_INTERCEPTORS,
                useClass: PoHttpRequestInterceptorService,
                multi: true
            }
        ], imports: [PoLoadingModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequestModule, [{
        type: NgModule,
        args: [{
                imports: [PoLoadingModule],
                providers: [
                    PoHttpRequesControltService,
                    PoHttpRequestInterceptorService,
                    PoComponentInjectorService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: PoHttpRequestInterceptorService,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoHttpRequestModule, { imports: [PoLoadingModule] }); })();

class PoInterceptorsModule {
    static ɵfac = function PoInterceptorsModule_Factory(t) { return new (t || PoInterceptorsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoInterceptorsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoHttpInterceptorModule, PoHttpRequestModule, PoHttpInterceptorModule, PoHttpRequestModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInterceptorsModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [PoHttpInterceptorModule, PoHttpRequestModule],
                exports: [PoHttpInterceptorModule, PoHttpRequestModule],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoInterceptorsModule, { imports: [PoHttpInterceptorModule, PoHttpRequestModule], exports: [PoHttpInterceptorModule, PoHttpRequestModule] }); })();

class PoPipesModule {
    static ɵfac = function PoPipesModule_Factory(t) { return new (t || PoPipesModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPipesModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoTimeModule, PoTimeModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPipesModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [PoTimeModule],
                exports: [PoTimeModule],
                providers: [],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPipesModule, { imports: [PoTimeModule], exports: [PoTimeModule] }); })();

class PoModule {
    static ɵfac = function PoModule_Factory(t) { return new (t || PoModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoNotificationService], imports: [PoComponentsModule,
            PoDirectivesModule,
            PoGuardsModule,
            PoInterceptorsModule,
            PoPipesModule,
            PoServicesModule, PoComponentsModule,
            PoDirectivesModule,
            PoInterceptorsModule,
            PoGuardsModule,
            PoPipesModule,
            PoServicesModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [
                    PoComponentsModule,
                    PoDirectivesModule,
                    PoGuardsModule,
                    PoInterceptorsModule,
                    PoPipesModule,
                    PoServicesModule
                ],
                exports: [
                    PoComponentsModule,
                    PoDirectivesModule,
                    PoInterceptorsModule,
                    PoGuardsModule,
                    PoPipesModule,
                    PoServicesModule
                ],
                providers: [PoNotificationService],
                bootstrap: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoModule, { imports: [PoComponentsModule,
        PoDirectivesModule,
        PoGuardsModule,
        PoInterceptorsModule,
        PoPipesModule,
        PoServicesModule], exports: [PoComponentsModule,
        PoDirectivesModule,
        PoInterceptorsModule,
        PoGuardsModule,
        PoPipesModule,
        PoServicesModule] }); })();

/**
 * @usedBy PoDynamicFormComponent
 *
 * @description
 *
 * Enum para definição do tipo de componente a ser renderizado.
 */
var ForceBooleanComponentEnum;
(function (ForceBooleanComponentEnum) {
    /** Força a renderização de um po-switch */
    ForceBooleanComponentEnum["switch"] = "switch";
    /** Força a renderização de um po-checkbox */
    ForceBooleanComponentEnum["checkbox"] = "checkbox";
})(ForceBooleanComponentEnum || (ForceBooleanComponentEnum = {}));
/**
 * @usedBy PoDynamicFormComponent
 *
 * @description
 *
 * Enum para definição do tipo de componente a ser renderizado.
 */
var ForceOptionComponentEnum;
(function (ForceOptionComponentEnum) {
    /** Força a renderização de um po-radio-group independente da quantidade do opções */
    ForceOptionComponentEnum["radioGroup"] = "radioGroup";
    /** Força a renderização de um po-select independente da quantidade do opções */
    ForceOptionComponentEnum["select"] = "select";
})(ForceOptionComponentEnum || (ForceOptionComponentEnum = {}));

/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}

/**
 * Converte o valor de um campo de entrada para booleano.
 *
 * Forma de utilização:
 *
 * ```
 * @Input('p-loading') @InputBoolean() loading: boolean;
 * ```
 */
function InputBoolean() {
    return function (target, property, originalDescriptor) {
        const decoratorProperties = { target, property, originalDescriptor };
        return changeValueByCallback(decoratorProperties, 'InputBoolean', convertToBoolean);
    };
}

/**
 * @docsPrivate
 *
 * @description
 *
 * Verifica se uma entrada de um componente foi preenchida.
 *
 * Na ausência da propriedade o decorator irá disparar um warn no console
 * do navegador do usuário.
 *
 * > Esta verificação é feita apenas no ngOnInit do componente.
 *
 * Forma de utilização:
 * ```
 * @Input('p-label') @InputRequired() label: string;
 * ```
 *
 * Referência:
 * https://netbasal.com/how-to-add-angular-component-input-validation-b078a30af97f
 * https://medium.com/@abdelelmedny/angular-input-decorators-5d38089070aa
 */
function InputRequired() {
    return function (target, property) {
        const decoratorProperties = { target, property };
        validatePropertyOnLifeCycle(decoratorProperties, 'ngOnInit', validateProperty);
    };
}
function validateProperty(property, target) {
    if (this[property] == null) {
        console.warn(`${target.constructor.name}: ${property} is required, but was not provided`);
    }
}

const I18N_CONFIG = new InjectionToken('I18N_CONFIG');

/**
 * @description
 *
 * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
 *
 * > Antes da utilização do serviço, é necessário realizar a
 * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
 *
 * **Utilização do serviço `PoI18nService`:**
 *
 * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
 * dependência no construtor:
 * ```
 *  import { PoI18nService } from '@po-ui/ng-components';
 *  ...
 *  constructor(private poI18nService: PoI18nService) { }
 *  ...
 * ```
 *
 * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
 * método `getLiterals()`.
 *
 * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
 * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private poI18nService: PoI18nService) {
 *   poI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   poI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | poI18n:[120] }}
 * {{ literals?.greeting | poI18n:[name, nickname] }}
 * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
 *
 * > Atenção: não declarar o `PoI18nService` no providers do TestBed pois a biblioteca realiza a injeção de dependência de forma dinâmica.
 * > Se o serviço for declarado o teste não fará a injeção e o teste apresentará erros.
 *
 * ```
 * import { async, TestBed } from '@angular/core/testing';
 * import { HttpClientTestingModule } from '@angular/common/http/testing';
 *
 * import { PoI18nModule } from '@po-ui/ng-components';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         PoI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
class PoI18nBaseService {
    config;
    http;
    languageService;
    varI18n = {};
    contextDefault;
    useCache = false;
    servicesContext = {};
    constructor(config, http, languageService) {
        this.config = config;
        this.http = http;
        this.languageService = languageService;
        this.setConfig(config);
    }
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * @returns {string} sigla do idioma padrão.
     */
    getLanguage() {
        return this.languageService.getLanguage();
    }
    getLiterals(options = {}) {
        const language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
        const context = options['context'] ? options['context'] : this.contextDefault;
        const literals = options['literals'] ? options['literals'] : [];
        return new Observable(observer => {
            if (this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        });
    }
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * @returns {string} sigla do idioma padrão.
     */
    getShortLanguage() {
        return this.languageService.getShortLanguage();
    }
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {string} language Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {boolean} reload Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     */
    setLanguage(language, reload = false) {
        if (!isLanguage(language)) {
            return;
        }
        this.languageService.setLanguage(language);
        if (reload) {
            reloadCurrentPage();
        }
    }
    setConfig(config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            this.languageService.setLanguageDefault(config['default']['language']);
            this.contextDefault = config['default']['context'] ? config['default']['context'] : '';
            this.useCache = config['default']['cache'] ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (const context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    }
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    getLiteralsFromContextService(language, context, literals, observer, translations = {}, languageAlternative = null) {
        // Idioma usado para tentar buscar as literais faltantes
        const languageSearch = languageAlternative ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // realiza a busca no localStorage e em seguida no serviço
        this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
    }
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    getLiteralsLocalStorageAndCache(language, context, literals, observer, translations, languageAlternative = null) {
        const languageSearch = languageAlternative ? languageAlternative : language;
        let translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals).subscribe(response => {
            if (response) {
                this.updateLocalStorage(language, context, response);
                this.updateVarI18n(language, context, response);
                translationTemp = this.searchInVarI18n(language, context, literals);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    this.updateLocalStorage(language, context, translations);
                    this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        });
    }
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    getLiteralsFromContextConstant(language, context, literals, observer, translations = {}) {
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    }
    // Busca pelas literais no local storage
    searchInLocalStorage(language, context, literals) {
        const translations = {};
        if (literals.length > 0) {
            for (let i = 0; i < literals.length; i++) {
                const literal = literals[i];
                const translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    }
    // Busca pelas literais na variável do serviço
    searchInVarI18n(language, context, literals) {
        let translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            const content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (let i = 0; i < literals.length; i++) {
                    const literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = { ...content };
            }
        }
        return translations;
    }
    // Atualiza o local storage
    updateLocalStorage(language, context, data) {
        if (this.useCache) {
            for (const literal of Object.keys(data)) {
                localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
            }
        }
    }
    // Atualiza a variável local com as literais com os objetos passados na configuração
    setVarI18n(contexts) {
        // Percorre os contextos
        for (const context of Object.keys(contexts)) {
            const contextContent = contexts[context];
            // Percorre os idiomas dentro do contexto
            for (const language of Object.keys(contextContent)) {
                const languageContent = contextContent[language];
                if (language === 'url') {
                    this.servicesContext[context] = languageContent;
                }
                else {
                    this.updateVarI18n(language, context, languageContent);
                }
            }
        }
    }
    // Atualiza a variável local com as literais idioma e contexto
    updateVarI18n(language, context, data) {
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = { [context]: {} };
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    }
    getHttpService(url, language, literals) {
        let param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = url.replace(/\/$/, '');
        return this.http.get(`${url}${param}`);
    }
    // Completa com o nome da literais, as que não foram encontradas
    completeFaultLiterals(language, context, literals, translations) {
        for (let i = 0; i < literals.length; i++) {
            const literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    }
    // Conta os atributos do objeto
    countObject(obj) {
        return Object.keys(obj).length;
    }
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    mergeObject(objPermanent, obj) {
        return { ...obj, ...objPermanent };
    }
    static ɵfac = function PoI18nBaseService_Factory(t) { return new (t || PoI18nBaseService)(i0.ɵɵdirectiveInject(I18N_CONFIG), i0.ɵɵdirectiveInject(HttpClient), i0.ɵɵdirectiveInject(PoLanguageService)); };
    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoI18nBaseService });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nBaseService, [{
        type: Directive
    }], () => [{ type: undefined, decorators: [{
                type: Inject,
                args: [I18N_CONFIG]
            }] }, { type: i1$2.HttpClient, decorators: [{
                type: Inject,
                args: [HttpClient]
            }] }, { type: PoLanguageService }], null); })();

/**
 * @docsExtends PoI18nBaseService
 */
class PoI18nService extends PoI18nBaseService {
    static ɵfac = /*@__PURE__*/ (() => { let ɵPoI18nService_BaseFactory; return function PoI18nService_Factory(t) { return (ɵPoI18nService_BaseFactory || (ɵPoI18nService_BaseFactory = i0.ɵɵgetInheritedFactory(PoI18nService)))(t || PoI18nService); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoI18nService, factory: PoI18nService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
// Função usada para retornar instância para o módulo po-i18n.module
function returnPoI18nService(config, http, languageService) {
    return new PoI18nService(config, http, languageService);
}

/**
 * @description
 *
 * Módulo do serviço `PoI18nService` para controle de idiomas com PO.
 *
 * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado
 * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
 * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.
 *
 * <a id="i18n-config"></a>
 * **Exemplo de configuração do módulo do i18n:**
 * ```
 * import { PoI18nConfig } from '@po-ui/ng-components';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   default: {
 *     language: 'pt-BR',
 *     context: 'general',
 *     cache: true
 *   },
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     hcm: {
 *       url: 'http://10.1.1.1/api/translations/hcm/'
 *     }
 *   }
 * };
 *
 * @NgModule({
 *   declarations: [],
 *   imports: [
 *     PoModule,
 *     PoI18nModule.config(i18nConfig)
 *   ],
 *   bootstrap: [AppComponent]
 * })
 * ```
 *
 * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
 * de um objeto. Exemplo:
 *
 * Arquivo general-pt.ts
 * ```
 * export const generalPt = {
 *  add: 'Adicionar',
 *  greeting: 'Prazer, {0} {1}',
 *  people: '{0} Pessoas,
 *  remove: 'Remover'
 * }
 * ```
 *
 * Arquivo general-en.ts
 * ```
 * export const generalEn = {
 *  add: 'Add',
 *  greeting: 'Nice to meet you, {0} {1}',
 *  people: '{0} People,
 *  remove: 'Remove'
 * }
 * ```
 *
 * **Exemplo de configuração de contextos usando constantes externas:**
 * ```
 * import { PoI18nConfig } from '@po-ui/ng-components';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt, // constantes em arquivos separados
 *       'en-US': generalEn // constantes em arquivos separados
 *     },
 *     crm: {
 *       url: 'http://10.0.0.1:3000/api/translations/crm'
 *     }
 *   },
 *   default: {}
 * }
 * ```
 *
 * **Exemplo de configuração de um contexto utilizando serviço:**
 *
 * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
 * específica do contexto, como nos exemplos abaixo:
 *
 *  - http://10.0.0.1:3000/api/translations/crm
 *  - http://10.0.0.1:3000/api/translations/general
 *
 * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
 * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
 * suportadas pelo PO (`pt-br`, `en-us`, `es-es` ou `ru`).
 * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
 * serviço deve retornar todas as literais do idioma.
 *
 * Exemplos de requisição:
 *
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
 *
 * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
 *
 * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
 * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):
 *
 * **Exemplo de padrões definidos:**
 * ```
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: { }
 *   },
 *   default: {
 *    language: 'pt-BR',
 *    context: 'general',
 *    cache: true
 *   }
 * }
 * ```
 *
 * **Importante:**
 *
 * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
 * preferencialmente no módulo `AppModule`.
 *
 * **i18n com *Lazy loading***
 *
 * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
 * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:
 *
 * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
 * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
 * toda a aplicação;
 * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
 * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`
 * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
 */
class PoI18nModule {
    static config(config) {
        return {
            ngModule: PoI18nModule,
            providers: [
                {
                    provide: I18N_CONFIG,
                    useValue: config
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initializeLanguageDefault,
                    multi: true,
                    deps: [I18N_CONFIG, PoLanguageService]
                },
                {
                    provide: PoI18nService,
                    useFactory: returnPoI18nService,
                    deps: [I18N_CONFIG, HttpClient, PoLanguageService]
                }
            ]
        };
    }
    static ɵfac = function PoI18nModule_Factory(t) { return new (t || PoI18nModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoI18nModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoLanguageModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nModule, [{
        type: NgModule,
        args: [{
                imports: [PoLanguageModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoI18nModule, { imports: [PoLanguageModule] }); })();
function initializeLanguageDefault(config, languageService) {
    // eslint-disable-next-line sonarjs/prefer-immediate-return
    const setDefaultLanguage = () => {
        if (config.default.language) {
            languageService.setLanguageDefault(config.default.language);
        }
    };
    return setDefaultLanguage;
}

/**
 * Define as cores de ação padrão para temas escuros.
 */
const poThemeDefaultActionsDark = {
    /** Cor padrão. */
    default: 'var(--color-brand-01-dark)',
    /** Cor ao passar o mouse. */
    hover: 'var(--color-brand-01-darker)',
    /** Cor quando pressionado. */
    pressed: 'var(--color-brand-01-darkest)',
    /** Cor quando desabilitado. */
    disabled: 'var(--color-neutral-mid-40)',
    /** Cor ao focar. */
    focus: 'var(--color-brand-01-darkest)'
};
/**
 * Define as cores neutras padrão para temas escuros.
 */
const poThemeDefaultNeutralsDark = {
    /** Tons de cinza claro. */
    light: {
        '00': '#1c1c1c',
        '05': '#202020',
        '10': '#2b2b2b',
        '20': '#3b3b3b',
        '30': '#5a5a5a'
    },
    /** Tons de cinza intermediários. */
    mid: {
        '40': '#7c7c7c',
        '60': '#a1a1a1'
    },
    /** Tons de cinza escuro. */
    dark: {
        '70': '#c1c1c1',
        '80': '#d9d9d9',
        '90': '#eeeeee',
        '95': '#fbfbfb'
    }
};
/**
 * Define as cores de feedback padrão para temas escuros.
 */
const poThemeDefaultFeedbackDark = {
    /** Cores para feedback negativo. */
    negative: {
        lightest: '#4a1512',
        lighter: '#72211d',
        light: '#9b2d27',
        base: '#be3e37',
        dark: '#d58581',
        darker: '#e3aeab',
        darkest: '#f6e6e5'
    },
    /** Cores para feedback informativo. */
    info: {
        lightest: '#081536',
        lighter: '#0f2557',
        light: '#173782',
        base: '#23489f',
        dark: '#7996d7',
        darker: '#b0c1e8',
        darkest: '#e3e9f7'
    },
    /** Cores para feedback positivo. */
    positive: {
        lightest: '#002415',
        lighter: '#083a25',
        light: '#0f5236',
        base: '#107048',
        dark: '#41b483',
        darker: '#7ecead',
        darkest: '#def7ed'
    },
    /** Cores para feedback de aviso. */
    warning: {
        lightest: '#473400',
        lighter: '#705200',
        light: '#d8a20e',
        base: '#efba2a',
        dark: '#f1cd6a',
        darker: '#f7dd97',
        darkest: '#fcf6e3'
    }
};
/**
 * Define estilos específicos por componente e onRoot para temas escuros.
 */
const poThemeDefaultDarkValues = {
    perComponent: {
        /** TAB */
        '.po-tab-border-active': {
            'background-color': 'var(--color-tab-button-box-shadow-active, var(--color))'
        },
        /** GAUGE */
        '.po-gauge-wrapper': {
            'background-color': 'var(--color-neutral-light-00)'
        },
        /** OVERLAY */
        'po-overlay': {
            '--color-overlay': 'var(--color-neutral-light-20)'
        },
        /** MODAL */
        'po-modal': {
            '--color-overlay': 'var(--color-neutral-light-20)'
        },
        /** TOASTER */
        'po-toaster': {
            '--color-icon': 'var(--color-neutral-dark-80)'
        },
        /** BADGE */
        'po-badge': {
            '--color': 'var(--color-neutral-dark-95)'
        },
        'po-badge[p-status=warning]': {
            '--color': 'var(--color-neutral-light-00)'
        },
        // CHART: AXIS LABEL
        'po-chart po-chart-container > svg .po-chart-axis-x-label, .po-chart-axis-y-label': {
            'fill': 'var(--color-neutral-dark-95)'
        },
        // RICH-TEXT: color button border
        'po-rich-text-toolbar .po-button-default.po-rich-text-toolbar-color-picker-button': {
            'border-style': 'solid'
        },
        // LINK: item visitado
        'po-link': {
            '--text-color-visited': 'var(--color-action-default)'
        },
        // focus e outline: po-rich-text-body/ poinfo/ po-list-view/ po-stepper-circle (mudar no po-style)
        'po-rich-text-body .po-rich-text-body:focus-visible, po-info .po-info-link:focus-visible, po-list-view a.po-list-view-title-link:focus-visible, po-stepper-circle .po-stepper-circle:focus-visible': {
            'border-color': 'var(--color-action-default);',
            'outline-color': 'var(--color-action-focus);',
            'outline-width': 'var(--outline-width-focus-visible);',
            'outline-style': 'solid;',
            'outline-offset': '2px;'
        },
        // background container
        'po-container': {
            '--background': 'var(--color-neutral-light-00);'
        },
        // Background input disabled
        'div.po-lookup-filter-content input.po-input, input.po-input, po-datepicker, po-datepicker-range, po-decimal, po-email, po-input, po-login, po-lookup, po-number, po-password, po-url, po-combo, po-search, po-select, po-multiselect': {
            '--background-disabled': 'var(--color-neutral-light-20);'
        },
        // autocomplete dos inputs (setar no po-style)
        'po-input input:-webkit-autofill, po-datepicker input:-webkit-autofill, po-datepicker-range input:-webkit-autofill, po-decimal input:-webkit-autofill, po-email input:-webkit-autofill, po-input input:-webkit-autofill, po-login input:-webkit-autofill, po-lookup input:-webkit-autofill, po-number input:-webkit-autofill, po-password input:-webkit-autofill, po-url input:-webkit-autofill, po-combo input:-webkit-autofill': {
            '-webkit-background-clip': 'text',
            '-webkit-text-fill-color': '#ffffff',
            'transition': 'background-color 5000s ease-in-out 0s',
            'box-shadow': 'inset 0 0 20px 20px #23232329'
        },
        'po-overlay, po-page-slide': {
            '--color-overlay': 'var(--color-neutral-light-20)'
        },
        'po-select': {
            '--color-hover': 'var(--color-action-hover);'
        },
        'po-select select': {
            '--color': 'var(--color-neutral-light-30);'
        }
    },
    onRoot: {
        /* CORES LEGADAS */
        '--color-neutral': 'var(--color-neutral-dark-70)',
        '--color-secondary': 'var(--color-action-default)',
        '--color-secondary-light-20': 'var(--color-brand-01-lighter)',
        '--color-secondary-light-40': 'var(--color-brand-01-light)',
        '--color-secondary-dark-20': 'var(--color-brand-01-dark)',
        '--color-secondary-dark-40': 'var(--color-brand-01-darker)',
        '--color-secondary-dark-80': 'var(--color-brand-01-darkest)',
        '--color-black-alpha-10': 'rgba(255, 255, 255, 0.1)',
        '--color-black-alpha-15': 'rgba(255, 255, 255, 0.15)',
        '--color-black-alpha-30': 'rgba(255, 255, 255, 0.3)',
        '--color-primary': 'var(--color-brand-02-base)',
        '--color-primary-light-80': 'color-mix(in srgb, var(--color-brand-02-base) 80%, black)',
        '--color-primary-light-95': 'color-mix(in srgb, var(--color-brand-02-base) 95%, black)',
        '--color-primary-alpha-50': 'color-mix(in srgb, var(--color-brand-02-base) 50%, white)',
        '--color-primary-dark-20': 'color-mix(in srgb, var(--color-brand-02-base) 20%, white)',
        '--color-primary-dark-40': 'color-mix(in srgb, var(--color-brand-02-base) 40%, white)',
        '--color-secondary-dark-60-alpha-70': 'color-mix(in srgb, var(--color-neutral-mid-60) 70%, white)',
        '--color-tertiary-light-90': 'color-mix(in srgb, var(--color-brand-03-base) 90%, black)',
        '--color-tertiary-dark-5': 'color-mix(in srgb, var(--color-brand-03-base) 5%, white)',
        /* PO-PAGE  */
        '--color-page-background-color-page': 'var(--color-neutral-light-00)',
        /* TOOLBAR BADGE */
        '--color-toolbar-color-badge-text': 'var(--color-neutral-dark-95)',
        /* POPOVER */
        '--shadow-popover-box-shadow': '0 0 4px 0 var(--color-neutral-light-20)',
        '--shadow-popover-box-shadow-arrow': '-1px -1px 1px 0 var(--color-neutral-light-20)',
        /* CALENDAR */
        '--color-calendar-background-color-box-background-range': 'var(--color-brand-01-lightest)',
        /* STEPPER */
        '--color-stepper-circle-disabled': 'var(--color-neutral-mid-40)',
        '--color-stepper-bar-disabled': 'var(--color-neutral-mid-40)',
        /* TAB */
        '--po-tab-smart-active': 'var(--color-neutral-dark-95)',
        '--po-tab-smart-background-item-selected': 'var(--color-brand-01-lighter)',
        '--po-tab-smart-background-hover': 'var(--color-brand-01-lightest)'
    }
};

/* eslint-disable @typescript-eslint/naming-convention */

/**
 * Generated bundle index. Do not edit.
 */

export { ForceBooleanComponentEnum, ForceOptionComponentEnum, I18N_CONFIG, InputBoolean, InputRequired, PO_CONTROL_POSITIONS, PoAccordionComponent, PoAccordionItemComponent, PoAccordionModule, PoActiveOverlayModule, PoActiveOverlayService, PoAvatarComponent, PoAvatarModule, PoBadgeComponent, PoBadgeModule, PoBreadcrumbComponent, PoBreadcrumbModule, PoButtonComponent, PoButtonGroupComponent, PoButtonGroupModule, PoButtonGroupToggle, PoButtonModule, PoCalendarComponent, PoCalendarMode, PoCalendarModule, PoChartComponent, PoChartModule, PoChartType, PoCheckboxComponent, PoCheckboxGroupComponent, PoCheckboxGroupModule, PoCheckboxModule, PoCheckboxSize, PoCleanComponent, PoCleanModule, PoColorPaletteModule, PoColorPaletteService, PoComboComponent, PoComboFilterMode, PoComboOptionTemplateDirective, PoComponentInjectorModule, PoComponentInjectorService, PoComponentsModule, PoContainerComponent, PoContainerModule, PoControlPositionModule, PoDateService, PoDateTimeModule, PoDatepickerComponent, PoDatepickerIsoFormat, PoDatepickerModule, PoDatepickerRangeComponent, PoDecimalComponent, PoDialogComponent, PoDialogModule, PoDialogService, PoDialogType, PoDirectivesModule, PoDisclaimerComponent, PoDisclaimerGroupComponent, PoDisclaimerGroupModule, PoDisclaimerModule, PoDividerComponent, PoDividerModule, PoDividerSize, PoDropdownComponent, PoDropdownModule, PoDynamicContainerComponent, PoDynamicFieldType, PoDynamicFormComponent, PoDynamicModule, PoDynamicSharedBase, PoDynamicViewComponent, PoEmailComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoFieldContainerModule, PoFieldModule, PoGaugeComponent, PoGaugeModule, PoGridComponent, PoGridModule, PoGuardsModule, PoHttpInterceptorModule, PoHttpInterceptorService, PoHttpRequestInterceptorService, PoHttpRequestModule, PoI18nModule, PoI18nPipe, PoI18nService, PoIconComponent, PoIconModule, PoImageComponent, PoImageModule, PoInfoComponent, PoInfoModule, PoInfoOrientation, PoInputComponent, PoInterceptorsModule, PoItemListComponent, PoLabelComponent, PoLabelModule, PoLanguageModule, PoLanguageService, PoLinkComponent, PoLinkModule, PoListBoxComponent, PoListBoxModule, PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective, PoListViewModule, PoLoadingComponent, PoLoadingIconComponent, PoLoadingModule, PoLoadingOverlayComponent, PoLoginComponent, PoLogoComponent, PoLogoModule, PoLookupComponent, PoLookupModalComponent, PoMenuComponent, PoMenuGlobalService, PoMenuHeaderTemplateDirective, PoMenuModule, PoMenuPanelComponent, PoMenuPanelModule, PoModalComponent, PoModalFooterComponent, PoModalModule, PoModule, PoMultiselectComponent, PoMultiselectFilterMode, PoMultiselectOptionTemplateDirective, PoNavbarComponent, PoNavbarModule, PoNotificationModule, PoNotificationService, PoNumberComponent, PoOverlayComponent, PoOverlayModule, PoPageDefaultComponent, PoPageDetailComponent, PoPageEditComponent, PoPageListComponent, PoPageModule, PoPageSlideComponent, PoPageSlideModule, PoPasswordComponent, PoPipesModule, PoPopoverComponent, PoPopoverModule, PoPopupComponent, PoPopupModule, PoProgressComponent, PoProgressModule, PoProgressSize, PoProgressStatus, PoRadioComponent, PoRadioGroupComponent, PoRadioGroupModule, PoRadioModule, PoRichTextComponent, PoSearchComponent, PoSearchFilterMode, PoSearchListComponent, PoSearchModule, PoSelectComponent, PoServicesModule, PoSlideComponent, PoSlideContentTemplateDirective, PoSlideModule, PoStepComponent, PoStepperComponent, PoStepperModule, PoStepperOrientation, PoStepperStatus, PoSwitchComponent, PoSwitchLabelPosition, PoSwitchModule, PoTabComponent, PoTableCellTemplateDirective, PoTableColumnFrozenDirective, PoTableColumnSortType, PoTableColumnSpacing, PoTableColumnTemplateDirective, PoTableComponent, PoTableModule, PoTableRowTemplateArrowDirection, PoTableRowTemplateDirective, PoTabsComponent, PoTabsModule, PoTabsService, PoTagComponent, PoTagModule, PoTagOrientation, PoTagType, PoTextareaComponent, PoThemeModule, PoThemeService, PoThemeTypeEnum, PoTimeModule, PoTimePipe, PoToasterOrientation, PoToasterType, PoToolbarComponent, PoToolbarModule, PoTooltipDirective, PoTooltipModule, PoTreeViewComponent, PoTreeViewModule, PoUploadComponent, PoUploadFile, PoUploadStatus, PoUrlComponent, PoWidgetComponent, PoWidgetModule, initializeLanguageDefault, poBreadcrumbLiterals, poDialogAlertLiteralsDefault, poDialogConfirmLiteralsDefault, poLanguageDefault, poLocaleDateSeparatorList, poLocaleDecimalSeparatorList, poLocaleDefault, poLocaleThousandSeparatorList, poLocales, poTabsLiterals, poThemeDefault, poThemeDefaultActions, poThemeDefaultActionsDark, poThemeDefaultBrands, poThemeDefaultDarkValues, poThemeDefaultFeedback, poThemeDefaultFeedbackDark, poThemeDefaultLight, poThemeDefaultLightValues, poThemeDefaultNeutrals, poThemeDefaultNeutralsDark, returnPoI18nService };
//# sourceMappingURL=po-ui-ng-components.mjs.map
