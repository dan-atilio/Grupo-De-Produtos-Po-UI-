"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAppConfigFile = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const module_1 = require("@po-ui/ng-schematics/module");
const project_1 = require("@po-ui/ng-schematics/project");
/** PO Module name that will insert in app root module */
const poModuleName = 'PoModule';
const poModuleSourcePath = '@po-ui/ng-components';
/** HttpClient Module name that will insert in app root module */
const httpClientModuleName = 'HttpClientModule';
const httpClientModuleSourcePath = '@angular/common/http';
/**
 * Scaffolds the basics of a Angular Material application, this includes:
 *  - Add PO Module to app root module
 *  - Adds themes to styles
 *  - Run sidemenu schematic
 */
function default_1(options) {
    return (0, schematics_1.chain)([
        (0, module_1.addModuleImportToRootModule)(options, poModuleName, poModuleSourcePath),
        (0, module_1.addModuleImportToRootModule)(options, httpClientModuleName, httpClientModuleSourcePath),
        addThemeToAppStyles(options),
        updateAppConfigFileRule(options),
        configureSideMenu(options)
    ]);
}
exports.default = default_1;
/** Add PO theme to project styles */
function addThemeToAppStyles(options) {
    return function (tree) {
        var _a;
        const workspace = (_a = (0, project_1.getWorkspaceConfigGracefully)(tree)) !== null && _a !== void 0 ? _a : {};
        const project = (0, project_1.getProjectFromWorkspace)(workspace, options.project);
        // Path needs to be always relative to the `package.json` or workspace root.
        const themePath = './node_modules/@po-ui/style/css/po-theme-default.min.css';
        addThemeStyleToTarget(project, 'build', tree, themePath, workspace);
        addThemeStyleToTarget(project, 'test', tree, themePath, workspace);
        return tree;
    };
}
/** Adds a theming style entry to the given project target options. */
function addThemeStyleToTarget(project, targetName, host, assetPath, workspace) {
    const targetOptions = (0, project_1.getProjectTargetOptions)(project, targetName);
    if (!targetOptions.styles) {
        targetOptions.styles = [assetPath];
    }
    else {
        const existingStyles = targetOptions.styles.map((s) => (typeof s === 'string' ? s : s.input));
        for (const [, stylePath] of existingStyles.entries()) {
            if (stylePath === assetPath) {
                return;
            }
        }
        targetOptions.styles.unshift(assetPath);
    }
    host.overwrite('angular.json', JSON.stringify(workspace, null, 2));
}
function configureSideMenu(options) {
    return options.configSideMenu ? (0, schematics_1.schematic)('sidemenu', Object.assign({}, options)) : (0, schematics_1.noop)();
}
function updateAppConfigFileRule(options) {
    return (tree) => {
        var _a, _b;
        const workspace = (_a = (0, project_1.getWorkspaceConfigGracefully)(tree)) !== null && _a !== void 0 ? _a : {};
        const project = (0, project_1.getProjectFromWorkspace)(workspace, options.project);
        const browserEntryPoint = (0, project_1.getProjectMainFile)(project);
        if (!(0, ng_ast_utils_1.isStandaloneApp)(tree, browserEntryPoint)) {
            return tree;
        }
        const content = ((_b = tree.read('src/app/app.config.ts')) === null || _b === void 0 ? void 0 : _b.toString('utf-8')) || '';
        const conteudoModificado = updateAppConfigFile(content);
        tree.overwrite('src/app/app.config.ts', conteudoModificado);
        return tree;
    };
}
function updateAppConfigFile(content) {
    const importBlock = `
import { provideHttpClient } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { PoHttpRequestModule } from '@po-ui/ng-components';
`;
    const providersBlock = `
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    importProvidersFrom([BrowserAnimationsModule, PoHttpRequestModule]),
  ],`;
    const regexImport = /import {[^}]+} from '@angular\/core';/;
    const regexProviders = /providers: \[[^\]]+\]/;
    // Remove imports e providers existentes
    let modifiedContent = content.replace(regexImport, '').replace(regexProviders, '');
    // Adiciona os novos imports e providers
    modifiedContent = modifiedContent.replace(/export const appConfig: ApplicationConfig = {/, `import { ApplicationConfig, importProvidersFrom } from '@angular/core';${importBlock}
export const appConfig: ApplicationConfig = {${providersBlock}`);
    return modifiedContent.trim();
}
exports.updateAppConfigFile = updateAppConfigFile;
//# sourceMappingURL=setup-project.js.map